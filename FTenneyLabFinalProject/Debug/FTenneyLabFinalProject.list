
FTenneyLabFinalProject.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007fd8  080001b0  080001b0  000011b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001280  08008188  08008188  00009188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009408  08009408  0000b07c  2**0
                  CONTENTS
  4 .ARM          00000008  08009408  08009408  0000a408  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009410  08009410  0000b07c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009410  08009410  0000a410  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009414  08009414  0000a414  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000007c  20000000  08009418  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000b07c  2**0
                  CONTENTS
 10 .bss          00025cc8  2000007c  2000007c  0000b07c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20025d44  20025d44  0000b07c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000b07c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00014fbf  00000000  00000000  0000b0ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000034c3  00000000  00000000  0002006b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001510  00000000  00000000  00023530  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000102e  00000000  00000000  00024a40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000277cd  00000000  00000000  00025a6e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001a838  00000000  00000000  0004d23b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e300d  00000000  00000000  00067a73  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0014aa80  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000060e0  00000000  00000000  0014aac4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000094  00000000  00000000  00150ba4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	@ (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	@ (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	2000007c 	.word	0x2000007c
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08008170 	.word	0x08008170

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	@ (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	@ (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	@ (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000080 	.word	0x20000080
 80001ec:	08008170 	.word	0x08008170

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b96a 	b.w	800057c <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	460c      	mov	r4, r1
 80002c8:	2b00      	cmp	r3, #0
 80002ca:	d14e      	bne.n	800036a <__udivmoddi4+0xaa>
 80002cc:	4694      	mov	ip, r2
 80002ce:	458c      	cmp	ip, r1
 80002d0:	4686      	mov	lr, r0
 80002d2:	fab2 f282 	clz	r2, r2
 80002d6:	d962      	bls.n	800039e <__udivmoddi4+0xde>
 80002d8:	b14a      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002da:	f1c2 0320 	rsb	r3, r2, #32
 80002de:	4091      	lsls	r1, r2
 80002e0:	fa20 f303 	lsr.w	r3, r0, r3
 80002e4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002e8:	4319      	orrs	r1, r3
 80002ea:	fa00 fe02 	lsl.w	lr, r0, r2
 80002ee:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f2:	fa1f f68c 	uxth.w	r6, ip
 80002f6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002fa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002fe:	fb07 1114 	mls	r1, r7, r4, r1
 8000302:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000306:	fb04 f106 	mul.w	r1, r4, r6
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f104 30ff 	add.w	r0, r4, #4294967295
 8000316:	f080 8112 	bcs.w	800053e <__udivmoddi4+0x27e>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 810f 	bls.w	800053e <__udivmoddi4+0x27e>
 8000320:	3c02      	subs	r4, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a59      	subs	r1, r3, r1
 8000326:	fa1f f38e 	uxth.w	r3, lr
 800032a:	fbb1 f0f7 	udiv	r0, r1, r7
 800032e:	fb07 1110 	mls	r1, r7, r0, r1
 8000332:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000336:	fb00 f606 	mul.w	r6, r0, r6
 800033a:	429e      	cmp	r6, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x94>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f100 31ff 	add.w	r1, r0, #4294967295
 8000346:	f080 80fc 	bcs.w	8000542 <__udivmoddi4+0x282>
 800034a:	429e      	cmp	r6, r3
 800034c:	f240 80f9 	bls.w	8000542 <__udivmoddi4+0x282>
 8000350:	4463      	add	r3, ip
 8000352:	3802      	subs	r0, #2
 8000354:	1b9b      	subs	r3, r3, r6
 8000356:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800035a:	2100      	movs	r1, #0
 800035c:	b11d      	cbz	r5, 8000366 <__udivmoddi4+0xa6>
 800035e:	40d3      	lsrs	r3, r2
 8000360:	2200      	movs	r2, #0
 8000362:	e9c5 3200 	strd	r3, r2, [r5]
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d905      	bls.n	800037a <__udivmoddi4+0xba>
 800036e:	b10d      	cbz	r5, 8000374 <__udivmoddi4+0xb4>
 8000370:	e9c5 0100 	strd	r0, r1, [r5]
 8000374:	2100      	movs	r1, #0
 8000376:	4608      	mov	r0, r1
 8000378:	e7f5      	b.n	8000366 <__udivmoddi4+0xa6>
 800037a:	fab3 f183 	clz	r1, r3
 800037e:	2900      	cmp	r1, #0
 8000380:	d146      	bne.n	8000410 <__udivmoddi4+0x150>
 8000382:	42a3      	cmp	r3, r4
 8000384:	d302      	bcc.n	800038c <__udivmoddi4+0xcc>
 8000386:	4290      	cmp	r0, r2
 8000388:	f0c0 80f0 	bcc.w	800056c <__udivmoddi4+0x2ac>
 800038c:	1a86      	subs	r6, r0, r2
 800038e:	eb64 0303 	sbc.w	r3, r4, r3
 8000392:	2001      	movs	r0, #1
 8000394:	2d00      	cmp	r5, #0
 8000396:	d0e6      	beq.n	8000366 <__udivmoddi4+0xa6>
 8000398:	e9c5 6300 	strd	r6, r3, [r5]
 800039c:	e7e3      	b.n	8000366 <__udivmoddi4+0xa6>
 800039e:	2a00      	cmp	r2, #0
 80003a0:	f040 8090 	bne.w	80004c4 <__udivmoddi4+0x204>
 80003a4:	eba1 040c 	sub.w	r4, r1, ip
 80003a8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003ac:	fa1f f78c 	uxth.w	r7, ip
 80003b0:	2101      	movs	r1, #1
 80003b2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003b6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ba:	fb08 4416 	mls	r4, r8, r6, r4
 80003be:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003c2:	fb07 f006 	mul.w	r0, r7, r6
 80003c6:	4298      	cmp	r0, r3
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x11c>
 80003ca:	eb1c 0303 	adds.w	r3, ip, r3
 80003ce:	f106 34ff 	add.w	r4, r6, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x11a>
 80003d4:	4298      	cmp	r0, r3
 80003d6:	f200 80cd 	bhi.w	8000574 <__udivmoddi4+0x2b4>
 80003da:	4626      	mov	r6, r4
 80003dc:	1a1c      	subs	r4, r3, r0
 80003de:	fa1f f38e 	uxth.w	r3, lr
 80003e2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003e6:	fb08 4410 	mls	r4, r8, r0, r4
 80003ea:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003ee:	fb00 f707 	mul.w	r7, r0, r7
 80003f2:	429f      	cmp	r7, r3
 80003f4:	d908      	bls.n	8000408 <__udivmoddi4+0x148>
 80003f6:	eb1c 0303 	adds.w	r3, ip, r3
 80003fa:	f100 34ff 	add.w	r4, r0, #4294967295
 80003fe:	d202      	bcs.n	8000406 <__udivmoddi4+0x146>
 8000400:	429f      	cmp	r7, r3
 8000402:	f200 80b0 	bhi.w	8000566 <__udivmoddi4+0x2a6>
 8000406:	4620      	mov	r0, r4
 8000408:	1bdb      	subs	r3, r3, r7
 800040a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800040e:	e7a5      	b.n	800035c <__udivmoddi4+0x9c>
 8000410:	f1c1 0620 	rsb	r6, r1, #32
 8000414:	408b      	lsls	r3, r1
 8000416:	fa22 f706 	lsr.w	r7, r2, r6
 800041a:	431f      	orrs	r7, r3
 800041c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000420:	fa04 f301 	lsl.w	r3, r4, r1
 8000424:	ea43 030c 	orr.w	r3, r3, ip
 8000428:	40f4      	lsrs	r4, r6
 800042a:	fa00 f801 	lsl.w	r8, r0, r1
 800042e:	0c38      	lsrs	r0, r7, #16
 8000430:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000434:	fbb4 fef0 	udiv	lr, r4, r0
 8000438:	fa1f fc87 	uxth.w	ip, r7
 800043c:	fb00 441e 	mls	r4, r0, lr, r4
 8000440:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000444:	fb0e f90c 	mul.w	r9, lr, ip
 8000448:	45a1      	cmp	r9, r4
 800044a:	fa02 f201 	lsl.w	r2, r2, r1
 800044e:	d90a      	bls.n	8000466 <__udivmoddi4+0x1a6>
 8000450:	193c      	adds	r4, r7, r4
 8000452:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000456:	f080 8084 	bcs.w	8000562 <__udivmoddi4+0x2a2>
 800045a:	45a1      	cmp	r9, r4
 800045c:	f240 8081 	bls.w	8000562 <__udivmoddi4+0x2a2>
 8000460:	f1ae 0e02 	sub.w	lr, lr, #2
 8000464:	443c      	add	r4, r7
 8000466:	eba4 0409 	sub.w	r4, r4, r9
 800046a:	fa1f f983 	uxth.w	r9, r3
 800046e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000472:	fb00 4413 	mls	r4, r0, r3, r4
 8000476:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800047a:	fb03 fc0c 	mul.w	ip, r3, ip
 800047e:	45a4      	cmp	ip, r4
 8000480:	d907      	bls.n	8000492 <__udivmoddi4+0x1d2>
 8000482:	193c      	adds	r4, r7, r4
 8000484:	f103 30ff 	add.w	r0, r3, #4294967295
 8000488:	d267      	bcs.n	800055a <__udivmoddi4+0x29a>
 800048a:	45a4      	cmp	ip, r4
 800048c:	d965      	bls.n	800055a <__udivmoddi4+0x29a>
 800048e:	3b02      	subs	r3, #2
 8000490:	443c      	add	r4, r7
 8000492:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000496:	fba0 9302 	umull	r9, r3, r0, r2
 800049a:	eba4 040c 	sub.w	r4, r4, ip
 800049e:	429c      	cmp	r4, r3
 80004a0:	46ce      	mov	lr, r9
 80004a2:	469c      	mov	ip, r3
 80004a4:	d351      	bcc.n	800054a <__udivmoddi4+0x28a>
 80004a6:	d04e      	beq.n	8000546 <__udivmoddi4+0x286>
 80004a8:	b155      	cbz	r5, 80004c0 <__udivmoddi4+0x200>
 80004aa:	ebb8 030e 	subs.w	r3, r8, lr
 80004ae:	eb64 040c 	sbc.w	r4, r4, ip
 80004b2:	fa04 f606 	lsl.w	r6, r4, r6
 80004b6:	40cb      	lsrs	r3, r1
 80004b8:	431e      	orrs	r6, r3
 80004ba:	40cc      	lsrs	r4, r1
 80004bc:	e9c5 6400 	strd	r6, r4, [r5]
 80004c0:	2100      	movs	r1, #0
 80004c2:	e750      	b.n	8000366 <__udivmoddi4+0xa6>
 80004c4:	f1c2 0320 	rsb	r3, r2, #32
 80004c8:	fa20 f103 	lsr.w	r1, r0, r3
 80004cc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d0:	fa24 f303 	lsr.w	r3, r4, r3
 80004d4:	4094      	lsls	r4, r2
 80004d6:	430c      	orrs	r4, r1
 80004d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004dc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004e0:	fa1f f78c 	uxth.w	r7, ip
 80004e4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004e8:	fb08 3110 	mls	r1, r8, r0, r3
 80004ec:	0c23      	lsrs	r3, r4, #16
 80004ee:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004f2:	fb00 f107 	mul.w	r1, r0, r7
 80004f6:	4299      	cmp	r1, r3
 80004f8:	d908      	bls.n	800050c <__udivmoddi4+0x24c>
 80004fa:	eb1c 0303 	adds.w	r3, ip, r3
 80004fe:	f100 36ff 	add.w	r6, r0, #4294967295
 8000502:	d22c      	bcs.n	800055e <__udivmoddi4+0x29e>
 8000504:	4299      	cmp	r1, r3
 8000506:	d92a      	bls.n	800055e <__udivmoddi4+0x29e>
 8000508:	3802      	subs	r0, #2
 800050a:	4463      	add	r3, ip
 800050c:	1a5b      	subs	r3, r3, r1
 800050e:	b2a4      	uxth	r4, r4
 8000510:	fbb3 f1f8 	udiv	r1, r3, r8
 8000514:	fb08 3311 	mls	r3, r8, r1, r3
 8000518:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800051c:	fb01 f307 	mul.w	r3, r1, r7
 8000520:	42a3      	cmp	r3, r4
 8000522:	d908      	bls.n	8000536 <__udivmoddi4+0x276>
 8000524:	eb1c 0404 	adds.w	r4, ip, r4
 8000528:	f101 36ff 	add.w	r6, r1, #4294967295
 800052c:	d213      	bcs.n	8000556 <__udivmoddi4+0x296>
 800052e:	42a3      	cmp	r3, r4
 8000530:	d911      	bls.n	8000556 <__udivmoddi4+0x296>
 8000532:	3902      	subs	r1, #2
 8000534:	4464      	add	r4, ip
 8000536:	1ae4      	subs	r4, r4, r3
 8000538:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800053c:	e739      	b.n	80003b2 <__udivmoddi4+0xf2>
 800053e:	4604      	mov	r4, r0
 8000540:	e6f0      	b.n	8000324 <__udivmoddi4+0x64>
 8000542:	4608      	mov	r0, r1
 8000544:	e706      	b.n	8000354 <__udivmoddi4+0x94>
 8000546:	45c8      	cmp	r8, r9
 8000548:	d2ae      	bcs.n	80004a8 <__udivmoddi4+0x1e8>
 800054a:	ebb9 0e02 	subs.w	lr, r9, r2
 800054e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000552:	3801      	subs	r0, #1
 8000554:	e7a8      	b.n	80004a8 <__udivmoddi4+0x1e8>
 8000556:	4631      	mov	r1, r6
 8000558:	e7ed      	b.n	8000536 <__udivmoddi4+0x276>
 800055a:	4603      	mov	r3, r0
 800055c:	e799      	b.n	8000492 <__udivmoddi4+0x1d2>
 800055e:	4630      	mov	r0, r6
 8000560:	e7d4      	b.n	800050c <__udivmoddi4+0x24c>
 8000562:	46d6      	mov	lr, sl
 8000564:	e77f      	b.n	8000466 <__udivmoddi4+0x1a6>
 8000566:	4463      	add	r3, ip
 8000568:	3802      	subs	r0, #2
 800056a:	e74d      	b.n	8000408 <__udivmoddi4+0x148>
 800056c:	4606      	mov	r6, r0
 800056e:	4623      	mov	r3, r4
 8000570:	4608      	mov	r0, r1
 8000572:	e70f      	b.n	8000394 <__udivmoddi4+0xd4>
 8000574:	3e02      	subs	r6, #2
 8000576:	4463      	add	r3, ip
 8000578:	e730      	b.n	80003dc <__udivmoddi4+0x11c>
 800057a:	bf00      	nop

0800057c <__aeabi_idiv0>:
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop

08000580 <ApplicationInit>:
void LCDTouchScreenInterruptGPIOInit(void);
#endif // TOUCH_INTERRUPT_ENABLED
#endif // COMPILE_TOUCH_FUNCTIONS

void ApplicationInit(void)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	af00      	add	r7, sp, #0
	initialise_monitor_handles(); // Allows printf functionality
 8000584:	f002 ffb4 	bl	80034f0 <initialise_monitor_handles>
    LTCD__Init();
 8000588:	f000 fa50 	bl	8000a2c <LTCD__Init>
    LTCD_Layer_Init(0);
 800058c:	2000      	movs	r0, #0
 800058e:	f000 fa0d 	bl	80009ac <LTCD_Layer_Init>
    LCD_Clear(0,LCD_COLOR_WHITE);
 8000592:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8000596:	2000      	movs	r0, #0
 8000598:	f000 fd8e 	bl	80010b8 <LCD_Clear>

    #if COMPILE_TOUCH_FUNCTIONS == 1
	InitializeLCDTouch();
 800059c:	f000 fe64 	bl	8001268 <InitializeLCDTouch>

	// This is the orientation for the board to be direclty up where the buttons are vertically above the screen
	// Top left would be low x value, high y value. Bottom right would be low x value, low y value.
	StaticTouchData.orientation = STMPE811_Orientation_Portrait_2;
 80005a0:	4b03      	ldr	r3, [pc, #12]	@ (80005b0 <ApplicationInit+0x30>)
 80005a2:	2201      	movs	r2, #1
 80005a4:	719a      	strb	r2, [r3, #6]

	#if TOUCH_INTERRUPT_ENABLED == 1
	LCDTouchScreenInterruptGPIOInit();
 80005a6:	f000 f805 	bl	80005b4 <LCDTouchScreenInterruptGPIOInit>
	#endif // TOUCH_INTERRUPT_ENABLED

	#endif // COMPILE_TOUCH_FUNCTIONS
}
 80005aa:	bf00      	nop
 80005ac:	bd80      	pop	{r7, pc}
 80005ae:	bf00      	nop
 80005b0:	20000098 	.word	0x20000098

080005b4 <LCDTouchScreenInterruptGPIOInit>:

// TouchScreen Interrupt
#if TOUCH_INTERRUPT_ENABLED == 1

void LCDTouchScreenInterruptGPIOInit(void)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b086      	sub	sp, #24
 80005b8:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef LCDConfig = {0};
 80005ba:	1d3b      	adds	r3, r7, #4
 80005bc:	2200      	movs	r2, #0
 80005be:	601a      	str	r2, [r3, #0]
 80005c0:	605a      	str	r2, [r3, #4]
 80005c2:	609a      	str	r2, [r3, #8]
 80005c4:	60da      	str	r2, [r3, #12]
 80005c6:	611a      	str	r2, [r3, #16]
    LCDConfig.Pin = GPIO_PIN_15;
 80005c8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80005cc:	607b      	str	r3, [r7, #4]
    LCDConfig.Mode = GPIO_MODE_IT_RISING_FALLING;
 80005ce:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 80005d2:	60bb      	str	r3, [r7, #8]
    LCDConfig.Pull = GPIO_NOPULL;
 80005d4:	2300      	movs	r3, #0
 80005d6:	60fb      	str	r3, [r7, #12]
    LCDConfig.Speed = GPIO_SPEED_FREQ_HIGH;
 80005d8:	2302      	movs	r3, #2
 80005da:	613b      	str	r3, [r7, #16]
    
    // Clock enable
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80005dc:	2300      	movs	r3, #0
 80005de:	603b      	str	r3, [r7, #0]
 80005e0:	4b0d      	ldr	r3, [pc, #52]	@ (8000618 <LCDTouchScreenInterruptGPIOInit+0x64>)
 80005e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005e4:	4a0c      	ldr	r2, [pc, #48]	@ (8000618 <LCDTouchScreenInterruptGPIOInit+0x64>)
 80005e6:	f043 0301 	orr.w	r3, r3, #1
 80005ea:	6313      	str	r3, [r2, #48]	@ 0x30
 80005ec:	4b0a      	ldr	r3, [pc, #40]	@ (8000618 <LCDTouchScreenInterruptGPIOInit+0x64>)
 80005ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005f0:	f003 0301 	and.w	r3, r3, #1
 80005f4:	603b      	str	r3, [r7, #0]
 80005f6:	683b      	ldr	r3, [r7, #0]

    // GPIO Init      
    HAL_GPIO_Init(GPIOA, &LCDConfig);
 80005f8:	1d3b      	adds	r3, r7, #4
 80005fa:	4619      	mov	r1, r3
 80005fc:	4807      	ldr	r0, [pc, #28]	@ (800061c <LCDTouchScreenInterruptGPIOInit+0x68>)
 80005fe:	f003 fa7b 	bl	8003af8 <HAL_GPIO_Init>

    // Interrupt Configuration
    HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000602:	2028      	movs	r0, #40	@ 0x28
 8000604:	f003 fa29 	bl	8003a5a <HAL_NVIC_EnableIRQ>

	LCDTouchIRQ.Line = EXTI_LINE_15;
 8000608:	4b05      	ldr	r3, [pc, #20]	@ (8000620 <LCDTouchScreenInterruptGPIOInit+0x6c>)
 800060a:	4a06      	ldr	r2, [pc, #24]	@ (8000624 <LCDTouchScreenInterruptGPIOInit+0x70>)
 800060c:	601a      	str	r2, [r3, #0]

}
 800060e:	bf00      	nop
 8000610:	3718      	adds	r7, #24
 8000612:	46bd      	mov	sp, r7
 8000614:	bd80      	pop	{r7, pc}
 8000616:	bf00      	nop
 8000618:	40023800 	.word	0x40023800
 800061c:	40020000 	.word	0x40020000
 8000620:	200000a0 	.word	0x200000a0
 8000624:	0600000f 	.word	0x0600000f

08000628 <EXTI15_10_IRQHandler>:
#define TOUCH_DETECTED_IRQ_STATUS_BIT   (1 << 0)  // Touchscreen detected bitmask

static uint8_t statusFlag;

void EXTI15_10_IRQHandler()
{
 8000628:	b580      	push	{r7, lr}
 800062a:	b082      	sub	sp, #8
 800062c:	af00      	add	r7, sp, #0
	HAL_NVIC_DisableIRQ(EXTI15_10_IRQn); // May consider making this a universial interrupt guard
 800062e:	2028      	movs	r0, #40	@ 0x28
 8000630:	f003 fa21 	bl	8003a76 <HAL_NVIC_DisableIRQ>
	bool isTouchDetected = false;
 8000634:	2300      	movs	r3, #0
 8000636:	71fb      	strb	r3, [r7, #7]

	static uint32_t count;
	count = 0;
 8000638:	4b38      	ldr	r3, [pc, #224]	@ (800071c <EXTI15_10_IRQHandler+0xf4>)
 800063a:	2200      	movs	r2, #0
 800063c:	601a      	str	r2, [r3, #0]
	while(count == 0){
 800063e:	e006      	b.n	800064e <EXTI15_10_IRQHandler+0x26>
		count = STMPE811_Read(STMPE811_FIFO_SIZE);
 8000640:	204c      	movs	r0, #76	@ 0x4c
 8000642:	f002 fcc4 	bl	8002fce <STMPE811_Read>
 8000646:	4603      	mov	r3, r0
 8000648:	461a      	mov	r2, r3
 800064a:	4b34      	ldr	r3, [pc, #208]	@ (800071c <EXTI15_10_IRQHandler+0xf4>)
 800064c:	601a      	str	r2, [r3, #0]
	while(count == 0){
 800064e:	4b33      	ldr	r3, [pc, #204]	@ (800071c <EXTI15_10_IRQHandler+0xf4>)
 8000650:	681b      	ldr	r3, [r3, #0]
 8000652:	2b00      	cmp	r3, #0
 8000654:	d0f4      	beq.n	8000640 <EXTI15_10_IRQHandler+0x18>
	}

	// Disable touch interrupt bit on the STMPE811
	uint8_t currentIRQEnables = ReadRegisterFromTouchModule(STMPE811_INT_EN);
 8000656:	200a      	movs	r0, #10
 8000658:	f000 fe1c 	bl	8001294 <ReadRegisterFromTouchModule>
 800065c:	4603      	mov	r3, r0
 800065e:	71bb      	strb	r3, [r7, #6]
	WriteDataToTouchModule(STMPE811_INT_EN, 0x00);
 8000660:	2100      	movs	r1, #0
 8000662:	200a      	movs	r0, #10
 8000664:	f000 fe24 	bl	80012b0 <WriteDataToTouchModule>

	// Clear the interrupt bit in the STMPE811
	statusFlag = ReadRegisterFromTouchModule(STMPE811_INT_STA);
 8000668:	200b      	movs	r0, #11
 800066a:	f000 fe13 	bl	8001294 <ReadRegisterFromTouchModule>
 800066e:	4603      	mov	r3, r0
 8000670:	461a      	mov	r2, r3
 8000672:	4b2b      	ldr	r3, [pc, #172]	@ (8000720 <EXTI15_10_IRQHandler+0xf8>)
 8000674:	701a      	strb	r2, [r3, #0]
	uint8_t clearIRQData = (statusFlag | TOUCH_DETECTED_IRQ_STATUS_BIT); // Write one to clear bit
 8000676:	4b2a      	ldr	r3, [pc, #168]	@ (8000720 <EXTI15_10_IRQHandler+0xf8>)
 8000678:	781b      	ldrb	r3, [r3, #0]
 800067a:	f043 0301 	orr.w	r3, r3, #1
 800067e:	717b      	strb	r3, [r7, #5]
	WriteDataToTouchModule(STMPE811_INT_STA, clearIRQData);
 8000680:	797b      	ldrb	r3, [r7, #5]
 8000682:	4619      	mov	r1, r3
 8000684:	200b      	movs	r0, #11
 8000686:	f000 fe13 	bl	80012b0 <WriteDataToTouchModule>
	
	uint8_t ctrlReg = ReadRegisterFromTouchModule(STMPE811_TSC_CTRL);
 800068a:	2040      	movs	r0, #64	@ 0x40
 800068c:	f000 fe02 	bl	8001294 <ReadRegisterFromTouchModule>
 8000690:	4603      	mov	r3, r0
 8000692:	713b      	strb	r3, [r7, #4]
	if (ctrlReg & 0x80)
 8000694:	f997 3004 	ldrsb.w	r3, [r7, #4]
 8000698:	2b00      	cmp	r3, #0
 800069a:	da01      	bge.n	80006a0 <EXTI15_10_IRQHandler+0x78>
	{
		isTouchDetected = true;
 800069c:	2301      	movs	r3, #1
 800069e:	71fb      	strb	r3, [r7, #7]
	}

	// Determine if it is pressed or unpressed
	if(isTouchDetected) // Touch has been detected
 80006a0:	79fb      	ldrb	r3, [r7, #7]
 80006a2:	2b00      	cmp	r3, #0
 80006a4:	d012      	beq.n	80006cc <EXTI15_10_IRQHandler+0xa4>
	{
		printf("\nPressed");
 80006a6:	481f      	ldr	r0, [pc, #124]	@ (8000724 <EXTI15_10_IRQHandler+0xfc>)
 80006a8:	f006 fcac 	bl	8007004 <iprintf>
		// May need to do numerous retries? 
		DetermineTouchPosition(&StaticTouchData);
 80006ac:	481e      	ldr	r0, [pc, #120]	@ (8000728 <EXTI15_10_IRQHandler+0x100>)
 80006ae:	f000 fde6 	bl	800127e <DetermineTouchPosition>
		// use x to determine if left or right of the screen.
		/* Touch valid */
		printf("\nX: %03d\nY: %03d \n", StaticTouchData.x, StaticTouchData.y);
 80006b2:	4b1d      	ldr	r3, [pc, #116]	@ (8000728 <EXTI15_10_IRQHandler+0x100>)
 80006b4:	881b      	ldrh	r3, [r3, #0]
 80006b6:	4619      	mov	r1, r3
 80006b8:	4b1b      	ldr	r3, [pc, #108]	@ (8000728 <EXTI15_10_IRQHandler+0x100>)
 80006ba:	885b      	ldrh	r3, [r3, #2]
 80006bc:	461a      	mov	r2, r3
 80006be:	481b      	ldr	r0, [pc, #108]	@ (800072c <EXTI15_10_IRQHandler+0x104>)
 80006c0:	f006 fca0 	bl	8007004 <iprintf>
		addSchedulerEvent(SWITCH_TO_GAME_SCREEN);
 80006c4:	2002      	movs	r0, #2
 80006c6:	f000 fe11 	bl	80012ec <addSchedulerEvent>
 80006ca:	e007      	b.n	80006dc <EXTI15_10_IRQHandler+0xb4>

	}else{

		/* Touch not pressed */
		printf("\nNot pressed \n");
 80006cc:	4818      	ldr	r0, [pc, #96]	@ (8000730 <EXTI15_10_IRQHandler+0x108>)
 80006ce:	f006 fd01 	bl	80070d4 <puts>
		LCD_Clear(0, LCD_COLOR_GREEN);
 80006d2:	f44f 61fc 	mov.w	r1, #2016	@ 0x7e0
 80006d6:	2000      	movs	r0, #0
 80006d8:	f000 fcee 	bl	80010b8 <LCD_Clear>
	}

	STMPE811_Write(STMPE811_FIFO_STA, 0x01);
 80006dc:	2101      	movs	r1, #1
 80006de:	204b      	movs	r0, #75	@ 0x4b
 80006e0:	f002 fc86 	bl	8002ff0 <STMPE811_Write>
	STMPE811_Write(STMPE811_FIFO_STA, 0x00);
 80006e4:	2100      	movs	r1, #0
 80006e6:	204b      	movs	r0, #75	@ 0x4b
 80006e8:	f002 fc82 	bl	8002ff0 <STMPE811_Write>

	// Re-enable IRQs
    WriteDataToTouchModule(STMPE811_INT_EN, currentIRQEnables);
 80006ec:	79bb      	ldrb	r3, [r7, #6]
 80006ee:	4619      	mov	r1, r3
 80006f0:	200a      	movs	r0, #10
 80006f2:	f000 fddd 	bl	80012b0 <WriteDataToTouchModule>
	HAL_EXTI_ClearPending(&LCDTouchIRQ, EXTI_TRIGGER_RISING_FALLING);
 80006f6:	2103      	movs	r1, #3
 80006f8:	480e      	ldr	r0, [pc, #56]	@ (8000734 <EXTI15_10_IRQHandler+0x10c>)
 80006fa:	f003 f9e5 	bl	8003ac8 <HAL_EXTI_ClearPending>

	HAL_NVIC_ClearPendingIRQ(EXTI15_10_IRQn);
 80006fe:	2028      	movs	r0, #40	@ 0x28
 8000700:	f003 f9d3 	bl	8003aaa <HAL_NVIC_ClearPendingIRQ>
	HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000704:	2028      	movs	r0, #40	@ 0x28
 8000706:	f003 f9a8 	bl	8003a5a <HAL_NVIC_EnableIRQ>

	//Potential ERRATA? Clearing IRQ bit again due to an IRQ being triggered DURING the handling of this IRQ..
	WriteDataToTouchModule(STMPE811_INT_STA, clearIRQData);
 800070a:	797b      	ldrb	r3, [r7, #5]
 800070c:	4619      	mov	r1, r3
 800070e:	200b      	movs	r0, #11
 8000710:	f000 fdce 	bl	80012b0 <WriteDataToTouchModule>

}
 8000714:	bf00      	nop
 8000716:	3708      	adds	r7, #8
 8000718:	46bd      	mov	sp, r7
 800071a:	bd80      	pop	{r7, pc}
 800071c:	200000ac 	.word	0x200000ac
 8000720:	200000a8 	.word	0x200000a8
 8000724:	080081ac 	.word	0x080081ac
 8000728:	20000098 	.word	0x20000098
 800072c:	080081b8 	.word	0x080081b8
 8000730:	080081cc 	.word	0x080081cc
 8000734:	200000a0 	.word	0x200000a0

08000738 <EXTI0_IRQHandler>:

void EXTI0_IRQHandler(void){
 8000738:	b580      	push	{r7, lr}
 800073a:	af00      	add	r7, sp, #0
	HAL_NVIC_DisableIRQ(EXTI0_IRQ_NUMBER);
 800073c:	2006      	movs	r0, #6
 800073e:	f003 f99a 	bl	8003a76 <HAL_NVIC_DisableIRQ>
	ClearEXTIInterrupt(BUTTON_PIN_NUMBER);
 8000742:	2001      	movs	r0, #1
 8000744:	f000 f82a 	bl	800079c <ClearEXTIInterrupt>
	addSchedulerEvent(ROTATE_BLOCK);
 8000748:	2004      	movs	r0, #4
 800074a:	f000 fdcf 	bl	80012ec <addSchedulerEvent>
	HAL_NVIC_ClearPendingIRQ(EXTI0_IRQ_NUMBER);
 800074e:	2006      	movs	r0, #6
 8000750:	f003 f9ab 	bl	8003aaa <HAL_NVIC_ClearPendingIRQ>
	HAL_NVIC_EnableIRQ(EXTI0_IRQ_NUMBER);
 8000754:	2006      	movs	r0, #6
 8000756:	f003 f980 	bl	8003a5a <HAL_NVIC_EnableIRQ>
}
 800075a:	bf00      	nop
 800075c:	bd80      	pop	{r7, pc}
	...

08000760 <Button_Interrupt_Init>:
    GPIO_Init(GPIOA, GPIOButtonConfig); //will also config the interrupts too.
    HAL_GPIO_Init(GPIOA, GPIO_Init);

}*/

void Button_Interrupt_Init(){
 8000760:	b580      	push	{r7, lr}
 8000762:	b086      	sub	sp, #24
 8000764:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIOButtonConfig = {0};
 8000766:	1d3b      	adds	r3, r7, #4
 8000768:	2200      	movs	r2, #0
 800076a:	601a      	str	r2, [r3, #0]
 800076c:	605a      	str	r2, [r3, #4]
 800076e:	609a      	str	r2, [r3, #8]
 8000770:	60da      	str	r2, [r3, #12]
 8000772:	611a      	str	r2, [r3, #16]

    GPIOButtonConfig.Mode = GPIO_MODE_IT_RISING_FALLING;
 8000774:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 8000778:	60bb      	str	r3, [r7, #8]
    GPIOButtonConfig.Pin = GPIO_PIN_0;
 800077a:	2301      	movs	r3, #1
 800077c:	607b      	str	r3, [r7, #4]
    HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800077e:	2006      	movs	r0, #6
 8000780:	f003 f96b 	bl	8003a5a <HAL_NVIC_EnableIRQ>
    HAL_GPIO_Init(GPIOA, &GPIOButtonConfig);
 8000784:	1d3b      	adds	r3, r7, #4
 8000786:	4619      	mov	r1, r3
 8000788:	4803      	ldr	r0, [pc, #12]	@ (8000798 <Button_Interrupt_Init+0x38>)
 800078a:	f003 f9b5 	bl	8003af8 <HAL_GPIO_Init>
}
 800078e:	bf00      	nop
 8000790:	3718      	adds	r7, #24
 8000792:	46bd      	mov	sp, r7
 8000794:	bd80      	pop	{r7, pc}
 8000796:	bf00      	nop
 8000798:	40020000 	.word	0x40020000

0800079c <ClearEXTIInterrupt>:
	if(IRQNumber >= 32){
			*NVIC_ISPR0 = (0x1 << (IRQNumber%32));
	}
}*/

void ClearEXTIInterrupt(uint8_t pinNumber){
 800079c:	b480      	push	{r7}
 800079e:	b083      	sub	sp, #12
 80007a0:	af00      	add	r7, sp, #0
 80007a2:	4603      	mov	r3, r0
 80007a4:	71fb      	strb	r3, [r7, #7]
	EXTI->PR |= (0x1 << pinNumber);
 80007a6:	4b08      	ldr	r3, [pc, #32]	@ (80007c8 <ClearEXTIInterrupt+0x2c>)
 80007a8:	695b      	ldr	r3, [r3, #20]
 80007aa:	79fa      	ldrb	r2, [r7, #7]
 80007ac:	2101      	movs	r1, #1
 80007ae:	fa01 f202 	lsl.w	r2, r1, r2
 80007b2:	4611      	mov	r1, r2
 80007b4:	4a04      	ldr	r2, [pc, #16]	@ (80007c8 <ClearEXTIInterrupt+0x2c>)
 80007b6:	430b      	orrs	r3, r1
 80007b8:	6153      	str	r3, [r2, #20]
}
 80007ba:	bf00      	nop
 80007bc:	370c      	adds	r7, #12
 80007be:	46bd      	mov	sp, r7
 80007c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c4:	4770      	bx	lr
 80007c6:	bf00      	nop
 80007c8:	40013c00 	.word	0x40013c00

080007cc <LCD_PrintString>:
static FONT_t *LCD_Currentfonts;
static uint16_t CurrentTextColor   = 0xFFFF;



void LCD_PrintString(char* str) {
 80007cc:	b580      	push	{r7, lr}
 80007ce:	b084      	sub	sp, #16
 80007d0:	af00      	add	r7, sp, #0
 80007d2:	6078      	str	r0, [r7, #4]
	uint16_t CurrentXPos = 5;
 80007d4:	2305      	movs	r3, #5
 80007d6:	81fb      	strh	r3, [r7, #14]
	uint16_t CurrentYPos = 0;
 80007d8:	2300      	movs	r3, #0
 80007da:	81bb      	strh	r3, [r7, #12]

	while (*str) {
 80007dc:	e013      	b.n	8000806 <LCD_PrintString+0x3a>
		LCD_DisplayChar(CurrentXPos, CurrentYPos, *str++); // Update cursor position CurrentXPos += LCD_Currentfonts->Width;
 80007de:	687b      	ldr	r3, [r7, #4]
 80007e0:	1c5a      	adds	r2, r3, #1
 80007e2:	607a      	str	r2, [r7, #4]
 80007e4:	781a      	ldrb	r2, [r3, #0]
 80007e6:	89b9      	ldrh	r1, [r7, #12]
 80007e8:	89fb      	ldrh	r3, [r7, #14]
 80007ea:	4618      	mov	r0, r3
 80007ec:	f000 fd14 	bl	8001218 <LCD_DisplayChar>
	if (CurrentXPos >= LCD_PIXEL_WIDTH)
 80007f0:	89fb      	ldrh	r3, [r7, #14]
 80007f2:	2bef      	cmp	r3, #239	@ 0xef
 80007f4:	d901      	bls.n	80007fa <LCD_PrintString+0x2e>
	{
		CurrentXPos = 0;
 80007f6:	2300      	movs	r3, #0
 80007f8:	81fb      	strh	r3, [r7, #14]
	}
	CurrentYPos += LCD_Currentfonts->Height;
 80007fa:	4b07      	ldr	r3, [pc, #28]	@ (8000818 <LCD_PrintString+0x4c>)
 80007fc:	681b      	ldr	r3, [r3, #0]
 80007fe:	88da      	ldrh	r2, [r3, #6]
 8000800:	89bb      	ldrh	r3, [r7, #12]
 8000802:	4413      	add	r3, r2
 8000804:	81bb      	strh	r3, [r7, #12]
	while (*str) {
 8000806:	687b      	ldr	r3, [r7, #4]
 8000808:	781b      	ldrb	r3, [r3, #0]
 800080a:	2b00      	cmp	r3, #0
 800080c:	d1e7      	bne.n	80007de <LCD_PrintString+0x12>
  }
}
 800080e:	bf00      	nop
 8000810:	bf00      	nop
 8000812:	3710      	adds	r7, #16
 8000814:	46bd      	mov	sp, r7
 8000816:	bd80      	pop	{r7, pc}
 8000818:	20000188 	.word	0x20000188

0800081c <LCD_GPIO_Init>:
//Someone from STM said it was "often accessed" a 1-dim array, and not a 2d array. However you still access it like a 2dim array,  using fb[y*W+x] instead of fb[y][x].
uint16_t frameBuffer[LCD_PIXEL_WIDTH*LCD_PIXEL_HEIGHT] = {0};			//16bpp pixel format.


void LCD_GPIO_Init(void)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	b08c      	sub	sp, #48	@ 0x30
 8000820:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;

  /* Enable the LTDC clock */
  __HAL_RCC_LTDC_CLK_ENABLE();
 8000822:	2300      	movs	r3, #0
 8000824:	61bb      	str	r3, [r7, #24]
 8000826:	4b5a      	ldr	r3, [pc, #360]	@ (8000990 <LCD_GPIO_Init+0x174>)
 8000828:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800082a:	4a59      	ldr	r2, [pc, #356]	@ (8000990 <LCD_GPIO_Init+0x174>)
 800082c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8000830:	6453      	str	r3, [r2, #68]	@ 0x44
 8000832:	4b57      	ldr	r3, [pc, #348]	@ (8000990 <LCD_GPIO_Init+0x174>)
 8000834:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000836:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800083a:	61bb      	str	r3, [r7, #24]
 800083c:	69bb      	ldr	r3, [r7, #24]

  /* Enable GPIO clock */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800083e:	2300      	movs	r3, #0
 8000840:	617b      	str	r3, [r7, #20]
 8000842:	4b53      	ldr	r3, [pc, #332]	@ (8000990 <LCD_GPIO_Init+0x174>)
 8000844:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000846:	4a52      	ldr	r2, [pc, #328]	@ (8000990 <LCD_GPIO_Init+0x174>)
 8000848:	f043 0301 	orr.w	r3, r3, #1
 800084c:	6313      	str	r3, [r2, #48]	@ 0x30
 800084e:	4b50      	ldr	r3, [pc, #320]	@ (8000990 <LCD_GPIO_Init+0x174>)
 8000850:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000852:	f003 0301 	and.w	r3, r3, #1
 8000856:	617b      	str	r3, [r7, #20]
 8000858:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800085a:	2300      	movs	r3, #0
 800085c:	613b      	str	r3, [r7, #16]
 800085e:	4b4c      	ldr	r3, [pc, #304]	@ (8000990 <LCD_GPIO_Init+0x174>)
 8000860:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000862:	4a4b      	ldr	r2, [pc, #300]	@ (8000990 <LCD_GPIO_Init+0x174>)
 8000864:	f043 0302 	orr.w	r3, r3, #2
 8000868:	6313      	str	r3, [r2, #48]	@ 0x30
 800086a:	4b49      	ldr	r3, [pc, #292]	@ (8000990 <LCD_GPIO_Init+0x174>)
 800086c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800086e:	f003 0302 	and.w	r3, r3, #2
 8000872:	613b      	str	r3, [r7, #16]
 8000874:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000876:	2300      	movs	r3, #0
 8000878:	60fb      	str	r3, [r7, #12]
 800087a:	4b45      	ldr	r3, [pc, #276]	@ (8000990 <LCD_GPIO_Init+0x174>)
 800087c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800087e:	4a44      	ldr	r2, [pc, #272]	@ (8000990 <LCD_GPIO_Init+0x174>)
 8000880:	f043 0304 	orr.w	r3, r3, #4
 8000884:	6313      	str	r3, [r2, #48]	@ 0x30
 8000886:	4b42      	ldr	r3, [pc, #264]	@ (8000990 <LCD_GPIO_Init+0x174>)
 8000888:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800088a:	f003 0304 	and.w	r3, r3, #4
 800088e:	60fb      	str	r3, [r7, #12]
 8000890:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000892:	2300      	movs	r3, #0
 8000894:	60bb      	str	r3, [r7, #8]
 8000896:	4b3e      	ldr	r3, [pc, #248]	@ (8000990 <LCD_GPIO_Init+0x174>)
 8000898:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800089a:	4a3d      	ldr	r2, [pc, #244]	@ (8000990 <LCD_GPIO_Init+0x174>)
 800089c:	f043 0308 	orr.w	r3, r3, #8
 80008a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80008a2:	4b3b      	ldr	r3, [pc, #236]	@ (8000990 <LCD_GPIO_Init+0x174>)
 80008a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008a6:	f003 0308 	and.w	r3, r3, #8
 80008aa:	60bb      	str	r3, [r7, #8]
 80008ac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80008ae:	2300      	movs	r3, #0
 80008b0:	607b      	str	r3, [r7, #4]
 80008b2:	4b37      	ldr	r3, [pc, #220]	@ (8000990 <LCD_GPIO_Init+0x174>)
 80008b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008b6:	4a36      	ldr	r2, [pc, #216]	@ (8000990 <LCD_GPIO_Init+0x174>)
 80008b8:	f043 0320 	orr.w	r3, r3, #32
 80008bc:	6313      	str	r3, [r2, #48]	@ 0x30
 80008be:	4b34      	ldr	r3, [pc, #208]	@ (8000990 <LCD_GPIO_Init+0x174>)
 80008c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008c2:	f003 0320 	and.w	r3, r3, #32
 80008c6:	607b      	str	r3, [r7, #4]
 80008c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80008ca:	2300      	movs	r3, #0
 80008cc:	603b      	str	r3, [r7, #0]
 80008ce:	4b30      	ldr	r3, [pc, #192]	@ (8000990 <LCD_GPIO_Init+0x174>)
 80008d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008d2:	4a2f      	ldr	r2, [pc, #188]	@ (8000990 <LCD_GPIO_Init+0x174>)
 80008d4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80008d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80008da:	4b2d      	ldr	r3, [pc, #180]	@ (8000990 <LCD_GPIO_Init+0x174>)
 80008dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008de:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80008e2:	603b      	str	r3, [r7, #0]
 80008e4:	683b      	ldr	r3, [r7, #0]
   LCD_TFT CLK   <-> PG.07
   LCD_TFT DE   <->  PF.10
  */

  /* GPIOA configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_6 |
 80008e6:	f641 0358 	movw	r3, #6232	@ 0x1858
 80008ea:	61fb      	str	r3, [r7, #28]
                           GPIO_PIN_11 | GPIO_PIN_12;
  GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 80008ec:	2302      	movs	r3, #2
 80008ee:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 80008f0:	2300      	movs	r3, #0
 80008f2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 80008f4:	2302      	movs	r3, #2
 80008f6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStructure.Alternate= GPIO_AF14_LTDC;
 80008f8:	230e      	movs	r3, #14
 80008fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 80008fc:	f107 031c 	add.w	r3, r7, #28
 8000900:	4619      	mov	r1, r3
 8000902:	4824      	ldr	r0, [pc, #144]	@ (8000994 <LCD_GPIO_Init+0x178>)
 8000904:	f003 f8f8 	bl	8003af8 <HAL_GPIO_Init>

 /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_8 | \
 8000908:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 800090c:	61fb      	str	r3, [r7, #28]
                           GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 800090e:	f107 031c 	add.w	r3, r7, #28
 8000912:	4619      	mov	r1, r3
 8000914:	4820      	ldr	r0, [pc, #128]	@ (8000998 <LCD_GPIO_Init+0x17c>)
 8000916:	f003 f8ef 	bl	8003af8 <HAL_GPIO_Init>

 /* GPIOC configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_10;
 800091a:	f44f 6398 	mov.w	r3, #1216	@ 0x4c0
 800091e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);
 8000920:	f107 031c 	add.w	r3, r7, #28
 8000924:	4619      	mov	r1, r3
 8000926:	481d      	ldr	r0, [pc, #116]	@ (800099c <LCD_GPIO_Init+0x180>)
 8000928:	f003 f8e6 	bl	8003af8 <HAL_GPIO_Init>

 /* GPIOD configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_6;
 800092c:	2348      	movs	r3, #72	@ 0x48
 800092e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 8000930:	f107 031c 	add.w	r3, r7, #28
 8000934:	4619      	mov	r1, r3
 8000936:	481a      	ldr	r0, [pc, #104]	@ (80009a0 <LCD_GPIO_Init+0x184>)
 8000938:	f003 f8de 	bl	8003af8 <HAL_GPIO_Init>

 /* GPIOF configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_10;
 800093c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000940:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);
 8000942:	f107 031c 	add.w	r3, r7, #28
 8000946:	4619      	mov	r1, r3
 8000948:	4816      	ldr	r0, [pc, #88]	@ (80009a4 <LCD_GPIO_Init+0x188>)
 800094a:	f003 f8d5 	bl	8003af8 <HAL_GPIO_Init>

 /* GPIOG configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | \
 800094e:	f44f 630c 	mov.w	r3, #2240	@ 0x8c0
 8000952:	61fb      	str	r3, [r7, #28]
                           GPIO_PIN_11;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8000954:	f107 031c 	add.w	r3, r7, #28
 8000958:	4619      	mov	r1, r3
 800095a:	4813      	ldr	r0, [pc, #76]	@ (80009a8 <LCD_GPIO_Init+0x18c>)
 800095c:	f003 f8cc 	bl	8003af8 <HAL_GPIO_Init>

  /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1;
 8000960:	2303      	movs	r3, #3
 8000962:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Alternate= GPIO_AF9_LTDC;
 8000964:	2309      	movs	r3, #9
 8000966:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 8000968:	f107 031c 	add.w	r3, r7, #28
 800096c:	4619      	mov	r1, r3
 800096e:	480a      	ldr	r0, [pc, #40]	@ (8000998 <LCD_GPIO_Init+0x17c>)
 8000970:	f003 f8c2 	bl	8003af8 <HAL_GPIO_Init>

  /* GPIOG configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_10 | GPIO_PIN_12;
 8000974:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000978:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 800097a:	f107 031c 	add.w	r3, r7, #28
 800097e:	4619      	mov	r1, r3
 8000980:	4809      	ldr	r0, [pc, #36]	@ (80009a8 <LCD_GPIO_Init+0x18c>)
 8000982:	f003 f8b9 	bl	8003af8 <HAL_GPIO_Init>
}
 8000986:	bf00      	nop
 8000988:	3730      	adds	r7, #48	@ 0x30
 800098a:	46bd      	mov	sp, r7
 800098c:	bd80      	pop	{r7, pc}
 800098e:	bf00      	nop
 8000990:	40023800 	.word	0x40023800
 8000994:	40020000 	.word	0x40020000
 8000998:	40020400 	.word	0x40020400
 800099c:	40020800 	.word	0x40020800
 80009a0:	40020c00 	.word	0x40020c00
 80009a4:	40021400 	.word	0x40021400
 80009a8:	40021800 	.word	0x40021800

080009ac <LTCD_Layer_Init>:

void LTCD_Layer_Init(uint8_t LayerIndex)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	b090      	sub	sp, #64	@ 0x40
 80009b0:	af00      	add	r7, sp, #0
 80009b2:	4603      	mov	r3, r0
 80009b4:	71fb      	strb	r3, [r7, #7]
	LTDC_LayerCfgTypeDef  pLayerCfg;

	pLayerCfg.WindowX0 = 0;	//Configures the Window HORZ START Position.
 80009b6:	2300      	movs	r3, #0
 80009b8:	60fb      	str	r3, [r7, #12]
	pLayerCfg.WindowX1 = LCD_PIXEL_WIDTH;	//Configures the Window HORZ Stop Position.
 80009ba:	23f0      	movs	r3, #240	@ 0xf0
 80009bc:	613b      	str	r3, [r7, #16]
	pLayerCfg.WindowY0 = 0;	//Configures the Window vertical START Position.
 80009be:	2300      	movs	r3, #0
 80009c0:	617b      	str	r3, [r7, #20]
	pLayerCfg.WindowY1 = LCD_PIXEL_HEIGHT;	//Configures the Window vertical Stop Position.
 80009c2:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 80009c6:	61bb      	str	r3, [r7, #24]
	pLayerCfg.PixelFormat = LCD_PIXEL_FORMAT_1;  //INCORRECT PIXEL FORMAT WILL GIVE WEIRD RESULTS!! IT MAY STILL WORK FOR 1/2 THE DISPLAY!!! //This is our buffers pixel format. 2 bytes for each pixel
 80009c8:	2302      	movs	r3, #2
 80009ca:	61fb      	str	r3, [r7, #28]
	pLayerCfg.Alpha = 255;
 80009cc:	23ff      	movs	r3, #255	@ 0xff
 80009ce:	623b      	str	r3, [r7, #32]
	pLayerCfg.Alpha0 = 0;
 80009d0:	2300      	movs	r3, #0
 80009d2:	627b      	str	r3, [r7, #36]	@ 0x24
	pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 80009d4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80009d8:	62bb      	str	r3, [r7, #40]	@ 0x28
	pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 80009da:	2305      	movs	r3, #5
 80009dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
	if (LayerIndex == 0){
 80009de:	79fb      	ldrb	r3, [r7, #7]
 80009e0:	2b00      	cmp	r3, #0
 80009e2:	d101      	bne.n	80009e8 <LTCD_Layer_Init+0x3c>
		pLayerCfg.FBStartAdress = (uintptr_t)frameBuffer;
 80009e4:	4b0f      	ldr	r3, [pc, #60]	@ (8000a24 <LTCD_Layer_Init+0x78>)
 80009e6:	633b      	str	r3, [r7, #48]	@ 0x30
	}
	pLayerCfg.ImageWidth = LCD_PIXEL_WIDTH;
 80009e8:	23f0      	movs	r3, #240	@ 0xf0
 80009ea:	637b      	str	r3, [r7, #52]	@ 0x34
	pLayerCfg.ImageHeight = LCD_PIXEL_HEIGHT;
 80009ec:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 80009f0:	63bb      	str	r3, [r7, #56]	@ 0x38
	pLayerCfg.Backcolor.Blue = 0;
 80009f2:	2300      	movs	r3, #0
 80009f4:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
	pLayerCfg.Backcolor.Green = 0;
 80009f8:	2300      	movs	r3, #0
 80009fa:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
	pLayerCfg.Backcolor.Red = 0;
 80009fe:	2300      	movs	r3, #0
 8000a00:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
	if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, LayerIndex) != HAL_OK)
 8000a04:	79fa      	ldrb	r2, [r7, #7]
 8000a06:	f107 030c 	add.w	r3, r7, #12
 8000a0a:	4619      	mov	r1, r3
 8000a0c:	4806      	ldr	r0, [pc, #24]	@ (8000a28 <LTCD_Layer_Init+0x7c>)
 8000a0e:	f004 fcb5 	bl	800537c <HAL_LTDC_ConfigLayer>
 8000a12:	4603      	mov	r3, r0
 8000a14:	2b00      	cmp	r3, #0
 8000a16:	d001      	beq.n	8000a1c <LTCD_Layer_Init+0x70>
	{
		LCD_Error_Handler();
 8000a18:	f000 fc20 	bl	800125c <LCD_Error_Handler>
	}
}
 8000a1c:	bf00      	nop
 8000a1e:	3740      	adds	r7, #64	@ 0x40
 8000a20:	46bd      	mov	sp, r7
 8000a22:	bd80      	pop	{r7, pc}
 8000a24:	2000018c 	.word	0x2000018c
 8000a28:	200000b0 	.word	0x200000b0

08000a2c <LTCD__Init>:
{
  LCD_Clear(0,LCD_COLOR_WHITE);
}

void LTCD__Init(void)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	af00      	add	r7, sp, #0
	hltdc.Instance = LTDC;
 8000a30:	4b2a      	ldr	r3, [pc, #168]	@ (8000adc <LTCD__Init+0xb0>)
 8000a32:	4a2b      	ldr	r2, [pc, #172]	@ (8000ae0 <LTCD__Init+0xb4>)
 8000a34:	601a      	str	r2, [r3, #0]
	/* Configure horizontal synchronization width */
	hltdc.Init.HorizontalSync = ILI9341_HSYNC;
 8000a36:	4b29      	ldr	r3, [pc, #164]	@ (8000adc <LTCD__Init+0xb0>)
 8000a38:	2209      	movs	r2, #9
 8000a3a:	615a      	str	r2, [r3, #20]
	/* Configure vertical synchronization height */
	hltdc.Init.VerticalSync = ILI9341_VSYNC;
 8000a3c:	4b27      	ldr	r3, [pc, #156]	@ (8000adc <LTCD__Init+0xb0>)
 8000a3e:	2201      	movs	r2, #1
 8000a40:	619a      	str	r2, [r3, #24]
	/* Configure accumulated horizontal back porch */
	hltdc.Init.AccumulatedHBP = ILI9341_HBP;
 8000a42:	4b26      	ldr	r3, [pc, #152]	@ (8000adc <LTCD__Init+0xb0>)
 8000a44:	221d      	movs	r2, #29
 8000a46:	61da      	str	r2, [r3, #28]
	/* Configure accumulated vertical back porch */
	hltdc.Init.AccumulatedVBP = ILI9341_VBP;
 8000a48:	4b24      	ldr	r3, [pc, #144]	@ (8000adc <LTCD__Init+0xb0>)
 8000a4a:	2203      	movs	r2, #3
 8000a4c:	621a      	str	r2, [r3, #32]
	/* Configure accumulated active width */
	hltdc.Init.AccumulatedActiveW = 269;
 8000a4e:	4b23      	ldr	r3, [pc, #140]	@ (8000adc <LTCD__Init+0xb0>)
 8000a50:	f240 120d 	movw	r2, #269	@ 0x10d
 8000a54:	625a      	str	r2, [r3, #36]	@ 0x24
	/* Configure accumulated active height */
	hltdc.Init.AccumulatedActiveH = 323;
 8000a56:	4b21      	ldr	r3, [pc, #132]	@ (8000adc <LTCD__Init+0xb0>)
 8000a58:	f240 1243 	movw	r2, #323	@ 0x143
 8000a5c:	629a      	str	r2, [r3, #40]	@ 0x28
	/* Configure total width */
	hltdc.Init.TotalWidth = 279;
 8000a5e:	4b1f      	ldr	r3, [pc, #124]	@ (8000adc <LTCD__Init+0xb0>)
 8000a60:	f240 1217 	movw	r2, #279	@ 0x117
 8000a64:	62da      	str	r2, [r3, #44]	@ 0x2c
	/* Configure total height */
	hltdc.Init.TotalHeigh = 327;
 8000a66:	4b1d      	ldr	r3, [pc, #116]	@ (8000adc <LTCD__Init+0xb0>)
 8000a68:	f240 1247 	movw	r2, #327	@ 0x147
 8000a6c:	631a      	str	r2, [r3, #48]	@ 0x30
	/* Configure R,G,B component values for LCD background color */
	hltdc.Init.Backcolor.Red = 0;
 8000a6e:	4b1b      	ldr	r3, [pc, #108]	@ (8000adc <LTCD__Init+0xb0>)
 8000a70:	2200      	movs	r2, #0
 8000a72:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
	hltdc.Init.Backcolor.Blue = 0;
 8000a76:	4b19      	ldr	r3, [pc, #100]	@ (8000adc <LTCD__Init+0xb0>)
 8000a78:	2200      	movs	r2, #0
 8000a7a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	hltdc.Init.Backcolor.Green = 0;
 8000a7e:	4b17      	ldr	r3, [pc, #92]	@ (8000adc <LTCD__Init+0xb0>)
 8000a80:	2200      	movs	r2, #0
 8000a82:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
	/* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
	/* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 192 Mhz */
	/* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/4 = 48 Mhz */
	/* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_8 = 48/4 = 6Mhz */

	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8000a86:	4b17      	ldr	r3, [pc, #92]	@ (8000ae4 <LTCD__Init+0xb8>)
 8000a88:	2208      	movs	r2, #8
 8000a8a:	601a      	str	r2, [r3, #0]
	PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 8000a8c:	4b15      	ldr	r3, [pc, #84]	@ (8000ae4 <LTCD__Init+0xb8>)
 8000a8e:	22c0      	movs	r2, #192	@ 0xc0
 8000a90:	611a      	str	r2, [r3, #16]
	PeriphClkInitStruct.PLLSAI.PLLSAIR = 4;
 8000a92:	4b14      	ldr	r3, [pc, #80]	@ (8000ae4 <LTCD__Init+0xb8>)
 8000a94:	2204      	movs	r2, #4
 8000a96:	619a      	str	r2, [r3, #24]
	PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 8000a98:	4b12      	ldr	r3, [pc, #72]	@ (8000ae4 <LTCD__Init+0xb8>)
 8000a9a:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8000a9e:	625a      	str	r2, [r3, #36]	@ 0x24
	HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 8000aa0:	4810      	ldr	r0, [pc, #64]	@ (8000ae4 <LTCD__Init+0xb8>)
 8000aa2:	f005 fac5 	bl	8006030 <HAL_RCCEx_PeriphCLKConfig>
	/* Polarity */
	hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8000aa6:	4b0d      	ldr	r3, [pc, #52]	@ (8000adc <LTCD__Init+0xb0>)
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	605a      	str	r2, [r3, #4]
	hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8000aac:	4b0b      	ldr	r3, [pc, #44]	@ (8000adc <LTCD__Init+0xb0>)
 8000aae:	2200      	movs	r2, #0
 8000ab0:	609a      	str	r2, [r3, #8]
	hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8000ab2:	4b0a      	ldr	r3, [pc, #40]	@ (8000adc <LTCD__Init+0xb0>)
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	60da      	str	r2, [r3, #12]
	hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8000ab8:	4b08      	ldr	r3, [pc, #32]	@ (8000adc <LTCD__Init+0xb0>)
 8000aba:	2200      	movs	r2, #0
 8000abc:	611a      	str	r2, [r3, #16]

	LCD_GPIO_Init();
 8000abe:	f7ff fead 	bl	800081c <LCD_GPIO_Init>

	if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8000ac2:	4806      	ldr	r0, [pc, #24]	@ (8000adc <LTCD__Init+0xb0>)
 8000ac4:	f004 fb8a 	bl	80051dc <HAL_LTDC_Init>
 8000ac8:	4603      	mov	r3, r0
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	d001      	beq.n	8000ad2 <LTCD__Init+0xa6>
	 {
	   LCD_Error_Handler();
 8000ace:	f000 fbc5 	bl	800125c <LCD_Error_Handler>
	 }

	ili9341_Init();
 8000ad2:	f000 fc31 	bl	8001338 <ili9341_Init>
}
 8000ad6:	bf00      	nop
 8000ad8:	bd80      	pop	{r7, pc}
 8000ada:	bf00      	nop
 8000adc:	200000b0 	.word	0x200000b0
 8000ae0:	40016800 	.word	0x40016800
 8000ae4:	20000158 	.word	0x20000158

08000ae8 <LCD_Draw_Pixel>:
 * This is really the only function needed.
 * All drawing consists of is manipulating the array.
 * Adding input sanitation should probably be done.
 */
void LCD_Draw_Pixel(uint16_t x, uint16_t y, uint16_t color)
{
 8000ae8:	b480      	push	{r7}
 8000aea:	b083      	sub	sp, #12
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	4603      	mov	r3, r0
 8000af0:	80fb      	strh	r3, [r7, #6]
 8000af2:	460b      	mov	r3, r1
 8000af4:	80bb      	strh	r3, [r7, #4]
 8000af6:	4613      	mov	r3, r2
 8000af8:	807b      	strh	r3, [r7, #2]
	frameBuffer[y*LCD_PIXEL_WIDTH+x] = color;  //You cannot do x*y to set the pixel.
 8000afa:	88ba      	ldrh	r2, [r7, #4]
 8000afc:	4613      	mov	r3, r2
 8000afe:	011b      	lsls	r3, r3, #4
 8000b00:	1a9b      	subs	r3, r3, r2
 8000b02:	011b      	lsls	r3, r3, #4
 8000b04:	461a      	mov	r2, r3
 8000b06:	88fb      	ldrh	r3, [r7, #6]
 8000b08:	4413      	add	r3, r2
 8000b0a:	4905      	ldr	r1, [pc, #20]	@ (8000b20 <LCD_Draw_Pixel+0x38>)
 8000b0c:	887a      	ldrh	r2, [r7, #2]
 8000b0e:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
}
 8000b12:	bf00      	nop
 8000b14:	370c      	adds	r7, #12
 8000b16:	46bd      	mov	sp, r7
 8000b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b1c:	4770      	bx	lr
 8000b1e:	bf00      	nop
 8000b20:	2000018c 	.word	0x2000018c

08000b24 <LCD_Draw_LShape1_Rotate1_Fill>:
            	LCD_Draw_Pixel(x+Xpos, y+Ypos, color);
            }
        }
    }
}
void LCD_Draw_LShape1_Rotate1_Fill(uint16_t Xpos, uint16_t Ypos, uint16_t color){
 8000b24:	b580      	push	{r7, lr}
 8000b26:	b082      	sub	sp, #8
 8000b28:	af00      	add	r7, sp, #0
 8000b2a:	4603      	mov	r3, r0
 8000b2c:	80fb      	strh	r3, [r7, #6]
 8000b2e:	460b      	mov	r3, r1
 8000b30:	80bb      	strh	r3, [r7, #4]
 8000b32:	4613      	mov	r3, r2
 8000b34:	807b      	strh	r3, [r7, #2]
	LCD_Draw_Rectangle_Rotate1_Fill(Xpos, Ypos, color);
 8000b36:	887a      	ldrh	r2, [r7, #2]
 8000b38:	88b9      	ldrh	r1, [r7, #4]
 8000b3a:	88fb      	ldrh	r3, [r7, #6]
 8000b3c:	4618      	mov	r0, r3
 8000b3e:	f000 f8cf 	bl	8000ce0 <LCD_Draw_Rectangle_Rotate1_Fill>
	LCD_Draw_Box_Fill(Xpos+15, Ypos, color);
 8000b42:	88fb      	ldrh	r3, [r7, #6]
 8000b44:	330f      	adds	r3, #15
 8000b46:	b29b      	uxth	r3, r3
 8000b48:	887a      	ldrh	r2, [r7, #2]
 8000b4a:	88b9      	ldrh	r1, [r7, #4]
 8000b4c:	4618      	mov	r0, r3
 8000b4e:	f000 f952 	bl	8000df6 <LCD_Draw_Box_Fill>
}
 8000b52:	bf00      	nop
 8000b54:	3708      	adds	r7, #8
 8000b56:	46bd      	mov	sp, r7
 8000b58:	bd80      	pop	{r7, pc}

08000b5a <LCD_Draw_LShape1_Fill>:
void LCD_Draw_LShape1_Fill(uint16_t Xpos, uint16_t Ypos, uint16_t color,uint16_t degree)
{
 8000b5a:	b590      	push	{r4, r7, lr}
 8000b5c:	b087      	sub	sp, #28
 8000b5e:	af00      	add	r7, sp, #0
 8000b60:	4604      	mov	r4, r0
 8000b62:	4608      	mov	r0, r1
 8000b64:	4611      	mov	r1, r2
 8000b66:	461a      	mov	r2, r3
 8000b68:	4623      	mov	r3, r4
 8000b6a:	80fb      	strh	r3, [r7, #6]
 8000b6c:	4603      	mov	r3, r0
 8000b6e:	80bb      	strh	r3, [r7, #4]
 8000b70:	460b      	mov	r3, r1
 8000b72:	807b      	strh	r3, [r7, #2]
 8000b74:	4613      	mov	r3, r2
 8000b76:	803b      	strh	r3, [r7, #0]
	uint16_t color2 = color;
 8000b78:	887b      	ldrh	r3, [r7, #2]
 8000b7a:	82bb      	strh	r3, [r7, #20]
	uint16_t length = 15;
 8000b7c:	230f      	movs	r3, #15
 8000b7e:	827b      	strh	r3, [r7, #18]
	int16_t x = Xpos;
 8000b80:	88fb      	ldrh	r3, [r7, #6]
 8000b82:	82fb      	strh	r3, [r7, #22]
	uint16_t width = Xpos+45;
 8000b84:	88fb      	ldrh	r3, [r7, #6]
 8000b86:	332d      	adds	r3, #45	@ 0x2d
 8000b88:	823b      	strh	r3, [r7, #16]
	uint16_t y = Ypos;
 8000b8a:	88bb      	ldrh	r3, [r7, #4]
 8000b8c:	81fb      	strh	r3, [r7, #14]
	//uint16_t finalx = -1;
	if(degree == 1){
 8000b8e:	883b      	ldrh	r3, [r7, #0]
 8000b90:	2b01      	cmp	r3, #1
 8000b92:	d112      	bne.n	8000bba <LCD_Draw_LShape1_Fill+0x60>
			LCD_Draw_LShape1_Rotate1_Fill(x, y, color2);
 8000b94:	8afb      	ldrh	r3, [r7, #22]
 8000b96:	8aba      	ldrh	r2, [r7, #20]
 8000b98:	89f9      	ldrh	r1, [r7, #14]
 8000b9a:	4618      	mov	r0, r3
 8000b9c:	f7ff ffc2 	bl	8000b24 <LCD_Draw_LShape1_Rotate1_Fill>
    		//finalx = x;
     }
    int16_t xS = width - 15;
    LCD_Draw_Box_Fill(xS, y+15, color2);
    }
}
 8000ba0:	e01c      	b.n	8000bdc <LCD_Draw_LShape1_Fill+0x82>
    		LCD_Draw_Vertical_Line(x, y, length, color2);
 8000ba2:	8af8      	ldrh	r0, [r7, #22]
 8000ba4:	8abb      	ldrh	r3, [r7, #20]
 8000ba6:	8a7a      	ldrh	r2, [r7, #18]
 8000ba8:	89f9      	ldrh	r1, [r7, #14]
 8000baa:	f000 fa36 	bl	800101a <LCD_Draw_Vertical_Line>
    for(; x<(width+1); x++)
 8000bae:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000bb2:	b29b      	uxth	r3, r3
 8000bb4:	3301      	adds	r3, #1
 8000bb6:	b29b      	uxth	r3, r3
 8000bb8:	82fb      	strh	r3, [r7, #22]
 8000bba:	8a3a      	ldrh	r2, [r7, #16]
 8000bbc:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000bc0:	429a      	cmp	r2, r3
 8000bc2:	daee      	bge.n	8000ba2 <LCD_Draw_LShape1_Fill+0x48>
    int16_t xS = width - 15;
 8000bc4:	8a3b      	ldrh	r3, [r7, #16]
 8000bc6:	3b0f      	subs	r3, #15
 8000bc8:	b29b      	uxth	r3, r3
 8000bca:	81bb      	strh	r3, [r7, #12]
    LCD_Draw_Box_Fill(xS, y+15, color2);
 8000bcc:	89b8      	ldrh	r0, [r7, #12]
 8000bce:	89fb      	ldrh	r3, [r7, #14]
 8000bd0:	330f      	adds	r3, #15
 8000bd2:	b29b      	uxth	r3, r3
 8000bd4:	8aba      	ldrh	r2, [r7, #20]
 8000bd6:	4619      	mov	r1, r3
 8000bd8:	f000 f90d 	bl	8000df6 <LCD_Draw_Box_Fill>
}
 8000bdc:	bf00      	nop
 8000bde:	371c      	adds	r7, #28
 8000be0:	46bd      	mov	sp, r7
 8000be2:	bd90      	pop	{r4, r7, pc}

08000be4 <LCD_Draw_LShape2_Fill>:
void LCD_Draw_LShape2_Fill(uint16_t Xpos, uint16_t Ypos, uint16_t color, uint16_t degree)
{
 8000be4:	b590      	push	{r4, r7, lr}
 8000be6:	b087      	sub	sp, #28
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	4604      	mov	r4, r0
 8000bec:	4608      	mov	r0, r1
 8000bee:	4611      	mov	r1, r2
 8000bf0:	461a      	mov	r2, r3
 8000bf2:	4623      	mov	r3, r4
 8000bf4:	80fb      	strh	r3, [r7, #6]
 8000bf6:	4603      	mov	r3, r0
 8000bf8:	80bb      	strh	r3, [r7, #4]
 8000bfa:	460b      	mov	r3, r1
 8000bfc:	807b      	strh	r3, [r7, #2]
 8000bfe:	4613      	mov	r3, r2
 8000c00:	803b      	strh	r3, [r7, #0]
	uint16_t color2 = color;
 8000c02:	887b      	ldrh	r3, [r7, #2]
 8000c04:	82bb      	strh	r3, [r7, #20]
	uint16_t length = 15;
 8000c06:	230f      	movs	r3, #15
 8000c08:	827b      	strh	r3, [r7, #18]
	int16_t x = Xpos;
 8000c0a:	88fb      	ldrh	r3, [r7, #6]
 8000c0c:	82fb      	strh	r3, [r7, #22]
	uint16_t width = Xpos+45;
 8000c0e:	88fb      	ldrh	r3, [r7, #6]
 8000c10:	332d      	adds	r3, #45	@ 0x2d
 8000c12:	823b      	strh	r3, [r7, #16]
	uint16_t y = Ypos;
 8000c14:	88bb      	ldrh	r3, [r7, #4]
 8000c16:	81fb      	strh	r3, [r7, #14]
	//uint16_t finalx = -1;
	if(degree == 1){
 8000c18:	883b      	ldrh	r3, [r7, #0]
 8000c1a:	2b01      	cmp	r3, #1
 8000c1c:	d112      	bne.n	8000c44 <LCD_Draw_LShape2_Fill+0x60>
				LCD_Draw_LShape1_Rotate1_Fill(x, y, color2);
 8000c1e:	8afb      	ldrh	r3, [r7, #22]
 8000c20:	8aba      	ldrh	r2, [r7, #20]
 8000c22:	89f9      	ldrh	r1, [r7, #14]
 8000c24:	4618      	mov	r0, r3
 8000c26:	f7ff ff7d 	bl	8000b24 <LCD_Draw_LShape1_Rotate1_Fill>
    		//finalx = x;
     }
    int16_t xS = width - 15;
    LCD_Draw_Box_Fill(xS, y-15, color2);
			}
}
 8000c2a:	e01c      	b.n	8000c66 <LCD_Draw_LShape2_Fill+0x82>
    		LCD_Draw_Vertical_Line(x, y, length, color2);
 8000c2c:	8af8      	ldrh	r0, [r7, #22]
 8000c2e:	8abb      	ldrh	r3, [r7, #20]
 8000c30:	8a7a      	ldrh	r2, [r7, #18]
 8000c32:	89f9      	ldrh	r1, [r7, #14]
 8000c34:	f000 f9f1 	bl	800101a <LCD_Draw_Vertical_Line>
    for(; x<(width+1); x++)
 8000c38:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000c3c:	b29b      	uxth	r3, r3
 8000c3e:	3301      	adds	r3, #1
 8000c40:	b29b      	uxth	r3, r3
 8000c42:	82fb      	strh	r3, [r7, #22]
 8000c44:	8a3a      	ldrh	r2, [r7, #16]
 8000c46:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000c4a:	429a      	cmp	r2, r3
 8000c4c:	daee      	bge.n	8000c2c <LCD_Draw_LShape2_Fill+0x48>
    int16_t xS = width - 15;
 8000c4e:	8a3b      	ldrh	r3, [r7, #16]
 8000c50:	3b0f      	subs	r3, #15
 8000c52:	b29b      	uxth	r3, r3
 8000c54:	81bb      	strh	r3, [r7, #12]
    LCD_Draw_Box_Fill(xS, y-15, color2);
 8000c56:	89b8      	ldrh	r0, [r7, #12]
 8000c58:	89fb      	ldrh	r3, [r7, #14]
 8000c5a:	3b0f      	subs	r3, #15
 8000c5c:	b29b      	uxth	r3, r3
 8000c5e:	8aba      	ldrh	r2, [r7, #20]
 8000c60:	4619      	mov	r1, r3
 8000c62:	f000 f8c8 	bl	8000df6 <LCD_Draw_Box_Fill>
}
 8000c66:	bf00      	nop
 8000c68:	371c      	adds	r7, #28
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	bd90      	pop	{r4, r7, pc}

08000c6e <LCD_Draw_Rectangle_Fill>:
void LCD_Draw_Rectangle_Fill(uint16_t Xpos, uint16_t Ypos, uint16_t color, uint16_t degree)
{
 8000c6e:	b590      	push	{r4, r7, lr}
 8000c70:	b087      	sub	sp, #28
 8000c72:	af00      	add	r7, sp, #0
 8000c74:	4604      	mov	r4, r0
 8000c76:	4608      	mov	r0, r1
 8000c78:	4611      	mov	r1, r2
 8000c7a:	461a      	mov	r2, r3
 8000c7c:	4623      	mov	r3, r4
 8000c7e:	80fb      	strh	r3, [r7, #6]
 8000c80:	4603      	mov	r3, r0
 8000c82:	80bb      	strh	r3, [r7, #4]
 8000c84:	460b      	mov	r3, r1
 8000c86:	807b      	strh	r3, [r7, #2]
 8000c88:	4613      	mov	r3, r2
 8000c8a:	803b      	strh	r3, [r7, #0]
	uint16_t color2 = color;
 8000c8c:	887b      	ldrh	r3, [r7, #2]
 8000c8e:	82bb      	strh	r3, [r7, #20]
	uint16_t length = 15;
 8000c90:	230f      	movs	r3, #15
 8000c92:	827b      	strh	r3, [r7, #18]
	int16_t x = Xpos;
 8000c94:	88fb      	ldrh	r3, [r7, #6]
 8000c96:	82fb      	strh	r3, [r7, #22]
	uint16_t width = x+45;
 8000c98:	8afb      	ldrh	r3, [r7, #22]
 8000c9a:	332d      	adds	r3, #45	@ 0x2d
 8000c9c:	823b      	strh	r3, [r7, #16]
	uint16_t y = Ypos;
 8000c9e:	88bb      	ldrh	r3, [r7, #4]
 8000ca0:	81fb      	strh	r3, [r7, #14]
	if(degree == 1){
 8000ca2:	883b      	ldrh	r3, [r7, #0]
 8000ca4:	2b01      	cmp	r3, #1
 8000ca6:	d112      	bne.n	8000cce <LCD_Draw_Rectangle_Fill+0x60>
		LCD_Draw_Rectangle_Rotate1_Fill(x, y, color2);
 8000ca8:	8afb      	ldrh	r3, [r7, #22]
 8000caa:	8aba      	ldrh	r2, [r7, #20]
 8000cac:	89f9      	ldrh	r1, [r7, #14]
 8000cae:	4618      	mov	r0, r3
 8000cb0:	f000 f816 	bl	8000ce0 <LCD_Draw_Rectangle_Rotate1_Fill>
    {
       LCD_Draw_Vertical_Line(x, y, length, color2);
    }
	}

}
 8000cb4:	e010      	b.n	8000cd8 <LCD_Draw_Rectangle_Fill+0x6a>
       LCD_Draw_Vertical_Line(x, y, length, color2);
 8000cb6:	8af8      	ldrh	r0, [r7, #22]
 8000cb8:	8abb      	ldrh	r3, [r7, #20]
 8000cba:	8a7a      	ldrh	r2, [r7, #18]
 8000cbc:	89f9      	ldrh	r1, [r7, #14]
 8000cbe:	f000 f9ac 	bl	800101a <LCD_Draw_Vertical_Line>
    for(; x<(width+1); x++)
 8000cc2:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000cc6:	b29b      	uxth	r3, r3
 8000cc8:	3301      	adds	r3, #1
 8000cca:	b29b      	uxth	r3, r3
 8000ccc:	82fb      	strh	r3, [r7, #22]
 8000cce:	8a3a      	ldrh	r2, [r7, #16]
 8000cd0:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000cd4:	429a      	cmp	r2, r3
 8000cd6:	daee      	bge.n	8000cb6 <LCD_Draw_Rectangle_Fill+0x48>
}
 8000cd8:	bf00      	nop
 8000cda:	371c      	adds	r7, #28
 8000cdc:	46bd      	mov	sp, r7
 8000cde:	bd90      	pop	{r4, r7, pc}

08000ce0 <LCD_Draw_Rectangle_Rotate1_Fill>:
void LCD_Draw_Rectangle_Rotate1_Fill(uint16_t Xpos, uint16_t Ypos, uint16_t color){
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	b084      	sub	sp, #16
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	4603      	mov	r3, r0
 8000ce8:	80fb      	strh	r3, [r7, #6]
 8000cea:	460b      	mov	r3, r1
 8000cec:	80bb      	strh	r3, [r7, #4]
 8000cee:	4613      	mov	r3, r2
 8000cf0:	807b      	strh	r3, [r7, #2]
		uint16_t length = 45;
 8000cf2:	232d      	movs	r3, #45	@ 0x2d
 8000cf4:	81bb      	strh	r3, [r7, #12]
		int16_t x = Xpos;
 8000cf6:	88fb      	ldrh	r3, [r7, #6]
 8000cf8:	81fb      	strh	r3, [r7, #14]
		uint16_t y = Ypos;
 8000cfa:	88bb      	ldrh	r3, [r7, #4]
 8000cfc:	817b      	strh	r3, [r7, #10]
		uint16_t width = x+15;
 8000cfe:	89fb      	ldrh	r3, [r7, #14]
 8000d00:	330f      	adds	r3, #15
 8000d02:	813b      	strh	r3, [r7, #8]
	    for(; x<width; x++)
 8000d04:	e00b      	b.n	8000d1e <LCD_Draw_Rectangle_Rotate1_Fill+0x3e>
	    {
	       LCD_Draw_Vertical_Line(x, y, length, color);
 8000d06:	89f8      	ldrh	r0, [r7, #14]
 8000d08:	887b      	ldrh	r3, [r7, #2]
 8000d0a:	89ba      	ldrh	r2, [r7, #12]
 8000d0c:	8979      	ldrh	r1, [r7, #10]
 8000d0e:	f000 f984 	bl	800101a <LCD_Draw_Vertical_Line>
	    for(; x<width; x++)
 8000d12:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000d16:	b29b      	uxth	r3, r3
 8000d18:	3301      	adds	r3, #1
 8000d1a:	b29b      	uxth	r3, r3
 8000d1c:	81fb      	strh	r3, [r7, #14]
 8000d1e:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8000d22:	893b      	ldrh	r3, [r7, #8]
 8000d24:	429a      	cmp	r2, r3
 8000d26:	dbee      	blt.n	8000d06 <LCD_Draw_Rectangle_Rotate1_Fill+0x26>
	    }
}
 8000d28:	bf00      	nop
 8000d2a:	bf00      	nop
 8000d2c:	3710      	adds	r7, #16
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	bd80      	pop	{r7, pc}

08000d32 <LCD_Draw_BBox_Fill>:
void LCD_Draw_BBox_Fill(uint16_t Xpos, uint16_t Ypos, uint16_t color)
{
 8000d32:	b580      	push	{r7, lr}
 8000d34:	b086      	sub	sp, #24
 8000d36:	af00      	add	r7, sp, #0
 8000d38:	4603      	mov	r3, r0
 8000d3a:	80fb      	strh	r3, [r7, #6]
 8000d3c:	460b      	mov	r3, r1
 8000d3e:	80bb      	strh	r3, [r7, #4]
 8000d40:	4613      	mov	r3, r2
 8000d42:	807b      	strh	r3, [r7, #2]
	uint16_t color2 = color;
 8000d44:	887b      	ldrh	r3, [r7, #2]
 8000d46:	82bb      	strh	r3, [r7, #20]
	uint16_t length = 30;
 8000d48:	231e      	movs	r3, #30
 8000d4a:	827b      	strh	r3, [r7, #18]
	int16_t x = Xpos;
 8000d4c:	88fb      	ldrh	r3, [r7, #6]
 8000d4e:	82fb      	strh	r3, [r7, #22]
	uint16_t width = x+30;
 8000d50:	8afb      	ldrh	r3, [r7, #22]
 8000d52:	331e      	adds	r3, #30
 8000d54:	823b      	strh	r3, [r7, #16]
	uint16_t y = Ypos;
 8000d56:	88bb      	ldrh	r3, [r7, #4]
 8000d58:	81fb      	strh	r3, [r7, #14]
    for(; x<(width+1); x++)
 8000d5a:	e00b      	b.n	8000d74 <LCD_Draw_BBox_Fill+0x42>
        {
    		LCD_Draw_Vertical_Line(x, y, length, color2);
 8000d5c:	8af8      	ldrh	r0, [r7, #22]
 8000d5e:	8abb      	ldrh	r3, [r7, #20]
 8000d60:	8a7a      	ldrh	r2, [r7, #18]
 8000d62:	89f9      	ldrh	r1, [r7, #14]
 8000d64:	f000 f959 	bl	800101a <LCD_Draw_Vertical_Line>
    for(; x<(width+1); x++)
 8000d68:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000d6c:	b29b      	uxth	r3, r3
 8000d6e:	3301      	adds	r3, #1
 8000d70:	b29b      	uxth	r3, r3
 8000d72:	82fb      	strh	r3, [r7, #22]
 8000d74:	8a3a      	ldrh	r2, [r7, #16]
 8000d76:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000d7a:	429a      	cmp	r2, r3
 8000d7c:	daee      	bge.n	8000d5c <LCD_Draw_BBox_Fill+0x2a>
        }
}
 8000d7e:	bf00      	nop
 8000d80:	bf00      	nop
 8000d82:	3718      	adds	r7, #24
 8000d84:	46bd      	mov	sp, r7
 8000d86:	bd80      	pop	{r7, pc}

08000d88 <LCD_Draw_TBox_Fill>:
void LCD_Draw_TBox_Fill(uint16_t Xpos, uint16_t Ypos, uint16_t color, uint16_t degree){
 8000d88:	b590      	push	{r4, r7, lr}
 8000d8a:	b083      	sub	sp, #12
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	4604      	mov	r4, r0
 8000d90:	4608      	mov	r0, r1
 8000d92:	4611      	mov	r1, r2
 8000d94:	461a      	mov	r2, r3
 8000d96:	4623      	mov	r3, r4
 8000d98:	80fb      	strh	r3, [r7, #6]
 8000d9a:	4603      	mov	r3, r0
 8000d9c:	80bb      	strh	r3, [r7, #4]
 8000d9e:	460b      	mov	r3, r1
 8000da0:	807b      	strh	r3, [r7, #2]
 8000da2:	4613      	mov	r3, r2
 8000da4:	803b      	strh	r3, [r7, #0]
	if(degree == 1)
 8000da6:	883b      	ldrh	r3, [r7, #0]
 8000da8:	2b01      	cmp	r3, #1
 8000daa:	d110      	bne.n	8000dce <LCD_Draw_TBox_Fill+0x46>
		{
			LCD_Draw_Rectangle_Rotate1_Fill( Xpos, Ypos, color);
 8000dac:	887a      	ldrh	r2, [r7, #2]
 8000dae:	88b9      	ldrh	r1, [r7, #4]
 8000db0:	88fb      	ldrh	r3, [r7, #6]
 8000db2:	4618      	mov	r0, r3
 8000db4:	f7ff ff94 	bl	8000ce0 <LCD_Draw_Rectangle_Rotate1_Fill>
			LCD_Draw_Box_Fill(Xpos + 15, Ypos+15, color);
 8000db8:	88fb      	ldrh	r3, [r7, #6]
 8000dba:	330f      	adds	r3, #15
 8000dbc:	b298      	uxth	r0, r3
 8000dbe:	88bb      	ldrh	r3, [r7, #4]
 8000dc0:	330f      	adds	r3, #15
 8000dc2:	b29b      	uxth	r3, r3
 8000dc4:	887a      	ldrh	r2, [r7, #2]
 8000dc6:	4619      	mov	r1, r3
 8000dc8:	f000 f815 	bl	8000df6 <LCD_Draw_Box_Fill>
	else{
	LCD_Draw_Rectangle_Fill( Xpos, Ypos, color, 0);
	LCD_Draw_Box_Fill(Xpos + 15, Ypos+15, color);
	}

}
 8000dcc:	e00f      	b.n	8000dee <LCD_Draw_TBox_Fill+0x66>
	LCD_Draw_Rectangle_Fill( Xpos, Ypos, color, 0);
 8000dce:	887a      	ldrh	r2, [r7, #2]
 8000dd0:	88b9      	ldrh	r1, [r7, #4]
 8000dd2:	88f8      	ldrh	r0, [r7, #6]
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	f7ff ff4a 	bl	8000c6e <LCD_Draw_Rectangle_Fill>
	LCD_Draw_Box_Fill(Xpos + 15, Ypos+15, color);
 8000dda:	88fb      	ldrh	r3, [r7, #6]
 8000ddc:	330f      	adds	r3, #15
 8000dde:	b298      	uxth	r0, r3
 8000de0:	88bb      	ldrh	r3, [r7, #4]
 8000de2:	330f      	adds	r3, #15
 8000de4:	b29b      	uxth	r3, r3
 8000de6:	887a      	ldrh	r2, [r7, #2]
 8000de8:	4619      	mov	r1, r3
 8000dea:	f000 f804 	bl	8000df6 <LCD_Draw_Box_Fill>
}
 8000dee:	bf00      	nop
 8000df0:	370c      	adds	r7, #12
 8000df2:	46bd      	mov	sp, r7
 8000df4:	bd90      	pop	{r4, r7, pc}

08000df6 <LCD_Draw_Box_Fill>:
void LCD_Draw_Box_Fill(uint16_t Xpos, uint16_t Ypos, uint16_t color)
{
 8000df6:	b580      	push	{r7, lr}
 8000df8:	b086      	sub	sp, #24
 8000dfa:	af00      	add	r7, sp, #0
 8000dfc:	4603      	mov	r3, r0
 8000dfe:	80fb      	strh	r3, [r7, #6]
 8000e00:	460b      	mov	r3, r1
 8000e02:	80bb      	strh	r3, [r7, #4]
 8000e04:	4613      	mov	r3, r2
 8000e06:	807b      	strh	r3, [r7, #2]
	uint16_t color2 = color;
 8000e08:	887b      	ldrh	r3, [r7, #2]
 8000e0a:	82bb      	strh	r3, [r7, #20]
	uint16_t length = 15;
 8000e0c:	230f      	movs	r3, #15
 8000e0e:	827b      	strh	r3, [r7, #18]
	int16_t x = Xpos;
 8000e10:	88fb      	ldrh	r3, [r7, #6]
 8000e12:	82fb      	strh	r3, [r7, #22]
	uint16_t width = x+15;
 8000e14:	8afb      	ldrh	r3, [r7, #22]
 8000e16:	330f      	adds	r3, #15
 8000e18:	823b      	strh	r3, [r7, #16]
	uint16_t y = Ypos;
 8000e1a:	88bb      	ldrh	r3, [r7, #4]
 8000e1c:	81fb      	strh	r3, [r7, #14]
    for(; x<(width+1); x++)
 8000e1e:	e00b      	b.n	8000e38 <LCD_Draw_Box_Fill+0x42>
        {
    		LCD_Draw_Vertical_Line(x, y, length, color2);
 8000e20:	8af8      	ldrh	r0, [r7, #22]
 8000e22:	8abb      	ldrh	r3, [r7, #20]
 8000e24:	8a7a      	ldrh	r2, [r7, #18]
 8000e26:	89f9      	ldrh	r1, [r7, #14]
 8000e28:	f000 f8f7 	bl	800101a <LCD_Draw_Vertical_Line>
    for(; x<(width+1); x++)
 8000e2c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000e30:	b29b      	uxth	r3, r3
 8000e32:	3301      	adds	r3, #1
 8000e34:	b29b      	uxth	r3, r3
 8000e36:	82fb      	strh	r3, [r7, #22]
 8000e38:	8a3a      	ldrh	r2, [r7, #16]
 8000e3a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000e3e:	429a      	cmp	r2, r3
 8000e40:	daee      	bge.n	8000e20 <LCD_Draw_Box_Fill+0x2a>
        }
}
 8000e42:	bf00      	nop
 8000e44:	bf00      	nop
 8000e46:	3718      	adds	r7, #24
 8000e48:	46bd      	mov	sp, r7
 8000e4a:	bd80      	pop	{r7, pc}

08000e4c <LCD_Draw_ZShape_Fill>:
void LCD_Draw_ZShape_Fill(uint16_t Xpos, uint16_t Ypos, uint16_t color,uint16_t degree)
{
 8000e4c:	b590      	push	{r4, r7, lr}
 8000e4e:	b087      	sub	sp, #28
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	4604      	mov	r4, r0
 8000e54:	4608      	mov	r0, r1
 8000e56:	4611      	mov	r1, r2
 8000e58:	461a      	mov	r2, r3
 8000e5a:	4623      	mov	r3, r4
 8000e5c:	80fb      	strh	r3, [r7, #6]
 8000e5e:	4603      	mov	r3, r0
 8000e60:	80bb      	strh	r3, [r7, #4]
 8000e62:	460b      	mov	r3, r1
 8000e64:	807b      	strh	r3, [r7, #2]
 8000e66:	4613      	mov	r3, r2
 8000e68:	803b      	strh	r3, [r7, #0]
	uint16_t color2 = color;
 8000e6a:	887b      	ldrh	r3, [r7, #2]
 8000e6c:	82bb      	strh	r3, [r7, #20]
	uint16_t length = 15;
 8000e6e:	230f      	movs	r3, #15
 8000e70:	827b      	strh	r3, [r7, #18]
	int16_t x = Xpos;
 8000e72:	88fb      	ldrh	r3, [r7, #6]
 8000e74:	82fb      	strh	r3, [r7, #22]
	uint16_t width = x+30;
 8000e76:	8afb      	ldrh	r3, [r7, #22]
 8000e78:	331e      	adds	r3, #30
 8000e7a:	823b      	strh	r3, [r7, #16]
	uint16_t width1 = x+15;
 8000e7c:	8afb      	ldrh	r3, [r7, #22]
 8000e7e:	330f      	adds	r3, #15
 8000e80:	81fb      	strh	r3, [r7, #14]
    uint16_t length1 = 30;
 8000e82:	231e      	movs	r3, #30
 8000e84:	81bb      	strh	r3, [r7, #12]
	uint16_t y = Ypos;
 8000e86:	88bb      	ldrh	r3, [r7, #4]
 8000e88:	817b      	strh	r3, [r7, #10]
	if(degree == 1)
 8000e8a:	883b      	ldrh	r3, [r7, #0]
 8000e8c:	2b01      	cmp	r3, #1
 8000e8e:	d132      	bne.n	8000ef6 <LCD_Draw_ZShape_Fill+0xaa>
	{
	   for(; x<(width1+1); x++)
 8000e90:	e015      	b.n	8000ebe <LCD_Draw_ZShape_Fill+0x72>
		{
			LCD_Draw_Vertical_Line(x, y, length1, color2);
 8000e92:	8af8      	ldrh	r0, [r7, #22]
 8000e94:	8abb      	ldrh	r3, [r7, #20]
 8000e96:	89ba      	ldrh	r2, [r7, #12]
 8000e98:	8979      	ldrh	r1, [r7, #10]
 8000e9a:	f000 f8be 	bl	800101a <LCD_Draw_Vertical_Line>
			LCD_Draw_Vertical_Line(x+15, y+15, length1, color2);
 8000e9e:	8afb      	ldrh	r3, [r7, #22]
 8000ea0:	330f      	adds	r3, #15
 8000ea2:	b298      	uxth	r0, r3
 8000ea4:	897b      	ldrh	r3, [r7, #10]
 8000ea6:	330f      	adds	r3, #15
 8000ea8:	b299      	uxth	r1, r3
 8000eaa:	8abb      	ldrh	r3, [r7, #20]
 8000eac:	89ba      	ldrh	r2, [r7, #12]
 8000eae:	f000 f8b4 	bl	800101a <LCD_Draw_Vertical_Line>
	   for(; x<(width1+1); x++)
 8000eb2:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000eb6:	b29b      	uxth	r3, r3
 8000eb8:	3301      	adds	r3, #1
 8000eba:	b29b      	uxth	r3, r3
 8000ebc:	82fb      	strh	r3, [r7, #22]
 8000ebe:	89fa      	ldrh	r2, [r7, #14]
 8000ec0:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000ec4:	429a      	cmp	r2, r3
 8000ec6:	dae4      	bge.n	8000e92 <LCD_Draw_ZShape_Fill+0x46>
		{
			LCD_Draw_Vertical_Line(x, y, length, color2);
			LCD_Draw_Vertical_Line(x+15, y+15, length, color2);
		}
	}
}
 8000ec8:	e01a      	b.n	8000f00 <LCD_Draw_ZShape_Fill+0xb4>
			LCD_Draw_Vertical_Line(x, y, length, color2);
 8000eca:	8af8      	ldrh	r0, [r7, #22]
 8000ecc:	8abb      	ldrh	r3, [r7, #20]
 8000ece:	8a7a      	ldrh	r2, [r7, #18]
 8000ed0:	8979      	ldrh	r1, [r7, #10]
 8000ed2:	f000 f8a2 	bl	800101a <LCD_Draw_Vertical_Line>
			LCD_Draw_Vertical_Line(x+15, y+15, length, color2);
 8000ed6:	8afb      	ldrh	r3, [r7, #22]
 8000ed8:	330f      	adds	r3, #15
 8000eda:	b298      	uxth	r0, r3
 8000edc:	897b      	ldrh	r3, [r7, #10]
 8000ede:	330f      	adds	r3, #15
 8000ee0:	b299      	uxth	r1, r3
 8000ee2:	8abb      	ldrh	r3, [r7, #20]
 8000ee4:	8a7a      	ldrh	r2, [r7, #18]
 8000ee6:	f000 f898 	bl	800101a <LCD_Draw_Vertical_Line>
		for(; x<(width+1); x++)
 8000eea:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000eee:	b29b      	uxth	r3, r3
 8000ef0:	3301      	adds	r3, #1
 8000ef2:	b29b      	uxth	r3, r3
 8000ef4:	82fb      	strh	r3, [r7, #22]
 8000ef6:	8a3a      	ldrh	r2, [r7, #16]
 8000ef8:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000efc:	429a      	cmp	r2, r3
 8000efe:	dae4      	bge.n	8000eca <LCD_Draw_ZShape_Fill+0x7e>
}
 8000f00:	bf00      	nop
 8000f02:	371c      	adds	r7, #28
 8000f04:	46bd      	mov	sp, r7
 8000f06:	bd90      	pop	{r4, r7, pc}

08000f08 <LCD_Draw_SShape_Fill>:
void LCD_Draw_SShape_Fill(uint16_t Xpos, uint16_t Ypos, uint16_t color, uint16_t degree)
{
 8000f08:	b590      	push	{r4, r7, lr}
 8000f0a:	b087      	sub	sp, #28
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	4604      	mov	r4, r0
 8000f10:	4608      	mov	r0, r1
 8000f12:	4611      	mov	r1, r2
 8000f14:	461a      	mov	r2, r3
 8000f16:	4623      	mov	r3, r4
 8000f18:	80fb      	strh	r3, [r7, #6]
 8000f1a:	4603      	mov	r3, r0
 8000f1c:	80bb      	strh	r3, [r7, #4]
 8000f1e:	460b      	mov	r3, r1
 8000f20:	807b      	strh	r3, [r7, #2]
 8000f22:	4613      	mov	r3, r2
 8000f24:	803b      	strh	r3, [r7, #0]
	uint16_t color2 = color;
 8000f26:	887b      	ldrh	r3, [r7, #2]
 8000f28:	82bb      	strh	r3, [r7, #20]
	uint16_t length = 15;
 8000f2a:	230f      	movs	r3, #15
 8000f2c:	827b      	strh	r3, [r7, #18]
	int16_t x = Xpos;
 8000f2e:	88fb      	ldrh	r3, [r7, #6]
 8000f30:	82fb      	strh	r3, [r7, #22]
	uint16_t width = x+30;
 8000f32:	8afb      	ldrh	r3, [r7, #22]
 8000f34:	331e      	adds	r3, #30
 8000f36:	823b      	strh	r3, [r7, #16]
	uint16_t width1 = x+15;
 8000f38:	8afb      	ldrh	r3, [r7, #22]
 8000f3a:	330f      	adds	r3, #15
 8000f3c:	81fb      	strh	r3, [r7, #14]
	uint16_t length1 = 30;
 8000f3e:	231e      	movs	r3, #30
 8000f40:	81bb      	strh	r3, [r7, #12]
	uint16_t y = Ypos;
 8000f42:	88bb      	ldrh	r3, [r7, #4]
 8000f44:	817b      	strh	r3, [r7, #10]
	if(degree == 1)
 8000f46:	883b      	ldrh	r3, [r7, #0]
 8000f48:	2b01      	cmp	r3, #1
 8000f4a:	d132      	bne.n	8000fb2 <LCD_Draw_SShape_Fill+0xaa>
		{
		   for(; x<(width1+1); x++)
 8000f4c:	e015      	b.n	8000f7a <LCD_Draw_SShape_Fill+0x72>
			{
				LCD_Draw_Vertical_Line(x, y, length1, color2);
 8000f4e:	8af8      	ldrh	r0, [r7, #22]
 8000f50:	8abb      	ldrh	r3, [r7, #20]
 8000f52:	89ba      	ldrh	r2, [r7, #12]
 8000f54:	8979      	ldrh	r1, [r7, #10]
 8000f56:	f000 f860 	bl	800101a <LCD_Draw_Vertical_Line>
				LCD_Draw_Vertical_Line(x-15, y+15, length1, color2);
 8000f5a:	8afb      	ldrh	r3, [r7, #22]
 8000f5c:	3b0f      	subs	r3, #15
 8000f5e:	b298      	uxth	r0, r3
 8000f60:	897b      	ldrh	r3, [r7, #10]
 8000f62:	330f      	adds	r3, #15
 8000f64:	b299      	uxth	r1, r3
 8000f66:	8abb      	ldrh	r3, [r7, #20]
 8000f68:	89ba      	ldrh	r2, [r7, #12]
 8000f6a:	f000 f856 	bl	800101a <LCD_Draw_Vertical_Line>
		   for(; x<(width1+1); x++)
 8000f6e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000f72:	b29b      	uxth	r3, r3
 8000f74:	3301      	adds	r3, #1
 8000f76:	b29b      	uxth	r3, r3
 8000f78:	82fb      	strh	r3, [r7, #22]
 8000f7a:	89fa      	ldrh	r2, [r7, #14]
 8000f7c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000f80:	429a      	cmp	r2, r3
 8000f82:	dae4      	bge.n	8000f4e <LCD_Draw_SShape_Fill+0x46>
		{
			LCD_Draw_Vertical_Line(x, y, length, color2);
			LCD_Draw_Vertical_Line(x-15, y+15, length, color2);
		}
	}
}
 8000f84:	e01a      	b.n	8000fbc <LCD_Draw_SShape_Fill+0xb4>
			LCD_Draw_Vertical_Line(x, y, length, color2);
 8000f86:	8af8      	ldrh	r0, [r7, #22]
 8000f88:	8abb      	ldrh	r3, [r7, #20]
 8000f8a:	8a7a      	ldrh	r2, [r7, #18]
 8000f8c:	8979      	ldrh	r1, [r7, #10]
 8000f8e:	f000 f844 	bl	800101a <LCD_Draw_Vertical_Line>
			LCD_Draw_Vertical_Line(x-15, y+15, length, color2);
 8000f92:	8afb      	ldrh	r3, [r7, #22]
 8000f94:	3b0f      	subs	r3, #15
 8000f96:	b298      	uxth	r0, r3
 8000f98:	897b      	ldrh	r3, [r7, #10]
 8000f9a:	330f      	adds	r3, #15
 8000f9c:	b299      	uxth	r1, r3
 8000f9e:	8abb      	ldrh	r3, [r7, #20]
 8000fa0:	8a7a      	ldrh	r2, [r7, #18]
 8000fa2:	f000 f83a 	bl	800101a <LCD_Draw_Vertical_Line>
		for(; x<(width+1); x++)
 8000fa6:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000faa:	b29b      	uxth	r3, r3
 8000fac:	3301      	adds	r3, #1
 8000fae:	b29b      	uxth	r3, r3
 8000fb0:	82fb      	strh	r3, [r7, #22]
 8000fb2:	8a3a      	ldrh	r2, [r7, #16]
 8000fb4:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000fb8:	429a      	cmp	r2, r3
 8000fba:	dae4      	bge.n	8000f86 <LCD_Draw_SShape_Fill+0x7e>
}
 8000fbc:	bf00      	nop
 8000fbe:	371c      	adds	r7, #28
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	bd90      	pop	{r4, r7, pc}

08000fc4 <LCD_Draw_Platform_Fill>:
void LCD_Draw_Platform_Fill(uint16_t Xpos, uint16_t Ypos, uint16_t color)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b086      	sub	sp, #24
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	4603      	mov	r3, r0
 8000fcc:	80fb      	strh	r3, [r7, #6]
 8000fce:	460b      	mov	r3, r1
 8000fd0:	80bb      	strh	r3, [r7, #4]
 8000fd2:	4613      	mov	r3, r2
 8000fd4:	807b      	strh	r3, [r7, #2]
	uint16_t color2 = color;
 8000fd6:	887b      	ldrh	r3, [r7, #2]
 8000fd8:	82bb      	strh	r3, [r7, #20]
		uint16_t length = 20;
 8000fda:	2314      	movs	r3, #20
 8000fdc:	827b      	strh	r3, [r7, #18]
		int16_t x = Xpos;
 8000fde:	88fb      	ldrh	r3, [r7, #6]
 8000fe0:	82fb      	strh	r3, [r7, #22]
		uint16_t width = x+240;
 8000fe2:	8afb      	ldrh	r3, [r7, #22]
 8000fe4:	33f0      	adds	r3, #240	@ 0xf0
 8000fe6:	823b      	strh	r3, [r7, #16]
		uint16_t y = Ypos;
 8000fe8:	88bb      	ldrh	r3, [r7, #4]
 8000fea:	81fb      	strh	r3, [r7, #14]
	    for(; x<(width+1); x++)
 8000fec:	e00b      	b.n	8001006 <LCD_Draw_Platform_Fill+0x42>
	    {
	       LCD_Draw_Vertical_Line(x, y, length, color2);
 8000fee:	8af8      	ldrh	r0, [r7, #22]
 8000ff0:	8abb      	ldrh	r3, [r7, #20]
 8000ff2:	8a7a      	ldrh	r2, [r7, #18]
 8000ff4:	89f9      	ldrh	r1, [r7, #14]
 8000ff6:	f000 f810 	bl	800101a <LCD_Draw_Vertical_Line>
	    for(; x<(width+1); x++)
 8000ffa:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000ffe:	b29b      	uxth	r3, r3
 8001000:	3301      	adds	r3, #1
 8001002:	b29b      	uxth	r3, r3
 8001004:	82fb      	strh	r3, [r7, #22]
 8001006:	8a3a      	ldrh	r2, [r7, #16]
 8001008:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800100c:	429a      	cmp	r2, r3
 800100e:	daee      	bge.n	8000fee <LCD_Draw_Platform_Fill+0x2a>
	    }
}
 8001010:	bf00      	nop
 8001012:	bf00      	nop
 8001014:	3718      	adds	r7, #24
 8001016:	46bd      	mov	sp, r7
 8001018:	bd80      	pop	{r7, pc}

0800101a <LCD_Draw_Vertical_Line>:
void LCD_Draw_Vertical_Line(uint16_t x, uint16_t y, uint16_t len, uint16_t color)
{
 800101a:	b590      	push	{r4, r7, lr}
 800101c:	b085      	sub	sp, #20
 800101e:	af00      	add	r7, sp, #0
 8001020:	4604      	mov	r4, r0
 8001022:	4608      	mov	r0, r1
 8001024:	4611      	mov	r1, r2
 8001026:	461a      	mov	r2, r3
 8001028:	4623      	mov	r3, r4
 800102a:	80fb      	strh	r3, [r7, #6]
 800102c:	4603      	mov	r3, r0
 800102e:	80bb      	strh	r3, [r7, #4]
 8001030:	460b      	mov	r3, r1
 8001032:	807b      	strh	r3, [r7, #2]
 8001034:	4613      	mov	r3, r2
 8001036:	803b      	strh	r3, [r7, #0]
  for (uint16_t i = 0; i < len; i++)
 8001038:	2300      	movs	r3, #0
 800103a:	81fb      	strh	r3, [r7, #14]
 800103c:	e00b      	b.n	8001056 <LCD_Draw_Vertical_Line+0x3c>
  {
	  LCD_Draw_Pixel(x, i+y, color);
 800103e:	89fa      	ldrh	r2, [r7, #14]
 8001040:	88bb      	ldrh	r3, [r7, #4]
 8001042:	4413      	add	r3, r2
 8001044:	b299      	uxth	r1, r3
 8001046:	883a      	ldrh	r2, [r7, #0]
 8001048:	88fb      	ldrh	r3, [r7, #6]
 800104a:	4618      	mov	r0, r3
 800104c:	f7ff fd4c 	bl	8000ae8 <LCD_Draw_Pixel>
  for (uint16_t i = 0; i < len; i++)
 8001050:	89fb      	ldrh	r3, [r7, #14]
 8001052:	3301      	adds	r3, #1
 8001054:	81fb      	strh	r3, [r7, #14]
 8001056:	89fa      	ldrh	r2, [r7, #14]
 8001058:	887b      	ldrh	r3, [r7, #2]
 800105a:	429a      	cmp	r2, r3
 800105c:	d3ef      	bcc.n	800103e <LCD_Draw_Vertical_Line+0x24>
  }
}
 800105e:	bf00      	nop
 8001060:	bf00      	nop
 8001062:	3714      	adds	r7, #20
 8001064:	46bd      	mov	sp, r7
 8001066:	bd90      	pop	{r4, r7, pc}

08001068 <LCD_Clear_Game>:
void LCD_Clear_Game(uint8_t LayerIndex, uint16_t Color, uint16_t height){
 8001068:	b480      	push	{r7}
 800106a:	b085      	sub	sp, #20
 800106c:	af00      	add	r7, sp, #0
 800106e:	4603      	mov	r3, r0
 8001070:	71fb      	strb	r3, [r7, #7]
 8001072:	460b      	mov	r3, r1
 8001074:	80bb      	strh	r3, [r7, #4]
 8001076:	4613      	mov	r3, r2
 8001078:	807b      	strh	r3, [r7, #2]
	if (LayerIndex == 0){
 800107a:	79fb      	ldrb	r3, [r7, #7]
 800107c:	2b00      	cmp	r3, #0
 800107e:	d113      	bne.n	80010a8 <LCD_Clear_Game+0x40>
			for (uint32_t i = 0; i < LCD_PIXEL_WIDTH * height; i++){
 8001080:	2300      	movs	r3, #0
 8001082:	60fb      	str	r3, [r7, #12]
 8001084:	e007      	b.n	8001096 <LCD_Clear_Game+0x2e>
				frameBuffer[i] = Color;
 8001086:	490b      	ldr	r1, [pc, #44]	@ (80010b4 <LCD_Clear_Game+0x4c>)
 8001088:	68fb      	ldr	r3, [r7, #12]
 800108a:	88ba      	ldrh	r2, [r7, #4]
 800108c:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
			for (uint32_t i = 0; i < LCD_PIXEL_WIDTH * height; i++){
 8001090:	68fb      	ldr	r3, [r7, #12]
 8001092:	3301      	adds	r3, #1
 8001094:	60fb      	str	r3, [r7, #12]
 8001096:	887a      	ldrh	r2, [r7, #2]
 8001098:	4613      	mov	r3, r2
 800109a:	011b      	lsls	r3, r3, #4
 800109c:	1a9b      	subs	r3, r3, r2
 800109e:	011b      	lsls	r3, r3, #4
 80010a0:	461a      	mov	r2, r3
 80010a2:	68fb      	ldr	r3, [r7, #12]
 80010a4:	4293      	cmp	r3, r2
 80010a6:	d3ee      	bcc.n	8001086 <LCD_Clear_Game+0x1e>
			}
		}
}
 80010a8:	bf00      	nop
 80010aa:	3714      	adds	r7, #20
 80010ac:	46bd      	mov	sp, r7
 80010ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b2:	4770      	bx	lr
 80010b4:	2000018c 	.word	0x2000018c

080010b8 <LCD_Clear>:
void LCD_Clear(uint8_t LayerIndex, uint16_t Color)
{
 80010b8:	b480      	push	{r7}
 80010ba:	b085      	sub	sp, #20
 80010bc:	af00      	add	r7, sp, #0
 80010be:	4603      	mov	r3, r0
 80010c0:	460a      	mov	r2, r1
 80010c2:	71fb      	strb	r3, [r7, #7]
 80010c4:	4613      	mov	r3, r2
 80010c6:	80bb      	strh	r3, [r7, #4]
	if (LayerIndex == 0){
 80010c8:	79fb      	ldrb	r3, [r7, #7]
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d10e      	bne.n	80010ec <LCD_Clear+0x34>
		for (uint32_t i = 0; i < LCD_PIXEL_WIDTH * LCD_PIXEL_HEIGHT; i++){
 80010ce:	2300      	movs	r3, #0
 80010d0:	60fb      	str	r3, [r7, #12]
 80010d2:	e007      	b.n	80010e4 <LCD_Clear+0x2c>
			frameBuffer[i] = Color;
 80010d4:	4908      	ldr	r1, [pc, #32]	@ (80010f8 <LCD_Clear+0x40>)
 80010d6:	68fb      	ldr	r3, [r7, #12]
 80010d8:	88ba      	ldrh	r2, [r7, #4]
 80010da:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		for (uint32_t i = 0; i < LCD_PIXEL_WIDTH * LCD_PIXEL_HEIGHT; i++){
 80010de:	68fb      	ldr	r3, [r7, #12]
 80010e0:	3301      	adds	r3, #1
 80010e2:	60fb      	str	r3, [r7, #12]
 80010e4:	68fb      	ldr	r3, [r7, #12]
 80010e6:	f5b3 3f96 	cmp.w	r3, #76800	@ 0x12c00
 80010ea:	d3f3      	bcc.n	80010d4 <LCD_Clear+0x1c>
		}
	}
  // TODO: Add more Layers if needed
}
 80010ec:	bf00      	nop
 80010ee:	3714      	adds	r7, #20
 80010f0:	46bd      	mov	sp, r7
 80010f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f6:	4770      	bx	lr
 80010f8:	2000018c 	.word	0x2000018c

080010fc <LCD_SetTextColor>:

//This was taken and adapted from stm32's mcu code
void LCD_SetTextColor(uint16_t Color)
{
 80010fc:	b480      	push	{r7}
 80010fe:	b083      	sub	sp, #12
 8001100:	af00      	add	r7, sp, #0
 8001102:	4603      	mov	r3, r0
 8001104:	80fb      	strh	r3, [r7, #6]
  CurrentTextColor = Color;
 8001106:	4a04      	ldr	r2, [pc, #16]	@ (8001118 <LCD_SetTextColor+0x1c>)
 8001108:	88fb      	ldrh	r3, [r7, #6]
 800110a:	8013      	strh	r3, [r2, #0]
}
 800110c:	bf00      	nop
 800110e:	370c      	adds	r7, #12
 8001110:	46bd      	mov	sp, r7
 8001112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001116:	4770      	bx	lr
 8001118:	20000000 	.word	0x20000000

0800111c <LCD_SetFont>:

//This was taken and adapted from stm32's mcu code
void LCD_SetFont(FONT_t *fonts)
{
 800111c:	b480      	push	{r7}
 800111e:	b083      	sub	sp, #12
 8001120:	af00      	add	r7, sp, #0
 8001122:	6078      	str	r0, [r7, #4]
  LCD_Currentfonts = fonts;
 8001124:	4a04      	ldr	r2, [pc, #16]	@ (8001138 <LCD_SetFont+0x1c>)
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	6013      	str	r3, [r2, #0]
}
 800112a:	bf00      	nop
 800112c:	370c      	adds	r7, #12
 800112e:	46bd      	mov	sp, r7
 8001130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001134:	4770      	bx	lr
 8001136:	bf00      	nop
 8001138:	20000188 	.word	0x20000188

0800113c <LCD_Draw_Char>:

//This was taken and adapted from stm32's mcu code
void LCD_Draw_Char(uint16_t Xpos, uint16_t Ypos, const uint16_t *c)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	b084      	sub	sp, #16
 8001140:	af00      	add	r7, sp, #0
 8001142:	4603      	mov	r3, r0
 8001144:	603a      	str	r2, [r7, #0]
 8001146:	80fb      	strh	r3, [r7, #6]
 8001148:	460b      	mov	r3, r1
 800114a:	80bb      	strh	r3, [r7, #4]
  uint32_t index = 0, counter = 0;
 800114c:	2300      	movs	r3, #0
 800114e:	60fb      	str	r3, [r7, #12]
 8001150:	2300      	movs	r3, #0
 8001152:	60bb      	str	r3, [r7, #8]
  for(index = 0; index < LCD_Currentfonts->Height; index++)
 8001154:	2300      	movs	r3, #0
 8001156:	60fb      	str	r3, [r7, #12]
 8001158:	e04c      	b.n	80011f4 <LCD_Draw_Char+0xb8>
  {
    for(counter = 0; counter < LCD_Currentfonts->Width; counter++)
 800115a:	2300      	movs	r3, #0
 800115c:	60bb      	str	r3, [r7, #8]
 800115e:	e03f      	b.n	80011e0 <LCD_Draw_Char+0xa4>
    {
      if((((c[index] & ((0x80 << ((LCD_Currentfonts->Width / 12 ) * 8 ) ) >> counter)) == 0x00) && (LCD_Currentfonts->Width <= 12)) || (((c[index] & (0x1 << counter)) == 0x00)&&(LCD_Currentfonts->Width > 12 )))
 8001160:	68fb      	ldr	r3, [r7, #12]
 8001162:	005b      	lsls	r3, r3, #1
 8001164:	683a      	ldr	r2, [r7, #0]
 8001166:	4413      	add	r3, r2
 8001168:	881b      	ldrh	r3, [r3, #0]
 800116a:	4619      	mov	r1, r3
 800116c:	4b27      	ldr	r3, [pc, #156]	@ (800120c <LCD_Draw_Char+0xd0>)
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	889b      	ldrh	r3, [r3, #4]
 8001172:	4a27      	ldr	r2, [pc, #156]	@ (8001210 <LCD_Draw_Char+0xd4>)
 8001174:	fba2 2303 	umull	r2, r3, r2, r3
 8001178:	08db      	lsrs	r3, r3, #3
 800117a:	b29b      	uxth	r3, r3
 800117c:	00db      	lsls	r3, r3, #3
 800117e:	2280      	movs	r2, #128	@ 0x80
 8001180:	409a      	lsls	r2, r3
 8001182:	68bb      	ldr	r3, [r7, #8]
 8001184:	fa42 f303 	asr.w	r3, r2, r3
 8001188:	400b      	ands	r3, r1
 800118a:	2b00      	cmp	r3, #0
 800118c:	d104      	bne.n	8001198 <LCD_Draw_Char+0x5c>
 800118e:	4b1f      	ldr	r3, [pc, #124]	@ (800120c <LCD_Draw_Char+0xd0>)
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	889b      	ldrh	r3, [r3, #4]
 8001194:	2b0c      	cmp	r3, #12
 8001196:	d920      	bls.n	80011da <LCD_Draw_Char+0x9e>
 8001198:	68fb      	ldr	r3, [r7, #12]
 800119a:	005b      	lsls	r3, r3, #1
 800119c:	683a      	ldr	r2, [r7, #0]
 800119e:	4413      	add	r3, r2
 80011a0:	881b      	ldrh	r3, [r3, #0]
 80011a2:	461a      	mov	r2, r3
 80011a4:	68bb      	ldr	r3, [r7, #8]
 80011a6:	fa42 f303 	asr.w	r3, r2, r3
 80011aa:	f003 0301 	and.w	r3, r3, #1
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d104      	bne.n	80011bc <LCD_Draw_Char+0x80>
 80011b2:	4b16      	ldr	r3, [pc, #88]	@ (800120c <LCD_Draw_Char+0xd0>)
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	889b      	ldrh	r3, [r3, #4]
 80011b8:	2b0c      	cmp	r3, #12
 80011ba:	d80e      	bhi.n	80011da <LCD_Draw_Char+0x9e>
      {
         //Background If want to overrite text under then add a set color here
      }
      else
      {
    	  LCD_Draw_Pixel(counter + Xpos,index + Ypos,CurrentTextColor);
 80011bc:	68bb      	ldr	r3, [r7, #8]
 80011be:	b29a      	uxth	r2, r3
 80011c0:	88fb      	ldrh	r3, [r7, #6]
 80011c2:	4413      	add	r3, r2
 80011c4:	b298      	uxth	r0, r3
 80011c6:	68fb      	ldr	r3, [r7, #12]
 80011c8:	b29a      	uxth	r2, r3
 80011ca:	88bb      	ldrh	r3, [r7, #4]
 80011cc:	4413      	add	r3, r2
 80011ce:	b29b      	uxth	r3, r3
 80011d0:	4a10      	ldr	r2, [pc, #64]	@ (8001214 <LCD_Draw_Char+0xd8>)
 80011d2:	8812      	ldrh	r2, [r2, #0]
 80011d4:	4619      	mov	r1, r3
 80011d6:	f7ff fc87 	bl	8000ae8 <LCD_Draw_Pixel>
    for(counter = 0; counter < LCD_Currentfonts->Width; counter++)
 80011da:	68bb      	ldr	r3, [r7, #8]
 80011dc:	3301      	adds	r3, #1
 80011de:	60bb      	str	r3, [r7, #8]
 80011e0:	4b0a      	ldr	r3, [pc, #40]	@ (800120c <LCD_Draw_Char+0xd0>)
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	889b      	ldrh	r3, [r3, #4]
 80011e6:	461a      	mov	r2, r3
 80011e8:	68bb      	ldr	r3, [r7, #8]
 80011ea:	4293      	cmp	r3, r2
 80011ec:	d3b8      	bcc.n	8001160 <LCD_Draw_Char+0x24>
  for(index = 0; index < LCD_Currentfonts->Height; index++)
 80011ee:	68fb      	ldr	r3, [r7, #12]
 80011f0:	3301      	adds	r3, #1
 80011f2:	60fb      	str	r3, [r7, #12]
 80011f4:	4b05      	ldr	r3, [pc, #20]	@ (800120c <LCD_Draw_Char+0xd0>)
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	88db      	ldrh	r3, [r3, #6]
 80011fa:	461a      	mov	r2, r3
 80011fc:	68fb      	ldr	r3, [r7, #12]
 80011fe:	4293      	cmp	r3, r2
 8001200:	d3ab      	bcc.n	800115a <LCD_Draw_Char+0x1e>
      }
    }
  }
}
 8001202:	bf00      	nop
 8001204:	bf00      	nop
 8001206:	3710      	adds	r7, #16
 8001208:	46bd      	mov	sp, r7
 800120a:	bd80      	pop	{r7, pc}
 800120c:	20000188 	.word	0x20000188
 8001210:	aaaaaaab 	.word	0xaaaaaaab
 8001214:	20000000 	.word	0x20000000

08001218 <LCD_DisplayChar>:

//This was taken and adapted from stm32's mcu code
void LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	b082      	sub	sp, #8
 800121c:	af00      	add	r7, sp, #0
 800121e:	4603      	mov	r3, r0
 8001220:	80fb      	strh	r3, [r7, #6]
 8001222:	460b      	mov	r3, r1
 8001224:	80bb      	strh	r3, [r7, #4]
 8001226:	4613      	mov	r3, r2
 8001228:	70fb      	strb	r3, [r7, #3]
  Ascii -= 32;
 800122a:	78fb      	ldrb	r3, [r7, #3]
 800122c:	3b20      	subs	r3, #32
 800122e:	70fb      	strb	r3, [r7, #3]
  LCD_Draw_Char(Xpos, Ypos, &LCD_Currentfonts->table[Ascii * LCD_Currentfonts->Height]);
 8001230:	4b09      	ldr	r3, [pc, #36]	@ (8001258 <LCD_DisplayChar+0x40>)
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	681a      	ldr	r2, [r3, #0]
 8001236:	78fb      	ldrb	r3, [r7, #3]
 8001238:	4907      	ldr	r1, [pc, #28]	@ (8001258 <LCD_DisplayChar+0x40>)
 800123a:	6809      	ldr	r1, [r1, #0]
 800123c:	88c9      	ldrh	r1, [r1, #6]
 800123e:	fb01 f303 	mul.w	r3, r1, r3
 8001242:	005b      	lsls	r3, r3, #1
 8001244:	441a      	add	r2, r3
 8001246:	88b9      	ldrh	r1, [r7, #4]
 8001248:	88fb      	ldrh	r3, [r7, #6]
 800124a:	4618      	mov	r0, r3
 800124c:	f7ff ff76 	bl	800113c <LCD_Draw_Char>
}
 8001250:	bf00      	nop
 8001252:	3708      	adds	r7, #8
 8001254:	46bd      	mov	sp, r7
 8001256:	bd80      	pop	{r7, pc}
 8001258:	20000188 	.word	0x20000188

0800125c <LCD_Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void LCD_Error_Handler(void)
{
 800125c:	b480      	push	{r7}
 800125e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001260:	b672      	cpsid	i
}
 8001262:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001264:	bf00      	nop
 8001266:	e7fd      	b.n	8001264 <LCD_Error_Handler+0x8>

08001268 <InitializeLCDTouch>:
// Touch Functionality   //

#if COMPILE_TOUCH_FUNCTIONS == 1

void InitializeLCDTouch(void)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	af00      	add	r7, sp, #0
  if(STMPE811_Init() != STMPE811_State_Ok)
 800126c:	f001 fde8 	bl	8002e40 <STMPE811_Init>
 8001270:	4603      	mov	r3, r0
 8001272:	2b02      	cmp	r3, #2
 8001274:	d001      	beq.n	800127a <InitializeLCDTouch+0x12>
  {
	 for(;;); // Hang code due to error in initialzation
 8001276:	bf00      	nop
 8001278:	e7fd      	b.n	8001276 <InitializeLCDTouch+0xe>
  }
}
 800127a:	bf00      	nop
 800127c:	bd80      	pop	{r7, pc}

0800127e <DetermineTouchPosition>:
{
	return STMPE811_ReadTouch(touchStruct);
}

void DetermineTouchPosition(STMPE811_TouchData * touchStruct)
{
 800127e:	b580      	push	{r7, lr}
 8001280:	b082      	sub	sp, #8
 8001282:	af00      	add	r7, sp, #0
 8001284:	6078      	str	r0, [r7, #4]
	STMPE811_DetermineTouchPosition(touchStruct);
 8001286:	6878      	ldr	r0, [r7, #4]
 8001288:	f001 fec4 	bl	8003014 <STMPE811_DetermineTouchPosition>
}
 800128c:	bf00      	nop
 800128e:	3708      	adds	r7, #8
 8001290:	46bd      	mov	sp, r7
 8001292:	bd80      	pop	{r7, pc}

08001294 <ReadRegisterFromTouchModule>:

uint8_t ReadRegisterFromTouchModule(uint8_t RegToRead)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	b082      	sub	sp, #8
 8001298:	af00      	add	r7, sp, #0
 800129a:	4603      	mov	r3, r0
 800129c:	71fb      	strb	r3, [r7, #7]
	return STMPE811_Read(RegToRead);
 800129e:	79fb      	ldrb	r3, [r7, #7]
 80012a0:	4618      	mov	r0, r3
 80012a2:	f001 fe94 	bl	8002fce <STMPE811_Read>
 80012a6:	4603      	mov	r3, r0
}
 80012a8:	4618      	mov	r0, r3
 80012aa:	3708      	adds	r7, #8
 80012ac:	46bd      	mov	sp, r7
 80012ae:	bd80      	pop	{r7, pc}

080012b0 <WriteDataToTouchModule>:

void WriteDataToTouchModule(uint8_t RegToWrite, uint8_t writeData)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b082      	sub	sp, #8
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	4603      	mov	r3, r0
 80012b8:	460a      	mov	r2, r1
 80012ba:	71fb      	strb	r3, [r7, #7]
 80012bc:	4613      	mov	r3, r2
 80012be:	71bb      	strb	r3, [r7, #6]
	STMPE811_Write(RegToWrite, writeData);
 80012c0:	79ba      	ldrb	r2, [r7, #6]
 80012c2:	79fb      	ldrb	r3, [r7, #7]
 80012c4:	4611      	mov	r1, r2
 80012c6:	4618      	mov	r0, r3
 80012c8:	f001 fe92 	bl	8002ff0 <STMPE811_Write>
}
 80012cc:	bf00      	nop
 80012ce:	3708      	adds	r7, #8
 80012d0:	46bd      	mov	sp, r7
 80012d2:	bd80      	pop	{r7, pc}

080012d4 <getScheduledEvents>:
#include "Scheduler.h"
static uint32_t scheduledEvents;
uint32_t getScheduledEvents(){
 80012d4:	b480      	push	{r7}
 80012d6:	af00      	add	r7, sp, #0
	return scheduledEvents;
 80012d8:	4b03      	ldr	r3, [pc, #12]	@ (80012e8 <getScheduledEvents+0x14>)
 80012da:	681b      	ldr	r3, [r3, #0]
}
 80012dc:	4618      	mov	r0, r3
 80012de:	46bd      	mov	sp, r7
 80012e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e4:	4770      	bx	lr
 80012e6:	bf00      	nop
 80012e8:	2002598c 	.word	0x2002598c

080012ec <addSchedulerEvent>:

void addSchedulerEvent(uint32_t eventToBeScheduled){
 80012ec:	b480      	push	{r7}
 80012ee:	b083      	sub	sp, #12
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	6078      	str	r0, [r7, #4]
	scheduledEvents |= eventToBeScheduled;
 80012f4:	4b05      	ldr	r3, [pc, #20]	@ (800130c <addSchedulerEvent+0x20>)
 80012f6:	681a      	ldr	r2, [r3, #0]
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	4313      	orrs	r3, r2
 80012fc:	4a03      	ldr	r2, [pc, #12]	@ (800130c <addSchedulerEvent+0x20>)
 80012fe:	6013      	str	r3, [r2, #0]
}
 8001300:	bf00      	nop
 8001302:	370c      	adds	r7, #12
 8001304:	46bd      	mov	sp, r7
 8001306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130a:	4770      	bx	lr
 800130c:	2002598c 	.word	0x2002598c

08001310 <removeSchedulerEvent>:

void removeSchedulerEvent(uint32_t eventToBeRemoved){
 8001310:	b480      	push	{r7}
 8001312:	b083      	sub	sp, #12
 8001314:	af00      	add	r7, sp, #0
 8001316:	6078      	str	r0, [r7, #4]
	scheduledEvents &= ~(eventToBeRemoved);
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	43da      	mvns	r2, r3
 800131c:	4b05      	ldr	r3, [pc, #20]	@ (8001334 <removeSchedulerEvent+0x24>)
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	4013      	ands	r3, r2
 8001322:	4a04      	ldr	r2, [pc, #16]	@ (8001334 <removeSchedulerEvent+0x24>)
 8001324:	6013      	str	r3, [r2, #0]
}
 8001326:	bf00      	nop
 8001328:	370c      	adds	r7, #12
 800132a:	46bd      	mov	sp, r7
 800132c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001330:	4770      	bx	lr
 8001332:	bf00      	nop
 8001334:	2002598c 	.word	0x2002598c

08001338 <ili9341_Init>:
  * @brief  Power on the LCD.
  * @param  None
  * @retval None
  */
void ili9341_Init(void)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	af00      	add	r7, sp, #0
  /* Initialize ILI9341 low level bus layer ----------------------------------*/
  LCD_IO_Init();
 800133c:	f000 f9fe 	bl	800173c <LCD_IO_Init>

  /* Configure LCD */
  ili9341_Write_Reg(0xCA);
 8001340:	20ca      	movs	r0, #202	@ 0xca
 8001342:	f000 f943 	bl	80015cc <ili9341_Write_Reg>
  ili9341_Send_Data(0xC3);				//param 1
 8001346:	20c3      	movs	r0, #195	@ 0xc3
 8001348:	f000 f94d 	bl	80015e6 <ili9341_Send_Data>
  ili9341_Send_Data(0x08);				//param 2
 800134c:	2008      	movs	r0, #8
 800134e:	f000 f94a 	bl	80015e6 <ili9341_Send_Data>
  ili9341_Send_Data(0x50);				//param 3
 8001352:	2050      	movs	r0, #80	@ 0x50
 8001354:	f000 f947 	bl	80015e6 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWERB); //CF
 8001358:	20cf      	movs	r0, #207	@ 0xcf
 800135a:	f000 f937 	bl	80015cc <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);				//param 1
 800135e:	2000      	movs	r0, #0
 8001360:	f000 f941 	bl	80015e6 <ili9341_Send_Data>
  ili9341_Send_Data(0xC1);				//param 2
 8001364:	20c1      	movs	r0, #193	@ 0xc1
 8001366:	f000 f93e 	bl	80015e6 <ili9341_Send_Data>
  ili9341_Send_Data(0x30);				//param 3
 800136a:	2030      	movs	r0, #48	@ 0x30
 800136c:	f000 f93b 	bl	80015e6 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWER_SEQ); //ED
 8001370:	20ed      	movs	r0, #237	@ 0xed
 8001372:	f000 f92b 	bl	80015cc <ili9341_Write_Reg>
  ili9341_Send_Data(0x64);
 8001376:	2064      	movs	r0, #100	@ 0x64
 8001378:	f000 f935 	bl	80015e6 <ili9341_Send_Data>
  ili9341_Send_Data(0x03);
 800137c:	2003      	movs	r0, #3
 800137e:	f000 f932 	bl	80015e6 <ili9341_Send_Data>
  ili9341_Send_Data(0x12);
 8001382:	2012      	movs	r0, #18
 8001384:	f000 f92f 	bl	80015e6 <ili9341_Send_Data>
  ili9341_Send_Data(0x81);
 8001388:	2081      	movs	r0, #129	@ 0x81
 800138a:	f000 f92c 	bl	80015e6 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DTCA);
 800138e:	20e8      	movs	r0, #232	@ 0xe8
 8001390:	f000 f91c 	bl	80015cc <ili9341_Write_Reg>
  ili9341_Send_Data(0x85);
 8001394:	2085      	movs	r0, #133	@ 0x85
 8001396:	f000 f926 	bl	80015e6 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 800139a:	2000      	movs	r0, #0
 800139c:	f000 f923 	bl	80015e6 <ili9341_Send_Data>
  ili9341_Send_Data(0x78);
 80013a0:	2078      	movs	r0, #120	@ 0x78
 80013a2:	f000 f920 	bl	80015e6 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWERA);
 80013a6:	20cb      	movs	r0, #203	@ 0xcb
 80013a8:	f000 f910 	bl	80015cc <ili9341_Write_Reg>
  ili9341_Send_Data(0x39);
 80013ac:	2039      	movs	r0, #57	@ 0x39
 80013ae:	f000 f91a 	bl	80015e6 <ili9341_Send_Data>
  ili9341_Send_Data(0x2C);
 80013b2:	202c      	movs	r0, #44	@ 0x2c
 80013b4:	f000 f917 	bl	80015e6 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 80013b8:	2000      	movs	r0, #0
 80013ba:	f000 f914 	bl	80015e6 <ili9341_Send_Data>
  ili9341_Send_Data(0x34);
 80013be:	2034      	movs	r0, #52	@ 0x34
 80013c0:	f000 f911 	bl	80015e6 <ili9341_Send_Data>
  ili9341_Send_Data(0x02);
 80013c4:	2002      	movs	r0, #2
 80013c6:	f000 f90e 	bl	80015e6 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_PRC);
 80013ca:	20f7      	movs	r0, #247	@ 0xf7
 80013cc:	f000 f8fe 	bl	80015cc <ili9341_Write_Reg>
  ili9341_Send_Data(0x20);
 80013d0:	2020      	movs	r0, #32
 80013d2:	f000 f908 	bl	80015e6 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DTCB);
 80013d6:	20ea      	movs	r0, #234	@ 0xea
 80013d8:	f000 f8f8 	bl	80015cc <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 80013dc:	2000      	movs	r0, #0
 80013de:	f000 f902 	bl	80015e6 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 80013e2:	2000      	movs	r0, #0
 80013e4:	f000 f8ff 	bl	80015e6 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_FRMCTR1);
 80013e8:	20b1      	movs	r0, #177	@ 0xb1
 80013ea:	f000 f8ef 	bl	80015cc <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 80013ee:	2000      	movs	r0, #0
 80013f0:	f000 f8f9 	bl	80015e6 <ili9341_Send_Data>
  ili9341_Send_Data(0x1B);
 80013f4:	201b      	movs	r0, #27
 80013f6:	f000 f8f6 	bl	80015e6 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DFC);
 80013fa:	20b6      	movs	r0, #182	@ 0xb6
 80013fc:	f000 f8e6 	bl	80015cc <ili9341_Write_Reg>
  ili9341_Send_Data(0x0A);
 8001400:	200a      	movs	r0, #10
 8001402:	f000 f8f0 	bl	80015e6 <ili9341_Send_Data>
  ili9341_Send_Data(0xA2);
 8001406:	20a2      	movs	r0, #162	@ 0xa2
 8001408:	f000 f8ed 	bl	80015e6 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWER1);
 800140c:	20c0      	movs	r0, #192	@ 0xc0
 800140e:	f000 f8dd 	bl	80015cc <ili9341_Write_Reg>
  ili9341_Send_Data(0x10);
 8001412:	2010      	movs	r0, #16
 8001414:	f000 f8e7 	bl	80015e6 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWER2);
 8001418:	20c1      	movs	r0, #193	@ 0xc1
 800141a:	f000 f8d7 	bl	80015cc <ili9341_Write_Reg>
  ili9341_Send_Data(0x10);
 800141e:	2010      	movs	r0, #16
 8001420:	f000 f8e1 	bl	80015e6 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_VCOM1);
 8001424:	20c5      	movs	r0, #197	@ 0xc5
 8001426:	f000 f8d1 	bl	80015cc <ili9341_Write_Reg>
  ili9341_Send_Data(0x45);
 800142a:	2045      	movs	r0, #69	@ 0x45
 800142c:	f000 f8db 	bl	80015e6 <ili9341_Send_Data>
  ili9341_Send_Data(0x15);
 8001430:	2015      	movs	r0, #21
 8001432:	f000 f8d8 	bl	80015e6 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_VCOM2);
 8001436:	20c7      	movs	r0, #199	@ 0xc7
 8001438:	f000 f8c8 	bl	80015cc <ili9341_Write_Reg>
  ili9341_Send_Data(0x90);
 800143c:	2090      	movs	r0, #144	@ 0x90
 800143e:	f000 f8d2 	bl	80015e6 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_MAC);
 8001442:	2036      	movs	r0, #54	@ 0x36
 8001444:	f000 f8c2 	bl	80015cc <ili9341_Write_Reg>
  ili9341_Send_Data(0xC8);
 8001448:	20c8      	movs	r0, #200	@ 0xc8
 800144a:	f000 f8cc 	bl	80015e6 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_3GAMMA_EN);
 800144e:	20f2      	movs	r0, #242	@ 0xf2
 8001450:	f000 f8bc 	bl	80015cc <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8001454:	2000      	movs	r0, #0
 8001456:	f000 f8c6 	bl	80015e6 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_RGB_INTERFACE);
 800145a:	20b0      	movs	r0, #176	@ 0xb0
 800145c:	f000 f8b6 	bl	80015cc <ili9341_Write_Reg>
  ili9341_Send_Data(0xC2);
 8001460:	20c2      	movs	r0, #194	@ 0xc2
 8001462:	f000 f8c0 	bl	80015e6 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DFC);
 8001466:	20b6      	movs	r0, #182	@ 0xb6
 8001468:	f000 f8b0 	bl	80015cc <ili9341_Write_Reg>
  ili9341_Send_Data(0x0A);
 800146c:	200a      	movs	r0, #10
 800146e:	f000 f8ba 	bl	80015e6 <ili9341_Send_Data>
  ili9341_Send_Data(0xA7);
 8001472:	20a7      	movs	r0, #167	@ 0xa7
 8001474:	f000 f8b7 	bl	80015e6 <ili9341_Send_Data>
  ili9341_Send_Data(0x27);
 8001478:	2027      	movs	r0, #39	@ 0x27
 800147a:	f000 f8b4 	bl	80015e6 <ili9341_Send_Data>
  ili9341_Send_Data(0x04);
 800147e:	2004      	movs	r0, #4
 8001480:	f000 f8b1 	bl	80015e6 <ili9341_Send_Data>

  /* Colomn address set */
  ili9341_Write_Reg(LCD_COLUMN_ADDR);
 8001484:	202a      	movs	r0, #42	@ 0x2a
 8001486:	f000 f8a1 	bl	80015cc <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 800148a:	2000      	movs	r0, #0
 800148c:	f000 f8ab 	bl	80015e6 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8001490:	2000      	movs	r0, #0
 8001492:	f000 f8a8 	bl	80015e6 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8001496:	2000      	movs	r0, #0
 8001498:	f000 f8a5 	bl	80015e6 <ili9341_Send_Data>
  ili9341_Send_Data(0xEF);
 800149c:	20ef      	movs	r0, #239	@ 0xef
 800149e:	f000 f8a2 	bl	80015e6 <ili9341_Send_Data>

  /* Page address set */
  ili9341_Write_Reg(LCD_PAGE_ADDR);
 80014a2:	202b      	movs	r0, #43	@ 0x2b
 80014a4:	f000 f892 	bl	80015cc <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 80014a8:	2000      	movs	r0, #0
 80014aa:	f000 f89c 	bl	80015e6 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 80014ae:	2000      	movs	r0, #0
 80014b0:	f000 f899 	bl	80015e6 <ili9341_Send_Data>
  ili9341_Send_Data(0x01);
 80014b4:	2001      	movs	r0, #1
 80014b6:	f000 f896 	bl	80015e6 <ili9341_Send_Data>
  ili9341_Send_Data(0x3F);
 80014ba:	203f      	movs	r0, #63	@ 0x3f
 80014bc:	f000 f893 	bl	80015e6 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_INTERFACE);
 80014c0:	20f6      	movs	r0, #246	@ 0xf6
 80014c2:	f000 f883 	bl	80015cc <ili9341_Write_Reg>
  ili9341_Send_Data(0x01);
 80014c6:	2001      	movs	r0, #1
 80014c8:	f000 f88d 	bl	80015e6 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 80014cc:	2000      	movs	r0, #0
 80014ce:	f000 f88a 	bl	80015e6 <ili9341_Send_Data>
  ili9341_Send_Data(0x06);
 80014d2:	2006      	movs	r0, #6
 80014d4:	f000 f887 	bl	80015e6 <ili9341_Send_Data>

  ili9341_Write_Reg(LCD_GRAM);
 80014d8:	202c      	movs	r0, #44	@ 0x2c
 80014da:	f000 f877 	bl	80015cc <ili9341_Write_Reg>
  LCD_Delay(200);
 80014de:	20c8      	movs	r0, #200	@ 0xc8
 80014e0:	f000 f9e8 	bl	80018b4 <LCD_Delay>

  ili9341_Write_Reg(LCD_GAMMA);
 80014e4:	2026      	movs	r0, #38	@ 0x26
 80014e6:	f000 f871 	bl	80015cc <ili9341_Write_Reg>
  ili9341_Send_Data(0x01);
 80014ea:	2001      	movs	r0, #1
 80014ec:	f000 f87b 	bl	80015e6 <ili9341_Send_Data>

  ili9341_Write_Reg(LCD_PGAMMA);
 80014f0:	20e0      	movs	r0, #224	@ 0xe0
 80014f2:	f000 f86b 	bl	80015cc <ili9341_Write_Reg>
  ili9341_Send_Data(0x0F);
 80014f6:	200f      	movs	r0, #15
 80014f8:	f000 f875 	bl	80015e6 <ili9341_Send_Data>
  ili9341_Send_Data(0x29);
 80014fc:	2029      	movs	r0, #41	@ 0x29
 80014fe:	f000 f872 	bl	80015e6 <ili9341_Send_Data>
  ili9341_Send_Data(0x24);
 8001502:	2024      	movs	r0, #36	@ 0x24
 8001504:	f000 f86f 	bl	80015e6 <ili9341_Send_Data>
  ili9341_Send_Data(0x0C);
 8001508:	200c      	movs	r0, #12
 800150a:	f000 f86c 	bl	80015e6 <ili9341_Send_Data>
  ili9341_Send_Data(0x0E);
 800150e:	200e      	movs	r0, #14
 8001510:	f000 f869 	bl	80015e6 <ili9341_Send_Data>
  ili9341_Send_Data(0x09);
 8001514:	2009      	movs	r0, #9
 8001516:	f000 f866 	bl	80015e6 <ili9341_Send_Data>
  ili9341_Send_Data(0x4E);
 800151a:	204e      	movs	r0, #78	@ 0x4e
 800151c:	f000 f863 	bl	80015e6 <ili9341_Send_Data>
  ili9341_Send_Data(0x78);
 8001520:	2078      	movs	r0, #120	@ 0x78
 8001522:	f000 f860 	bl	80015e6 <ili9341_Send_Data>
  ili9341_Send_Data(0x3C);
 8001526:	203c      	movs	r0, #60	@ 0x3c
 8001528:	f000 f85d 	bl	80015e6 <ili9341_Send_Data>
  ili9341_Send_Data(0x09);
 800152c:	2009      	movs	r0, #9
 800152e:	f000 f85a 	bl	80015e6 <ili9341_Send_Data>
  ili9341_Send_Data(0x13);
 8001532:	2013      	movs	r0, #19
 8001534:	f000 f857 	bl	80015e6 <ili9341_Send_Data>
  ili9341_Send_Data(0x05);
 8001538:	2005      	movs	r0, #5
 800153a:	f000 f854 	bl	80015e6 <ili9341_Send_Data>
  ili9341_Send_Data(0x17);
 800153e:	2017      	movs	r0, #23
 8001540:	f000 f851 	bl	80015e6 <ili9341_Send_Data>
  ili9341_Send_Data(0x11);
 8001544:	2011      	movs	r0, #17
 8001546:	f000 f84e 	bl	80015e6 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 800154a:	2000      	movs	r0, #0
 800154c:	f000 f84b 	bl	80015e6 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_NGAMMA);
 8001550:	20e1      	movs	r0, #225	@ 0xe1
 8001552:	f000 f83b 	bl	80015cc <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8001556:	2000      	movs	r0, #0
 8001558:	f000 f845 	bl	80015e6 <ili9341_Send_Data>
  ili9341_Send_Data(0x16);
 800155c:	2016      	movs	r0, #22
 800155e:	f000 f842 	bl	80015e6 <ili9341_Send_Data>
  ili9341_Send_Data(0x1B);
 8001562:	201b      	movs	r0, #27
 8001564:	f000 f83f 	bl	80015e6 <ili9341_Send_Data>
  ili9341_Send_Data(0x04);
 8001568:	2004      	movs	r0, #4
 800156a:	f000 f83c 	bl	80015e6 <ili9341_Send_Data>
  ili9341_Send_Data(0x11);
 800156e:	2011      	movs	r0, #17
 8001570:	f000 f839 	bl	80015e6 <ili9341_Send_Data>
  ili9341_Send_Data(0x07);
 8001574:	2007      	movs	r0, #7
 8001576:	f000 f836 	bl	80015e6 <ili9341_Send_Data>
  ili9341_Send_Data(0x31);
 800157a:	2031      	movs	r0, #49	@ 0x31
 800157c:	f000 f833 	bl	80015e6 <ili9341_Send_Data>
  ili9341_Send_Data(0x33);
 8001580:	2033      	movs	r0, #51	@ 0x33
 8001582:	f000 f830 	bl	80015e6 <ili9341_Send_Data>
  ili9341_Send_Data(0x42);
 8001586:	2042      	movs	r0, #66	@ 0x42
 8001588:	f000 f82d 	bl	80015e6 <ili9341_Send_Data>
  ili9341_Send_Data(0x05);
 800158c:	2005      	movs	r0, #5
 800158e:	f000 f82a 	bl	80015e6 <ili9341_Send_Data>
  ili9341_Send_Data(0x0C);
 8001592:	200c      	movs	r0, #12
 8001594:	f000 f827 	bl	80015e6 <ili9341_Send_Data>
  ili9341_Send_Data(0x0A);
 8001598:	200a      	movs	r0, #10
 800159a:	f000 f824 	bl	80015e6 <ili9341_Send_Data>
  ili9341_Send_Data(0x28);
 800159e:	2028      	movs	r0, #40	@ 0x28
 80015a0:	f000 f821 	bl	80015e6 <ili9341_Send_Data>
  ili9341_Send_Data(0x2F);
 80015a4:	202f      	movs	r0, #47	@ 0x2f
 80015a6:	f000 f81e 	bl	80015e6 <ili9341_Send_Data>
  ili9341_Send_Data(0x0F);
 80015aa:	200f      	movs	r0, #15
 80015ac:	f000 f81b 	bl	80015e6 <ili9341_Send_Data>

  ili9341_Write_Reg(LCD_SLEEP_OUT);
 80015b0:	2011      	movs	r0, #17
 80015b2:	f000 f80b 	bl	80015cc <ili9341_Write_Reg>
  LCD_Delay(200);
 80015b6:	20c8      	movs	r0, #200	@ 0xc8
 80015b8:	f000 f97c 	bl	80018b4 <LCD_Delay>
  ili9341_Write_Reg(LCD_DISPLAY_ON);
 80015bc:	2029      	movs	r0, #41	@ 0x29
 80015be:	f000 f805 	bl	80015cc <ili9341_Write_Reg>
  /* GRAM start writing */
  ili9341_Write_Reg(LCD_GRAM);
 80015c2:	202c      	movs	r0, #44	@ 0x2c
 80015c4:	f000 f802 	bl	80015cc <ili9341_Write_Reg>
}
 80015c8:	bf00      	nop
 80015ca:	bd80      	pop	{r7, pc}

080015cc <ili9341_Write_Reg>:
  * @brief  Writes  to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_Write_Reg(uint8_t LCD_Reg)
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	b082      	sub	sp, #8
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	4603      	mov	r3, r0
 80015d4:	71fb      	strb	r3, [r7, #7]
  LCD_IO_WriteReg(LCD_Reg);
 80015d6:	79fb      	ldrb	r3, [r7, #7]
 80015d8:	4618      	mov	r0, r3
 80015da:	f000 f949 	bl	8001870 <LCD_IO_WriteReg>
}
 80015de:	bf00      	nop
 80015e0:	3708      	adds	r7, #8
 80015e2:	46bd      	mov	sp, r7
 80015e4:	bd80      	pop	{r7, pc}

080015e6 <ili9341_Send_Data>:
  * @brief  Writes data to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_Send_Data(uint16_t RegValue)
{
 80015e6:	b580      	push	{r7, lr}
 80015e8:	b082      	sub	sp, #8
 80015ea:	af00      	add	r7, sp, #0
 80015ec:	4603      	mov	r3, r0
 80015ee:	80fb      	strh	r3, [r7, #6]
  LCD_IO_WriteData(RegValue);
 80015f0:	88fb      	ldrh	r3, [r7, #6]
 80015f2:	4618      	mov	r0, r3
 80015f4:	f000 f91a 	bl	800182c <LCD_IO_WriteData>
}
 80015f8:	bf00      	nop
 80015fa:	3708      	adds	r7, #8
 80015fc:	46bd      	mov	sp, r7
 80015fe:	bd80      	pop	{r7, pc}

08001600 <SPI_Init>:

/**
  * @brief  SPI Bus initialization
  */
static void SPI_Init(void)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	af00      	add	r7, sp, #0
  if(HAL_SPI_GetState(&SpiHandle) == HAL_SPI_STATE_RESET)
 8001604:	4819      	ldr	r0, [pc, #100]	@ (800166c <SPI_Init+0x6c>)
 8001606:	f005 f948 	bl	800689a <HAL_SPI_GetState>
 800160a:	4603      	mov	r3, r0
 800160c:	2b00      	cmp	r3, #0
 800160e:	d12b      	bne.n	8001668 <SPI_Init+0x68>
  {
    /* SPI configuration -----------------------------------------------------*/
    SpiHandle.Instance = DISCOVERY_SPI;
 8001610:	4b16      	ldr	r3, [pc, #88]	@ (800166c <SPI_Init+0x6c>)
 8001612:	4a17      	ldr	r2, [pc, #92]	@ (8001670 <SPI_Init+0x70>)
 8001614:	601a      	str	r2, [r3, #0]
       to verify these constraints:
       - ILI9341 LCD SPI interface max baudrate is 10MHz for write and 6.66MHz for read
       - l3gd20 SPI interface max baudrate is 10MHz for write/read
       - PCLK2 frequency is set to 90 MHz
    */
    SpiHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001616:	4b15      	ldr	r3, [pc, #84]	@ (800166c <SPI_Init+0x6c>)
 8001618:	2218      	movs	r2, #24
 800161a:	61da      	str	r2, [r3, #28]

    /* On STM32F429I-Discovery, LCD ID cannot be read then keep a common configuration */
    /* for LCD and GYRO (SPI_DIRECTION_2LINES) */
    /* Note: To read a register a LCD, SPI_DIRECTION_1LINE should be set */
    SpiHandle.Init.Direction      = SPI_DIRECTION_2LINES;
 800161c:	4b13      	ldr	r3, [pc, #76]	@ (800166c <SPI_Init+0x6c>)
 800161e:	2200      	movs	r2, #0
 8001620:	609a      	str	r2, [r3, #8]
    SpiHandle.Init.CLKPhase       = SPI_PHASE_1EDGE;
 8001622:	4b12      	ldr	r3, [pc, #72]	@ (800166c <SPI_Init+0x6c>)
 8001624:	2200      	movs	r2, #0
 8001626:	615a      	str	r2, [r3, #20]
    SpiHandle.Init.CLKPolarity    = SPI_POLARITY_LOW;
 8001628:	4b10      	ldr	r3, [pc, #64]	@ (800166c <SPI_Init+0x6c>)
 800162a:	2200      	movs	r2, #0
 800162c:	611a      	str	r2, [r3, #16]
    SpiHandle.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
 800162e:	4b0f      	ldr	r3, [pc, #60]	@ (800166c <SPI_Init+0x6c>)
 8001630:	2200      	movs	r2, #0
 8001632:	629a      	str	r2, [r3, #40]	@ 0x28
    SpiHandle.Init.CRCPolynomial  = 7;
 8001634:	4b0d      	ldr	r3, [pc, #52]	@ (800166c <SPI_Init+0x6c>)
 8001636:	2207      	movs	r2, #7
 8001638:	62da      	str	r2, [r3, #44]	@ 0x2c
    SpiHandle.Init.DataSize       = SPI_DATASIZE_8BIT;
 800163a:	4b0c      	ldr	r3, [pc, #48]	@ (800166c <SPI_Init+0x6c>)
 800163c:	2200      	movs	r2, #0
 800163e:	60da      	str	r2, [r3, #12]
    SpiHandle.Init.FirstBit       = SPI_FIRSTBIT_MSB;
 8001640:	4b0a      	ldr	r3, [pc, #40]	@ (800166c <SPI_Init+0x6c>)
 8001642:	2200      	movs	r2, #0
 8001644:	621a      	str	r2, [r3, #32]
    SpiHandle.Init.NSS            = SPI_NSS_SOFT;
 8001646:	4b09      	ldr	r3, [pc, #36]	@ (800166c <SPI_Init+0x6c>)
 8001648:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800164c:	619a      	str	r2, [r3, #24]
    SpiHandle.Init.TIMode         = SPI_TIMODE_DISABLED;
 800164e:	4b07      	ldr	r3, [pc, #28]	@ (800166c <SPI_Init+0x6c>)
 8001650:	2200      	movs	r2, #0
 8001652:	625a      	str	r2, [r3, #36]	@ 0x24
    SpiHandle.Init.Mode           = SPI_MODE_MASTER;
 8001654:	4b05      	ldr	r3, [pc, #20]	@ (800166c <SPI_Init+0x6c>)
 8001656:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800165a:	605a      	str	r2, [r3, #4]

    SPI_MspInit(&SpiHandle);
 800165c:	4803      	ldr	r0, [pc, #12]	@ (800166c <SPI_Init+0x6c>)
 800165e:	f000 f833 	bl	80016c8 <SPI_MspInit>
    HAL_SPI_Init(&SpiHandle);
 8001662:	4802      	ldr	r0, [pc, #8]	@ (800166c <SPI_Init+0x6c>)
 8001664:	f004 ff24 	bl	80064b0 <HAL_SPI_Init>
  }
}
 8001668:	bf00      	nop
 800166a:	bd80      	pop	{r7, pc}
 800166c:	20025990 	.word	0x20025990
 8001670:	40015000 	.word	0x40015000

08001674 <SPI_Write>:
/**
  * @brief  Writes a byte to device.
  * @param  Value: value to be written
  */
static void SPI_Write(uint16_t Value)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	b084      	sub	sp, #16
 8001678:	af00      	add	r7, sp, #0
 800167a:	4603      	mov	r3, r0
 800167c:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 800167e:	2300      	movs	r3, #0
 8001680:	73fb      	strb	r3, [r7, #15]

  status = HAL_SPI_Transmit(&SpiHandle, (uint8_t*) &Value, 1, SpiTimeout);
 8001682:	4b09      	ldr	r3, [pc, #36]	@ (80016a8 <SPI_Write+0x34>)
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	1db9      	adds	r1, r7, #6
 8001688:	2201      	movs	r2, #1
 800168a:	4808      	ldr	r0, [pc, #32]	@ (80016ac <SPI_Write+0x38>)
 800168c:	f004 ffc1 	bl	8006612 <HAL_SPI_Transmit>
 8001690:	4603      	mov	r3, r0
 8001692:	73fb      	strb	r3, [r7, #15]

  /* Check the communication status */
  if(status != HAL_OK)
 8001694:	7bfb      	ldrb	r3, [r7, #15]
 8001696:	2b00      	cmp	r3, #0
 8001698:	d001      	beq.n	800169e <SPI_Write+0x2a>
  {
    /* Re-Initialize the BUS */
    SPI_Error();
 800169a:	f000 f809 	bl	80016b0 <SPI_Error>
  }
}
 800169e:	bf00      	nop
 80016a0:	3710      	adds	r7, #16
 80016a2:	46bd      	mov	sp, r7
 80016a4:	bd80      	pop	{r7, pc}
 80016a6:	bf00      	nop
 80016a8:	2000000c 	.word	0x2000000c
 80016ac:	20025990 	.word	0x20025990

080016b0 <SPI_Error>:

/**
  * @brief  SPI error treatment function.
  */
static void SPI_Error(void)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	af00      	add	r7, sp, #0
  /* De-initialize the SPI communication BUS */
  HAL_SPI_DeInit(&SpiHandle);
 80016b4:	4803      	ldr	r0, [pc, #12]	@ (80016c4 <SPI_Error+0x14>)
 80016b6:	f004 ff84 	bl	80065c2 <HAL_SPI_DeInit>

  /* Re- Initialize the SPI communication BUS */
  SPI_Init();
 80016ba:	f7ff ffa1 	bl	8001600 <SPI_Init>
}
 80016be:	bf00      	nop
 80016c0:	bd80      	pop	{r7, pc}
 80016c2:	bf00      	nop
 80016c4:	20025990 	.word	0x20025990

080016c8 <SPI_MspInit>:
/**
  * @brief  SPI MSP Init.
  * @param  hspi: SPI handle
  */
static void SPI_MspInit(SPI_HandleTypeDef *hspi)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b08a      	sub	sp, #40	@ 0x28
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef   GPIO_InitStructure;

  /* Enable SPI clock */
  DISCOVERY_SPI_CLK_ENABLE();
 80016d0:	2300      	movs	r3, #0
 80016d2:	613b      	str	r3, [r7, #16]
 80016d4:	4b17      	ldr	r3, [pc, #92]	@ (8001734 <SPI_MspInit+0x6c>)
 80016d6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80016d8:	4a16      	ldr	r2, [pc, #88]	@ (8001734 <SPI_MspInit+0x6c>)
 80016da:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80016de:	6453      	str	r3, [r2, #68]	@ 0x44
 80016e0:	4b14      	ldr	r3, [pc, #80]	@ (8001734 <SPI_MspInit+0x6c>)
 80016e2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80016e4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80016e8:	613b      	str	r3, [r7, #16]
 80016ea:	693b      	ldr	r3, [r7, #16]

  /* Enable DISCOVERY_SPI GPIO clock */
  DISCOVERY_SPI_GPIO_CLK_ENABLE();
 80016ec:	2300      	movs	r3, #0
 80016ee:	60fb      	str	r3, [r7, #12]
 80016f0:	4b10      	ldr	r3, [pc, #64]	@ (8001734 <SPI_MspInit+0x6c>)
 80016f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016f4:	4a0f      	ldr	r2, [pc, #60]	@ (8001734 <SPI_MspInit+0x6c>)
 80016f6:	f043 0320 	orr.w	r3, r3, #32
 80016fa:	6313      	str	r3, [r2, #48]	@ 0x30
 80016fc:	4b0d      	ldr	r3, [pc, #52]	@ (8001734 <SPI_MspInit+0x6c>)
 80016fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001700:	f003 0320 	and.w	r3, r3, #32
 8001704:	60fb      	str	r3, [r7, #12]
 8001706:	68fb      	ldr	r3, [r7, #12]

  /* configure SPI SCK, MOSI and MISO */
  GPIO_InitStructure.Pin    = (DISCOVERY_SPI_SCK_PIN | DISCOVERY_SPI_MOSI_PIN | DISCOVERY_SPI_MISO_PIN);
 8001708:	f44f 7360 	mov.w	r3, #896	@ 0x380
 800170c:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Mode   = GPIO_MODE_AF_PP;
 800170e:	2302      	movs	r3, #2
 8001710:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull   = GPIO_PULLDOWN;
 8001712:	2302      	movs	r3, #2
 8001714:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed  = GPIO_SPEED_MEDIUM;
 8001716:	2301      	movs	r3, #1
 8001718:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Alternate = DISCOVERY_SPI_AF;
 800171a:	2305      	movs	r3, #5
 800171c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(DISCOVERY_SPI_GPIO_PORT, &GPIO_InitStructure);
 800171e:	f107 0314 	add.w	r3, r7, #20
 8001722:	4619      	mov	r1, r3
 8001724:	4804      	ldr	r0, [pc, #16]	@ (8001738 <SPI_MspInit+0x70>)
 8001726:	f002 f9e7 	bl	8003af8 <HAL_GPIO_Init>
}
 800172a:	bf00      	nop
 800172c:	3728      	adds	r7, #40	@ 0x28
 800172e:	46bd      	mov	sp, r7
 8001730:	bd80      	pop	{r7, pc}
 8001732:	bf00      	nop
 8001734:	40023800 	.word	0x40023800
 8001738:	40021400 	.word	0x40021400

0800173c <LCD_IO_Init>:

/**
  * @brief  Configures the LCD_SPI interface.
  */
void LCD_IO_Init(void)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	b088      	sub	sp, #32
 8001740:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;

  if(Is_LCD_IO_Initialized == 0)
 8001742:	4b36      	ldr	r3, [pc, #216]	@ (800181c <LCD_IO_Init+0xe0>)
 8001744:	781b      	ldrb	r3, [r3, #0]
 8001746:	2b00      	cmp	r3, #0
 8001748:	d164      	bne.n	8001814 <LCD_IO_Init+0xd8>
  {
    Is_LCD_IO_Initialized = 1;
 800174a:	4b34      	ldr	r3, [pc, #208]	@ (800181c <LCD_IO_Init+0xe0>)
 800174c:	2201      	movs	r2, #1
 800174e:	701a      	strb	r2, [r3, #0]

    /* Configure in Output Push-Pull mode */
    LCD_WRX_GPIO_CLK_ENABLE();
 8001750:	2300      	movs	r3, #0
 8001752:	60bb      	str	r3, [r7, #8]
 8001754:	4b32      	ldr	r3, [pc, #200]	@ (8001820 <LCD_IO_Init+0xe4>)
 8001756:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001758:	4a31      	ldr	r2, [pc, #196]	@ (8001820 <LCD_IO_Init+0xe4>)
 800175a:	f043 0308 	orr.w	r3, r3, #8
 800175e:	6313      	str	r3, [r2, #48]	@ 0x30
 8001760:	4b2f      	ldr	r3, [pc, #188]	@ (8001820 <LCD_IO_Init+0xe4>)
 8001762:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001764:	f003 0308 	and.w	r3, r3, #8
 8001768:	60bb      	str	r3, [r7, #8]
 800176a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStructure.Pin     = LCD_WRX_PIN;
 800176c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001770:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8001772:	2301      	movs	r3, #1
 8001774:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8001776:	2300      	movs	r3, #0
 8001778:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 800177a:	2302      	movs	r3, #2
 800177c:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_WRX_GPIO_PORT, &GPIO_InitStructure);
 800177e:	f107 030c 	add.w	r3, r7, #12
 8001782:	4619      	mov	r1, r3
 8001784:	4827      	ldr	r0, [pc, #156]	@ (8001824 <LCD_IO_Init+0xe8>)
 8001786:	f002 f9b7 	bl	8003af8 <HAL_GPIO_Init>

    LCD_RDX_GPIO_CLK_ENABLE();
 800178a:	2300      	movs	r3, #0
 800178c:	607b      	str	r3, [r7, #4]
 800178e:	4b24      	ldr	r3, [pc, #144]	@ (8001820 <LCD_IO_Init+0xe4>)
 8001790:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001792:	4a23      	ldr	r2, [pc, #140]	@ (8001820 <LCD_IO_Init+0xe4>)
 8001794:	f043 0308 	orr.w	r3, r3, #8
 8001798:	6313      	str	r3, [r2, #48]	@ 0x30
 800179a:	4b21      	ldr	r3, [pc, #132]	@ (8001820 <LCD_IO_Init+0xe4>)
 800179c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800179e:	f003 0308 	and.w	r3, r3, #8
 80017a2:	607b      	str	r3, [r7, #4]
 80017a4:	687b      	ldr	r3, [r7, #4]
    GPIO_InitStructure.Pin     = LCD_RDX_PIN;
 80017a6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80017aa:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 80017ac:	2301      	movs	r3, #1
 80017ae:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 80017b0:	2300      	movs	r3, #0
 80017b2:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 80017b4:	2302      	movs	r3, #2
 80017b6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_RDX_GPIO_PORT, &GPIO_InitStructure);
 80017b8:	f107 030c 	add.w	r3, r7, #12
 80017bc:	4619      	mov	r1, r3
 80017be:	4819      	ldr	r0, [pc, #100]	@ (8001824 <LCD_IO_Init+0xe8>)
 80017c0:	f002 f99a 	bl	8003af8 <HAL_GPIO_Init>

    /* Configure the LCD Control pins ----------------------------------------*/
    LCD_NCS_GPIO_CLK_ENABLE();
 80017c4:	2300      	movs	r3, #0
 80017c6:	603b      	str	r3, [r7, #0]
 80017c8:	4b15      	ldr	r3, [pc, #84]	@ (8001820 <LCD_IO_Init+0xe4>)
 80017ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017cc:	4a14      	ldr	r2, [pc, #80]	@ (8001820 <LCD_IO_Init+0xe4>)
 80017ce:	f043 0304 	orr.w	r3, r3, #4
 80017d2:	6313      	str	r3, [r2, #48]	@ 0x30
 80017d4:	4b12      	ldr	r3, [pc, #72]	@ (8001820 <LCD_IO_Init+0xe4>)
 80017d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017d8:	f003 0304 	and.w	r3, r3, #4
 80017dc:	603b      	str	r3, [r7, #0]
 80017de:	683b      	ldr	r3, [r7, #0]

    /* Configure NCS in Output Push-Pull mode */
    GPIO_InitStructure.Pin     = LCD_NCS_PIN;
 80017e0:	2304      	movs	r3, #4
 80017e2:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 80017e4:	2301      	movs	r3, #1
 80017e6:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 80017e8:	2300      	movs	r3, #0
 80017ea:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 80017ec:	2302      	movs	r3, #2
 80017ee:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_NCS_GPIO_PORT, &GPIO_InitStructure);
 80017f0:	f107 030c 	add.w	r3, r7, #12
 80017f4:	4619      	mov	r1, r3
 80017f6:	480c      	ldr	r0, [pc, #48]	@ (8001828 <LCD_IO_Init+0xec>)
 80017f8:	f002 f97e 	bl	8003af8 <HAL_GPIO_Init>

    /* Set or Reset the control line */
    LCD_CS_LOW();
 80017fc:	2200      	movs	r2, #0
 80017fe:	2104      	movs	r1, #4
 8001800:	4809      	ldr	r0, [pc, #36]	@ (8001828 <LCD_IO_Init+0xec>)
 8001802:	f002 fc31 	bl	8004068 <HAL_GPIO_WritePin>
    LCD_CS_HIGH();
 8001806:	2201      	movs	r2, #1
 8001808:	2104      	movs	r1, #4
 800180a:	4807      	ldr	r0, [pc, #28]	@ (8001828 <LCD_IO_Init+0xec>)
 800180c:	f002 fc2c 	bl	8004068 <HAL_GPIO_WritePin>

    SPI_Init();
 8001810:	f7ff fef6 	bl	8001600 <SPI_Init>
  }
}
 8001814:	bf00      	nop
 8001816:	3720      	adds	r7, #32
 8001818:	46bd      	mov	sp, r7
 800181a:	bd80      	pop	{r7, pc}
 800181c:	200259e8 	.word	0x200259e8
 8001820:	40023800 	.word	0x40023800
 8001824:	40020c00 	.word	0x40020c00
 8001828:	40020800 	.word	0x40020800

0800182c <LCD_IO_WriteData>:

/**
  * @brief  Writes register value.
  */
void LCD_IO_WriteData(uint16_t RegValue)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	b082      	sub	sp, #8
 8001830:	af00      	add	r7, sp, #0
 8001832:	4603      	mov	r3, r0
 8001834:	80fb      	strh	r3, [r7, #6]
  /* Set WRX to send data */
  LCD_WRX_HIGH();
 8001836:	2201      	movs	r2, #1
 8001838:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800183c:	480a      	ldr	r0, [pc, #40]	@ (8001868 <LCD_IO_WriteData+0x3c>)
 800183e:	f002 fc13 	bl	8004068 <HAL_GPIO_WritePin>

  /* Reset LCD control line(/CS) and Send data */
  LCD_CS_LOW();
 8001842:	2200      	movs	r2, #0
 8001844:	2104      	movs	r1, #4
 8001846:	4809      	ldr	r0, [pc, #36]	@ (800186c <LCD_IO_WriteData+0x40>)
 8001848:	f002 fc0e 	bl	8004068 <HAL_GPIO_WritePin>
  SPI_Write(RegValue);
 800184c:	88fb      	ldrh	r3, [r7, #6]
 800184e:	4618      	mov	r0, r3
 8001850:	f7ff ff10 	bl	8001674 <SPI_Write>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8001854:	2201      	movs	r2, #1
 8001856:	2104      	movs	r1, #4
 8001858:	4804      	ldr	r0, [pc, #16]	@ (800186c <LCD_IO_WriteData+0x40>)
 800185a:	f002 fc05 	bl	8004068 <HAL_GPIO_WritePin>
}
 800185e:	bf00      	nop
 8001860:	3708      	adds	r7, #8
 8001862:	46bd      	mov	sp, r7
 8001864:	bd80      	pop	{r7, pc}
 8001866:	bf00      	nop
 8001868:	40020c00 	.word	0x40020c00
 800186c:	40020800 	.word	0x40020800

08001870 <LCD_IO_WriteReg>:

/**
  * @brief  Writes register address.
  */
void LCD_IO_WriteReg(uint8_t Reg)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	b082      	sub	sp, #8
 8001874:	af00      	add	r7, sp, #0
 8001876:	4603      	mov	r3, r0
 8001878:	71fb      	strb	r3, [r7, #7]
  /* Reset WRX to send command */
  LCD_WRX_LOW();
 800187a:	2200      	movs	r2, #0
 800187c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001880:	480a      	ldr	r0, [pc, #40]	@ (80018ac <LCD_IO_WriteReg+0x3c>)
 8001882:	f002 fbf1 	bl	8004068 <HAL_GPIO_WritePin>

  /* Reset LCD control line(/CS) and Send command */
  LCD_CS_LOW();
 8001886:	2200      	movs	r2, #0
 8001888:	2104      	movs	r1, #4
 800188a:	4809      	ldr	r0, [pc, #36]	@ (80018b0 <LCD_IO_WriteReg+0x40>)
 800188c:	f002 fbec 	bl	8004068 <HAL_GPIO_WritePin>
  SPI_Write(Reg);
 8001890:	79fb      	ldrb	r3, [r7, #7]
 8001892:	b29b      	uxth	r3, r3
 8001894:	4618      	mov	r0, r3
 8001896:	f7ff feed 	bl	8001674 <SPI_Write>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 800189a:	2201      	movs	r2, #1
 800189c:	2104      	movs	r1, #4
 800189e:	4804      	ldr	r0, [pc, #16]	@ (80018b0 <LCD_IO_WriteReg+0x40>)
 80018a0:	f002 fbe2 	bl	8004068 <HAL_GPIO_WritePin>
}
 80018a4:	bf00      	nop
 80018a6:	3708      	adds	r7, #8
 80018a8:	46bd      	mov	sp, r7
 80018aa:	bd80      	pop	{r7, pc}
 80018ac:	40020c00 	.word	0x40020c00
 80018b0:	40020800 	.word	0x40020800

080018b4 <LCD_Delay>:
/**
  * @brief  Wait for loop in ms.
  * @param  Delay in ms.
  */
void LCD_Delay(uint32_t Delay)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b082      	sub	sp, #8
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 80018bc:	6878      	ldr	r0, [r7, #4]
 80018be:	f001 ff6f 	bl	80037a0 <HAL_Delay>
}
 80018c2:	bf00      	nop
 80018c4:	3708      	adds	r7, #8
 80018c6:	46bd      	mov	sp, r7
 80018c8:	bd80      	pop	{r7, pc}
	...

080018cc <startScreen>:

/**
  * @brief  The application entry point.
  * @retval int
  */
void startScreen(void){
 80018cc:	b580      	push	{r7, lr}
 80018ce:	af00      	add	r7, sp, #0
	LCD_Clear(0,LCD_COLOR_WHITE);
 80018d0:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 80018d4:	2000      	movs	r0, #0
 80018d6:	f7ff fbef 	bl	80010b8 <LCD_Clear>
	 LCD_SetTextColor(LCD_COLOR_BLACK);
 80018da:	2000      	movs	r0, #0
 80018dc:	f7ff fc0e 	bl	80010fc <LCD_SetTextColor>
		  LCD_SetFont(&Font16x24);
 80018e0:	4854      	ldr	r0, [pc, #336]	@ (8001a34 <startScreen+0x168>)
 80018e2:	f7ff fc1b 	bl	800111c <LCD_SetFont>
		  LCD_DisplayChar(60, 50, 'T');
 80018e6:	2254      	movs	r2, #84	@ 0x54
 80018e8:	2132      	movs	r1, #50	@ 0x32
 80018ea:	203c      	movs	r0, #60	@ 0x3c
 80018ec:	f7ff fc94 	bl	8001218 <LCD_DisplayChar>
		  LCD_SetTextColor(LCD_COLOR_BLACK);
 80018f0:	2000      	movs	r0, #0
 80018f2:	f7ff fc03 	bl	80010fc <LCD_SetTextColor>
		  LCD_SetFont(&Font16x24);
 80018f6:	484f      	ldr	r0, [pc, #316]	@ (8001a34 <startScreen+0x168>)
 80018f8:	f7ff fc10 	bl	800111c <LCD_SetFont>
		  LCD_DisplayChar(80, 50, 'E');
 80018fc:	2245      	movs	r2, #69	@ 0x45
 80018fe:	2132      	movs	r1, #50	@ 0x32
 8001900:	2050      	movs	r0, #80	@ 0x50
 8001902:	f7ff fc89 	bl	8001218 <LCD_DisplayChar>
		  LCD_SetTextColor(LCD_COLOR_BLACK);
 8001906:	2000      	movs	r0, #0
 8001908:	f7ff fbf8 	bl	80010fc <LCD_SetTextColor>
		  LCD_SetFont(&Font16x24);
 800190c:	4849      	ldr	r0, [pc, #292]	@ (8001a34 <startScreen+0x168>)
 800190e:	f7ff fc05 	bl	800111c <LCD_SetFont>
		  LCD_DisplayChar(100, 50, 'T');
 8001912:	2254      	movs	r2, #84	@ 0x54
 8001914:	2132      	movs	r1, #50	@ 0x32
 8001916:	2064      	movs	r0, #100	@ 0x64
 8001918:	f7ff fc7e 	bl	8001218 <LCD_DisplayChar>
		  LCD_SetTextColor(LCD_COLOR_BLACK);
 800191c:	2000      	movs	r0, #0
 800191e:	f7ff fbed 	bl	80010fc <LCD_SetTextColor>
		  LCD_SetFont(&Font16x24);
 8001922:	4844      	ldr	r0, [pc, #272]	@ (8001a34 <startScreen+0x168>)
 8001924:	f7ff fbfa 	bl	800111c <LCD_SetFont>
		  LCD_DisplayChar(120, 50, 'R');
 8001928:	2252      	movs	r2, #82	@ 0x52
 800192a:	2132      	movs	r1, #50	@ 0x32
 800192c:	2078      	movs	r0, #120	@ 0x78
 800192e:	f7ff fc73 	bl	8001218 <LCD_DisplayChar>
		  LCD_SetTextColor(LCD_COLOR_BLACK);
 8001932:	2000      	movs	r0, #0
 8001934:	f7ff fbe2 	bl	80010fc <LCD_SetTextColor>
		  LCD_SetFont(&Font16x24);
 8001938:	483e      	ldr	r0, [pc, #248]	@ (8001a34 <startScreen+0x168>)
 800193a:	f7ff fbef 	bl	800111c <LCD_SetFont>
		  LCD_DisplayChar(140, 50, 'I');
 800193e:	2249      	movs	r2, #73	@ 0x49
 8001940:	2132      	movs	r1, #50	@ 0x32
 8001942:	208c      	movs	r0, #140	@ 0x8c
 8001944:	f7ff fc68 	bl	8001218 <LCD_DisplayChar>
		  LCD_SetTextColor(LCD_COLOR_BLACK);
 8001948:	2000      	movs	r0, #0
 800194a:	f7ff fbd7 	bl	80010fc <LCD_SetTextColor>
		  LCD_SetFont(&Font16x24);
 800194e:	4839      	ldr	r0, [pc, #228]	@ (8001a34 <startScreen+0x168>)
 8001950:	f7ff fbe4 	bl	800111c <LCD_SetFont>
		  LCD_DisplayChar(160, 50, 'S');
 8001954:	2253      	movs	r2, #83	@ 0x53
 8001956:	2132      	movs	r1, #50	@ 0x32
 8001958:	20a0      	movs	r0, #160	@ 0xa0
 800195a:	f7ff fc5d 	bl	8001218 <LCD_DisplayChar>
		  LCD_Draw_Rectangle_Fill(85, 25, LCD_COLOR_BLACK, 0);
 800195e:	2300      	movs	r3, #0
 8001960:	2200      	movs	r2, #0
 8001962:	2119      	movs	r1, #25
 8001964:	2055      	movs	r0, #85	@ 0x55
 8001966:	f7ff f982 	bl	8000c6e <LCD_Draw_Rectangle_Fill>
		  //LCD_Draw_Rectangle_Rotate1_Fill(25, 25, LCD_COLOR_CYAN);
		  LCD_Draw_BBox_Fill(50, 240, LCD_COLOR_GREEN);
 800196a:	f44f 62fc 	mov.w	r2, #2016	@ 0x7e0
 800196e:	21f0      	movs	r1, #240	@ 0xf0
 8001970:	2032      	movs	r0, #50	@ 0x32
 8001972:	f7ff f9de 	bl	8000d32 <LCD_Draw_BBox_Fill>
		  LCD_Draw_LShape1_Fill(70, 75, LCD_COLOR_MAGENTA,0);
 8001976:	2300      	movs	r3, #0
 8001978:	f64f 021f 	movw	r2, #63519	@ 0xf81f
 800197c:	214b      	movs	r1, #75	@ 0x4b
 800197e:	2046      	movs	r0, #70	@ 0x46
 8001980:	f7ff f8eb 	bl	8000b5a <LCD_Draw_LShape1_Fill>
		  LCD_Draw_LShape2_Fill(150, 100, LCD_COLOR_CYAN,0);
 8001984:	2300      	movs	r3, #0
 8001986:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 800198a:	2164      	movs	r1, #100	@ 0x64
 800198c:	2096      	movs	r0, #150	@ 0x96
 800198e:	f7ff f929 	bl	8000be4 <LCD_Draw_LShape2_Fill>
		  LCD_Draw_TBox_Fill(45, 10,  LCD_COLOR_RED,0);
 8001992:	2300      	movs	r3, #0
 8001994:	f44f 4278 	mov.w	r2, #63488	@ 0xf800
 8001998:	210a      	movs	r1, #10
 800199a:	202d      	movs	r0, #45	@ 0x2d
 800199c:	f7ff f9f4 	bl	8000d88 <LCD_Draw_TBox_Fill>
		  LCD_Draw_ZShape_Fill(190, 175, LCD_COLOR_GREY,0);
 80019a0:	2300      	movs	r3, #0
 80019a2:	f24f 72de 	movw	r2, #63454	@ 0xf7de
 80019a6:	21af      	movs	r1, #175	@ 0xaf
 80019a8:	20be      	movs	r0, #190	@ 0xbe
 80019aa:	f7ff fa4f 	bl	8000e4c <LCD_Draw_ZShape_Fill>
		  LCD_Draw_SShape_Fill(200, 100, LCD_COLOR_BLUE2,0);
 80019ae:	2300      	movs	r3, #0
 80019b0:	f240 521f 	movw	r2, #1311	@ 0x51f
 80019b4:	2164      	movs	r1, #100	@ 0x64
 80019b6:	20c8      	movs	r0, #200	@ 0xc8
 80019b8:	f7ff faa6 	bl	8000f08 <LCD_Draw_SShape_Fill>
		  LCD_Draw_Platform_Fill(0, 300, LCD_COLOR_BLACK);
 80019bc:	2200      	movs	r2, #0
 80019be:	f44f 7196 	mov.w	r1, #300	@ 0x12c
 80019c2:	2000      	movs	r0, #0
 80019c4:	f7ff fafe 	bl	8000fc4 <LCD_Draw_Platform_Fill>
		  LCD_SetFont(&Font16x24);
 80019c8:	481a      	ldr	r0, [pc, #104]	@ (8001a34 <startScreen+0x168>)
 80019ca:	f7ff fba7 	bl	800111c <LCD_SetFont>
		  LCD_DisplayChar(70, 150, 'S');
 80019ce:	2253      	movs	r2, #83	@ 0x53
 80019d0:	2196      	movs	r1, #150	@ 0x96
 80019d2:	2046      	movs	r0, #70	@ 0x46
 80019d4:	f7ff fc20 	bl	8001218 <LCD_DisplayChar>
		  LCD_SetTextColor(LCD_COLOR_BLACK);
 80019d8:	2000      	movs	r0, #0
 80019da:	f7ff fb8f 	bl	80010fc <LCD_SetTextColor>
		  LCD_SetFont(&Font16x24);
 80019de:	4815      	ldr	r0, [pc, #84]	@ (8001a34 <startScreen+0x168>)
 80019e0:	f7ff fb9c 	bl	800111c <LCD_SetFont>
		  LCD_DisplayChar(90, 150, 'T');
 80019e4:	2254      	movs	r2, #84	@ 0x54
 80019e6:	2196      	movs	r1, #150	@ 0x96
 80019e8:	205a      	movs	r0, #90	@ 0x5a
 80019ea:	f7ff fc15 	bl	8001218 <LCD_DisplayChar>
		  LCD_SetTextColor(LCD_COLOR_BLACK);
 80019ee:	2000      	movs	r0, #0
 80019f0:	f7ff fb84 	bl	80010fc <LCD_SetTextColor>
		  LCD_SetFont(&Font16x24);
 80019f4:	480f      	ldr	r0, [pc, #60]	@ (8001a34 <startScreen+0x168>)
 80019f6:	f7ff fb91 	bl	800111c <LCD_SetFont>
		  LCD_DisplayChar(110, 150, 'A');
 80019fa:	2241      	movs	r2, #65	@ 0x41
 80019fc:	2196      	movs	r1, #150	@ 0x96
 80019fe:	206e      	movs	r0, #110	@ 0x6e
 8001a00:	f7ff fc0a 	bl	8001218 <LCD_DisplayChar>
		  LCD_SetTextColor(LCD_COLOR_BLACK);
 8001a04:	2000      	movs	r0, #0
 8001a06:	f7ff fb79 	bl	80010fc <LCD_SetTextColor>
		  LCD_SetFont(&Font16x24);
 8001a0a:	480a      	ldr	r0, [pc, #40]	@ (8001a34 <startScreen+0x168>)
 8001a0c:	f7ff fb86 	bl	800111c <LCD_SetFont>
		  LCD_DisplayChar(130, 150, 'R');
 8001a10:	2252      	movs	r2, #82	@ 0x52
 8001a12:	2196      	movs	r1, #150	@ 0x96
 8001a14:	2082      	movs	r0, #130	@ 0x82
 8001a16:	f7ff fbff 	bl	8001218 <LCD_DisplayChar>
		  LCD_SetTextColor(LCD_COLOR_BLACK);
 8001a1a:	2000      	movs	r0, #0
 8001a1c:	f7ff fb6e 	bl	80010fc <LCD_SetTextColor>
		  LCD_SetFont(&Font16x24);
 8001a20:	4804      	ldr	r0, [pc, #16]	@ (8001a34 <startScreen+0x168>)
 8001a22:	f7ff fb7b 	bl	800111c <LCD_SetFont>
		  LCD_DisplayChar(150, 150, 'T');
 8001a26:	2254      	movs	r2, #84	@ 0x54
 8001a28:	2196      	movs	r1, #150	@ 0x96
 8001a2a:	2096      	movs	r0, #150	@ 0x96
 8001a2c:	f7ff fbf4 	bl	8001218 <LCD_DisplayChar>
}
 8001a30:	bf00      	nop
 8001a32:	bd80      	pop	{r7, pc}
 8001a34:	20000004 	.word	0x20000004

08001a38 <gameScreen>:
void gameScreen(uint32_t BlockNumber){
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	b086      	sub	sp, #24
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]
   uint32_t eventsToRun;
	uint16_t y = 0;
 8001a40:	2300      	movs	r3, #0
 8001a42:	82fb      	strh	r3, [r7, #22]
	uint16_t blockSize = 20;
 8001a44:	2314      	movs	r3, #20
 8001a46:	827b      	strh	r3, [r7, #18]
	uint16_t Fallrate = 100;
 8001a48:	2364      	movs	r3, #100	@ 0x64
 8001a4a:	823b      	strh	r3, [r7, #16]
	uint16_t degree = 0;
 8001a4c:	2300      	movs	r3, #0
 8001a4e:	82bb      	strh	r3, [r7, #20]
	uint16_t level = 75;
 8001a50:	234b      	movs	r3, #75	@ 0x4b
 8001a52:	81fb      	strh	r3, [r7, #14]
//LCD_PIXEL_HEIGHT   ((uint16_t)320)
		switch(BlockNumber){
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	2b06      	cmp	r3, #6
 8001a58:	f200 824f 	bhi.w	8001efa <gameScreen+0x4c2>
 8001a5c:	a201      	add	r2, pc, #4	@ (adr r2, 8001a64 <gameScreen+0x2c>)
 8001a5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a62:	bf00      	nop
 8001a64:	08001a81 	.word	0x08001a81
 8001a68:	08001bb1 	.word	0x08001bb1
 8001a6c:	08001c53 	.word	0x08001c53
 8001a70:	08001cf5 	.word	0x08001cf5
 8001a74:	08001d9b 	.word	0x08001d9b
 8001a78:	08001e41 	.word	0x08001e41
 8001a7c:	08001ee3 	.word	0x08001ee3
						case 0:
							for(y =0; y<CurrentY; y++){
 8001a80:	2300      	movs	r3, #0
 8001a82:	82fb      	strh	r3, [r7, #22]
 8001a84:	e03f      	b.n	8001b06 <gameScreen+0xce>
								  LCD_Clear_Game(0, LCD_COLOR_BLUE, CurrentY+level);
 8001a86:	4ba1      	ldr	r3, [pc, #644]	@ (8001d0c <gameScreen+0x2d4>)
 8001a88:	881a      	ldrh	r2, [r3, #0]
 8001a8a:	89fb      	ldrh	r3, [r7, #14]
 8001a8c:	4413      	add	r3, r2
 8001a8e:	b29b      	uxth	r3, r3
 8001a90:	461a      	mov	r2, r3
 8001a92:	211f      	movs	r1, #31
 8001a94:	2000      	movs	r0, #0
 8001a96:	f7ff fae7 	bl	8001068 <LCD_Clear_Game>
								  LCD_Draw_Platform_Fill(0, 300, LCD_COLOR_BLACK);
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	f44f 7196 	mov.w	r1, #300	@ 0x12c
 8001aa0:	2000      	movs	r0, #0
 8001aa2:	f7ff fa8f 	bl	8000fc4 <LCD_Draw_Platform_Fill>
								  LCD_Draw_BBox_Fill(50, (y + level) , LCD_COLOR_GREEN);
 8001aa6:	8afa      	ldrh	r2, [r7, #22]
 8001aa8:	89fb      	ldrh	r3, [r7, #14]
 8001aaa:	4413      	add	r3, r2
 8001aac:	b29b      	uxth	r3, r3
 8001aae:	f44f 62fc 	mov.w	r2, #2016	@ 0x7e0
 8001ab2:	4619      	mov	r1, r3
 8001ab4:	2032      	movs	r0, #50	@ 0x32
 8001ab6:	f7ff f93c 	bl	8000d32 <LCD_Draw_BBox_Fill>
									  if(y == 274){
 8001aba:	8afb      	ldrh	r3, [r7, #22]
 8001abc:	f5b3 7f89 	cmp.w	r3, #274	@ 0x112
 8001ac0:	d10f      	bne.n	8001ae2 <gameScreen+0xaa>
										LCD_Draw_Platform_Fill(0, 300, LCD_COLOR_BLACK);
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	f44f 7196 	mov.w	r1, #300	@ 0x12c
 8001ac8:	2000      	movs	r0, #0
 8001aca:	f7ff fa7b 	bl	8000fc4 <LCD_Draw_Platform_Fill>
										LCD_Draw_BBox_Fill(50, (y + level) , LCD_COLOR_GREEN);
 8001ace:	8afa      	ldrh	r2, [r7, #22]
 8001ad0:	89fb      	ldrh	r3, [r7, #14]
 8001ad2:	4413      	add	r3, r2
 8001ad4:	b29b      	uxth	r3, r3
 8001ad6:	f44f 62fc 	mov.w	r2, #2016	@ 0x7e0
 8001ada:	4619      	mov	r1, r3
 8001adc:	2032      	movs	r0, #50	@ 0x32
 8001ade:	f7ff f928 	bl	8000d32 <LCD_Draw_BBox_Fill>
									  }

									  HAL_Delay(Fallrate);
 8001ae2:	8a3b      	ldrh	r3, [r7, #16]
 8001ae4:	4618      	mov	r0, r3
 8001ae6:	f001 fe5b 	bl	80037a0 <HAL_Delay>
									  eventsToRun = getScheduledEvents();
 8001aea:	f7ff fbf3 	bl	80012d4 <getScheduledEvents>
 8001aee:	60b8      	str	r0, [r7, #8]
									  if(ROTATE_BLOCK & eventsToRun){
 8001af0:	68bb      	ldr	r3, [r7, #8]
 8001af2:	f003 0304 	and.w	r3, r3, #4
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d002      	beq.n	8001b00 <gameScreen+0xc8>

										removeSchedulerEvent(ROTATE_BLOCK);
 8001afa:	2004      	movs	r0, #4
 8001afc:	f7ff fc08 	bl	8001310 <removeSchedulerEvent>
							for(y =0; y<CurrentY; y++){
 8001b00:	8afb      	ldrh	r3, [r7, #22]
 8001b02:	3301      	adds	r3, #1
 8001b04:	82fb      	strh	r3, [r7, #22]
 8001b06:	4b81      	ldr	r3, [pc, #516]	@ (8001d0c <gameScreen+0x2d4>)
 8001b08:	881b      	ldrh	r3, [r3, #0]
 8001b0a:	8afa      	ldrh	r2, [r7, #22]
 8001b0c:	429a      	cmp	r2, r3
 8001b0e:	d3ba      	bcc.n	8001a86 <gameScreen+0x4e>
									  }
								  }
							CurrentY = y - blockSize;
 8001b10:	8afa      	ldrh	r2, [r7, #22]
 8001b12:	8a7b      	ldrh	r3, [r7, #18]
 8001b14:	1ad3      	subs	r3, r2, r3
 8001b16:	b29a      	uxth	r2, r3
 8001b18:	4b7c      	ldr	r3, [pc, #496]	@ (8001d0c <gameScreen+0x2d4>)
 8001b1a:	801a      	strh	r2, [r3, #0]
							break;
 8001b1c:	e1ed      	b.n	8001efa <gameScreen+0x4c2>
						case 1:

							while(y != CurrentY){
								if(y < 289){
 8001b1e:	8afb      	ldrh	r3, [r7, #22]
 8001b20:	f5b3 7f90 	cmp.w	r3, #288	@ 0x120
 8001b24:	d819      	bhi.n	8001b5a <gameScreen+0x122>
								  LCD_Clear_Game(0, LCD_COLOR_BLUE, CurrentY+level);
 8001b26:	4b79      	ldr	r3, [pc, #484]	@ (8001d0c <gameScreen+0x2d4>)
 8001b28:	881a      	ldrh	r2, [r3, #0]
 8001b2a:	89fb      	ldrh	r3, [r7, #14]
 8001b2c:	4413      	add	r3, r2
 8001b2e:	b29b      	uxth	r3, r3
 8001b30:	461a      	mov	r2, r3
 8001b32:	211f      	movs	r1, #31
 8001b34:	2000      	movs	r0, #0
 8001b36:	f7ff fa97 	bl	8001068 <LCD_Clear_Game>
								  LCD_Draw_Platform_Fill(0, 300, LCD_COLOR_BLACK);
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	f44f 7196 	mov.w	r1, #300	@ 0x12c
 8001b40:	2000      	movs	r0, #0
 8001b42:	f7ff fa3f 	bl	8000fc4 <LCD_Draw_Platform_Fill>
								  LCD_Draw_Rectangle_Fill(50, (y + level), LCD_COLOR_MAGENTA, degree);
 8001b46:	8afa      	ldrh	r2, [r7, #22]
 8001b48:	89fb      	ldrh	r3, [r7, #14]
 8001b4a:	4413      	add	r3, r2
 8001b4c:	b299      	uxth	r1, r3
 8001b4e:	8abb      	ldrh	r3, [r7, #20]
 8001b50:	f64f 021f 	movw	r2, #63519	@ 0xf81f
 8001b54:	2032      	movs	r0, #50	@ 0x32
 8001b56:	f7ff f88a 	bl	8000c6e <LCD_Draw_Rectangle_Fill>
								}
								if(y == 289){
 8001b5a:	8afb      	ldrh	r3, [r7, #22]
 8001b5c:	f240 1221 	movw	r2, #289	@ 0x121
 8001b60:	4293      	cmp	r3, r2
 8001b62:	d10f      	bne.n	8001b84 <gameScreen+0x14c>
										LCD_Draw_Platform_Fill(0, 300, LCD_COLOR_BLACK);
 8001b64:	2200      	movs	r2, #0
 8001b66:	f44f 7196 	mov.w	r1, #300	@ 0x12c
 8001b6a:	2000      	movs	r0, #0
 8001b6c:	f7ff fa2a 	bl	8000fc4 <LCD_Draw_Platform_Fill>
										LCD_Draw_Rectangle_Fill(50, (y + level), LCD_COLOR_MAGENTA, degree);
 8001b70:	8afa      	ldrh	r2, [r7, #22]
 8001b72:	89fb      	ldrh	r3, [r7, #14]
 8001b74:	4413      	add	r3, r2
 8001b76:	b299      	uxth	r1, r3
 8001b78:	8abb      	ldrh	r3, [r7, #20]
 8001b7a:	f64f 021f 	movw	r2, #63519	@ 0xf81f
 8001b7e:	2032      	movs	r0, #50	@ 0x32
 8001b80:	f7ff f875 	bl	8000c6e <LCD_Draw_Rectangle_Fill>
								  }
									  HAL_Delay(Fallrate);
 8001b84:	8a3b      	ldrh	r3, [r7, #16]
 8001b86:	4618      	mov	r0, r3
 8001b88:	f001 fe0a 	bl	80037a0 <HAL_Delay>
									  y++;
 8001b8c:	8afb      	ldrh	r3, [r7, #22]
 8001b8e:	3301      	adds	r3, #1
 8001b90:	82fb      	strh	r3, [r7, #22]
								eventsToRun = getScheduledEvents();
 8001b92:	f7ff fb9f 	bl	80012d4 <getScheduledEvents>
 8001b96:	60b8      	str	r0, [r7, #8]
								if(ROTATE_BLOCK & eventsToRun){
 8001b98:	68bb      	ldr	r3, [r7, #8]
 8001b9a:	f003 0304 	and.w	r3, r3, #4
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d006      	beq.n	8001bb0 <gameScreen+0x178>
										degree = 1 - degree;
 8001ba2:	8abb      	ldrh	r3, [r7, #20]
 8001ba4:	f1c3 0301 	rsb	r3, r3, #1
 8001ba8:	82bb      	strh	r3, [r7, #20]
										 removeSchedulerEvent(ROTATE_BLOCK);
 8001baa:	2004      	movs	r0, #4
 8001bac:	f7ff fbb0 	bl	8001310 <removeSchedulerEvent>
							while(y != CurrentY){
 8001bb0:	4b56      	ldr	r3, [pc, #344]	@ (8001d0c <gameScreen+0x2d4>)
 8001bb2:	881b      	ldrh	r3, [r3, #0]
 8001bb4:	8afa      	ldrh	r2, [r7, #22]
 8001bb6:	429a      	cmp	r2, r3
 8001bb8:	d1b1      	bne.n	8001b1e <gameScreen+0xe6>
								}

							}
							CurrentY = y - blockSize;
 8001bba:	8afa      	ldrh	r2, [r7, #22]
 8001bbc:	8a7b      	ldrh	r3, [r7, #18]
 8001bbe:	1ad3      	subs	r3, r2, r3
 8001bc0:	b29a      	uxth	r2, r3
 8001bc2:	4b52      	ldr	r3, [pc, #328]	@ (8001d0c <gameScreen+0x2d4>)
 8001bc4:	801a      	strh	r2, [r3, #0]
							break;
 8001bc6:	e198      	b.n	8001efa <gameScreen+0x4c2>
						case 2:
							while(y != CurrentY){
									LCD_Clear_Game(0, LCD_COLOR_BLUE, CurrentY+level);
 8001bc8:	4b50      	ldr	r3, [pc, #320]	@ (8001d0c <gameScreen+0x2d4>)
 8001bca:	881a      	ldrh	r2, [r3, #0]
 8001bcc:	89fb      	ldrh	r3, [r7, #14]
 8001bce:	4413      	add	r3, r2
 8001bd0:	b29b      	uxth	r3, r3
 8001bd2:	461a      	mov	r2, r3
 8001bd4:	211f      	movs	r1, #31
 8001bd6:	2000      	movs	r0, #0
 8001bd8:	f7ff fa46 	bl	8001068 <LCD_Clear_Game>
									  LCD_Draw_Platform_Fill(0, 300, LCD_COLOR_BLACK);
 8001bdc:	2200      	movs	r2, #0
 8001bde:	f44f 7196 	mov.w	r1, #300	@ 0x12c
 8001be2:	2000      	movs	r0, #0
 8001be4:	f7ff f9ee 	bl	8000fc4 <LCD_Draw_Platform_Fill>
									  LCD_Draw_LShape1_Fill(50, (y + level), LCD_COLOR_YELLOW,degree);
 8001be8:	8afa      	ldrh	r2, [r7, #22]
 8001bea:	89fb      	ldrh	r3, [r7, #14]
 8001bec:	4413      	add	r3, r2
 8001bee:	b299      	uxth	r1, r3
 8001bf0:	8abb      	ldrh	r3, [r7, #20]
 8001bf2:	f64f 72e0 	movw	r2, #65504	@ 0xffe0
 8001bf6:	2032      	movs	r0, #50	@ 0x32
 8001bf8:	f7fe ffaf 	bl	8000b5a <LCD_Draw_LShape1_Fill>
										  if(y == 289){
 8001bfc:	8afb      	ldrh	r3, [r7, #22]
 8001bfe:	f240 1221 	movw	r2, #289	@ 0x121
 8001c02:	4293      	cmp	r3, r2
 8001c04:	d10f      	bne.n	8001c26 <gameScreen+0x1ee>
											LCD_Draw_Platform_Fill(0, 300, LCD_COLOR_BLACK);
 8001c06:	2200      	movs	r2, #0
 8001c08:	f44f 7196 	mov.w	r1, #300	@ 0x12c
 8001c0c:	2000      	movs	r0, #0
 8001c0e:	f7ff f9d9 	bl	8000fc4 <LCD_Draw_Platform_Fill>
											LCD_Draw_LShape1_Fill(50, (y + level) , LCD_COLOR_YELLOW,degree);
 8001c12:	8afa      	ldrh	r2, [r7, #22]
 8001c14:	89fb      	ldrh	r3, [r7, #14]
 8001c16:	4413      	add	r3, r2
 8001c18:	b299      	uxth	r1, r3
 8001c1a:	8abb      	ldrh	r3, [r7, #20]
 8001c1c:	f64f 72e0 	movw	r2, #65504	@ 0xffe0
 8001c20:	2032      	movs	r0, #50	@ 0x32
 8001c22:	f7fe ff9a 	bl	8000b5a <LCD_Draw_LShape1_Fill>
										  }

										  HAL_Delay(Fallrate);
 8001c26:	8a3b      	ldrh	r3, [r7, #16]
 8001c28:	4618      	mov	r0, r3
 8001c2a:	f001 fdb9 	bl	80037a0 <HAL_Delay>
										  y++;
 8001c2e:	8afb      	ldrh	r3, [r7, #22]
 8001c30:	3301      	adds	r3, #1
 8001c32:	82fb      	strh	r3, [r7, #22]
										  eventsToRun = getScheduledEvents();
 8001c34:	f7ff fb4e 	bl	80012d4 <getScheduledEvents>
 8001c38:	60b8      	str	r0, [r7, #8]
										if(ROTATE_BLOCK & eventsToRun){
 8001c3a:	68bb      	ldr	r3, [r7, #8]
 8001c3c:	f003 0304 	and.w	r3, r3, #4
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d006      	beq.n	8001c52 <gameScreen+0x21a>
												degree = 1 - degree;
 8001c44:	8abb      	ldrh	r3, [r7, #20]
 8001c46:	f1c3 0301 	rsb	r3, r3, #1
 8001c4a:	82bb      	strh	r3, [r7, #20]
												 removeSchedulerEvent(ROTATE_BLOCK);
 8001c4c:	2004      	movs	r0, #4
 8001c4e:	f7ff fb5f 	bl	8001310 <removeSchedulerEvent>
							while(y != CurrentY){
 8001c52:	4b2e      	ldr	r3, [pc, #184]	@ (8001d0c <gameScreen+0x2d4>)
 8001c54:	881b      	ldrh	r3, [r3, #0]
 8001c56:	8afa      	ldrh	r2, [r7, #22]
 8001c58:	429a      	cmp	r2, r3
 8001c5a:	d1b5      	bne.n	8001bc8 <gameScreen+0x190>
										}
									  }
								CurrentY = y - blockSize;
 8001c5c:	8afa      	ldrh	r2, [r7, #22]
 8001c5e:	8a7b      	ldrh	r3, [r7, #18]
 8001c60:	1ad3      	subs	r3, r2, r3
 8001c62:	b29a      	uxth	r2, r3
 8001c64:	4b29      	ldr	r3, [pc, #164]	@ (8001d0c <gameScreen+0x2d4>)
 8001c66:	801a      	strh	r2, [r3, #0]
								break;
 8001c68:	e147      	b.n	8001efa <gameScreen+0x4c2>
						case 3:
							while(y != CurrentY){
									LCD_Clear_Game(0, LCD_COLOR_BLUE, CurrentY+level);
 8001c6a:	4b28      	ldr	r3, [pc, #160]	@ (8001d0c <gameScreen+0x2d4>)
 8001c6c:	881a      	ldrh	r2, [r3, #0]
 8001c6e:	89fb      	ldrh	r3, [r7, #14]
 8001c70:	4413      	add	r3, r2
 8001c72:	b29b      	uxth	r3, r3
 8001c74:	461a      	mov	r2, r3
 8001c76:	211f      	movs	r1, #31
 8001c78:	2000      	movs	r0, #0
 8001c7a:	f7ff f9f5 	bl	8001068 <LCD_Clear_Game>
									  LCD_Draw_Platform_Fill(0, 300, LCD_COLOR_BLACK);
 8001c7e:	2200      	movs	r2, #0
 8001c80:	f44f 7196 	mov.w	r1, #300	@ 0x12c
 8001c84:	2000      	movs	r0, #0
 8001c86:	f7ff f99d 	bl	8000fc4 <LCD_Draw_Platform_Fill>
									  LCD_Draw_LShape2_Fill(50, (y + level), LCD_COLOR_RED, degree);
 8001c8a:	8afa      	ldrh	r2, [r7, #22]
 8001c8c:	89fb      	ldrh	r3, [r7, #14]
 8001c8e:	4413      	add	r3, r2
 8001c90:	b299      	uxth	r1, r3
 8001c92:	8abb      	ldrh	r3, [r7, #20]
 8001c94:	f44f 4278 	mov.w	r2, #63488	@ 0xf800
 8001c98:	2032      	movs	r0, #50	@ 0x32
 8001c9a:	f7fe ffa3 	bl	8000be4 <LCD_Draw_LShape2_Fill>
										  if(y == 289){
 8001c9e:	8afb      	ldrh	r3, [r7, #22]
 8001ca0:	f240 1221 	movw	r2, #289	@ 0x121
 8001ca4:	4293      	cmp	r3, r2
 8001ca6:	d10f      	bne.n	8001cc8 <gameScreen+0x290>
											LCD_Draw_Platform_Fill(0, 300, LCD_COLOR_BLACK);
 8001ca8:	2200      	movs	r2, #0
 8001caa:	f44f 7196 	mov.w	r1, #300	@ 0x12c
 8001cae:	2000      	movs	r0, #0
 8001cb0:	f7ff f988 	bl	8000fc4 <LCD_Draw_Platform_Fill>
											LCD_Draw_LShape2_Fill(50, (y + level), LCD_COLOR_RED, degree);
 8001cb4:	8afa      	ldrh	r2, [r7, #22]
 8001cb6:	89fb      	ldrh	r3, [r7, #14]
 8001cb8:	4413      	add	r3, r2
 8001cba:	b299      	uxth	r1, r3
 8001cbc:	8abb      	ldrh	r3, [r7, #20]
 8001cbe:	f44f 4278 	mov.w	r2, #63488	@ 0xf800
 8001cc2:	2032      	movs	r0, #50	@ 0x32
 8001cc4:	f7fe ff8e 	bl	8000be4 <LCD_Draw_LShape2_Fill>
										  }

										  HAL_Delay(Fallrate);
 8001cc8:	8a3b      	ldrh	r3, [r7, #16]
 8001cca:	4618      	mov	r0, r3
 8001ccc:	f001 fd68 	bl	80037a0 <HAL_Delay>
                                          y++;
 8001cd0:	8afb      	ldrh	r3, [r7, #22]
 8001cd2:	3301      	adds	r3, #1
 8001cd4:	82fb      	strh	r3, [r7, #22]
										  eventsToRun = getScheduledEvents();
 8001cd6:	f7ff fafd 	bl	80012d4 <getScheduledEvents>
 8001cda:	60b8      	str	r0, [r7, #8]
										if(ROTATE_BLOCK & eventsToRun){
 8001cdc:	68bb      	ldr	r3, [r7, #8]
 8001cde:	f003 0304 	and.w	r3, r3, #4
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d006      	beq.n	8001cf4 <gameScreen+0x2bc>
												degree = 1 - degree;
 8001ce6:	8abb      	ldrh	r3, [r7, #20]
 8001ce8:	f1c3 0301 	rsb	r3, r3, #1
 8001cec:	82bb      	strh	r3, [r7, #20]
												 removeSchedulerEvent(ROTATE_BLOCK);
 8001cee:	2004      	movs	r0, #4
 8001cf0:	f7ff fb0e 	bl	8001310 <removeSchedulerEvent>
							while(y != CurrentY){
 8001cf4:	4b05      	ldr	r3, [pc, #20]	@ (8001d0c <gameScreen+0x2d4>)
 8001cf6:	881b      	ldrh	r3, [r3, #0]
 8001cf8:	8afa      	ldrh	r2, [r7, #22]
 8001cfa:	429a      	cmp	r2, r3
 8001cfc:	d1b5      	bne.n	8001c6a <gameScreen+0x232>
										}
									  }
								CurrentY = y - blockSize;
 8001cfe:	8afa      	ldrh	r2, [r7, #22]
 8001d00:	8a7b      	ldrh	r3, [r7, #18]
 8001d02:	1ad3      	subs	r3, r2, r3
 8001d04:	b29a      	uxth	r2, r3
 8001d06:	4b01      	ldr	r3, [pc, #4]	@ (8001d0c <gameScreen+0x2d4>)
 8001d08:	801a      	strh	r2, [r3, #0]
								break;
 8001d0a:	e0f6      	b.n	8001efa <gameScreen+0x4c2>
 8001d0c:	20000010 	.word	0x20000010
						case 4:
							    while(y != CurrentY){
									LCD_Clear_Game(0, LCD_COLOR_BLUE, CurrentY+level);
 8001d10:	4b7c      	ldr	r3, [pc, #496]	@ (8001f04 <gameScreen+0x4cc>)
 8001d12:	881a      	ldrh	r2, [r3, #0]
 8001d14:	89fb      	ldrh	r3, [r7, #14]
 8001d16:	4413      	add	r3, r2
 8001d18:	b29b      	uxth	r3, r3
 8001d1a:	461a      	mov	r2, r3
 8001d1c:	211f      	movs	r1, #31
 8001d1e:	2000      	movs	r0, #0
 8001d20:	f7ff f9a2 	bl	8001068 <LCD_Clear_Game>
									  LCD_Draw_Platform_Fill(0, 300, LCD_COLOR_BLACK);
 8001d24:	2200      	movs	r2, #0
 8001d26:	f44f 7196 	mov.w	r1, #300	@ 0x12c
 8001d2a:	2000      	movs	r0, #0
 8001d2c:	f7ff f94a 	bl	8000fc4 <LCD_Draw_Platform_Fill>
									  LCD_Draw_TBox_Fill(50, (y + level), LCD_COLOR_RED, degree);
 8001d30:	8afa      	ldrh	r2, [r7, #22]
 8001d32:	89fb      	ldrh	r3, [r7, #14]
 8001d34:	4413      	add	r3, r2
 8001d36:	b299      	uxth	r1, r3
 8001d38:	8abb      	ldrh	r3, [r7, #20]
 8001d3a:	f44f 4278 	mov.w	r2, #63488	@ 0xf800
 8001d3e:	2032      	movs	r0, #50	@ 0x32
 8001d40:	f7ff f822 	bl	8000d88 <LCD_Draw_TBox_Fill>
										  if(y == 289){
 8001d44:	8afb      	ldrh	r3, [r7, #22]
 8001d46:	f240 1221 	movw	r2, #289	@ 0x121
 8001d4a:	4293      	cmp	r3, r2
 8001d4c:	d10f      	bne.n	8001d6e <gameScreen+0x336>
											LCD_Draw_Platform_Fill(0, 300, LCD_COLOR_BLACK);
 8001d4e:	2200      	movs	r2, #0
 8001d50:	f44f 7196 	mov.w	r1, #300	@ 0x12c
 8001d54:	2000      	movs	r0, #0
 8001d56:	f7ff f935 	bl	8000fc4 <LCD_Draw_Platform_Fill>
											LCD_Draw_TBox_Fill(50, (y + level), LCD_COLOR_RED,degree);
 8001d5a:	8afa      	ldrh	r2, [r7, #22]
 8001d5c:	89fb      	ldrh	r3, [r7, #14]
 8001d5e:	4413      	add	r3, r2
 8001d60:	b299      	uxth	r1, r3
 8001d62:	8abb      	ldrh	r3, [r7, #20]
 8001d64:	f44f 4278 	mov.w	r2, #63488	@ 0xf800
 8001d68:	2032      	movs	r0, #50	@ 0x32
 8001d6a:	f7ff f80d 	bl	8000d88 <LCD_Draw_TBox_Fill>
										  }

										  HAL_Delay(Fallrate);
 8001d6e:	8a3b      	ldrh	r3, [r7, #16]
 8001d70:	4618      	mov	r0, r3
 8001d72:	f001 fd15 	bl	80037a0 <HAL_Delay>
										  y++;
 8001d76:	8afb      	ldrh	r3, [r7, #22]
 8001d78:	3301      	adds	r3, #1
 8001d7a:	82fb      	strh	r3, [r7, #22]
										  eventsToRun = getScheduledEvents();
 8001d7c:	f7ff faaa 	bl	80012d4 <getScheduledEvents>
 8001d80:	60b8      	str	r0, [r7, #8]
										if(ROTATE_BLOCK & eventsToRun){
 8001d82:	68bb      	ldr	r3, [r7, #8]
 8001d84:	f003 0304 	and.w	r3, r3, #4
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d006      	beq.n	8001d9a <gameScreen+0x362>
												degree = 1 - degree;
 8001d8c:	8abb      	ldrh	r3, [r7, #20]
 8001d8e:	f1c3 0301 	rsb	r3, r3, #1
 8001d92:	82bb      	strh	r3, [r7, #20]
												 removeSchedulerEvent(ROTATE_BLOCK);
 8001d94:	2004      	movs	r0, #4
 8001d96:	f7ff fabb 	bl	8001310 <removeSchedulerEvent>
							    while(y != CurrentY){
 8001d9a:	4b5a      	ldr	r3, [pc, #360]	@ (8001f04 <gameScreen+0x4cc>)
 8001d9c:	881b      	ldrh	r3, [r3, #0]
 8001d9e:	8afa      	ldrh	r2, [r7, #22]
 8001da0:	429a      	cmp	r2, r3
 8001da2:	d1b5      	bne.n	8001d10 <gameScreen+0x2d8>
										}
									  }
								CurrentY = y - blockSize;
 8001da4:	8afa      	ldrh	r2, [r7, #22]
 8001da6:	8a7b      	ldrh	r3, [r7, #18]
 8001da8:	1ad3      	subs	r3, r2, r3
 8001daa:	b29a      	uxth	r2, r3
 8001dac:	4b55      	ldr	r3, [pc, #340]	@ (8001f04 <gameScreen+0x4cc>)
 8001dae:	801a      	strh	r2, [r3, #0]
								break;
 8001db0:	e0a3      	b.n	8001efa <gameScreen+0x4c2>
						case 5:
							while(y != CurrentY){
									LCD_Clear_Game(0, LCD_COLOR_BLUE, CurrentY+level+25);
 8001db2:	4b54      	ldr	r3, [pc, #336]	@ (8001f04 <gameScreen+0x4cc>)
 8001db4:	881a      	ldrh	r2, [r3, #0]
 8001db6:	89fb      	ldrh	r3, [r7, #14]
 8001db8:	4413      	add	r3, r2
 8001dba:	b29b      	uxth	r3, r3
 8001dbc:	3319      	adds	r3, #25
 8001dbe:	b29b      	uxth	r3, r3
 8001dc0:	461a      	mov	r2, r3
 8001dc2:	211f      	movs	r1, #31
 8001dc4:	2000      	movs	r0, #0
 8001dc6:	f7ff f94f 	bl	8001068 <LCD_Clear_Game>
									  LCD_Draw_Platform_Fill(0, 300, LCD_COLOR_BLACK);
 8001dca:	2200      	movs	r2, #0
 8001dcc:	f44f 7196 	mov.w	r1, #300	@ 0x12c
 8001dd0:	2000      	movs	r0, #0
 8001dd2:	f7ff f8f7 	bl	8000fc4 <LCD_Draw_Platform_Fill>
									  LCD_Draw_ZShape_Fill(50, (y + level), LCD_COLOR_WHITE,degree);
 8001dd6:	8afa      	ldrh	r2, [r7, #22]
 8001dd8:	89fb      	ldrh	r3, [r7, #14]
 8001dda:	4413      	add	r3, r2
 8001ddc:	b299      	uxth	r1, r3
 8001dde:	8abb      	ldrh	r3, [r7, #20]
 8001de0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001de4:	2032      	movs	r0, #50	@ 0x32
 8001de6:	f7ff f831 	bl	8000e4c <LCD_Draw_ZShape_Fill>
										  if(y == 289){
 8001dea:	8afb      	ldrh	r3, [r7, #22]
 8001dec:	f240 1221 	movw	r2, #289	@ 0x121
 8001df0:	4293      	cmp	r3, r2
 8001df2:	d10f      	bne.n	8001e14 <gameScreen+0x3dc>
											LCD_Draw_Platform_Fill(0, 300, LCD_COLOR_BLACK);
 8001df4:	2200      	movs	r2, #0
 8001df6:	f44f 7196 	mov.w	r1, #300	@ 0x12c
 8001dfa:	2000      	movs	r0, #0
 8001dfc:	f7ff f8e2 	bl	8000fc4 <LCD_Draw_Platform_Fill>
											LCD_Draw_ZShape_Fill(50, (y + level), LCD_COLOR_WHITE,degree);
 8001e00:	8afa      	ldrh	r2, [r7, #22]
 8001e02:	89fb      	ldrh	r3, [r7, #14]
 8001e04:	4413      	add	r3, r2
 8001e06:	b299      	uxth	r1, r3
 8001e08:	8abb      	ldrh	r3, [r7, #20]
 8001e0a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001e0e:	2032      	movs	r0, #50	@ 0x32
 8001e10:	f7ff f81c 	bl	8000e4c <LCD_Draw_ZShape_Fill>
										  }

										  HAL_Delay(Fallrate);
 8001e14:	8a3b      	ldrh	r3, [r7, #16]
 8001e16:	4618      	mov	r0, r3
 8001e18:	f001 fcc2 	bl	80037a0 <HAL_Delay>
										  y++;
 8001e1c:	8afb      	ldrh	r3, [r7, #22]
 8001e1e:	3301      	adds	r3, #1
 8001e20:	82fb      	strh	r3, [r7, #22]
										  eventsToRun = getScheduledEvents();
 8001e22:	f7ff fa57 	bl	80012d4 <getScheduledEvents>
 8001e26:	60b8      	str	r0, [r7, #8]
										if(ROTATE_BLOCK & eventsToRun){
 8001e28:	68bb      	ldr	r3, [r7, #8]
 8001e2a:	f003 0304 	and.w	r3, r3, #4
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d006      	beq.n	8001e40 <gameScreen+0x408>
												degree = 1 - degree;
 8001e32:	8abb      	ldrh	r3, [r7, #20]
 8001e34:	f1c3 0301 	rsb	r3, r3, #1
 8001e38:	82bb      	strh	r3, [r7, #20]
												 removeSchedulerEvent(ROTATE_BLOCK);
 8001e3a:	2004      	movs	r0, #4
 8001e3c:	f7ff fa68 	bl	8001310 <removeSchedulerEvent>
							while(y != CurrentY){
 8001e40:	4b30      	ldr	r3, [pc, #192]	@ (8001f04 <gameScreen+0x4cc>)
 8001e42:	881b      	ldrh	r3, [r3, #0]
 8001e44:	8afa      	ldrh	r2, [r7, #22]
 8001e46:	429a      	cmp	r2, r3
 8001e48:	d1b3      	bne.n	8001db2 <gameScreen+0x37a>
										}
									  }
								CurrentY = y - blockSize;
 8001e4a:	8afa      	ldrh	r2, [r7, #22]
 8001e4c:	8a7b      	ldrh	r3, [r7, #18]
 8001e4e:	1ad3      	subs	r3, r2, r3
 8001e50:	b29a      	uxth	r2, r3
 8001e52:	4b2c      	ldr	r3, [pc, #176]	@ (8001f04 <gameScreen+0x4cc>)
 8001e54:	801a      	strh	r2, [r3, #0]
								break;
 8001e56:	e050      	b.n	8001efa <gameScreen+0x4c2>
						case 6:
							while(y != CurrentY){
									  //LCD_Clear(0,LCD_COLOR_BLUE);
									LCD_Clear_Game(0, LCD_COLOR_BLUE, CurrentY+level);
 8001e58:	4b2a      	ldr	r3, [pc, #168]	@ (8001f04 <gameScreen+0x4cc>)
 8001e5a:	881a      	ldrh	r2, [r3, #0]
 8001e5c:	89fb      	ldrh	r3, [r7, #14]
 8001e5e:	4413      	add	r3, r2
 8001e60:	b29b      	uxth	r3, r3
 8001e62:	461a      	mov	r2, r3
 8001e64:	211f      	movs	r1, #31
 8001e66:	2000      	movs	r0, #0
 8001e68:	f7ff f8fe 	bl	8001068 <LCD_Clear_Game>
									  LCD_Draw_Platform_Fill(0, 300, LCD_COLOR_BLACK);
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	f44f 7196 	mov.w	r1, #300	@ 0x12c
 8001e72:	2000      	movs	r0, #0
 8001e74:	f7ff f8a6 	bl	8000fc4 <LCD_Draw_Platform_Fill>
									  LCD_Draw_SShape_Fill(50, (y + level), LCD_COLOR_YELLOW, degree);
 8001e78:	8afa      	ldrh	r2, [r7, #22]
 8001e7a:	89fb      	ldrh	r3, [r7, #14]
 8001e7c:	4413      	add	r3, r2
 8001e7e:	b299      	uxth	r1, r3
 8001e80:	8abb      	ldrh	r3, [r7, #20]
 8001e82:	f64f 72e0 	movw	r2, #65504	@ 0xffe0
 8001e86:	2032      	movs	r0, #50	@ 0x32
 8001e88:	f7ff f83e 	bl	8000f08 <LCD_Draw_SShape_Fill>
										  if(y == 289){
 8001e8c:	8afb      	ldrh	r3, [r7, #22]
 8001e8e:	f240 1221 	movw	r2, #289	@ 0x121
 8001e92:	4293      	cmp	r3, r2
 8001e94:	d10f      	bne.n	8001eb6 <gameScreen+0x47e>
											LCD_Draw_Platform_Fill(0, 300, LCD_COLOR_BLACK);
 8001e96:	2200      	movs	r2, #0
 8001e98:	f44f 7196 	mov.w	r1, #300	@ 0x12c
 8001e9c:	2000      	movs	r0, #0
 8001e9e:	f7ff f891 	bl	8000fc4 <LCD_Draw_Platform_Fill>
											LCD_Draw_SShape_Fill(50, (y + level), LCD_COLOR_YELLOW, degree );
 8001ea2:	8afa      	ldrh	r2, [r7, #22]
 8001ea4:	89fb      	ldrh	r3, [r7, #14]
 8001ea6:	4413      	add	r3, r2
 8001ea8:	b299      	uxth	r1, r3
 8001eaa:	8abb      	ldrh	r3, [r7, #20]
 8001eac:	f64f 72e0 	movw	r2, #65504	@ 0xffe0
 8001eb0:	2032      	movs	r0, #50	@ 0x32
 8001eb2:	f7ff f829 	bl	8000f08 <LCD_Draw_SShape_Fill>
										  }

										  HAL_Delay(Fallrate);
 8001eb6:	8a3b      	ldrh	r3, [r7, #16]
 8001eb8:	4618      	mov	r0, r3
 8001eba:	f001 fc71 	bl	80037a0 <HAL_Delay>
										  y++;
 8001ebe:	8afb      	ldrh	r3, [r7, #22]
 8001ec0:	3301      	adds	r3, #1
 8001ec2:	82fb      	strh	r3, [r7, #22]
										  eventsToRun = getScheduledEvents();
 8001ec4:	f7ff fa06 	bl	80012d4 <getScheduledEvents>
 8001ec8:	60b8      	str	r0, [r7, #8]
										if(ROTATE_BLOCK & eventsToRun){
 8001eca:	68bb      	ldr	r3, [r7, #8]
 8001ecc:	f003 0304 	and.w	r3, r3, #4
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d006      	beq.n	8001ee2 <gameScreen+0x4aa>
												degree = 1 - degree;
 8001ed4:	8abb      	ldrh	r3, [r7, #20]
 8001ed6:	f1c3 0301 	rsb	r3, r3, #1
 8001eda:	82bb      	strh	r3, [r7, #20]
												 removeSchedulerEvent(ROTATE_BLOCK);
 8001edc:	2004      	movs	r0, #4
 8001ede:	f7ff fa17 	bl	8001310 <removeSchedulerEvent>
							while(y != CurrentY){
 8001ee2:	4b08      	ldr	r3, [pc, #32]	@ (8001f04 <gameScreen+0x4cc>)
 8001ee4:	881b      	ldrh	r3, [r3, #0]
 8001ee6:	8afa      	ldrh	r2, [r7, #22]
 8001ee8:	429a      	cmp	r2, r3
 8001eea:	d1b5      	bne.n	8001e58 <gameScreen+0x420>
										}
									  }
								CurrentY = y - blockSize;
 8001eec:	8afa      	ldrh	r2, [r7, #22]
 8001eee:	8a7b      	ldrh	r3, [r7, #18]
 8001ef0:	1ad3      	subs	r3, r2, r3
 8001ef2:	b29a      	uxth	r2, r3
 8001ef4:	4b03      	ldr	r3, [pc, #12]	@ (8001f04 <gameScreen+0x4cc>)
 8001ef6:	801a      	strh	r2, [r3, #0]
								break;
 8001ef8:	bf00      	nop

		}



}
 8001efa:	bf00      	nop
 8001efc:	3718      	adds	r7, #24
 8001efe:	46bd      	mov	sp, r7
 8001f00:	bd80      	pop	{r7, pc}
 8001f02:	bf00      	nop
 8001f04:	20000010 	.word	0x20000010

08001f08 <gameOver>:
void gameOver(uint32_t time){
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	b08c      	sub	sp, #48	@ 0x30
 8001f0c:	af02      	add	r7, sp, #8
 8001f0e:	6078      	str	r0, [r7, #4]
	LCD_Clear(0,LCD_COLOR_WHITE);
 8001f10:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8001f14:	2000      	movs	r0, #0
 8001f16:	f7ff f8cf 	bl	80010b8 <LCD_Clear>
		 LCD_SetTextColor(LCD_COLOR_BLACK);
 8001f1a:	2000      	movs	r0, #0
 8001f1c:	f7ff f8ee 	bl	80010fc <LCD_SetTextColor>
			  LCD_SetFont(&Font16x24);
 8001f20:	4879      	ldr	r0, [pc, #484]	@ (8002108 <gameOver+0x200>)
 8001f22:	f7ff f8fb 	bl	800111c <LCD_SetFont>
			  LCD_DisplayChar(60, 50, 'T');
 8001f26:	2254      	movs	r2, #84	@ 0x54
 8001f28:	2132      	movs	r1, #50	@ 0x32
 8001f2a:	203c      	movs	r0, #60	@ 0x3c
 8001f2c:	f7ff f974 	bl	8001218 <LCD_DisplayChar>
			  LCD_SetTextColor(LCD_COLOR_BLACK);
 8001f30:	2000      	movs	r0, #0
 8001f32:	f7ff f8e3 	bl	80010fc <LCD_SetTextColor>
			  LCD_SetFont(&Font16x24);
 8001f36:	4874      	ldr	r0, [pc, #464]	@ (8002108 <gameOver+0x200>)
 8001f38:	f7ff f8f0 	bl	800111c <LCD_SetFont>
			  LCD_DisplayChar(80, 50, 'E');
 8001f3c:	2245      	movs	r2, #69	@ 0x45
 8001f3e:	2132      	movs	r1, #50	@ 0x32
 8001f40:	2050      	movs	r0, #80	@ 0x50
 8001f42:	f7ff f969 	bl	8001218 <LCD_DisplayChar>
			  LCD_SetTextColor(LCD_COLOR_BLACK);
 8001f46:	2000      	movs	r0, #0
 8001f48:	f7ff f8d8 	bl	80010fc <LCD_SetTextColor>
			  LCD_SetFont(&Font16x24);
 8001f4c:	486e      	ldr	r0, [pc, #440]	@ (8002108 <gameOver+0x200>)
 8001f4e:	f7ff f8e5 	bl	800111c <LCD_SetFont>
			  LCD_DisplayChar(100, 50, 'T');
 8001f52:	2254      	movs	r2, #84	@ 0x54
 8001f54:	2132      	movs	r1, #50	@ 0x32
 8001f56:	2064      	movs	r0, #100	@ 0x64
 8001f58:	f7ff f95e 	bl	8001218 <LCD_DisplayChar>
			  LCD_SetTextColor(LCD_COLOR_BLACK);
 8001f5c:	2000      	movs	r0, #0
 8001f5e:	f7ff f8cd 	bl	80010fc <LCD_SetTextColor>
			  LCD_SetFont(&Font16x24);
 8001f62:	4869      	ldr	r0, [pc, #420]	@ (8002108 <gameOver+0x200>)
 8001f64:	f7ff f8da 	bl	800111c <LCD_SetFont>
			  LCD_DisplayChar(120, 50, 'R');
 8001f68:	2252      	movs	r2, #82	@ 0x52
 8001f6a:	2132      	movs	r1, #50	@ 0x32
 8001f6c:	2078      	movs	r0, #120	@ 0x78
 8001f6e:	f7ff f953 	bl	8001218 <LCD_DisplayChar>
			  LCD_SetTextColor(LCD_COLOR_BLACK);
 8001f72:	2000      	movs	r0, #0
 8001f74:	f7ff f8c2 	bl	80010fc <LCD_SetTextColor>
			  LCD_SetFont(&Font16x24);
 8001f78:	4863      	ldr	r0, [pc, #396]	@ (8002108 <gameOver+0x200>)
 8001f7a:	f7ff f8cf 	bl	800111c <LCD_SetFont>
			  LCD_DisplayChar(140, 50, 'I');
 8001f7e:	2249      	movs	r2, #73	@ 0x49
 8001f80:	2132      	movs	r1, #50	@ 0x32
 8001f82:	208c      	movs	r0, #140	@ 0x8c
 8001f84:	f7ff f948 	bl	8001218 <LCD_DisplayChar>
			  LCD_SetTextColor(LCD_COLOR_BLACK);
 8001f88:	2000      	movs	r0, #0
 8001f8a:	f7ff f8b7 	bl	80010fc <LCD_SetTextColor>
			  LCD_SetFont(&Font16x24);
 8001f8e:	485e      	ldr	r0, [pc, #376]	@ (8002108 <gameOver+0x200>)
 8001f90:	f7ff f8c4 	bl	800111c <LCD_SetFont>
			  LCD_DisplayChar(160, 50, 'S');
 8001f94:	2253      	movs	r2, #83	@ 0x53
 8001f96:	2132      	movs	r1, #50	@ 0x32
 8001f98:	20a0      	movs	r0, #160	@ 0xa0
 8001f9a:	f7ff f93d 	bl	8001218 <LCD_DisplayChar>
			  LCD_Draw_Rectangle_Fill(85, 25, LCD_COLOR_BLACK, 0);
 8001f9e:	2300      	movs	r3, #0
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	2119      	movs	r1, #25
 8001fa4:	2055      	movs	r0, #85	@ 0x55
 8001fa6:	f7fe fe62 	bl	8000c6e <LCD_Draw_Rectangle_Fill>
			  //LCD_Draw_Rectangle_Rotate1_Fill(25, 25, LCD_COLOR_CYAN);
			  LCD_Draw_BBox_Fill(50, 240, LCD_COLOR_GREEN);
 8001faa:	f44f 62fc 	mov.w	r2, #2016	@ 0x7e0
 8001fae:	21f0      	movs	r1, #240	@ 0xf0
 8001fb0:	2032      	movs	r0, #50	@ 0x32
 8001fb2:	f7fe febe 	bl	8000d32 <LCD_Draw_BBox_Fill>
			  LCD_Draw_LShape1_Fill(70, 75, LCD_COLOR_MAGENTA,0);
 8001fb6:	2300      	movs	r3, #0
 8001fb8:	f64f 021f 	movw	r2, #63519	@ 0xf81f
 8001fbc:	214b      	movs	r1, #75	@ 0x4b
 8001fbe:	2046      	movs	r0, #70	@ 0x46
 8001fc0:	f7fe fdcb 	bl	8000b5a <LCD_Draw_LShape1_Fill>
			  LCD_Draw_LShape2_Fill(150, 100, LCD_COLOR_CYAN,0);
 8001fc4:	2300      	movs	r3, #0
 8001fc6:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8001fca:	2164      	movs	r1, #100	@ 0x64
 8001fcc:	2096      	movs	r0, #150	@ 0x96
 8001fce:	f7fe fe09 	bl	8000be4 <LCD_Draw_LShape2_Fill>
			  LCD_Draw_TBox_Fill(45, 10,  LCD_COLOR_RED,0);
 8001fd2:	2300      	movs	r3, #0
 8001fd4:	f44f 4278 	mov.w	r2, #63488	@ 0xf800
 8001fd8:	210a      	movs	r1, #10
 8001fda:	202d      	movs	r0, #45	@ 0x2d
 8001fdc:	f7fe fed4 	bl	8000d88 <LCD_Draw_TBox_Fill>
			  LCD_Draw_ZShape_Fill(190, 175, LCD_COLOR_GREY,0);
 8001fe0:	2300      	movs	r3, #0
 8001fe2:	f24f 72de 	movw	r2, #63454	@ 0xf7de
 8001fe6:	21af      	movs	r1, #175	@ 0xaf
 8001fe8:	20be      	movs	r0, #190	@ 0xbe
 8001fea:	f7fe ff2f 	bl	8000e4c <LCD_Draw_ZShape_Fill>
			  LCD_Draw_SShape_Fill(200, 100, LCD_COLOR_BLUE2,0);
 8001fee:	2300      	movs	r3, #0
 8001ff0:	f240 521f 	movw	r2, #1311	@ 0x51f
 8001ff4:	2164      	movs	r1, #100	@ 0x64
 8001ff6:	20c8      	movs	r0, #200	@ 0xc8
 8001ff8:	f7fe ff86 	bl	8000f08 <LCD_Draw_SShape_Fill>
			  LCD_Draw_Platform_Fill(0, 300, LCD_COLOR_BLACK);
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	f44f 7196 	mov.w	r1, #300	@ 0x12c
 8002002:	2000      	movs	r0, #0
 8002004:	f7fe ffde 	bl	8000fc4 <LCD_Draw_Platform_Fill>
			  LCD_SetFont(&Font16x24);
 8002008:	483f      	ldr	r0, [pc, #252]	@ (8002108 <gameOver+0x200>)
 800200a:	f7ff f887 	bl	800111c <LCD_SetFont>
			  LCD_DisplayChar(70, 150, 'G');
 800200e:	2247      	movs	r2, #71	@ 0x47
 8002010:	2196      	movs	r1, #150	@ 0x96
 8002012:	2046      	movs	r0, #70	@ 0x46
 8002014:	f7ff f900 	bl	8001218 <LCD_DisplayChar>
			  LCD_SetTextColor(LCD_COLOR_BLACK);
 8002018:	2000      	movs	r0, #0
 800201a:	f7ff f86f 	bl	80010fc <LCD_SetTextColor>
			  LCD_SetFont(&Font16x24);
 800201e:	483a      	ldr	r0, [pc, #232]	@ (8002108 <gameOver+0x200>)
 8002020:	f7ff f87c 	bl	800111c <LCD_SetFont>
			  LCD_DisplayChar(90, 150, 'A');
 8002024:	2241      	movs	r2, #65	@ 0x41
 8002026:	2196      	movs	r1, #150	@ 0x96
 8002028:	205a      	movs	r0, #90	@ 0x5a
 800202a:	f7ff f8f5 	bl	8001218 <LCD_DisplayChar>
			  LCD_SetTextColor(LCD_COLOR_BLACK);
 800202e:	2000      	movs	r0, #0
 8002030:	f7ff f864 	bl	80010fc <LCD_SetTextColor>
			  LCD_SetFont(&Font16x24);
 8002034:	4834      	ldr	r0, [pc, #208]	@ (8002108 <gameOver+0x200>)
 8002036:	f7ff f871 	bl	800111c <LCD_SetFont>
			  LCD_DisplayChar(110, 150, 'M');
 800203a:	224d      	movs	r2, #77	@ 0x4d
 800203c:	2196      	movs	r1, #150	@ 0x96
 800203e:	206e      	movs	r0, #110	@ 0x6e
 8002040:	f7ff f8ea 	bl	8001218 <LCD_DisplayChar>
			  LCD_SetTextColor(LCD_COLOR_BLACK);
 8002044:	2000      	movs	r0, #0
 8002046:	f7ff f859 	bl	80010fc <LCD_SetTextColor>
			  LCD_SetFont(&Font16x24);
 800204a:	482f      	ldr	r0, [pc, #188]	@ (8002108 <gameOver+0x200>)
 800204c:	f7ff f866 	bl	800111c <LCD_SetFont>
			  LCD_DisplayChar(130, 150, 'E');
 8002050:	2245      	movs	r2, #69	@ 0x45
 8002052:	2196      	movs	r1, #150	@ 0x96
 8002054:	2082      	movs	r0, #130	@ 0x82
 8002056:	f7ff f8df 	bl	8001218 <LCD_DisplayChar>
			  LCD_SetFont(&Font16x24);
 800205a:	482b      	ldr	r0, [pc, #172]	@ (8002108 <gameOver+0x200>)
 800205c:	f7ff f85e 	bl	800111c <LCD_SetFont>
			  LCD_DisplayChar(70, 180, 'O');
 8002060:	224f      	movs	r2, #79	@ 0x4f
 8002062:	21b4      	movs	r1, #180	@ 0xb4
 8002064:	2046      	movs	r0, #70	@ 0x46
 8002066:	f7ff f8d7 	bl	8001218 <LCD_DisplayChar>
			  LCD_SetTextColor(LCD_COLOR_BLACK);
 800206a:	2000      	movs	r0, #0
 800206c:	f7ff f846 	bl	80010fc <LCD_SetTextColor>
			  LCD_SetFont(&Font16x24);
 8002070:	4825      	ldr	r0, [pc, #148]	@ (8002108 <gameOver+0x200>)
 8002072:	f7ff f853 	bl	800111c <LCD_SetFont>
			  LCD_DisplayChar(90, 180, 'V');
 8002076:	2256      	movs	r2, #86	@ 0x56
 8002078:	21b4      	movs	r1, #180	@ 0xb4
 800207a:	205a      	movs	r0, #90	@ 0x5a
 800207c:	f7ff f8cc 	bl	8001218 <LCD_DisplayChar>
			  LCD_SetTextColor(LCD_COLOR_BLACK);
 8002080:	2000      	movs	r0, #0
 8002082:	f7ff f83b 	bl	80010fc <LCD_SetTextColor>
			  LCD_SetFont(&Font16x24);
 8002086:	4820      	ldr	r0, [pc, #128]	@ (8002108 <gameOver+0x200>)
 8002088:	f7ff f848 	bl	800111c <LCD_SetFont>
			  LCD_DisplayChar(110, 180, 'E');
 800208c:	2245      	movs	r2, #69	@ 0x45
 800208e:	21b4      	movs	r1, #180	@ 0xb4
 8002090:	206e      	movs	r0, #110	@ 0x6e
 8002092:	f7ff f8c1 	bl	8001218 <LCD_DisplayChar>
			  LCD_SetTextColor(LCD_COLOR_BLACK);
 8002096:	2000      	movs	r0, #0
 8002098:	f7ff f830 	bl	80010fc <LCD_SetTextColor>
			  LCD_SetFont(&Font16x24);
 800209c:	481a      	ldr	r0, [pc, #104]	@ (8002108 <gameOver+0x200>)
 800209e:	f7ff f83d 	bl	800111c <LCD_SetFont>
			  LCD_DisplayChar(130, 180, 'R');
 80020a2:	2252      	movs	r2, #82	@ 0x52
 80020a4:	21b4      	movs	r1, #180	@ 0xb4
 80020a6:	2082      	movs	r0, #130	@ 0x82
 80020a8:	f7ff f8b6 	bl	8001218 <LCD_DisplayChar>

			  // Convert time to milliseconds

			  // Convert milliseconds to minutes and seconds
			  uint32_t seconds = ((time * 238) / 1000) % 60;
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	22ee      	movs	r2, #238	@ 0xee
 80020b0:	fb02 f303 	mul.w	r3, r2, r3
 80020b4:	4a15      	ldr	r2, [pc, #84]	@ (800210c <gameOver+0x204>)
 80020b6:	fba2 2303 	umull	r2, r3, r2, r3
 80020ba:	099a      	lsrs	r2, r3, #6
 80020bc:	4b14      	ldr	r3, [pc, #80]	@ (8002110 <gameOver+0x208>)
 80020be:	fba3 1302 	umull	r1, r3, r3, r2
 80020c2:	0959      	lsrs	r1, r3, #5
 80020c4:	460b      	mov	r3, r1
 80020c6:	011b      	lsls	r3, r3, #4
 80020c8:	1a5b      	subs	r3, r3, r1
 80020ca:	009b      	lsls	r3, r3, #2
 80020cc:	1ad3      	subs	r3, r2, r3
 80020ce:	627b      	str	r3, [r7, #36]	@ 0x24
			  uint32_t minutes = ((time * 238) / 1000) /60;
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	22ee      	movs	r2, #238	@ 0xee
 80020d4:	fb02 f303 	mul.w	r3, r2, r3
 80020d8:	4a0e      	ldr	r2, [pc, #56]	@ (8002114 <gameOver+0x20c>)
 80020da:	fba2 2303 	umull	r2, r3, r2, r3
 80020de:	0b9b      	lsrs	r3, r3, #14
 80020e0:	623b      	str	r3, [r7, #32]
			  // Format the time into a string
			  char time_str[20];
			  snprintf(time_str, sizeof(time_str), "Time: %lu:%02lu", minutes, seconds); // Display the time string on the LCD
 80020e2:	f107 000c 	add.w	r0, r7, #12
 80020e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020e8:	9300      	str	r3, [sp, #0]
 80020ea:	6a3b      	ldr	r3, [r7, #32]
 80020ec:	4a0a      	ldr	r2, [pc, #40]	@ (8002118 <gameOver+0x210>)
 80020ee:	2114      	movs	r1, #20
 80020f0:	f004 fff8 	bl	80070e4 <sniprintf>

			  LCD_PrintString(time_str); // Print the time string
 80020f4:	f107 030c 	add.w	r3, r7, #12
 80020f8:	4618      	mov	r0, r3
 80020fa:	f7fe fb67 	bl	80007cc <LCD_PrintString>


}
 80020fe:	bf00      	nop
 8002100:	3728      	adds	r7, #40	@ 0x28
 8002102:	46bd      	mov	sp, r7
 8002104:	bd80      	pop	{r7, pc}
 8002106:	bf00      	nop
 8002108:	20000004 	.word	0x20000004
 800210c:	10624dd3 	.word	0x10624dd3
 8002110:	88888889 	.word	0x88888889
 8002114:	45e7b273 	.word	0x45e7b273
 8002118:	080081dc 	.word	0x080081dc

0800211c <GenerateRandomNumberTetris>:
uint32_t GenerateRandomNumberTetris(void){
 800211c:	b580      	push	{r7, lr}
 800211e:	b084      	sub	sp, #16
 8002120:	af00      	add	r7, sp, #0
	uint32_t random32bit;
	HAL_StatusTypeDef status = HAL_RNG_GenerateRandomNumber(&hrng, &random32bit);
 8002122:	1d3b      	adds	r3, r7, #4
 8002124:	4619      	mov	r1, r3
 8002126:	480d      	ldr	r0, [pc, #52]	@ (800215c <GenerateRandomNumberTetris+0x40>)
 8002128:	f004 f96c 	bl	8006404 <HAL_RNG_GenerateRandomNumber>
 800212c:	4603      	mov	r3, r0
 800212e:	73fb      	strb	r3, [r7, #15]

	if(status == HAL_OK){
 8002130:	7bfb      	ldrb	r3, [r7, #15]
 8002132:	2b00      	cmp	r3, #0
 8002134:	d10c      	bne.n	8002150 <GenerateRandomNumberTetris+0x34>
		uint32_t random_number = random32bit % 6;
 8002136:	687a      	ldr	r2, [r7, #4]
 8002138:	4b09      	ldr	r3, [pc, #36]	@ (8002160 <GenerateRandomNumberTetris+0x44>)
 800213a:	fba3 1302 	umull	r1, r3, r3, r2
 800213e:	0899      	lsrs	r1, r3, #2
 8002140:	460b      	mov	r3, r1
 8002142:	005b      	lsls	r3, r3, #1
 8002144:	440b      	add	r3, r1
 8002146:	005b      	lsls	r3, r3, #1
 8002148:	1ad3      	subs	r3, r2, r3
 800214a:	60bb      	str	r3, [r7, #8]
		return random_number;
 800214c:	68bb      	ldr	r3, [r7, #8]
 800214e:	e000      	b.n	8002152 <GenerateRandomNumberTetris+0x36>
	}
	else{ return 0;}
 8002150:	2300      	movs	r3, #0
}
 8002152:	4618      	mov	r0, r3
 8002154:	3710      	adds	r7, #16
 8002156:	46bd      	mov	sp, r7
 8002158:	bd80      	pop	{r7, pc}
 800215a:	bf00      	nop
 800215c:	20025ae8 	.word	0x20025ae8
 8002160:	aaaaaaab 	.word	0xaaaaaaab

08002164 <main>:
int main(void)
{
 8002164:	b580      	push	{r7, lr}
 8002166:	b084      	sub	sp, #16
 8002168:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800216a:	f001 faa7 	bl	80036bc <HAL_Init>

  /* Configure the system clock */
  //SystemClock_Config();
  // The default system configuration function is "suspect" so we need to make our own clock configuration
   // Note - You, the developer, MAY have to play with some of this coniguration as you progress in your project
   SystemClockOverride();
 800216e:	f000 fb6f 	bl	8002850 <SystemClockOverride>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002172:	f000 f9bf 	bl	80024f4 <MX_GPIO_Init>
  MX_I2C3_Init();
 8002176:	f000 f84b 	bl	8002210 <MX_I2C3_Init>
  MX_LTDC_Init();
 800217a:	f000 f889 	bl	8002290 <MX_LTDC_Init>
  MX_RNG_Init();
 800217e:	f000 f939 	bl	80023f4 <MX_RNG_Init>
  MX_SPI5_Init();
 8002182:	f000 f94b 	bl	800241c <MX_SPI5_Init>
  MX_TIM7_Init();
 8002186:	f000 f97f 	bl	8002488 <MX_TIM7_Init>
  Button_Interrupt_Init();
 800218a:	f7fe fae9 	bl	8000760 <Button_Interrupt_Init>
  /* USER CODE BEGIN 2 */
  ApplicationInit(); // Initializes the LCD functionality
 800218e:	f7fe f9f7 	bl	8000580 <ApplicationInit>
  addSchedulerEvent(START_SCREEN);
 8002192:	2001      	movs	r0, #1
 8002194:	f7ff f8aa 	bl	80012ec <addSchedulerEvent>

  //HAL_Delay(200);

  /* USER CODE END 2 */
  uint32_t eventsToRun;
  uint8_t flag = 1;
 8002198:	2301      	movs	r3, #1
 800219a:	73fb      	strb	r3, [r7, #15]
  uint32_t Current_Block = 0;
 800219c:	2300      	movs	r3, #0
 800219e:	60bb      	str	r3, [r7, #8]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    eventsToRun = getScheduledEvents();
 80021a0:	f7ff f898 	bl	80012d4 <getScheduledEvents>
 80021a4:	6078      	str	r0, [r7, #4]

		  if( START_SCREEN & eventsToRun)
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	f003 0301 	and.w	r3, r3, #1
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d005      	beq.n	80021bc <main+0x58>
		  { startScreen();
 80021b0:	f7ff fb8c 	bl	80018cc <startScreen>
		      removeSchedulerEvent(START_SCREEN);}
 80021b4:	2001      	movs	r0, #1
 80021b6:	f7ff f8ab 	bl	8001310 <removeSchedulerEvent>
 80021ba:	e7f1      	b.n	80021a0 <main+0x3c>
		  else if(SWITCH_TO_GAME_SCREEN & eventsToRun){
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	f003 0302 	and.w	r3, r3, #2
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d0ec      	beq.n	80021a0 <main+0x3c>
			  if(flag == 1){ HAL_TIM_Base_Start(&htim7);
 80021c6:	7bfb      	ldrb	r3, [r7, #15]
 80021c8:	2b01      	cmp	r3, #1
 80021ca:	d104      	bne.n	80021d6 <main+0x72>
 80021cc:	480e      	ldr	r0, [pc, #56]	@ (8002208 <main+0xa4>)
 80021ce:	f004 fc9f 	bl	8006b10 <HAL_TIM_Base_Start>
			  	  flag = 0;
 80021d2:	2300      	movs	r3, #0
 80021d4:	73fb      	strb	r3, [r7, #15]
			  }
				  Current_Block = GenerateRandomNumberTetris();
 80021d6:	f7ff ffa1 	bl	800211c <GenerateRandomNumberTetris>
 80021da:	60b8      	str	r0, [r7, #8]
				  gameScreen(Current_Block);
 80021dc:	68b8      	ldr	r0, [r7, #8]
 80021de:	f7ff fc2b 	bl	8001a38 <gameScreen>
				  addSchedulerEvent(SWITCH_TO_GAME_SCREEN);
 80021e2:	2002      	movs	r0, #2
 80021e4:	f7ff f882 	bl	80012ec <addSchedulerEvent>
				  if(CurrentY < 10){
 80021e8:	4b08      	ldr	r3, [pc, #32]	@ (800220c <main+0xa8>)
 80021ea:	881b      	ldrh	r3, [r3, #0]
 80021ec:	2b09      	cmp	r3, #9
 80021ee:	d8d7      	bhi.n	80021a0 <main+0x3c>
	                  HAL_TIM_Base_Stop(&htim7);
 80021f0:	4805      	ldr	r0, [pc, #20]	@ (8002208 <main+0xa4>)
 80021f2:	f004 fcf5 	bl	8006be0 <HAL_TIM_Base_Stop>
                      uint32_t elapsed_time = __HAL_TIM_GET_COUNTER(&htim7); // Get the timer counter value
 80021f6:	4b04      	ldr	r3, [pc, #16]	@ (8002208 <main+0xa4>)
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021fc:	603b      	str	r3, [r7, #0]
                      gameOver(elapsed_time);
 80021fe:	6838      	ldr	r0, [r7, #0]
 8002200:	f7ff fe82 	bl	8001f08 <gameOver>
    eventsToRun = getScheduledEvents();
 8002204:	e7cc      	b.n	80021a0 <main+0x3c>
 8002206:	bf00      	nop
 8002208:	20025b50 	.word	0x20025b50
 800220c:	20000010 	.word	0x20000010

08002210 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8002210:	b580      	push	{r7, lr}
 8002212:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8002214:	4b1b      	ldr	r3, [pc, #108]	@ (8002284 <MX_I2C3_Init+0x74>)
 8002216:	4a1c      	ldr	r2, [pc, #112]	@ (8002288 <MX_I2C3_Init+0x78>)
 8002218:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 800221a:	4b1a      	ldr	r3, [pc, #104]	@ (8002284 <MX_I2C3_Init+0x74>)
 800221c:	4a1b      	ldr	r2, [pc, #108]	@ (800228c <MX_I2C3_Init+0x7c>)
 800221e:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002220:	4b18      	ldr	r3, [pc, #96]	@ (8002284 <MX_I2C3_Init+0x74>)
 8002222:	2200      	movs	r2, #0
 8002224:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8002226:	4b17      	ldr	r3, [pc, #92]	@ (8002284 <MX_I2C3_Init+0x74>)
 8002228:	2200      	movs	r2, #0
 800222a:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800222c:	4b15      	ldr	r3, [pc, #84]	@ (8002284 <MX_I2C3_Init+0x74>)
 800222e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002232:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002234:	4b13      	ldr	r3, [pc, #76]	@ (8002284 <MX_I2C3_Init+0x74>)
 8002236:	2200      	movs	r2, #0
 8002238:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 800223a:	4b12      	ldr	r3, [pc, #72]	@ (8002284 <MX_I2C3_Init+0x74>)
 800223c:	2200      	movs	r2, #0
 800223e:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002240:	4b10      	ldr	r3, [pc, #64]	@ (8002284 <MX_I2C3_Init+0x74>)
 8002242:	2200      	movs	r2, #0
 8002244:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002246:	4b0f      	ldr	r3, [pc, #60]	@ (8002284 <MX_I2C3_Init+0x74>)
 8002248:	2200      	movs	r2, #0
 800224a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 800224c:	480d      	ldr	r0, [pc, #52]	@ (8002284 <MX_I2C3_Init+0x74>)
 800224e:	f001 ff25 	bl	800409c <HAL_I2C_Init>
 8002252:	4603      	mov	r3, r0
 8002254:	2b00      	cmp	r3, #0
 8002256:	d001      	beq.n	800225c <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8002258:	f000 fb3a 	bl	80028d0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800225c:	2100      	movs	r1, #0
 800225e:	4809      	ldr	r0, [pc, #36]	@ (8002284 <MX_I2C3_Init+0x74>)
 8002260:	f002 ff40 	bl	80050e4 <HAL_I2CEx_ConfigAnalogFilter>
 8002264:	4603      	mov	r3, r0
 8002266:	2b00      	cmp	r3, #0
 8002268:	d001      	beq.n	800226e <MX_I2C3_Init+0x5e>
  {
    Error_Handler();
 800226a:	f000 fb31 	bl	80028d0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 800226e:	2100      	movs	r1, #0
 8002270:	4804      	ldr	r0, [pc, #16]	@ (8002284 <MX_I2C3_Init+0x74>)
 8002272:	f002 ff73 	bl	800515c <HAL_I2CEx_ConfigDigitalFilter>
 8002276:	4603      	mov	r3, r0
 8002278:	2b00      	cmp	r3, #0
 800227a:	d001      	beq.n	8002280 <MX_I2C3_Init+0x70>
  {
    Error_Handler();
 800227c:	f000 fb28 	bl	80028d0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8002280:	bf00      	nop
 8002282:	bd80      	pop	{r7, pc}
 8002284:	200259ec 	.word	0x200259ec
 8002288:	40005c00 	.word	0x40005c00
 800228c:	000186a0 	.word	0x000186a0

08002290 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 8002290:	b580      	push	{r7, lr}
 8002292:	b09a      	sub	sp, #104	@ 0x68
 8002294:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8002296:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800229a:	2234      	movs	r2, #52	@ 0x34
 800229c:	2100      	movs	r1, #0
 800229e:	4618      	mov	r0, r3
 80022a0:	f005 f82c 	bl	80072fc <memset>
  LTDC_LayerCfgTypeDef pLayerCfg1 = {0};
 80022a4:	463b      	mov	r3, r7
 80022a6:	2234      	movs	r2, #52	@ 0x34
 80022a8:	2100      	movs	r1, #0
 80022aa:	4618      	mov	r0, r3
 80022ac:	f005 f826 	bl	80072fc <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 80022b0:	4b4e      	ldr	r3, [pc, #312]	@ (80023ec <MX_LTDC_Init+0x15c>)
 80022b2:	4a4f      	ldr	r2, [pc, #316]	@ (80023f0 <MX_LTDC_Init+0x160>)
 80022b4:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 80022b6:	4b4d      	ldr	r3, [pc, #308]	@ (80023ec <MX_LTDC_Init+0x15c>)
 80022b8:	2200      	movs	r2, #0
 80022ba:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 80022bc:	4b4b      	ldr	r3, [pc, #300]	@ (80023ec <MX_LTDC_Init+0x15c>)
 80022be:	2200      	movs	r2, #0
 80022c0:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 80022c2:	4b4a      	ldr	r3, [pc, #296]	@ (80023ec <MX_LTDC_Init+0x15c>)
 80022c4:	2200      	movs	r2, #0
 80022c6:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 80022c8:	4b48      	ldr	r3, [pc, #288]	@ (80023ec <MX_LTDC_Init+0x15c>)
 80022ca:	2200      	movs	r2, #0
 80022cc:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 7;
 80022ce:	4b47      	ldr	r3, [pc, #284]	@ (80023ec <MX_LTDC_Init+0x15c>)
 80022d0:	2207      	movs	r2, #7
 80022d2:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 3;
 80022d4:	4b45      	ldr	r3, [pc, #276]	@ (80023ec <MX_LTDC_Init+0x15c>)
 80022d6:	2203      	movs	r2, #3
 80022d8:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 14;
 80022da:	4b44      	ldr	r3, [pc, #272]	@ (80023ec <MX_LTDC_Init+0x15c>)
 80022dc:	220e      	movs	r2, #14
 80022de:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 5;
 80022e0:	4b42      	ldr	r3, [pc, #264]	@ (80023ec <MX_LTDC_Init+0x15c>)
 80022e2:	2205      	movs	r2, #5
 80022e4:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 654;
 80022e6:	4b41      	ldr	r3, [pc, #260]	@ (80023ec <MX_LTDC_Init+0x15c>)
 80022e8:	f240 228e 	movw	r2, #654	@ 0x28e
 80022ec:	625a      	str	r2, [r3, #36]	@ 0x24
  hltdc.Init.AccumulatedActiveH = 485;
 80022ee:	4b3f      	ldr	r3, [pc, #252]	@ (80023ec <MX_LTDC_Init+0x15c>)
 80022f0:	f240 12e5 	movw	r2, #485	@ 0x1e5
 80022f4:	629a      	str	r2, [r3, #40]	@ 0x28
  hltdc.Init.TotalWidth = 660;
 80022f6:	4b3d      	ldr	r3, [pc, #244]	@ (80023ec <MX_LTDC_Init+0x15c>)
 80022f8:	f44f 7225 	mov.w	r2, #660	@ 0x294
 80022fc:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc.Init.TotalHeigh = 487;
 80022fe:	4b3b      	ldr	r3, [pc, #236]	@ (80023ec <MX_LTDC_Init+0x15c>)
 8002300:	f240 12e7 	movw	r2, #487	@ 0x1e7
 8002304:	631a      	str	r2, [r3, #48]	@ 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8002306:	4b39      	ldr	r3, [pc, #228]	@ (80023ec <MX_LTDC_Init+0x15c>)
 8002308:	2200      	movs	r2, #0
 800230a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hltdc.Init.Backcolor.Green = 0;
 800230e:	4b37      	ldr	r3, [pc, #220]	@ (80023ec <MX_LTDC_Init+0x15c>)
 8002310:	2200      	movs	r2, #0
 8002312:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  hltdc.Init.Backcolor.Red = 0;
 8002316:	4b35      	ldr	r3, [pc, #212]	@ (80023ec <MX_LTDC_Init+0x15c>)
 8002318:	2200      	movs	r2, #0
 800231a:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 800231e:	4833      	ldr	r0, [pc, #204]	@ (80023ec <MX_LTDC_Init+0x15c>)
 8002320:	f002 ff5c 	bl	80051dc <HAL_LTDC_Init>
 8002324:	4603      	mov	r3, r0
 8002326:	2b00      	cmp	r3, #0
 8002328:	d001      	beq.n	800232e <MX_LTDC_Init+0x9e>
  {
    Error_Handler();
 800232a:	f000 fad1 	bl	80028d0 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 800232e:	2300      	movs	r3, #0
 8002330:	637b      	str	r3, [r7, #52]	@ 0x34
  pLayerCfg.WindowX1 = 0;
 8002332:	2300      	movs	r3, #0
 8002334:	63bb      	str	r3, [r7, #56]	@ 0x38
  pLayerCfg.WindowY0 = 0;
 8002336:	2300      	movs	r3, #0
 8002338:	63fb      	str	r3, [r7, #60]	@ 0x3c
  pLayerCfg.WindowY1 = 0;
 800233a:	2300      	movs	r3, #0
 800233c:	643b      	str	r3, [r7, #64]	@ 0x40
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 800233e:	2300      	movs	r3, #0
 8002340:	647b      	str	r3, [r7, #68]	@ 0x44
  pLayerCfg.Alpha = 0;
 8002342:	2300      	movs	r3, #0
 8002344:	64bb      	str	r3, [r7, #72]	@ 0x48
  pLayerCfg.Alpha0 = 0;
 8002346:	2300      	movs	r3, #0
 8002348:	64fb      	str	r3, [r7, #76]	@ 0x4c
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 800234a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800234e:	653b      	str	r3, [r7, #80]	@ 0x50
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8002350:	2305      	movs	r3, #5
 8002352:	657b      	str	r3, [r7, #84]	@ 0x54
  pLayerCfg.FBStartAdress = 0;
 8002354:	2300      	movs	r3, #0
 8002356:	65bb      	str	r3, [r7, #88]	@ 0x58
  pLayerCfg.ImageWidth = 0;
 8002358:	2300      	movs	r3, #0
 800235a:	65fb      	str	r3, [r7, #92]	@ 0x5c
  pLayerCfg.ImageHeight = 0;
 800235c:	2300      	movs	r3, #0
 800235e:	663b      	str	r3, [r7, #96]	@ 0x60
  pLayerCfg.Backcolor.Blue = 0;
 8002360:	2300      	movs	r3, #0
 8002362:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
  pLayerCfg.Backcolor.Green = 0;
 8002366:	2300      	movs	r3, #0
 8002368:	f887 3065 	strb.w	r3, [r7, #101]	@ 0x65
  pLayerCfg.Backcolor.Red = 0;
 800236c:	2300      	movs	r3, #0
 800236e:	f887 3066 	strb.w	r3, [r7, #102]	@ 0x66
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8002372:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8002376:	2200      	movs	r2, #0
 8002378:	4619      	mov	r1, r3
 800237a:	481c      	ldr	r0, [pc, #112]	@ (80023ec <MX_LTDC_Init+0x15c>)
 800237c:	f002 fffe 	bl	800537c <HAL_LTDC_ConfigLayer>
 8002380:	4603      	mov	r3, r0
 8002382:	2b00      	cmp	r3, #0
 8002384:	d001      	beq.n	800238a <MX_LTDC_Init+0xfa>
  {
    Error_Handler();
 8002386:	f000 faa3 	bl	80028d0 <Error_Handler>
  }
  pLayerCfg1.WindowX0 = 0;
 800238a:	2300      	movs	r3, #0
 800238c:	603b      	str	r3, [r7, #0]
  pLayerCfg1.WindowX1 = 0;
 800238e:	2300      	movs	r3, #0
 8002390:	607b      	str	r3, [r7, #4]
  pLayerCfg1.WindowY0 = 0;
 8002392:	2300      	movs	r3, #0
 8002394:	60bb      	str	r3, [r7, #8]
  pLayerCfg1.WindowY1 = 0;
 8002396:	2300      	movs	r3, #0
 8002398:	60fb      	str	r3, [r7, #12]
  pLayerCfg1.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 800239a:	2300      	movs	r3, #0
 800239c:	613b      	str	r3, [r7, #16]
  pLayerCfg1.Alpha = 0;
 800239e:	2300      	movs	r3, #0
 80023a0:	617b      	str	r3, [r7, #20]
  pLayerCfg1.Alpha0 = 0;
 80023a2:	2300      	movs	r3, #0
 80023a4:	61bb      	str	r3, [r7, #24]
  pLayerCfg1.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 80023a6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80023aa:	61fb      	str	r3, [r7, #28]
  pLayerCfg1.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 80023ac:	2305      	movs	r3, #5
 80023ae:	623b      	str	r3, [r7, #32]
  pLayerCfg1.FBStartAdress = 0;
 80023b0:	2300      	movs	r3, #0
 80023b2:	627b      	str	r3, [r7, #36]	@ 0x24
  pLayerCfg1.ImageWidth = 0;
 80023b4:	2300      	movs	r3, #0
 80023b6:	62bb      	str	r3, [r7, #40]	@ 0x28
  pLayerCfg1.ImageHeight = 0;
 80023b8:	2300      	movs	r3, #0
 80023ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
  pLayerCfg1.Backcolor.Blue = 0;
 80023bc:	2300      	movs	r3, #0
 80023be:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  pLayerCfg1.Backcolor.Green = 0;
 80023c2:	2300      	movs	r3, #0
 80023c4:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31
  pLayerCfg1.Backcolor.Red = 0;
 80023c8:	2300      	movs	r3, #0
 80023ca:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg1, 1) != HAL_OK)
 80023ce:	463b      	mov	r3, r7
 80023d0:	2201      	movs	r2, #1
 80023d2:	4619      	mov	r1, r3
 80023d4:	4805      	ldr	r0, [pc, #20]	@ (80023ec <MX_LTDC_Init+0x15c>)
 80023d6:	f002 ffd1 	bl	800537c <HAL_LTDC_ConfigLayer>
 80023da:	4603      	mov	r3, r0
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d001      	beq.n	80023e4 <MX_LTDC_Init+0x154>
  {
    Error_Handler();
 80023e0:	f000 fa76 	bl	80028d0 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 80023e4:	bf00      	nop
 80023e6:	3768      	adds	r7, #104	@ 0x68
 80023e8:	46bd      	mov	sp, r7
 80023ea:	bd80      	pop	{r7, pc}
 80023ec:	20025a40 	.word	0x20025a40
 80023f0:	40016800 	.word	0x40016800

080023f4 <MX_RNG_Init>:
  * @brief RNG Initialization Function
  * @param None
  * @retval None
  */
static void MX_RNG_Init(void)
{
 80023f4:	b580      	push	{r7, lr}
 80023f6:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 80023f8:	4b06      	ldr	r3, [pc, #24]	@ (8002414 <MX_RNG_Init+0x20>)
 80023fa:	4a07      	ldr	r2, [pc, #28]	@ (8002418 <MX_RNG_Init+0x24>)
 80023fc:	601a      	str	r2, [r3, #0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 80023fe:	4805      	ldr	r0, [pc, #20]	@ (8002414 <MX_RNG_Init+0x20>)
 8002400:	f003 ffd6 	bl	80063b0 <HAL_RNG_Init>
 8002404:	4603      	mov	r3, r0
 8002406:	2b00      	cmp	r3, #0
 8002408:	d001      	beq.n	800240e <MX_RNG_Init+0x1a>
  {
    Error_Handler();
 800240a:	f000 fa61 	bl	80028d0 <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 800240e:	bf00      	nop
 8002410:	bd80      	pop	{r7, pc}
 8002412:	bf00      	nop
 8002414:	20025ae8 	.word	0x20025ae8
 8002418:	50060800 	.word	0x50060800

0800241c <MX_SPI5_Init>:
  * @brief SPI5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI5_Init(void)
{
 800241c:	b580      	push	{r7, lr}
 800241e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  /* SPI5 parameter configuration*/
  hspi5.Instance = SPI5;
 8002420:	4b17      	ldr	r3, [pc, #92]	@ (8002480 <MX_SPI5_Init+0x64>)
 8002422:	4a18      	ldr	r2, [pc, #96]	@ (8002484 <MX_SPI5_Init+0x68>)
 8002424:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 8002426:	4b16      	ldr	r3, [pc, #88]	@ (8002480 <MX_SPI5_Init+0x64>)
 8002428:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800242c:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 800242e:	4b14      	ldr	r3, [pc, #80]	@ (8002480 <MX_SPI5_Init+0x64>)
 8002430:	2200      	movs	r2, #0
 8002432:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 8002434:	4b12      	ldr	r3, [pc, #72]	@ (8002480 <MX_SPI5_Init+0x64>)
 8002436:	2200      	movs	r2, #0
 8002438:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 800243a:	4b11      	ldr	r3, [pc, #68]	@ (8002480 <MX_SPI5_Init+0x64>)
 800243c:	2200      	movs	r2, #0
 800243e:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002440:	4b0f      	ldr	r3, [pc, #60]	@ (8002480 <MX_SPI5_Init+0x64>)
 8002442:	2200      	movs	r2, #0
 8002444:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 8002446:	4b0e      	ldr	r3, [pc, #56]	@ (8002480 <MX_SPI5_Init+0x64>)
 8002448:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800244c:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800244e:	4b0c      	ldr	r3, [pc, #48]	@ (8002480 <MX_SPI5_Init+0x64>)
 8002450:	2200      	movs	r2, #0
 8002452:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002454:	4b0a      	ldr	r3, [pc, #40]	@ (8002480 <MX_SPI5_Init+0x64>)
 8002456:	2200      	movs	r2, #0
 8002458:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 800245a:	4b09      	ldr	r3, [pc, #36]	@ (8002480 <MX_SPI5_Init+0x64>)
 800245c:	2200      	movs	r2, #0
 800245e:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002460:	4b07      	ldr	r3, [pc, #28]	@ (8002480 <MX_SPI5_Init+0x64>)
 8002462:	2200      	movs	r2, #0
 8002464:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi5.Init.CRCPolynomial = 10;
 8002466:	4b06      	ldr	r3, [pc, #24]	@ (8002480 <MX_SPI5_Init+0x64>)
 8002468:	220a      	movs	r2, #10
 800246a:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 800246c:	4804      	ldr	r0, [pc, #16]	@ (8002480 <MX_SPI5_Init+0x64>)
 800246e:	f004 f81f 	bl	80064b0 <HAL_SPI_Init>
 8002472:	4603      	mov	r3, r0
 8002474:	2b00      	cmp	r3, #0
 8002476:	d001      	beq.n	800247c <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 8002478:	f000 fa2a 	bl	80028d0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 800247c:	bf00      	nop
 800247e:	bd80      	pop	{r7, pc}
 8002480:	20025af8 	.word	0x20025af8
 8002484:	40015000 	.word	0x40015000

08002488 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8002488:	b580      	push	{r7, lr}
 800248a:	b082      	sub	sp, #8
 800248c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800248e:	463b      	mov	r3, r7
 8002490:	2200      	movs	r2, #0
 8002492:	601a      	str	r2, [r3, #0]
 8002494:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8002496:	4b15      	ldr	r3, [pc, #84]	@ (80024ec <MX_TIM7_Init+0x64>)
 8002498:	4a15      	ldr	r2, [pc, #84]	@ (80024f0 <MX_TIM7_Init+0x68>)
 800249a:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 1487;//0;
 800249c:	4b13      	ldr	r3, [pc, #76]	@ (80024ec <MX_TIM7_Init+0x64>)
 800249e:	f240 52cf 	movw	r2, #1487	@ 0x5cf
 80024a2:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80024a4:	4b11      	ldr	r3, [pc, #68]	@ (80024ec <MX_TIM7_Init+0x64>)
 80024a6:	2200      	movs	r2, #0
 80024a8:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 999;//65535;
 80024aa:	4b10      	ldr	r3, [pc, #64]	@ (80024ec <MX_TIM7_Init+0x64>)
 80024ac:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80024b0:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80024b2:	4b0e      	ldr	r3, [pc, #56]	@ (80024ec <MX_TIM7_Init+0x64>)
 80024b4:	2200      	movs	r2, #0
 80024b6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80024b8:	480c      	ldr	r0, [pc, #48]	@ (80024ec <MX_TIM7_Init+0x64>)
 80024ba:	f004 fad9 	bl	8006a70 <HAL_TIM_Base_Init>
 80024be:	4603      	mov	r3, r0
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d001      	beq.n	80024c8 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 80024c4:	f000 fa04 	bl	80028d0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80024c8:	2300      	movs	r3, #0
 80024ca:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80024cc:	2300      	movs	r3, #0
 80024ce:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80024d0:	463b      	mov	r3, r7
 80024d2:	4619      	mov	r1, r3
 80024d4:	4805      	ldr	r0, [pc, #20]	@ (80024ec <MX_TIM7_Init+0x64>)
 80024d6:	f004 fc57 	bl	8006d88 <HAL_TIMEx_MasterConfigSynchronization>
 80024da:	4603      	mov	r3, r0
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d001      	beq.n	80024e4 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 80024e0:	f000 f9f6 	bl	80028d0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 80024e4:	bf00      	nop
 80024e6:	3708      	adds	r7, #8
 80024e8:	46bd      	mov	sp, r7
 80024ea:	bd80      	pop	{r7, pc}
 80024ec:	20025b50 	.word	0x20025b50
 80024f0:	40001400 	.word	0x40001400

080024f4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80024f4:	b580      	push	{r7, lr}
 80024f6:	b08e      	sub	sp, #56	@ 0x38
 80024f8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024fa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80024fe:	2200      	movs	r2, #0
 8002500:	601a      	str	r2, [r3, #0]
 8002502:	605a      	str	r2, [r3, #4]
 8002504:	609a      	str	r2, [r3, #8]
 8002506:	60da      	str	r2, [r3, #12]
 8002508:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800250a:	2300      	movs	r3, #0
 800250c:	623b      	str	r3, [r7, #32]
 800250e:	4bb2      	ldr	r3, [pc, #712]	@ (80027d8 <MX_GPIO_Init+0x2e4>)
 8002510:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002512:	4ab1      	ldr	r2, [pc, #708]	@ (80027d8 <MX_GPIO_Init+0x2e4>)
 8002514:	f043 0304 	orr.w	r3, r3, #4
 8002518:	6313      	str	r3, [r2, #48]	@ 0x30
 800251a:	4baf      	ldr	r3, [pc, #700]	@ (80027d8 <MX_GPIO_Init+0x2e4>)
 800251c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800251e:	f003 0304 	and.w	r3, r3, #4
 8002522:	623b      	str	r3, [r7, #32]
 8002524:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002526:	2300      	movs	r3, #0
 8002528:	61fb      	str	r3, [r7, #28]
 800252a:	4bab      	ldr	r3, [pc, #684]	@ (80027d8 <MX_GPIO_Init+0x2e4>)
 800252c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800252e:	4aaa      	ldr	r2, [pc, #680]	@ (80027d8 <MX_GPIO_Init+0x2e4>)
 8002530:	f043 0320 	orr.w	r3, r3, #32
 8002534:	6313      	str	r3, [r2, #48]	@ 0x30
 8002536:	4ba8      	ldr	r3, [pc, #672]	@ (80027d8 <MX_GPIO_Init+0x2e4>)
 8002538:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800253a:	f003 0320 	and.w	r3, r3, #32
 800253e:	61fb      	str	r3, [r7, #28]
 8002540:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002542:	2300      	movs	r3, #0
 8002544:	61bb      	str	r3, [r7, #24]
 8002546:	4ba4      	ldr	r3, [pc, #656]	@ (80027d8 <MX_GPIO_Init+0x2e4>)
 8002548:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800254a:	4aa3      	ldr	r2, [pc, #652]	@ (80027d8 <MX_GPIO_Init+0x2e4>)
 800254c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002550:	6313      	str	r3, [r2, #48]	@ 0x30
 8002552:	4ba1      	ldr	r3, [pc, #644]	@ (80027d8 <MX_GPIO_Init+0x2e4>)
 8002554:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002556:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800255a:	61bb      	str	r3, [r7, #24]
 800255c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800255e:	2300      	movs	r3, #0
 8002560:	617b      	str	r3, [r7, #20]
 8002562:	4b9d      	ldr	r3, [pc, #628]	@ (80027d8 <MX_GPIO_Init+0x2e4>)
 8002564:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002566:	4a9c      	ldr	r2, [pc, #624]	@ (80027d8 <MX_GPIO_Init+0x2e4>)
 8002568:	f043 0301 	orr.w	r3, r3, #1
 800256c:	6313      	str	r3, [r2, #48]	@ 0x30
 800256e:	4b9a      	ldr	r3, [pc, #616]	@ (80027d8 <MX_GPIO_Init+0x2e4>)
 8002570:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002572:	f003 0301 	and.w	r3, r3, #1
 8002576:	617b      	str	r3, [r7, #20]
 8002578:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800257a:	2300      	movs	r3, #0
 800257c:	613b      	str	r3, [r7, #16]
 800257e:	4b96      	ldr	r3, [pc, #600]	@ (80027d8 <MX_GPIO_Init+0x2e4>)
 8002580:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002582:	4a95      	ldr	r2, [pc, #596]	@ (80027d8 <MX_GPIO_Init+0x2e4>)
 8002584:	f043 0302 	orr.w	r3, r3, #2
 8002588:	6313      	str	r3, [r2, #48]	@ 0x30
 800258a:	4b93      	ldr	r3, [pc, #588]	@ (80027d8 <MX_GPIO_Init+0x2e4>)
 800258c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800258e:	f003 0302 	and.w	r3, r3, #2
 8002592:	613b      	str	r3, [r7, #16]
 8002594:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002596:	2300      	movs	r3, #0
 8002598:	60fb      	str	r3, [r7, #12]
 800259a:	4b8f      	ldr	r3, [pc, #572]	@ (80027d8 <MX_GPIO_Init+0x2e4>)
 800259c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800259e:	4a8e      	ldr	r2, [pc, #568]	@ (80027d8 <MX_GPIO_Init+0x2e4>)
 80025a0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80025a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80025a6:	4b8c      	ldr	r3, [pc, #560]	@ (80027d8 <MX_GPIO_Init+0x2e4>)
 80025a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025aa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80025ae:	60fb      	str	r3, [r7, #12]
 80025b0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80025b2:	2300      	movs	r3, #0
 80025b4:	60bb      	str	r3, [r7, #8]
 80025b6:	4b88      	ldr	r3, [pc, #544]	@ (80027d8 <MX_GPIO_Init+0x2e4>)
 80025b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025ba:	4a87      	ldr	r2, [pc, #540]	@ (80027d8 <MX_GPIO_Init+0x2e4>)
 80025bc:	f043 0310 	orr.w	r3, r3, #16
 80025c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80025c2:	4b85      	ldr	r3, [pc, #532]	@ (80027d8 <MX_GPIO_Init+0x2e4>)
 80025c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025c6:	f003 0310 	and.w	r3, r3, #16
 80025ca:	60bb      	str	r3, [r7, #8]
 80025cc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80025ce:	2300      	movs	r3, #0
 80025d0:	607b      	str	r3, [r7, #4]
 80025d2:	4b81      	ldr	r3, [pc, #516]	@ (80027d8 <MX_GPIO_Init+0x2e4>)
 80025d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025d6:	4a80      	ldr	r2, [pc, #512]	@ (80027d8 <MX_GPIO_Init+0x2e4>)
 80025d8:	f043 0308 	orr.w	r3, r3, #8
 80025dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80025de:	4b7e      	ldr	r3, [pc, #504]	@ (80027d8 <MX_GPIO_Init+0x2e4>)
 80025e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025e2:	f003 0308 	and.w	r3, r3, #8
 80025e6:	607b      	str	r3, [r7, #4]
 80025e8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin, GPIO_PIN_RESET);
 80025ea:	2200      	movs	r2, #0
 80025ec:	2116      	movs	r1, #22
 80025ee:	487b      	ldr	r0, [pc, #492]	@ (80027dc <MX_GPIO_Init+0x2e8>)
 80025f0:	f001 fd3a 	bl	8004068 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ACP_RST_GPIO_Port, ACP_RST_Pin, GPIO_PIN_RESET);
 80025f4:	2200      	movs	r2, #0
 80025f6:	2180      	movs	r1, #128	@ 0x80
 80025f8:	4879      	ldr	r0, [pc, #484]	@ (80027e0 <MX_GPIO_Init+0x2ec>)
 80025fa:	f001 fd35 	bl	8004068 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, RDX_Pin|WRX_DCX_Pin, GPIO_PIN_RESET);
 80025fe:	2200      	movs	r2, #0
 8002600:	f44f 5140 	mov.w	r1, #12288	@ 0x3000
 8002604:	4877      	ldr	r0, [pc, #476]	@ (80027e4 <MX_GPIO_Init+0x2f0>)
 8002606:	f001 fd2f 	bl	8004068 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LD3_Pin|LD4_Pin, GPIO_PIN_RESET);
 800260a:	2200      	movs	r2, #0
 800260c:	f44f 41c0 	mov.w	r1, #24576	@ 0x6000
 8002610:	4875      	ldr	r0, [pc, #468]	@ (80027e8 <MX_GPIO_Init+0x2f4>)
 8002612:	f001 fd29 	bl	8004068 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : A0_Pin A1_Pin A2_Pin A3_Pin
                           A4_Pin A5_Pin SDNRAS_Pin A6_Pin
                           A7_Pin A8_Pin A9_Pin */
  GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin|A3_Pin
 8002616:	f64f 033f 	movw	r3, #63551	@ 0xf83f
 800261a:	627b      	str	r3, [r7, #36]	@ 0x24
                          |A4_Pin|A5_Pin|SDNRAS_Pin|A6_Pin
                          |A7_Pin|A8_Pin|A9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800261c:	2302      	movs	r3, #2
 800261e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002620:	2300      	movs	r3, #0
 8002622:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002624:	2303      	movs	r3, #3
 8002626:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002628:	230c      	movs	r3, #12
 800262a:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800262c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002630:	4619      	mov	r1, r3
 8002632:	486e      	ldr	r0, [pc, #440]	@ (80027ec <MX_GPIO_Init+0x2f8>)
 8002634:	f001 fa60 	bl	8003af8 <HAL_GPIO_Init>

  /*Configure GPIO pin : SDNWE_Pin */
  GPIO_InitStruct.Pin = SDNWE_Pin;
 8002638:	2301      	movs	r3, #1
 800263a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800263c:	2302      	movs	r3, #2
 800263e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002640:	2300      	movs	r3, #0
 8002642:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002644:	2303      	movs	r3, #3
 8002646:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002648:	230c      	movs	r3, #12
 800264a:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(SDNWE_GPIO_Port, &GPIO_InitStruct);
 800264c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002650:	4619      	mov	r1, r3
 8002652:	4862      	ldr	r0, [pc, #392]	@ (80027dc <MX_GPIO_Init+0x2e8>)
 8002654:	f001 fa50 	bl	8003af8 <HAL_GPIO_Init>

  /*Configure GPIO pins : NCS_MEMS_SPI_Pin CSX_Pin OTG_FS_PSO_Pin */
  GPIO_InitStruct.Pin = NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin;
 8002658:	2316      	movs	r3, #22
 800265a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800265c:	2301      	movs	r3, #1
 800265e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002660:	2300      	movs	r3, #0
 8002662:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002664:	2300      	movs	r3, #0
 8002666:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002668:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800266c:	4619      	mov	r1, r3
 800266e:	485b      	ldr	r0, [pc, #364]	@ (80027dc <MX_GPIO_Init+0x2e8>)
 8002670:	f001 fa42 	bl	8003af8 <HAL_GPIO_Init>

  /*Configure GPIO pins : B1_Pin MEMS_INT1_Pin MEMS_INT2_Pin TP_INT1_Pin */
  GPIO_InitStruct.Pin = B1_Pin|MEMS_INT1_Pin|MEMS_INT2_Pin|TP_INT1_Pin;
 8002674:	f248 0307 	movw	r3, #32775	@ 0x8007
 8002678:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800267a:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 800267e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002680:	2300      	movs	r3, #0
 8002682:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002684:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002688:	4619      	mov	r1, r3
 800268a:	4855      	ldr	r0, [pc, #340]	@ (80027e0 <MX_GPIO_Init+0x2ec>)
 800268c:	f001 fa34 	bl	8003af8 <HAL_GPIO_Init>

  /*Configure GPIO pin : ACP_RST_Pin */
  GPIO_InitStruct.Pin = ACP_RST_Pin;
 8002690:	2380      	movs	r3, #128	@ 0x80
 8002692:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002694:	2301      	movs	r3, #1
 8002696:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002698:	2300      	movs	r3, #0
 800269a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800269c:	2300      	movs	r3, #0
 800269e:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(ACP_RST_GPIO_Port, &GPIO_InitStruct);
 80026a0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80026a4:	4619      	mov	r1, r3
 80026a6:	484e      	ldr	r0, [pc, #312]	@ (80027e0 <MX_GPIO_Init+0x2ec>)
 80026a8:	f001 fa26 	bl	8003af8 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OC_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OC_Pin;
 80026ac:	2320      	movs	r3, #32
 80026ae:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80026b0:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 80026b4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026b6:	2300      	movs	r3, #0
 80026b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(OTG_FS_OC_GPIO_Port, &GPIO_InitStruct);
 80026ba:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80026be:	4619      	mov	r1, r3
 80026c0:	4846      	ldr	r0, [pc, #280]	@ (80027dc <MX_GPIO_Init+0x2e8>)
 80026c2:	f001 fa19 	bl	8003af8 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 80026c6:	2304      	movs	r3, #4
 80026c8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80026ca:	2300      	movs	r3, #0
 80026cc:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026ce:	2300      	movs	r3, #0
 80026d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 80026d2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80026d6:	4619      	mov	r1, r3
 80026d8:	4845      	ldr	r0, [pc, #276]	@ (80027f0 <MX_GPIO_Init+0x2fc>)
 80026da:	f001 fa0d 	bl	8003af8 <HAL_GPIO_Init>

  /*Configure GPIO pins : A10_Pin A11_Pin BA0_Pin BA1_Pin
                           SDCLK_Pin SDNCAS_Pin */
  GPIO_InitStruct.Pin = A10_Pin|A11_Pin|BA0_Pin|BA1_Pin
 80026de:	f248 1333 	movw	r3, #33075	@ 0x8133
 80026e2:	627b      	str	r3, [r7, #36]	@ 0x24
                          |SDCLK_Pin|SDNCAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026e4:	2302      	movs	r3, #2
 80026e6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026e8:	2300      	movs	r3, #0
 80026ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80026ec:	2303      	movs	r3, #3
 80026ee:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80026f0:	230c      	movs	r3, #12
 80026f2:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80026f4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80026f8:	4619      	mov	r1, r3
 80026fa:	483b      	ldr	r0, [pc, #236]	@ (80027e8 <MX_GPIO_Init+0x2f4>)
 80026fc:	f001 f9fc 	bl	8003af8 <HAL_GPIO_Init>

  /*Configure GPIO pins : D4_Pin D5_Pin D6_Pin D7_Pin
                           D8_Pin D9_Pin D10_Pin D11_Pin
                           D12_Pin NBL0_Pin NBL1_Pin */
  GPIO_InitStruct.Pin = D4_Pin|D5_Pin|D6_Pin|D7_Pin
 8002700:	f64f 7383 	movw	r3, #65411	@ 0xff83
 8002704:	627b      	str	r3, [r7, #36]	@ 0x24
                          |D8_Pin|D9_Pin|D10_Pin|D11_Pin
                          |D12_Pin|NBL0_Pin|NBL1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002706:	2302      	movs	r3, #2
 8002708:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800270a:	2300      	movs	r3, #0
 800270c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800270e:	2303      	movs	r3, #3
 8002710:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002712:	230c      	movs	r3, #12
 8002714:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002716:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800271a:	4619      	mov	r1, r3
 800271c:	4835      	ldr	r0, [pc, #212]	@ (80027f4 <MX_GPIO_Init+0x300>)
 800271e:	f001 f9eb 	bl	8003af8 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_HS_ID_Pin OTG_HS_DM_Pin OTG_HS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_HS_ID_Pin|OTG_HS_DM_Pin|OTG_HS_DP_Pin;
 8002722:	f44f 4350 	mov.w	r3, #53248	@ 0xd000
 8002726:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002728:	2302      	movs	r3, #2
 800272a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800272c:	2300      	movs	r3, #0
 800272e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002730:	2300      	movs	r3, #0
 8002732:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 8002734:	230c      	movs	r3, #12
 8002736:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002738:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800273c:	4619      	mov	r1, r3
 800273e:	482c      	ldr	r0, [pc, #176]	@ (80027f0 <MX_GPIO_Init+0x2fc>)
 8002740:	f001 f9da 	bl	8003af8 <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_HS_Pin */
  GPIO_InitStruct.Pin = VBUS_HS_Pin;
 8002744:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002748:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800274a:	2300      	movs	r3, #0
 800274c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800274e:	2300      	movs	r3, #0
 8002750:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(VBUS_HS_GPIO_Port, &GPIO_InitStruct);
 8002752:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002756:	4619      	mov	r1, r3
 8002758:	4825      	ldr	r0, [pc, #148]	@ (80027f0 <MX_GPIO_Init+0x2fc>)
 800275a:	f001 f9cd 	bl	8003af8 <HAL_GPIO_Init>

  /*Configure GPIO pins : D13_Pin D14_Pin D15_Pin D0_Pin
                           D1_Pin D2_Pin D3_Pin */
  GPIO_InitStruct.Pin = D13_Pin|D14_Pin|D15_Pin|D0_Pin
 800275e:	f24c 7303 	movw	r3, #50947	@ 0xc703
 8002762:	627b      	str	r3, [r7, #36]	@ 0x24
                          |D1_Pin|D2_Pin|D3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002764:	2302      	movs	r3, #2
 8002766:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002768:	2300      	movs	r3, #0
 800276a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800276c:	2303      	movs	r3, #3
 800276e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002770:	230c      	movs	r3, #12
 8002772:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002774:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002778:	4619      	mov	r1, r3
 800277a:	481a      	ldr	r0, [pc, #104]	@ (80027e4 <MX_GPIO_Init+0x2f0>)
 800277c:	f001 f9bc 	bl	8003af8 <HAL_GPIO_Init>

  /*Configure GPIO pin : TE_Pin */
  GPIO_InitStruct.Pin = TE_Pin;
 8002780:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8002784:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002786:	2300      	movs	r3, #0
 8002788:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800278a:	2300      	movs	r3, #0
 800278c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(TE_GPIO_Port, &GPIO_InitStruct);
 800278e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002792:	4619      	mov	r1, r3
 8002794:	4813      	ldr	r0, [pc, #76]	@ (80027e4 <MX_GPIO_Init+0x2f0>)
 8002796:	f001 f9af 	bl	8003af8 <HAL_GPIO_Init>

  /*Configure GPIO pins : RDX_Pin WRX_DCX_Pin */
  GPIO_InitStruct.Pin = RDX_Pin|WRX_DCX_Pin;
 800279a:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 800279e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80027a0:	2301      	movs	r3, #1
 80027a2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027a4:	2300      	movs	r3, #0
 80027a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027a8:	2300      	movs	r3, #0
 80027aa:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80027ac:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80027b0:	4619      	mov	r1, r3
 80027b2:	480c      	ldr	r0, [pc, #48]	@ (80027e4 <MX_GPIO_Init+0x2f0>)
 80027b4:	f001 f9a0 	bl	8003af8 <HAL_GPIO_Init>

  /*Configure GPIO pins : STLINK_RX_Pin STLINK_TX_Pin */
  GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 80027b8:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80027bc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027be:	2302      	movs	r3, #2
 80027c0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027c2:	2300      	movs	r3, #0
 80027c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80027c6:	2303      	movs	r3, #3
 80027c8:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80027ca:	2307      	movs	r3, #7
 80027cc:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027ce:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80027d2:	4619      	mov	r1, r3
 80027d4:	e010      	b.n	80027f8 <MX_GPIO_Init+0x304>
 80027d6:	bf00      	nop
 80027d8:	40023800 	.word	0x40023800
 80027dc:	40020800 	.word	0x40020800
 80027e0:	40020000 	.word	0x40020000
 80027e4:	40020c00 	.word	0x40020c00
 80027e8:	40021800 	.word	0x40021800
 80027ec:	40021400 	.word	0x40021400
 80027f0:	40020400 	.word	0x40020400
 80027f4:	40021000 	.word	0x40021000
 80027f8:	4812      	ldr	r0, [pc, #72]	@ (8002844 <MX_GPIO_Init+0x350>)
 80027fa:	f001 f97d 	bl	8003af8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD4_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD4_Pin;
 80027fe:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 8002802:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002804:	2301      	movs	r3, #1
 8002806:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002808:	2300      	movs	r3, #0
 800280a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800280c:	2300      	movs	r3, #0
 800280e:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002810:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002814:	4619      	mov	r1, r3
 8002816:	480c      	ldr	r0, [pc, #48]	@ (8002848 <MX_GPIO_Init+0x354>)
 8002818:	f001 f96e 	bl	8003af8 <HAL_GPIO_Init>

  /*Configure GPIO pins : SDCKE1_Pin SDNE1_Pin */
  GPIO_InitStruct.Pin = SDCKE1_Pin|SDNE1_Pin;
 800281c:	2360      	movs	r3, #96	@ 0x60
 800281e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002820:	2302      	movs	r3, #2
 8002822:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002824:	2300      	movs	r3, #0
 8002826:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002828:	2303      	movs	r3, #3
 800282a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800282c:	230c      	movs	r3, #12
 800282e:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002830:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002834:	4619      	mov	r1, r3
 8002836:	4805      	ldr	r0, [pc, #20]	@ (800284c <MX_GPIO_Init+0x358>)
 8002838:	f001 f95e 	bl	8003af8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800283c:	bf00      	nop
 800283e:	3738      	adds	r7, #56	@ 0x38
 8002840:	46bd      	mov	sp, r7
 8002842:	bd80      	pop	{r7, pc}
 8002844:	40020000 	.word	0x40020000
 8002848:	40021800 	.word	0x40021800
 800284c:	40020400 	.word	0x40020400

08002850 <SystemClockOverride>:
    Error_Handler();
  }
}

void SystemClockOverride(void)
{
 8002850:	b580      	push	{r7, lr}
 8002852:	b092      	sub	sp, #72	@ 0x48
 8002854:	af00      	add	r7, sp, #0
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_OscInitTypeDef RCC_OscInitStruct;

  __HAL_RCC_PWR_CLK_ENABLE();
 8002856:	2300      	movs	r3, #0
 8002858:	603b      	str	r3, [r7, #0]
 800285a:	4b1c      	ldr	r3, [pc, #112]	@ (80028cc <SystemClockOverride+0x7c>)
 800285c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800285e:	4a1b      	ldr	r2, [pc, #108]	@ (80028cc <SystemClockOverride+0x7c>)
 8002860:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002864:	6413      	str	r3, [r2, #64]	@ 0x40
 8002866:	4b19      	ldr	r3, [pc, #100]	@ (80028cc <SystemClockOverride+0x7c>)
 8002868:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800286a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800286e:	603b      	str	r3, [r7, #0]
 8002870:	683b      	ldr	r3, [r7, #0]

  // __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1); // not needed, power scaling consumption for when not running at max freq.

  /* Enable HSE Osc and activate PLL with HSE source */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002872:	2301      	movs	r3, #1
 8002874:	607b      	str	r3, [r7, #4]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002876:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800287a:	60bb      	str	r3, [r7, #8]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800287c:	2302      	movs	r3, #2
 800287e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002880:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8002884:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLM = 8;
 8002886:	2308      	movs	r3, #8
 8002888:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLN = 336;
 800288a:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 800288e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002890:	2302      	movs	r3, #2
 8002892:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8002894:	2307      	movs	r3, #7
 8002896:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_RCC_OscConfig(&RCC_OscInitStruct);
 8002898:	1d3b      	adds	r3, r7, #4
 800289a:	4618      	mov	r0, r3
 800289c:	f002 ff44 	bl	8005728 <HAL_RCC_OscConfig>

  /* Select PLL as system clock source and configure the HCLK, PCLK1 and PCLK2 clocks dividers */
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 80028a0:	230f      	movs	r3, #15
 80028a2:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80028a4:	2302      	movs	r3, #2
 80028a6:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80028a8:	2300      	movs	r3, #0
 80028aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80028ac:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80028b0:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80028b2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80028b6:	647b      	str	r3, [r7, #68]	@ 0x44
  HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5);
 80028b8:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80028bc:	2105      	movs	r1, #5
 80028be:	4618      	mov	r0, r3
 80028c0:	f003 f9aa 	bl	8005c18 <HAL_RCC_ClockConfig>
}
 80028c4:	bf00      	nop
 80028c6:	3748      	adds	r7, #72	@ 0x48
 80028c8:	46bd      	mov	sp, r7
 80028ca:	bd80      	pop	{r7, pc}
 80028cc:	40023800 	.word	0x40023800

080028d0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80028d0:	b480      	push	{r7}
 80028d2:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80028d4:	b672      	cpsid	i
}
 80028d6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80028d8:	bf00      	nop
 80028da:	e7fd      	b.n	80028d8 <Error_Handler+0x8>

080028dc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80028dc:	b580      	push	{r7, lr}
 80028de:	b082      	sub	sp, #8
 80028e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80028e2:	2300      	movs	r3, #0
 80028e4:	607b      	str	r3, [r7, #4]
 80028e6:	4b10      	ldr	r3, [pc, #64]	@ (8002928 <HAL_MspInit+0x4c>)
 80028e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028ea:	4a0f      	ldr	r2, [pc, #60]	@ (8002928 <HAL_MspInit+0x4c>)
 80028ec:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80028f0:	6453      	str	r3, [r2, #68]	@ 0x44
 80028f2:	4b0d      	ldr	r3, [pc, #52]	@ (8002928 <HAL_MspInit+0x4c>)
 80028f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028f6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80028fa:	607b      	str	r3, [r7, #4]
 80028fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80028fe:	2300      	movs	r3, #0
 8002900:	603b      	str	r3, [r7, #0]
 8002902:	4b09      	ldr	r3, [pc, #36]	@ (8002928 <HAL_MspInit+0x4c>)
 8002904:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002906:	4a08      	ldr	r2, [pc, #32]	@ (8002928 <HAL_MspInit+0x4c>)
 8002908:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800290c:	6413      	str	r3, [r2, #64]	@ 0x40
 800290e:	4b06      	ldr	r3, [pc, #24]	@ (8002928 <HAL_MspInit+0x4c>)
 8002910:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002912:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002916:	603b      	str	r3, [r7, #0]
 8002918:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800291a:	2007      	movs	r0, #7
 800291c:	f001 f876 	bl	8003a0c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002920:	bf00      	nop
 8002922:	3708      	adds	r7, #8
 8002924:	46bd      	mov	sp, r7
 8002926:	bd80      	pop	{r7, pc}
 8002928:	40023800 	.word	0x40023800

0800292c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800292c:	b580      	push	{r7, lr}
 800292e:	b08a      	sub	sp, #40	@ 0x28
 8002930:	af00      	add	r7, sp, #0
 8002932:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002934:	f107 0314 	add.w	r3, r7, #20
 8002938:	2200      	movs	r2, #0
 800293a:	601a      	str	r2, [r3, #0]
 800293c:	605a      	str	r2, [r3, #4]
 800293e:	609a      	str	r2, [r3, #8]
 8002940:	60da      	str	r2, [r3, #12]
 8002942:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	4a29      	ldr	r2, [pc, #164]	@ (80029f0 <HAL_I2C_MspInit+0xc4>)
 800294a:	4293      	cmp	r3, r2
 800294c:	d14b      	bne.n	80029e6 <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800294e:	2300      	movs	r3, #0
 8002950:	613b      	str	r3, [r7, #16]
 8002952:	4b28      	ldr	r3, [pc, #160]	@ (80029f4 <HAL_I2C_MspInit+0xc8>)
 8002954:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002956:	4a27      	ldr	r2, [pc, #156]	@ (80029f4 <HAL_I2C_MspInit+0xc8>)
 8002958:	f043 0304 	orr.w	r3, r3, #4
 800295c:	6313      	str	r3, [r2, #48]	@ 0x30
 800295e:	4b25      	ldr	r3, [pc, #148]	@ (80029f4 <HAL_I2C_MspInit+0xc8>)
 8002960:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002962:	f003 0304 	and.w	r3, r3, #4
 8002966:	613b      	str	r3, [r7, #16]
 8002968:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800296a:	2300      	movs	r3, #0
 800296c:	60fb      	str	r3, [r7, #12]
 800296e:	4b21      	ldr	r3, [pc, #132]	@ (80029f4 <HAL_I2C_MspInit+0xc8>)
 8002970:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002972:	4a20      	ldr	r2, [pc, #128]	@ (80029f4 <HAL_I2C_MspInit+0xc8>)
 8002974:	f043 0301 	orr.w	r3, r3, #1
 8002978:	6313      	str	r3, [r2, #48]	@ 0x30
 800297a:	4b1e      	ldr	r3, [pc, #120]	@ (80029f4 <HAL_I2C_MspInit+0xc8>)
 800297c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800297e:	f003 0301 	and.w	r3, r3, #1
 8002982:	60fb      	str	r3, [r7, #12]
 8002984:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 8002986:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800298a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800298c:	2312      	movs	r3, #18
 800298e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002990:	2300      	movs	r3, #0
 8002992:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002994:	2300      	movs	r3, #0
 8002996:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002998:	2304      	movs	r3, #4
 800299a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 800299c:	f107 0314 	add.w	r3, r7, #20
 80029a0:	4619      	mov	r1, r3
 80029a2:	4815      	ldr	r0, [pc, #84]	@ (80029f8 <HAL_I2C_MspInit+0xcc>)
 80029a4:	f001 f8a8 	bl	8003af8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 80029a8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80029ac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80029ae:	2312      	movs	r3, #18
 80029b0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029b2:	2300      	movs	r3, #0
 80029b4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029b6:	2300      	movs	r3, #0
 80029b8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80029ba:	2304      	movs	r3, #4
 80029bc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 80029be:	f107 0314 	add.w	r3, r7, #20
 80029c2:	4619      	mov	r1, r3
 80029c4:	480d      	ldr	r0, [pc, #52]	@ (80029fc <HAL_I2C_MspInit+0xd0>)
 80029c6:	f001 f897 	bl	8003af8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 80029ca:	2300      	movs	r3, #0
 80029cc:	60bb      	str	r3, [r7, #8]
 80029ce:	4b09      	ldr	r3, [pc, #36]	@ (80029f4 <HAL_I2C_MspInit+0xc8>)
 80029d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029d2:	4a08      	ldr	r2, [pc, #32]	@ (80029f4 <HAL_I2C_MspInit+0xc8>)
 80029d4:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80029d8:	6413      	str	r3, [r2, #64]	@ 0x40
 80029da:	4b06      	ldr	r3, [pc, #24]	@ (80029f4 <HAL_I2C_MspInit+0xc8>)
 80029dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029de:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80029e2:	60bb      	str	r3, [r7, #8]
 80029e4:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C3_MspInit 1 */

  }

}
 80029e6:	bf00      	nop
 80029e8:	3728      	adds	r7, #40	@ 0x28
 80029ea:	46bd      	mov	sp, r7
 80029ec:	bd80      	pop	{r7, pc}
 80029ee:	bf00      	nop
 80029f0:	40005c00 	.word	0x40005c00
 80029f4:	40023800 	.word	0x40023800
 80029f8:	40020800 	.word	0x40020800
 80029fc:	40020000 	.word	0x40020000

08002a00 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8002a00:	b580      	push	{r7, lr}
 8002a02:	b09a      	sub	sp, #104	@ 0x68
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a08:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002a0c:	2200      	movs	r2, #0
 8002a0e:	601a      	str	r2, [r3, #0]
 8002a10:	605a      	str	r2, [r3, #4]
 8002a12:	609a      	str	r2, [r3, #8]
 8002a14:	60da      	str	r2, [r3, #12]
 8002a16:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002a18:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002a1c:	2230      	movs	r2, #48	@ 0x30
 8002a1e:	2100      	movs	r1, #0
 8002a20:	4618      	mov	r0, r3
 8002a22:	f004 fc6b 	bl	80072fc <memset>
  if(hltdc->Instance==LTDC)
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	4a81      	ldr	r2, [pc, #516]	@ (8002c30 <HAL_LTDC_MspInit+0x230>)
 8002a2c:	4293      	cmp	r3, r2
 8002a2e:	f040 80fa 	bne.w	8002c26 <HAL_LTDC_MspInit+0x226>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8002a32:	2308      	movs	r3, #8
 8002a34:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 50;
 8002a36:	2332      	movs	r3, #50	@ 0x32
 8002a38:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 8002a3a:	2302      	movs	r3, #2
 8002a3c:	63fb      	str	r3, [r7, #60]	@ 0x3c
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 8002a3e:	2300      	movs	r3, #0
 8002a40:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002a42:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002a46:	4618      	mov	r0, r3
 8002a48:	f003 faf2 	bl	8006030 <HAL_RCCEx_PeriphCLKConfig>
 8002a4c:	4603      	mov	r3, r0
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d001      	beq.n	8002a56 <HAL_LTDC_MspInit+0x56>
    {
      Error_Handler();
 8002a52:	f7ff ff3d 	bl	80028d0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8002a56:	2300      	movs	r3, #0
 8002a58:	623b      	str	r3, [r7, #32]
 8002a5a:	4b76      	ldr	r3, [pc, #472]	@ (8002c34 <HAL_LTDC_MspInit+0x234>)
 8002a5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a5e:	4a75      	ldr	r2, [pc, #468]	@ (8002c34 <HAL_LTDC_MspInit+0x234>)
 8002a60:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002a64:	6453      	str	r3, [r2, #68]	@ 0x44
 8002a66:	4b73      	ldr	r3, [pc, #460]	@ (8002c34 <HAL_LTDC_MspInit+0x234>)
 8002a68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a6a:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002a6e:	623b      	str	r3, [r7, #32]
 8002a70:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002a72:	2300      	movs	r3, #0
 8002a74:	61fb      	str	r3, [r7, #28]
 8002a76:	4b6f      	ldr	r3, [pc, #444]	@ (8002c34 <HAL_LTDC_MspInit+0x234>)
 8002a78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a7a:	4a6e      	ldr	r2, [pc, #440]	@ (8002c34 <HAL_LTDC_MspInit+0x234>)
 8002a7c:	f043 0320 	orr.w	r3, r3, #32
 8002a80:	6313      	str	r3, [r2, #48]	@ 0x30
 8002a82:	4b6c      	ldr	r3, [pc, #432]	@ (8002c34 <HAL_LTDC_MspInit+0x234>)
 8002a84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a86:	f003 0320 	and.w	r3, r3, #32
 8002a8a:	61fb      	str	r3, [r7, #28]
 8002a8c:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a8e:	2300      	movs	r3, #0
 8002a90:	61bb      	str	r3, [r7, #24]
 8002a92:	4b68      	ldr	r3, [pc, #416]	@ (8002c34 <HAL_LTDC_MspInit+0x234>)
 8002a94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a96:	4a67      	ldr	r2, [pc, #412]	@ (8002c34 <HAL_LTDC_MspInit+0x234>)
 8002a98:	f043 0301 	orr.w	r3, r3, #1
 8002a9c:	6313      	str	r3, [r2, #48]	@ 0x30
 8002a9e:	4b65      	ldr	r3, [pc, #404]	@ (8002c34 <HAL_LTDC_MspInit+0x234>)
 8002aa0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002aa2:	f003 0301 	and.w	r3, r3, #1
 8002aa6:	61bb      	str	r3, [r7, #24]
 8002aa8:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002aaa:	2300      	movs	r3, #0
 8002aac:	617b      	str	r3, [r7, #20]
 8002aae:	4b61      	ldr	r3, [pc, #388]	@ (8002c34 <HAL_LTDC_MspInit+0x234>)
 8002ab0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ab2:	4a60      	ldr	r2, [pc, #384]	@ (8002c34 <HAL_LTDC_MspInit+0x234>)
 8002ab4:	f043 0302 	orr.w	r3, r3, #2
 8002ab8:	6313      	str	r3, [r2, #48]	@ 0x30
 8002aba:	4b5e      	ldr	r3, [pc, #376]	@ (8002c34 <HAL_LTDC_MspInit+0x234>)
 8002abc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002abe:	f003 0302 	and.w	r3, r3, #2
 8002ac2:	617b      	str	r3, [r7, #20]
 8002ac4:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8002ac6:	2300      	movs	r3, #0
 8002ac8:	613b      	str	r3, [r7, #16]
 8002aca:	4b5a      	ldr	r3, [pc, #360]	@ (8002c34 <HAL_LTDC_MspInit+0x234>)
 8002acc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ace:	4a59      	ldr	r2, [pc, #356]	@ (8002c34 <HAL_LTDC_MspInit+0x234>)
 8002ad0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002ad4:	6313      	str	r3, [r2, #48]	@ 0x30
 8002ad6:	4b57      	ldr	r3, [pc, #348]	@ (8002c34 <HAL_LTDC_MspInit+0x234>)
 8002ad8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ada:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002ade:	613b      	str	r3, [r7, #16]
 8002ae0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002ae2:	2300      	movs	r3, #0
 8002ae4:	60fb      	str	r3, [r7, #12]
 8002ae6:	4b53      	ldr	r3, [pc, #332]	@ (8002c34 <HAL_LTDC_MspInit+0x234>)
 8002ae8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002aea:	4a52      	ldr	r2, [pc, #328]	@ (8002c34 <HAL_LTDC_MspInit+0x234>)
 8002aec:	f043 0304 	orr.w	r3, r3, #4
 8002af0:	6313      	str	r3, [r2, #48]	@ 0x30
 8002af2:	4b50      	ldr	r3, [pc, #320]	@ (8002c34 <HAL_LTDC_MspInit+0x234>)
 8002af4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002af6:	f003 0304 	and.w	r3, r3, #4
 8002afa:	60fb      	str	r3, [r7, #12]
 8002afc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002afe:	2300      	movs	r3, #0
 8002b00:	60bb      	str	r3, [r7, #8]
 8002b02:	4b4c      	ldr	r3, [pc, #304]	@ (8002c34 <HAL_LTDC_MspInit+0x234>)
 8002b04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b06:	4a4b      	ldr	r2, [pc, #300]	@ (8002c34 <HAL_LTDC_MspInit+0x234>)
 8002b08:	f043 0308 	orr.w	r3, r3, #8
 8002b0c:	6313      	str	r3, [r2, #48]	@ 0x30
 8002b0e:	4b49      	ldr	r3, [pc, #292]	@ (8002c34 <HAL_LTDC_MspInit+0x234>)
 8002b10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b12:	f003 0308 	and.w	r3, r3, #8
 8002b16:	60bb      	str	r3, [r7, #8]
 8002b18:	68bb      	ldr	r3, [r7, #8]
    PG11     ------> LTDC_B3
    PG12     ------> LTDC_B4
    PB8     ------> LTDC_B6
    PB9     ------> LTDC_B7
    */
    GPIO_InitStruct.Pin = ENABLE_Pin;
 8002b1a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002b1e:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b20:	2302      	movs	r3, #2
 8002b22:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b24:	2300      	movs	r3, #0
 8002b26:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b28:	2300      	movs	r3, #0
 8002b2a:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002b2c:	230e      	movs	r3, #14
 8002b2e:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 8002b30:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002b34:	4619      	mov	r1, r3
 8002b36:	4840      	ldr	r0, [pc, #256]	@ (8002c38 <HAL_LTDC_MspInit+0x238>)
 8002b38:	f000 ffde 	bl	8003af8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = B5_Pin|VSYNC_Pin|G2_Pin|R4_Pin
 8002b3c:	f641 0358 	movw	r3, #6232	@ 0x1858
 8002b40:	657b      	str	r3, [r7, #84]	@ 0x54
                          |R5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b42:	2302      	movs	r3, #2
 8002b44:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b46:	2300      	movs	r3, #0
 8002b48:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b4a:	2300      	movs	r3, #0
 8002b4c:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002b4e:	230e      	movs	r3, #14
 8002b50:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b52:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002b56:	4619      	mov	r1, r3
 8002b58:	4838      	ldr	r0, [pc, #224]	@ (8002c3c <HAL_LTDC_MspInit+0x23c>)
 8002b5a:	f000 ffcd 	bl	8003af8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R3_Pin|R6_Pin;
 8002b5e:	2303      	movs	r3, #3
 8002b60:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b62:	2302      	movs	r3, #2
 8002b64:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b66:	2300      	movs	r3, #0
 8002b68:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b6a:	2300      	movs	r3, #0
 8002b6c:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8002b6e:	2309      	movs	r3, #9
 8002b70:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b72:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002b76:	4619      	mov	r1, r3
 8002b78:	4831      	ldr	r0, [pc, #196]	@ (8002c40 <HAL_LTDC_MspInit+0x240>)
 8002b7a:	f000 ffbd 	bl	8003af8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G4_Pin|G5_Pin|B6_Pin|B7_Pin;
 8002b7e:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 8002b82:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b84:	2302      	movs	r3, #2
 8002b86:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b88:	2300      	movs	r3, #0
 8002b8a:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b8c:	2300      	movs	r3, #0
 8002b8e:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002b90:	230e      	movs	r3, #14
 8002b92:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b94:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002b98:	4619      	mov	r1, r3
 8002b9a:	4829      	ldr	r0, [pc, #164]	@ (8002c40 <HAL_LTDC_MspInit+0x240>)
 8002b9c:	f000 ffac 	bl	8003af8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R7_Pin|DOTCLK_Pin|B3_Pin;
 8002ba0:	f44f 630c 	mov.w	r3, #2240	@ 0x8c0
 8002ba4:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ba6:	2302      	movs	r3, #2
 8002ba8:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002baa:	2300      	movs	r3, #0
 8002bac:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bae:	2300      	movs	r3, #0
 8002bb0:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002bb2:	230e      	movs	r3, #14
 8002bb4:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002bb6:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002bba:	4619      	mov	r1, r3
 8002bbc:	4821      	ldr	r0, [pc, #132]	@ (8002c44 <HAL_LTDC_MspInit+0x244>)
 8002bbe:	f000 ff9b 	bl	8003af8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = HSYNC_Pin|G6_Pin|R2_Pin;
 8002bc2:	f44f 6398 	mov.w	r3, #1216	@ 0x4c0
 8002bc6:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bc8:	2302      	movs	r3, #2
 8002bca:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bcc:	2300      	movs	r3, #0
 8002bce:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bd0:	2300      	movs	r3, #0
 8002bd2:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002bd4:	230e      	movs	r3, #14
 8002bd6:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002bd8:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002bdc:	4619      	mov	r1, r3
 8002bde:	481a      	ldr	r0, [pc, #104]	@ (8002c48 <HAL_LTDC_MspInit+0x248>)
 8002be0:	f000 ff8a 	bl	8003af8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G7_Pin|B2_Pin;
 8002be4:	2348      	movs	r3, #72	@ 0x48
 8002be6:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002be8:	2302      	movs	r3, #2
 8002bea:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bec:	2300      	movs	r3, #0
 8002bee:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bf0:	2300      	movs	r3, #0
 8002bf2:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002bf4:	230e      	movs	r3, #14
 8002bf6:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002bf8:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002bfc:	4619      	mov	r1, r3
 8002bfe:	4813      	ldr	r0, [pc, #76]	@ (8002c4c <HAL_LTDC_MspInit+0x24c>)
 8002c00:	f000 ff7a 	bl	8003af8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G3_Pin|B4_Pin;
 8002c04:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8002c08:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c0a:	2302      	movs	r3, #2
 8002c0c:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c0e:	2300      	movs	r3, #0
 8002c10:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c12:	2300      	movs	r3, #0
 8002c14:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8002c16:	2309      	movs	r3, #9
 8002c18:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002c1a:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002c1e:	4619      	mov	r1, r3
 8002c20:	4808      	ldr	r0, [pc, #32]	@ (8002c44 <HAL_LTDC_MspInit+0x244>)
 8002c22:	f000 ff69 	bl	8003af8 <HAL_GPIO_Init>

  /* USER CODE END LTDC_MspInit 1 */

  }

}
 8002c26:	bf00      	nop
 8002c28:	3768      	adds	r7, #104	@ 0x68
 8002c2a:	46bd      	mov	sp, r7
 8002c2c:	bd80      	pop	{r7, pc}
 8002c2e:	bf00      	nop
 8002c30:	40016800 	.word	0x40016800
 8002c34:	40023800 	.word	0x40023800
 8002c38:	40021400 	.word	0x40021400
 8002c3c:	40020000 	.word	0x40020000
 8002c40:	40020400 	.word	0x40020400
 8002c44:	40021800 	.word	0x40021800
 8002c48:	40020800 	.word	0x40020800
 8002c4c:	40020c00 	.word	0x40020c00

08002c50 <HAL_RNG_MspInit>:
* This function configures the hardware resources used in this example
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 8002c50:	b480      	push	{r7}
 8002c52:	b085      	sub	sp, #20
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	6078      	str	r0, [r7, #4]
  if(hrng->Instance==RNG)
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	4a0b      	ldr	r2, [pc, #44]	@ (8002c8c <HAL_RNG_MspInit+0x3c>)
 8002c5e:	4293      	cmp	r3, r2
 8002c60:	d10d      	bne.n	8002c7e <HAL_RNG_MspInit+0x2e>
  {
  /* USER CODE BEGIN RNG_MspInit 0 */

  /* USER CODE END RNG_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 8002c62:	2300      	movs	r3, #0
 8002c64:	60fb      	str	r3, [r7, #12]
 8002c66:	4b0a      	ldr	r3, [pc, #40]	@ (8002c90 <HAL_RNG_MspInit+0x40>)
 8002c68:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002c6a:	4a09      	ldr	r2, [pc, #36]	@ (8002c90 <HAL_RNG_MspInit+0x40>)
 8002c6c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002c70:	6353      	str	r3, [r2, #52]	@ 0x34
 8002c72:	4b07      	ldr	r3, [pc, #28]	@ (8002c90 <HAL_RNG_MspInit+0x40>)
 8002c74:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002c76:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002c7a:	60fb      	str	r3, [r7, #12]
 8002c7c:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END RNG_MspInit 1 */

  }

}
 8002c7e:	bf00      	nop
 8002c80:	3714      	adds	r7, #20
 8002c82:	46bd      	mov	sp, r7
 8002c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c88:	4770      	bx	lr
 8002c8a:	bf00      	nop
 8002c8c:	50060800 	.word	0x50060800
 8002c90:	40023800 	.word	0x40023800

08002c94 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002c94:	b580      	push	{r7, lr}
 8002c96:	b08a      	sub	sp, #40	@ 0x28
 8002c98:	af00      	add	r7, sp, #0
 8002c9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c9c:	f107 0314 	add.w	r3, r7, #20
 8002ca0:	2200      	movs	r2, #0
 8002ca2:	601a      	str	r2, [r3, #0]
 8002ca4:	605a      	str	r2, [r3, #4]
 8002ca6:	609a      	str	r2, [r3, #8]
 8002ca8:	60da      	str	r2, [r3, #12]
 8002caa:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI5)
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	4a19      	ldr	r2, [pc, #100]	@ (8002d18 <HAL_SPI_MspInit+0x84>)
 8002cb2:	4293      	cmp	r3, r2
 8002cb4:	d12c      	bne.n	8002d10 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 8002cb6:	2300      	movs	r3, #0
 8002cb8:	613b      	str	r3, [r7, #16]
 8002cba:	4b18      	ldr	r3, [pc, #96]	@ (8002d1c <HAL_SPI_MspInit+0x88>)
 8002cbc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002cbe:	4a17      	ldr	r2, [pc, #92]	@ (8002d1c <HAL_SPI_MspInit+0x88>)
 8002cc0:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002cc4:	6453      	str	r3, [r2, #68]	@ 0x44
 8002cc6:	4b15      	ldr	r3, [pc, #84]	@ (8002d1c <HAL_SPI_MspInit+0x88>)
 8002cc8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002cca:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002cce:	613b      	str	r3, [r7, #16]
 8002cd0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002cd2:	2300      	movs	r3, #0
 8002cd4:	60fb      	str	r3, [r7, #12]
 8002cd6:	4b11      	ldr	r3, [pc, #68]	@ (8002d1c <HAL_SPI_MspInit+0x88>)
 8002cd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cda:	4a10      	ldr	r2, [pc, #64]	@ (8002d1c <HAL_SPI_MspInit+0x88>)
 8002cdc:	f043 0320 	orr.w	r3, r3, #32
 8002ce0:	6313      	str	r3, [r2, #48]	@ 0x30
 8002ce2:	4b0e      	ldr	r3, [pc, #56]	@ (8002d1c <HAL_SPI_MspInit+0x88>)
 8002ce4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ce6:	f003 0320 	and.w	r3, r3, #32
 8002cea:	60fb      	str	r3, [r7, #12]
 8002cec:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin;
 8002cee:	f44f 7360 	mov.w	r3, #896	@ 0x380
 8002cf2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cf4:	2302      	movs	r3, #2
 8002cf6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cf8:	2300      	movs	r3, #0
 8002cfa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002cfc:	2300      	movs	r3, #0
 8002cfe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8002d00:	2305      	movs	r3, #5
 8002d02:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002d04:	f107 0314 	add.w	r3, r7, #20
 8002d08:	4619      	mov	r1, r3
 8002d0a:	4805      	ldr	r0, [pc, #20]	@ (8002d20 <HAL_SPI_MspInit+0x8c>)
 8002d0c:	f000 fef4 	bl	8003af8 <HAL_GPIO_Init>

  /* USER CODE END SPI5_MspInit 1 */

  }

}
 8002d10:	bf00      	nop
 8002d12:	3728      	adds	r7, #40	@ 0x28
 8002d14:	46bd      	mov	sp, r7
 8002d16:	bd80      	pop	{r7, pc}
 8002d18:	40015000 	.word	0x40015000
 8002d1c:	40023800 	.word	0x40023800
 8002d20:	40021400 	.word	0x40021400

08002d24 <HAL_SPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspDeInit(SPI_HandleTypeDef* hspi)
{
 8002d24:	b580      	push	{r7, lr}
 8002d26:	b082      	sub	sp, #8
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	6078      	str	r0, [r7, #4]
  if(hspi->Instance==SPI5)
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	4a08      	ldr	r2, [pc, #32]	@ (8002d54 <HAL_SPI_MspDeInit+0x30>)
 8002d32:	4293      	cmp	r3, r2
 8002d34:	d10a      	bne.n	8002d4c <HAL_SPI_MspDeInit+0x28>
  {
  /* USER CODE BEGIN SPI5_MspDeInit 0 */

  /* USER CODE END SPI5_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI5_CLK_DISABLE();
 8002d36:	4b08      	ldr	r3, [pc, #32]	@ (8002d58 <HAL_SPI_MspDeInit+0x34>)
 8002d38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d3a:	4a07      	ldr	r2, [pc, #28]	@ (8002d58 <HAL_SPI_MspDeInit+0x34>)
 8002d3c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8002d40:	6453      	str	r3, [r2, #68]	@ 0x44
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    HAL_GPIO_DeInit(GPIOF, SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin);
 8002d42:	f44f 7160 	mov.w	r1, #896	@ 0x380
 8002d46:	4805      	ldr	r0, [pc, #20]	@ (8002d5c <HAL_SPI_MspDeInit+0x38>)
 8002d48:	f001 f882 	bl	8003e50 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN SPI5_MspDeInit 1 */

  /* USER CODE END SPI5_MspDeInit 1 */
  }

}
 8002d4c:	bf00      	nop
 8002d4e:	3708      	adds	r7, #8
 8002d50:	46bd      	mov	sp, r7
 8002d52:	bd80      	pop	{r7, pc}
 8002d54:	40015000 	.word	0x40015000
 8002d58:	40023800 	.word	0x40023800
 8002d5c:	40021400 	.word	0x40021400

08002d60 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002d60:	b480      	push	{r7}
 8002d62:	b085      	sub	sp, #20
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM7)
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	4a0b      	ldr	r2, [pc, #44]	@ (8002d9c <HAL_TIM_Base_MspInit+0x3c>)
 8002d6e:	4293      	cmp	r3, r2
 8002d70:	d10d      	bne.n	8002d8e <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 8002d72:	2300      	movs	r3, #0
 8002d74:	60fb      	str	r3, [r7, #12]
 8002d76:	4b0a      	ldr	r3, [pc, #40]	@ (8002da0 <HAL_TIM_Base_MspInit+0x40>)
 8002d78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d7a:	4a09      	ldr	r2, [pc, #36]	@ (8002da0 <HAL_TIM_Base_MspInit+0x40>)
 8002d7c:	f043 0320 	orr.w	r3, r3, #32
 8002d80:	6413      	str	r3, [r2, #64]	@ 0x40
 8002d82:	4b07      	ldr	r3, [pc, #28]	@ (8002da0 <HAL_TIM_Base_MspInit+0x40>)
 8002d84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d86:	f003 0320 	and.w	r3, r3, #32
 8002d8a:	60fb      	str	r3, [r7, #12]
 8002d8c:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM7_MspInit 1 */

  }

}
 8002d8e:	bf00      	nop
 8002d90:	3714      	adds	r7, #20
 8002d92:	46bd      	mov	sp, r7
 8002d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d98:	4770      	bx	lr
 8002d9a:	bf00      	nop
 8002d9c:	40001400 	.word	0x40001400
 8002da0:	40023800 	.word	0x40023800

08002da4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002da4:	b480      	push	{r7}
 8002da6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002da8:	bf00      	nop
 8002daa:	e7fd      	b.n	8002da8 <NMI_Handler+0x4>

08002dac <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002dac:	b480      	push	{r7}
 8002dae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002db0:	bf00      	nop
 8002db2:	e7fd      	b.n	8002db0 <HardFault_Handler+0x4>

08002db4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002db4:	b480      	push	{r7}
 8002db6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002db8:	bf00      	nop
 8002dba:	e7fd      	b.n	8002db8 <MemManage_Handler+0x4>

08002dbc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002dbc:	b480      	push	{r7}
 8002dbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002dc0:	bf00      	nop
 8002dc2:	e7fd      	b.n	8002dc0 <BusFault_Handler+0x4>

08002dc4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002dc4:	b480      	push	{r7}
 8002dc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002dc8:	bf00      	nop
 8002dca:	e7fd      	b.n	8002dc8 <UsageFault_Handler+0x4>

08002dcc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002dcc:	b480      	push	{r7}
 8002dce:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002dd0:	bf00      	nop
 8002dd2:	46bd      	mov	sp, r7
 8002dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd8:	4770      	bx	lr

08002dda <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002dda:	b480      	push	{r7}
 8002ddc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002dde:	bf00      	nop
 8002de0:	46bd      	mov	sp, r7
 8002de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de6:	4770      	bx	lr

08002de8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002de8:	b480      	push	{r7}
 8002dea:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002dec:	bf00      	nop
 8002dee:	46bd      	mov	sp, r7
 8002df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df4:	4770      	bx	lr

08002df6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002df6:	b580      	push	{r7, lr}
 8002df8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002dfa:	f000 fcb1 	bl	8003760 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002dfe:	bf00      	nop
 8002e00:	bd80      	pop	{r7, pc}
	...

08002e04 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e04:	b480      	push	{r7}
 8002e06:	b083      	sub	sp, #12
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	4603      	mov	r3, r0
 8002e0c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	db0b      	blt.n	8002e2e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002e16:	79fb      	ldrb	r3, [r7, #7]
 8002e18:	f003 021f 	and.w	r2, r3, #31
 8002e1c:	4907      	ldr	r1, [pc, #28]	@ (8002e3c <__NVIC_EnableIRQ+0x38>)
 8002e1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e22:	095b      	lsrs	r3, r3, #5
 8002e24:	2001      	movs	r0, #1
 8002e26:	fa00 f202 	lsl.w	r2, r0, r2
 8002e2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002e2e:	bf00      	nop
 8002e30:	370c      	adds	r7, #12
 8002e32:	46bd      	mov	sp, r7
 8002e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e38:	4770      	bx	lr
 8002e3a:	bf00      	nop
 8002e3c:	e000e100 	.word	0xe000e100

08002e40 <STMPE811_Init>:

#define DEFAULT_TESTING_TIMEOUT 250000

/* The below function was created by Tilen MAJERLE but modified by Xavion */
STMPE811_State_t STMPE811_Init(void)
{
 8002e40:	b580      	push	{r7, lr}
 8002e42:	b082      	sub	sp, #8
 8002e44:	af00      	add	r7, sp, #0

    // Initalize any other GPIO neeeded
    //stmpe811_MspInit(); // Currently we will be just using the HAL GPIO Init fuction to initialize GPIOs..

    // Initialze I2C3 ports 
    I2C3_MspInit();
 8002e46:	f000 f9dd 	bl	8003204 <I2C3_MspInit>
    /* Initialize I2C */
    I2C3_Init();
 8002e4a:	f000 f99d 	bl	8003188 <I2C3_Init>

    /* Reset */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL1, 0x02);
 8002e4e:	2202      	movs	r2, #2
 8002e50:	2103      	movs	r1, #3
 8002e52:	2082      	movs	r0, #130	@ 0x82
 8002e54:	f000 fa2a 	bl	80032ac <I2C3_Write>
    HAL_Delay(5);
 8002e58:	2005      	movs	r0, #5
 8002e5a:	f000 fca1 	bl	80037a0 <HAL_Delay>
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL1, 0x00);
 8002e5e:	2200      	movs	r2, #0
 8002e60:	2103      	movs	r1, #3
 8002e62:	2082      	movs	r0, #130	@ 0x82
 8002e64:	f000 fa22 	bl	80032ac <I2C3_Write>
    HAL_Delay(2);
 8002e68:	2002      	movs	r0, #2
 8002e6a:	f000 fc99 	bl	80037a0 <HAL_Delay>

    /* Check for STMPE811 Connected */
    uint16_t dataRecieved;
    I2C3_MulitByteRead(STMPE811_ADDRESS, STMPE811_CHIP_ID, (uint8_t * )&dataRecieved, TWOBYTE); // Need to change
 8002e6e:	1cba      	adds	r2, r7, #2
 8002e70:	2302      	movs	r3, #2
 8002e72:	2100      	movs	r1, #0
 8002e74:	2082      	movs	r0, #130	@ 0x82
 8002e76:	f000 fa69 	bl	800334c <I2C3_MulitByteRead>
    // Flip bytes
    uint16_t chipID = (dataRecieved << 8);
 8002e7a:	887b      	ldrh	r3, [r7, #2]
 8002e7c:	021b      	lsls	r3, r3, #8
 8002e7e:	80fb      	strh	r3, [r7, #6]
    chipID |= ((dataRecieved & 0xFF00) >> 8);
 8002e80:	887b      	ldrh	r3, [r7, #2]
 8002e82:	0a1b      	lsrs	r3, r3, #8
 8002e84:	b29a      	uxth	r2, r3
 8002e86:	88fb      	ldrh	r3, [r7, #6]
 8002e88:	4313      	orrs	r3, r2
 8002e8a:	80fb      	strh	r3, [r7, #6]

    if (chipID != STMPE811_CHIP_ID_VALUE) {
 8002e8c:	88fb      	ldrh	r3, [r7, #6]
 8002e8e:	f640 0211 	movw	r2, #2065	@ 0x811
 8002e92:	4293      	cmp	r3, r2
 8002e94:	d001      	beq.n	8002e9a <STMPE811_Init+0x5a>
    	return STMPE811_State_Error;
 8002e96:	2303      	movs	r3, #3
 8002e98:	e095      	b.n	8002fc6 <STMPE811_Init+0x186>
    }

    /* Reset */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL1, 0x02);
 8002e9a:	2202      	movs	r2, #2
 8002e9c:	2103      	movs	r1, #3
 8002e9e:	2082      	movs	r0, #130	@ 0x82
 8002ea0:	f000 fa04 	bl	80032ac <I2C3_Write>
    HAL_Delay(5);
 8002ea4:	2005      	movs	r0, #5
 8002ea6:	f000 fc7b 	bl	80037a0 <HAL_Delay>
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL1, 0x00);
 8002eaa:	2200      	movs	r2, #0
 8002eac:	2103      	movs	r1, #3
 8002eae:	2082      	movs	r0, #130	@ 0x82
 8002eb0:	f000 f9fc 	bl	80032ac <I2C3_Write>
    HAL_Delay(2);
 8002eb4:	2002      	movs	r0, #2
 8002eb6:	f000 fc73 	bl	80037a0 <HAL_Delay>

    /* Get the current register value */
    mode = STMPE811_Read(STMPE811_SYS_CTRL2);
 8002eba:	2004      	movs	r0, #4
 8002ebc:	f000 f887 	bl	8002fce <STMPE811_Read>
 8002ec0:	4603      	mov	r3, r0
 8002ec2:	717b      	strb	r3, [r7, #5]
    mode &= ~(0x01);
 8002ec4:	797b      	ldrb	r3, [r7, #5]
 8002ec6:	f023 0301 	bic.w	r3, r3, #1
 8002eca:	717b      	strb	r3, [r7, #5]
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL2, mode);
 8002ecc:	797b      	ldrb	r3, [r7, #5]
 8002ece:	461a      	mov	r2, r3
 8002ed0:	2104      	movs	r1, #4
 8002ed2:	2082      	movs	r0, #130	@ 0x82
 8002ed4:	f000 f9ea 	bl	80032ac <I2C3_Write>
    mode = STMPE811_Read(STMPE811_SYS_CTRL2);
 8002ed8:	2004      	movs	r0, #4
 8002eda:	f000 f878 	bl	8002fce <STMPE811_Read>
 8002ede:	4603      	mov	r3, r0
 8002ee0:	717b      	strb	r3, [r7, #5]
    mode &= ~(0x02);
 8002ee2:	797b      	ldrb	r3, [r7, #5]
 8002ee4:	f023 0302 	bic.w	r3, r3, #2
 8002ee8:	717b      	strb	r3, [r7, #5]
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL2, mode);
 8002eea:	797b      	ldrb	r3, [r7, #5]
 8002eec:	461a      	mov	r2, r3
 8002eee:	2104      	movs	r1, #4
 8002ef0:	2082      	movs	r0, #130	@ 0x82
 8002ef2:	f000 f9db 	bl	80032ac <I2C3_Write>

    /* Select Sample Time, bit number and ADC Reference */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_ADC_CTRL1, 0x49);
 8002ef6:	2249      	movs	r2, #73	@ 0x49
 8002ef8:	2120      	movs	r1, #32
 8002efa:	2082      	movs	r0, #130	@ 0x82
 8002efc:	f000 f9d6 	bl	80032ac <I2C3_Write>

    /* Wait for 2 ms */
    HAL_Delay(2);
 8002f00:	2002      	movs	r0, #2
 8002f02:	f000 fc4d 	bl	80037a0 <HAL_Delay>

    /* Select the ADC clock speed: 3.25 MHz */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_ADC_CTRL2, 0x01);
 8002f06:	2201      	movs	r2, #1
 8002f08:	2121      	movs	r1, #33	@ 0x21
 8002f0a:	2082      	movs	r0, #130	@ 0x82
 8002f0c:	f000 f9ce 	bl	80032ac <I2C3_Write>

    /* Select TSC pins in non default mode */
    mode = STMPE811_Read(STMPE811_GPIO_AF);
 8002f10:	2017      	movs	r0, #23
 8002f12:	f000 f85c 	bl	8002fce <STMPE811_Read>
 8002f16:	4603      	mov	r3, r0
 8002f18:	717b      	strb	r3, [r7, #5]
    mode |= 0x1E;
 8002f1a:	797b      	ldrb	r3, [r7, #5]
 8002f1c:	f043 031e 	orr.w	r3, r3, #30
 8002f20:	717b      	strb	r3, [r7, #5]
    I2C3_Write(STMPE811_ADDRESS, STMPE811_GPIO_AF, mode);
 8002f22:	797b      	ldrb	r3, [r7, #5]
 8002f24:	461a      	mov	r2, r3
 8002f26:	2117      	movs	r1, #23
 8002f28:	2082      	movs	r0, #130	@ 0x82
 8002f2a:	f000 f9bf 	bl	80032ac <I2C3_Write>
    /* Configuration:
    - Touch average control    : 4 samples
    - Touch delay time         : 500 uS
    - Panel driver setting time: 500 uS
    */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_TSC_CFG, 0x9A);
 8002f2e:	229a      	movs	r2, #154	@ 0x9a
 8002f30:	2141      	movs	r1, #65	@ 0x41
 8002f32:	2082      	movs	r0, #130	@ 0x82
 8002f34:	f000 f9ba 	bl	80032ac <I2C3_Write>

    /* Configure the Touch FIFO threshold: single point reading */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_FIFO_TH, 0x01);
 8002f38:	2201      	movs	r2, #1
 8002f3a:	214a      	movs	r1, #74	@ 0x4a
 8002f3c:	2082      	movs	r0, #130	@ 0x82
 8002f3e:	f000 f9b5 	bl	80032ac <I2C3_Write>

    /* Clear the FIFO memory content. */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_FIFO_STA, 0x01);
 8002f42:	2201      	movs	r2, #1
 8002f44:	214b      	movs	r1, #75	@ 0x4b
 8002f46:	2082      	movs	r0, #130	@ 0x82
 8002f48:	f000 f9b0 	bl	80032ac <I2C3_Write>

    /* Put the FIFO back into operation mode  */
    I2C3_Write( STMPE811_ADDRESS, STMPE811_FIFO_STA, 0x00);
 8002f4c:	2200      	movs	r2, #0
 8002f4e:	214b      	movs	r1, #75	@ 0x4b
 8002f50:	2082      	movs	r0, #130	@ 0x82
 8002f52:	f000 f9ab 	bl	80032ac <I2C3_Write>

    /* Set the range and accuracy pf the pressure measurement (Z) :
    - Fractional part :7
    - Whole part      :1
    */
    I2C3_Write( STMPE811_ADDRESS, STMPE811_TSC_FRACTION_Z, 0x01);
 8002f56:	2201      	movs	r2, #1
 8002f58:	2156      	movs	r1, #86	@ 0x56
 8002f5a:	2082      	movs	r0, #130	@ 0x82
 8002f5c:	f000 f9a6 	bl	80032ac <I2C3_Write>

    /* Set the driving capability (limit) of the device for TSC pins: 50mA */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_TSC_I_DRIVE, 0x01);
 8002f60:	2201      	movs	r2, #1
 8002f62:	2158      	movs	r1, #88	@ 0x58
 8002f64:	2082      	movs	r0, #130	@ 0x82
 8002f66:	f000 f9a1 	bl	80032ac <I2C3_Write>

    /* Touch screen control configuration (enable TSC):
    - No window tracking index
    - XYZ acquisition mode
    */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_TSC_CTRL, 0x03);
 8002f6a:	2203      	movs	r2, #3
 8002f6c:	2140      	movs	r1, #64	@ 0x40
 8002f6e:	2082      	movs	r0, #130	@ 0x82
 8002f70:	f000 f99c 	bl	80032ac <I2C3_Write>

    /* Clear all the status pending bits if any */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_INT_STA, 0xFF);
 8002f74:	22ff      	movs	r2, #255	@ 0xff
 8002f76:	210b      	movs	r1, #11
 8002f78:	2082      	movs	r0, #130	@ 0x82
 8002f7a:	f000 f997 	bl	80032ac <I2C3_Write>

    /* Enable global interrupts */
    #if COMPILE_TOUCH_INTERRUPT_SUPPORT == 1

    enableInterruptSupportForTouch();
 8002f7e:	f000 f8c1 	bl	8003104 <enableInterruptSupportForTouch>

    mode = STMPE811_Read(STMPE811_INT_CTRL);
 8002f82:	2009      	movs	r0, #9
 8002f84:	f000 f823 	bl	8002fce <STMPE811_Read>
 8002f88:	4603      	mov	r3, r0
 8002f8a:	717b      	strb	r3, [r7, #5]
    mode |= 0x01;
 8002f8c:	797b      	ldrb	r3, [r7, #5]
 8002f8e:	f043 0301 	orr.w	r3, r3, #1
 8002f92:	717b      	strb	r3, [r7, #5]
    I2C3_Write(STMPE811_ADDRESS, STMPE811_INT_CTRL, mode);
 8002f94:	797b      	ldrb	r3, [r7, #5]
 8002f96:	461a      	mov	r2, r3
 8002f98:	2109      	movs	r1, #9
 8002f9a:	2082      	movs	r0, #130	@ 0x82
 8002f9c:	f000 f986 	bl	80032ac <I2C3_Write>
    
    /* Enable touch interrupt */
    mode = STMPE811_Read(STMPE811_INT_EN);
 8002fa0:	200a      	movs	r0, #10
 8002fa2:	f000 f814 	bl	8002fce <STMPE811_Read>
 8002fa6:	4603      	mov	r3, r0
 8002fa8:	717b      	strb	r3, [r7, #5]
    mode |= 0x01;
 8002faa:	797b      	ldrb	r3, [r7, #5]
 8002fac:	f043 0301 	orr.w	r3, r3, #1
 8002fb0:	717b      	strb	r3, [r7, #5]
    I2C3_Write(STMPE811_ADDRESS, STMPE811_INT_EN, mode);
 8002fb2:	797b      	ldrb	r3, [r7, #5]
 8002fb4:	461a      	mov	r2, r3
 8002fb6:	210a      	movs	r1, #10
 8002fb8:	2082      	movs	r0, #130	@ 0x82
 8002fba:	f000 f977 	bl	80032ac <I2C3_Write>
    
    #endif // COMPILE_TOUCH_INTERRUPT_SUPPORT
    
    /* Wait for 2 ms delay */
    HAL_Delay(200);
 8002fbe:	20c8      	movs	r0, #200	@ 0xc8
 8002fc0:	f000 fbee 	bl	80037a0 <HAL_Delay>

    return STMPE811_State_Ok;
 8002fc4:	2302      	movs	r3, #2

}
 8002fc6:	4618      	mov	r0, r3
 8002fc8:	3708      	adds	r7, #8
 8002fca:	46bd      	mov	sp, r7
 8002fcc:	bd80      	pop	{r7, pc}

08002fce <STMPE811_Read>:

uint8_t STMPE811_Read(uint8_t reg)
{
 8002fce:	b580      	push	{r7, lr}
 8002fd0:	b084      	sub	sp, #16
 8002fd2:	af00      	add	r7, sp, #0
 8002fd4:	4603      	mov	r3, r0
 8002fd6:	71fb      	strb	r3, [r7, #7]
    // I2C Read
    uint8_t readData;
    I2C3_Read(STMPE811_ADDRESS, reg, &readData);
 8002fd8:	f107 020f 	add.w	r2, r7, #15
 8002fdc:	79fb      	ldrb	r3, [r7, #7]
 8002fde:	4619      	mov	r1, r3
 8002fe0:	2082      	movs	r0, #130	@ 0x82
 8002fe2:	f000 f98d 	bl	8003300 <I2C3_Read>

    return readData;
 8002fe6:	7bfb      	ldrb	r3, [r7, #15]
}
 8002fe8:	4618      	mov	r0, r3
 8002fea:	3710      	adds	r7, #16
 8002fec:	46bd      	mov	sp, r7
 8002fee:	bd80      	pop	{r7, pc}

08002ff0 <STMPE811_Write>:

void STMPE811_Write(uint8_t reg, uint8_t dataToWrite)
{
 8002ff0:	b580      	push	{r7, lr}
 8002ff2:	b082      	sub	sp, #8
 8002ff4:	af00      	add	r7, sp, #0
 8002ff6:	4603      	mov	r3, r0
 8002ff8:	460a      	mov	r2, r1
 8002ffa:	71fb      	strb	r3, [r7, #7]
 8002ffc:	4613      	mov	r3, r2
 8002ffe:	71bb      	strb	r3, [r7, #6]
    I2C3_Write(STMPE811_ADDRESS, reg, dataToWrite);
 8003000:	79ba      	ldrb	r2, [r7, #6]
 8003002:	79fb      	ldrb	r3, [r7, #7]
 8003004:	4619      	mov	r1, r3
 8003006:	2082      	movs	r0, #130	@ 0x82
 8003008:	f000 f950 	bl	80032ac <I2C3_Write>
}
 800300c:	bf00      	nop
 800300e:	3708      	adds	r7, #8
 8003010:	46bd      	mov	sp, r7
 8003012:	bd80      	pop	{r7, pc}

08003014 <STMPE811_DetermineTouchPosition>:

    return STMPE811_State_Released;
}

void STMPE811_DetermineTouchPosition(STMPE811_TouchData * data)
{
 8003014:	b580      	push	{r7, lr}
 8003016:	b082      	sub	sp, #8
 8003018:	af00      	add	r7, sp, #0
 800301a:	6078      	str	r0, [r7, #4]
    //Pressed
    if (data->orientation == STMPE811_Orientation_Portrait_1) {
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	799b      	ldrb	r3, [r3, #6]
 8003020:	2b00      	cmp	r3, #0
 8003022:	d117      	bne.n	8003054 <STMPE811_DetermineTouchPosition+0x40>
        data->x = 239 - TM_STMPE811_ReadX(data->x);
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	881b      	ldrh	r3, [r3, #0]
 8003028:	4618      	mov	r0, r3
 800302a:	f000 f9b1 	bl	8003390 <TM_STMPE811_ReadX>
 800302e:	4603      	mov	r3, r0
 8003030:	f1c3 03ef 	rsb	r3, r3, #239	@ 0xef
 8003034:	b29a      	uxth	r2, r3
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	801a      	strh	r2, [r3, #0]
        data->y = 319 - TM_STMPE811_ReadY(data->y);
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	885b      	ldrh	r3, [r3, #2]
 800303e:	4618      	mov	r0, r3
 8003040:	f000 fa04 	bl	800344c <TM_STMPE811_ReadY>
 8003044:	4603      	mov	r3, r0
 8003046:	f5c3 739f 	rsb	r3, r3, #318	@ 0x13e
 800304a:	3301      	adds	r3, #1
 800304c:	b29a      	uxth	r2, r3
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	805a      	strh	r2, [r3, #2]
 8003052:	e048      	b.n	80030e6 <STMPE811_DetermineTouchPosition+0xd2>
    } else if (data->orientation == STMPE811_Orientation_Portrait_2) {
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	799b      	ldrb	r3, [r3, #6]
 8003058:	2b01      	cmp	r3, #1
 800305a:	d112      	bne.n	8003082 <STMPE811_DetermineTouchPosition+0x6e>
        data->x = TM_STMPE811_ReadX(data->x);
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	881b      	ldrh	r3, [r3, #0]
 8003060:	4618      	mov	r0, r3
 8003062:	f000 f995 	bl	8003390 <TM_STMPE811_ReadX>
 8003066:	4603      	mov	r3, r0
 8003068:	461a      	mov	r2, r3
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	801a      	strh	r2, [r3, #0]
        data->y = TM_STMPE811_ReadY(data->y);
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	885b      	ldrh	r3, [r3, #2]
 8003072:	4618      	mov	r0, r3
 8003074:	f000 f9ea 	bl	800344c <TM_STMPE811_ReadY>
 8003078:	4603      	mov	r3, r0
 800307a:	461a      	mov	r2, r3
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	805a      	strh	r2, [r3, #2]
 8003080:	e031      	b.n	80030e6 <STMPE811_DetermineTouchPosition+0xd2>
    } else if (data->orientation == STMPE811_Orientation_Landscape_1) {
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	799b      	ldrb	r3, [r3, #6]
 8003086:	2b02      	cmp	r3, #2
 8003088:	d115      	bne.n	80030b6 <STMPE811_DetermineTouchPosition+0xa2>
        data->y = TM_STMPE811_ReadX(data->y);
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	885b      	ldrh	r3, [r3, #2]
 800308e:	4618      	mov	r0, r3
 8003090:	f000 f97e 	bl	8003390 <TM_STMPE811_ReadX>
 8003094:	4603      	mov	r3, r0
 8003096:	461a      	mov	r2, r3
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	805a      	strh	r2, [r3, #2]
        data->x = 319 - TM_STMPE811_ReadY(data->x);
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	881b      	ldrh	r3, [r3, #0]
 80030a0:	4618      	mov	r0, r3
 80030a2:	f000 f9d3 	bl	800344c <TM_STMPE811_ReadY>
 80030a6:	4603      	mov	r3, r0
 80030a8:	f5c3 739f 	rsb	r3, r3, #318	@ 0x13e
 80030ac:	3301      	adds	r3, #1
 80030ae:	b29a      	uxth	r2, r3
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	801a      	strh	r2, [r3, #0]
 80030b4:	e017      	b.n	80030e6 <STMPE811_DetermineTouchPosition+0xd2>
    } else if (data->orientation == STMPE811_Orientation_Landscape_2) {
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	799b      	ldrb	r3, [r3, #6]
 80030ba:	2b03      	cmp	r3, #3
 80030bc:	d113      	bne.n	80030e6 <STMPE811_DetermineTouchPosition+0xd2>
        data->y = 239 - TM_STMPE811_ReadX(data->x);
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	881b      	ldrh	r3, [r3, #0]
 80030c2:	4618      	mov	r0, r3
 80030c4:	f000 f964 	bl	8003390 <TM_STMPE811_ReadX>
 80030c8:	4603      	mov	r3, r0
 80030ca:	f1c3 03ef 	rsb	r3, r3, #239	@ 0xef
 80030ce:	b29a      	uxth	r2, r3
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	805a      	strh	r2, [r3, #2]
        data->x = TM_STMPE811_ReadY(data->x);
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	881b      	ldrh	r3, [r3, #0]
 80030d8:	4618      	mov	r0, r3
 80030da:	f000 f9b7 	bl	800344c <TM_STMPE811_ReadY>
 80030de:	4603      	mov	r3, r0
 80030e0:	461a      	mov	r2, r3
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	801a      	strh	r2, [r3, #0]
    }

    //Reset Fifo
    I2C3_Write(STMPE811_ADDRESS, STMPE811_FIFO_STA, 0x01);
 80030e6:	2201      	movs	r2, #1
 80030e8:	214b      	movs	r1, #75	@ 0x4b
 80030ea:	2082      	movs	r0, #130	@ 0x82
 80030ec:	f000 f8de 	bl	80032ac <I2C3_Write>
    I2C3_Write(STMPE811_ADDRESS, STMPE811_FIFO_STA, 0x00);
 80030f0:	2200      	movs	r2, #0
 80030f2:	214b      	movs	r1, #75	@ 0x4b
 80030f4:	2082      	movs	r0, #130	@ 0x82
 80030f6:	f000 f8d9 	bl	80032ac <I2C3_Write>
}
 80030fa:	bf00      	nop
 80030fc:	3708      	adds	r7, #8
 80030fe:	46bd      	mov	sp, r7
 8003100:	bd80      	pop	{r7, pc}
	...

08003104 <enableInterruptSupportForTouch>:
}

#if COMPILE_TOUCH_INTERRUPT_SUPPORT == 1

void enableInterruptSupportForTouch(void)
{
 8003104:	b580      	push	{r7, lr}
 8003106:	b086      	sub	sp, #24
 8003108:	af00      	add	r7, sp, #0
    // Initialze the GPIO and enable the interrupt
    // Interrupt is on interrupt Line PA15
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800310a:	2300      	movs	r3, #0
 800310c:	603b      	str	r3, [r7, #0]
 800310e:	4b14      	ldr	r3, [pc, #80]	@ (8003160 <enableInterruptSupportForTouch+0x5c>)
 8003110:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003112:	4a13      	ldr	r2, [pc, #76]	@ (8003160 <enableInterruptSupportForTouch+0x5c>)
 8003114:	f043 0301 	orr.w	r3, r3, #1
 8003118:	6313      	str	r3, [r2, #48]	@ 0x30
 800311a:	4b11      	ldr	r3, [pc, #68]	@ (8003160 <enableInterruptSupportForTouch+0x5c>)
 800311c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800311e:	f003 0301 	and.w	r3, r3, #1
 8003122:	603b      	str	r3, [r7, #0]
 8003124:	683b      	ldr	r3, [r7, #0]

    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003126:	1d3b      	adds	r3, r7, #4
 8003128:	2200      	movs	r2, #0
 800312a:	601a      	str	r2, [r3, #0]
 800312c:	605a      	str	r2, [r3, #4]
 800312e:	609a      	str	r2, [r3, #8]
 8003130:	60da      	str	r2, [r3, #12]
 8003132:	611a      	str	r2, [r3, #16]

    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8003134:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003138:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 800313a:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 800313e:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003140:	2300      	movs	r3, #0
 8003142:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003144:	2302      	movs	r3, #2
 8003146:	613b      	str	r3, [r7, #16]

    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003148:	1d3b      	adds	r3, r7, #4
 800314a:	4619      	mov	r1, r3
 800314c:	4805      	ldr	r0, [pc, #20]	@ (8003164 <enableInterruptSupportForTouch+0x60>)
 800314e:	f000 fcd3 	bl	8003af8 <HAL_GPIO_Init>

    NVIC_EnableIRQ(EXTI15_10_IRQn);
 8003152:	2028      	movs	r0, #40	@ 0x28
 8003154:	f7ff fe56 	bl	8002e04 <__NVIC_EnableIRQ>

}
 8003158:	bf00      	nop
 800315a:	3718      	adds	r7, #24
 800315c:	46bd      	mov	sp, r7
 800315e:	bd80      	pop	{r7, pc}
 8003160:	40023800 	.word	0x40023800
 8003164:	40020000 	.word	0x40020000

08003168 <verifyHAL_I2C_IS_OKAY>:

#endif 


//  ******************************** I2C Functions ********************************//
void verifyHAL_I2C_IS_OKAY(){
 8003168:	b480      	push	{r7}
 800316a:	af00      	add	r7, sp, #0
    if (HAL_status != HAL_OK)
 800316c:	4b05      	ldr	r3, [pc, #20]	@ (8003184 <verifyHAL_I2C_IS_OKAY+0x1c>)
 800316e:	781b      	ldrb	r3, [r3, #0]
 8003170:	2b00      	cmp	r3, #0
 8003172:	d001      	beq.n	8003178 <verifyHAL_I2C_IS_OKAY+0x10>
    {
        while(1);
 8003174:	bf00      	nop
 8003176:	e7fd      	b.n	8003174 <verifyHAL_I2C_IS_OKAY+0xc>
    }
}
 8003178:	bf00      	nop
 800317a:	46bd      	mov	sp, r7
 800317c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003180:	4770      	bx	lr
 8003182:	bf00      	nop
 8003184:	20025bec 	.word	0x20025bec

08003188 <I2C3_Init>:

static void I2C3_Init()
{
 8003188:	b580      	push	{r7, lr}
 800318a:	b082      	sub	sp, #8
 800318c:	af00      	add	r7, sp, #0

	__HAL_RCC_I2C3_CLK_ENABLE();
 800318e:	2300      	movs	r3, #0
 8003190:	603b      	str	r3, [r7, #0]
 8003192:	4b18      	ldr	r3, [pc, #96]	@ (80031f4 <I2C3_Init+0x6c>)
 8003194:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003196:	4a17      	ldr	r2, [pc, #92]	@ (80031f4 <I2C3_Init+0x6c>)
 8003198:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800319c:	6413      	str	r3, [r2, #64]	@ 0x40
 800319e:	4b15      	ldr	r3, [pc, #84]	@ (80031f4 <I2C3_Init+0x6c>)
 80031a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031a2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80031a6:	603b      	str	r3, [r7, #0]
 80031a8:	683b      	ldr	r3, [r7, #0]
    // Configure I2C3
    hI2C3.Instance = STMPE811_I2C;
 80031aa:	4b13      	ldr	r3, [pc, #76]	@ (80031f8 <I2C3_Init+0x70>)
 80031ac:	4a13      	ldr	r2, [pc, #76]	@ (80031fc <I2C3_Init+0x74>)
 80031ae:	601a      	str	r2, [r3, #0]
    hI2C3.Init.ClockSpeed = STMPE811_I2C_CLOCK;
 80031b0:	4b11      	ldr	r3, [pc, #68]	@ (80031f8 <I2C3_Init+0x70>)
 80031b2:	4a13      	ldr	r2, [pc, #76]	@ (8003200 <I2C3_Init+0x78>)
 80031b4:	605a      	str	r2, [r3, #4]
    hI2C3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80031b6:	4b10      	ldr	r3, [pc, #64]	@ (80031f8 <I2C3_Init+0x70>)
 80031b8:	2200      	movs	r2, #0
 80031ba:	609a      	str	r2, [r3, #8]
    hI2C3.Init.OwnAddress1 = 0x00; // May be wrong
 80031bc:	4b0e      	ldr	r3, [pc, #56]	@ (80031f8 <I2C3_Init+0x70>)
 80031be:	2200      	movs	r2, #0
 80031c0:	60da      	str	r2, [r3, #12]
    hI2C3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80031c2:	4b0d      	ldr	r3, [pc, #52]	@ (80031f8 <I2C3_Init+0x70>)
 80031c4:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80031c8:	611a      	str	r2, [r3, #16]
    hI2C3.Init.GeneralCallMode = I2C_NOSTRETCH_DISABLE;
 80031ca:	4b0b      	ldr	r3, [pc, #44]	@ (80031f8 <I2C3_Init+0x70>)
 80031cc:	2200      	movs	r2, #0
 80031ce:	61da      	str	r2, [r3, #28]
    hI2C3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80031d0:	4b09      	ldr	r3, [pc, #36]	@ (80031f8 <I2C3_Init+0x70>)
 80031d2:	2200      	movs	r2, #0
 80031d4:	621a      	str	r2, [r3, #32]
    // Do we need to configutre I2C Mode? 

    // Initialize I2C3 interface
    HAL_StatusTypeDef status;
    status = HAL_I2C_Init(&hI2C3);
 80031d6:	4808      	ldr	r0, [pc, #32]	@ (80031f8 <I2C3_Init+0x70>)
 80031d8:	f000 ff60 	bl	800409c <HAL_I2C_Init>
 80031dc:	4603      	mov	r3, r0
 80031de:	71fb      	strb	r3, [r7, #7]
    if (status != HAL_OK)
 80031e0:	79fb      	ldrb	r3, [r7, #7]
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d001      	beq.n	80031ea <I2C3_Init+0x62>
    {
        for(;;); // Catch error
 80031e6:	bf00      	nop
 80031e8:	e7fd      	b.n	80031e6 <I2C3_Init+0x5e>
    }
    return;
 80031ea:	bf00      	nop
}
 80031ec:	3708      	adds	r7, #8
 80031ee:	46bd      	mov	sp, r7
 80031f0:	bd80      	pop	{r7, pc}
 80031f2:	bf00      	nop
 80031f4:	40023800 	.word	0x40023800
 80031f8:	20025b98 	.word	0x20025b98
 80031fc:	40005c00 	.word	0x40005c00
 8003200:	000186a0 	.word	0x000186a0

08003204 <I2C3_MspInit>:

// GPIO Initializations 
static void I2C3_MspInit(void)
{
 8003204:	b580      	push	{r7, lr}
 8003206:	b088      	sub	sp, #32
 8003208:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800320a:	f107 030c 	add.w	r3, r7, #12
 800320e:	2200      	movs	r2, #0
 8003210:	601a      	str	r2, [r3, #0]
 8003212:	605a      	str	r2, [r3, #4]
 8003214:	609a      	str	r2, [r3, #8]
 8003216:	60da      	str	r2, [r3, #12]
 8003218:	611a      	str	r2, [r3, #16]
    // Enable Clocks
    // GPIOC
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800321a:	2300      	movs	r3, #0
 800321c:	60bb      	str	r3, [r7, #8]
 800321e:	4b20      	ldr	r3, [pc, #128]	@ (80032a0 <I2C3_MspInit+0x9c>)
 8003220:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003222:	4a1f      	ldr	r2, [pc, #124]	@ (80032a0 <I2C3_MspInit+0x9c>)
 8003224:	f043 0304 	orr.w	r3, r3, #4
 8003228:	6313      	str	r3, [r2, #48]	@ 0x30
 800322a:	4b1d      	ldr	r3, [pc, #116]	@ (80032a0 <I2C3_MspInit+0x9c>)
 800322c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800322e:	f003 0304 	and.w	r3, r3, #4
 8003232:	60bb      	str	r3, [r7, #8]
 8003234:	68bb      	ldr	r3, [r7, #8]

    // GPIOA 
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003236:	2300      	movs	r3, #0
 8003238:	607b      	str	r3, [r7, #4]
 800323a:	4b19      	ldr	r3, [pc, #100]	@ (80032a0 <I2C3_MspInit+0x9c>)
 800323c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800323e:	4a18      	ldr	r2, [pc, #96]	@ (80032a0 <I2C3_MspInit+0x9c>)
 8003240:	f043 0301 	orr.w	r3, r3, #1
 8003244:	6313      	str	r3, [r2, #48]	@ 0x30
 8003246:	4b16      	ldr	r3, [pc, #88]	@ (80032a0 <I2C3_MspInit+0x9c>)
 8003248:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800324a:	f003 0301 	and.w	r3, r3, #1
 800324e:	607b      	str	r3, [r7, #4]
 8003250:	687b      	ldr	r3, [r7, #4]

    /*Configure GPIO pin : I2C3_SDA_Pin */
    GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 8003252:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003256:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003258:	2312      	movs	r3, #18
 800325a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800325c:	2300      	movs	r3, #0
 800325e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003260:	2300      	movs	r3, #0
 8003262:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8003264:	2304      	movs	r3, #4
 8003266:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 8003268:	f107 030c 	add.w	r3, r7, #12
 800326c:	4619      	mov	r1, r3
 800326e:	480d      	ldr	r0, [pc, #52]	@ (80032a4 <I2C3_MspInit+0xa0>)
 8003270:	f000 fc42 	bl	8003af8 <HAL_GPIO_Init>

    /*Configure GPIO pin : I2C3_SCL_Pin */
    GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 8003274:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003278:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800327a:	2312      	movs	r3, #18
 800327c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800327e:	2300      	movs	r3, #0
 8003280:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003282:	2300      	movs	r3, #0
 8003284:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8003286:	2304      	movs	r3, #4
 8003288:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 800328a:	f107 030c 	add.w	r3, r7, #12
 800328e:	4619      	mov	r1, r3
 8003290:	4805      	ldr	r0, [pc, #20]	@ (80032a8 <I2C3_MspInit+0xa4>)
 8003292:	f000 fc31 	bl	8003af8 <HAL_GPIO_Init>
    
}
 8003296:	bf00      	nop
 8003298:	3720      	adds	r7, #32
 800329a:	46bd      	mov	sp, r7
 800329c:	bd80      	pop	{r7, pc}
 800329e:	bf00      	nop
 80032a0:	40023800 	.word	0x40023800
 80032a4:	40020800 	.word	0x40020800
 80032a8:	40020000 	.word	0x40020000

080032ac <I2C3_Write>:

// This function should only be used for single BYTE transfers 
void I2C3_Write(uint16_t devAddr, uint8_t reg, uint8_t data)
{
 80032ac:	b580      	push	{r7, lr}
 80032ae:	b088      	sub	sp, #32
 80032b0:	af04      	add	r7, sp, #16
 80032b2:	4603      	mov	r3, r0
 80032b4:	80fb      	strh	r3, [r7, #6]
 80032b6:	460b      	mov	r3, r1
 80032b8:	717b      	strb	r3, [r7, #5]
 80032ba:	4613      	mov	r3, r2
 80032bc:	713b      	strb	r3, [r7, #4]
    uint8_t dataConversion = data; // data will be a raw hex value this is mainly for debugging...
 80032be:	793b      	ldrb	r3, [r7, #4]
 80032c0:	73fb      	strb	r3, [r7, #15]
    // Learning topic - Is this needed? Or can I just use &data in the function call? 
    HAL_status = HAL_I2C_Mem_Write(&hI2C3, devAddr, reg, I2C_MEMADD_SIZE_8BIT, &dataConversion, ONEBYTE, DEFAULT_TESTING_TIMEOUT);
 80032c2:	797b      	ldrb	r3, [r7, #5]
 80032c4:	b29a      	uxth	r2, r3
 80032c6:	88f9      	ldrh	r1, [r7, #6]
 80032c8:	4b0a      	ldr	r3, [pc, #40]	@ (80032f4 <I2C3_Write+0x48>)
 80032ca:	9302      	str	r3, [sp, #8]
 80032cc:	2301      	movs	r3, #1
 80032ce:	9301      	str	r3, [sp, #4]
 80032d0:	f107 030f 	add.w	r3, r7, #15
 80032d4:	9300      	str	r3, [sp, #0]
 80032d6:	2301      	movs	r3, #1
 80032d8:	4807      	ldr	r0, [pc, #28]	@ (80032f8 <I2C3_Write+0x4c>)
 80032da:	f001 f823 	bl	8004324 <HAL_I2C_Mem_Write>
 80032de:	4603      	mov	r3, r0
 80032e0:	461a      	mov	r2, r3
 80032e2:	4b06      	ldr	r3, [pc, #24]	@ (80032fc <I2C3_Write+0x50>)
 80032e4:	701a      	strb	r2, [r3, #0]
    verifyHAL_I2C_IS_OKAY();
 80032e6:	f7ff ff3f 	bl	8003168 <verifyHAL_I2C_IS_OKAY>
}
 80032ea:	bf00      	nop
 80032ec:	3710      	adds	r7, #16
 80032ee:	46bd      	mov	sp, r7
 80032f0:	bd80      	pop	{r7, pc}
 80032f2:	bf00      	nop
 80032f4:	0003d090 	.word	0x0003d090
 80032f8:	20025b98 	.word	0x20025b98
 80032fc:	20025bec 	.word	0x20025bec

08003300 <I2C3_Read>:

// This function should only be used for single BYTE transfers 
void I2C3_Read(uint8_t address, uint8_t reg, uint8_t * rxData)
{
 8003300:	b580      	push	{r7, lr}
 8003302:	b086      	sub	sp, #24
 8003304:	af04      	add	r7, sp, #16
 8003306:	4603      	mov	r3, r0
 8003308:	603a      	str	r2, [r7, #0]
 800330a:	71fb      	strb	r3, [r7, #7]
 800330c:	460b      	mov	r3, r1
 800330e:	71bb      	strb	r3, [r7, #6]
    // Need to use MEM functions
    HAL_status = HAL_I2C_Mem_Read(&hI2C3, address, reg, I2C_MEMADD_SIZE_8BIT, rxData, ONEBYTE, DEFAULT_TESTING_TIMEOUT);
 8003310:	79fb      	ldrb	r3, [r7, #7]
 8003312:	b299      	uxth	r1, r3
 8003314:	79bb      	ldrb	r3, [r7, #6]
 8003316:	b29a      	uxth	r2, r3
 8003318:	4b09      	ldr	r3, [pc, #36]	@ (8003340 <I2C3_Read+0x40>)
 800331a:	9302      	str	r3, [sp, #8]
 800331c:	2301      	movs	r3, #1
 800331e:	9301      	str	r3, [sp, #4]
 8003320:	683b      	ldr	r3, [r7, #0]
 8003322:	9300      	str	r3, [sp, #0]
 8003324:	2301      	movs	r3, #1
 8003326:	4807      	ldr	r0, [pc, #28]	@ (8003344 <I2C3_Read+0x44>)
 8003328:	f001 f8f6 	bl	8004518 <HAL_I2C_Mem_Read>
 800332c:	4603      	mov	r3, r0
 800332e:	461a      	mov	r2, r3
 8003330:	4b05      	ldr	r3, [pc, #20]	@ (8003348 <I2C3_Read+0x48>)
 8003332:	701a      	strb	r2, [r3, #0]
    verifyHAL_I2C_IS_OKAY();
 8003334:	f7ff ff18 	bl	8003168 <verifyHAL_I2C_IS_OKAY>
}
 8003338:	bf00      	nop
 800333a:	3708      	adds	r7, #8
 800333c:	46bd      	mov	sp, r7
 800333e:	bd80      	pop	{r7, pc}
 8003340:	0003d090 	.word	0x0003d090
 8003344:	20025b98 	.word	0x20025b98
 8003348:	20025bec 	.word	0x20025bec

0800334c <I2C3_MulitByteRead>:

// This function should be used for multiple byte reads from a reg
void I2C3_MulitByteRead(uint8_t address, uint8_t reg, uint8_t * rxData, uint16_t numOfBytes)
{
 800334c:	b580      	push	{r7, lr}
 800334e:	b086      	sub	sp, #24
 8003350:	af04      	add	r7, sp, #16
 8003352:	603a      	str	r2, [r7, #0]
 8003354:	461a      	mov	r2, r3
 8003356:	4603      	mov	r3, r0
 8003358:	71fb      	strb	r3, [r7, #7]
 800335a:	460b      	mov	r3, r1
 800335c:	71bb      	strb	r3, [r7, #6]
 800335e:	4613      	mov	r3, r2
 8003360:	80bb      	strh	r3, [r7, #4]
    HAL_I2C_Mem_Read(&hI2C3, address, reg, I2C_MEMADD_SIZE_8BIT, rxData, numOfBytes, DEFAULT_TESTING_TIMEOUT);
 8003362:	79fb      	ldrb	r3, [r7, #7]
 8003364:	b299      	uxth	r1, r3
 8003366:	79bb      	ldrb	r3, [r7, #6]
 8003368:	b29a      	uxth	r2, r3
 800336a:	4b07      	ldr	r3, [pc, #28]	@ (8003388 <I2C3_MulitByteRead+0x3c>)
 800336c:	9302      	str	r3, [sp, #8]
 800336e:	88bb      	ldrh	r3, [r7, #4]
 8003370:	9301      	str	r3, [sp, #4]
 8003372:	683b      	ldr	r3, [r7, #0]
 8003374:	9300      	str	r3, [sp, #0]
 8003376:	2301      	movs	r3, #1
 8003378:	4804      	ldr	r0, [pc, #16]	@ (800338c <I2C3_MulitByteRead+0x40>)
 800337a:	f001 f8cd 	bl	8004518 <HAL_I2C_Mem_Read>
}
 800337e:	bf00      	nop
 8003380:	3708      	adds	r7, #8
 8003382:	46bd      	mov	sp, r7
 8003384:	bd80      	pop	{r7, pc}
 8003386:	bf00      	nop
 8003388:	0003d090 	.word	0x0003d090
 800338c:	20025b98 	.word	0x20025b98

08003390 <TM_STMPE811_ReadX>:

/* The below function was created by Tilen MAJERLE but modified by Xavion */
uint16_t TM_STMPE811_ReadX(uint16_t x) { // TM FUNCTION 
 8003390:	b580      	push	{r7, lr}
 8003392:	b084      	sub	sp, #16
 8003394:	af00      	add	r7, sp, #0
 8003396:	4603      	mov	r3, r0
 8003398:	80fb      	strh	r3, [r7, #6]
    uint8_t data[2];
    int16_t val, dx;
    data[1] = STMPE811_Read(STMPE811_TSC_DATA_X);
 800339a:	204d      	movs	r0, #77	@ 0x4d
 800339c:	f7ff fe17 	bl	8002fce <STMPE811_Read>
 80033a0:	4603      	mov	r3, r0
 80033a2:	727b      	strb	r3, [r7, #9]
    data[0] = STMPE811_Read(STMPE811_TSC_DATA_X + 1);
 80033a4:	204e      	movs	r0, #78	@ 0x4e
 80033a6:	f7ff fe12 	bl	8002fce <STMPE811_Read>
 80033aa:	4603      	mov	r3, r0
 80033ac:	723b      	strb	r3, [r7, #8]
    val = (data[1] << 8 | (data[0] & 0xFF));
 80033ae:	7a7b      	ldrb	r3, [r7, #9]
 80033b0:	021b      	lsls	r3, r3, #8
 80033b2:	b21a      	sxth	r2, r3
 80033b4:	7a3b      	ldrb	r3, [r7, #8]
 80033b6:	b21b      	sxth	r3, r3
 80033b8:	4313      	orrs	r3, r2
 80033ba:	81fb      	strh	r3, [r7, #14]

    if (val <= 3000) {
 80033bc:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80033c0:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 80033c4:	4293      	cmp	r3, r2
 80033c6:	dc06      	bgt.n	80033d6 <TM_STMPE811_ReadX+0x46>
        val = 3900 - val;
 80033c8:	89fb      	ldrh	r3, [r7, #14]
 80033ca:	f5c3 6373 	rsb	r3, r3, #3888	@ 0xf30
 80033ce:	330c      	adds	r3, #12
 80033d0:	b29b      	uxth	r3, r3
 80033d2:	81fb      	strh	r3, [r7, #14]
 80033d4:	e005      	b.n	80033e2 <TM_STMPE811_ReadX+0x52>
    } else {
        val = 3800 - val;
 80033d6:	89fb      	ldrh	r3, [r7, #14]
 80033d8:	f5c3 636d 	rsb	r3, r3, #3792	@ 0xed0
 80033dc:	3308      	adds	r3, #8
 80033de:	b29b      	uxth	r3, r3
 80033e0:	81fb      	strh	r3, [r7, #14]
    }

    val /= 15;
 80033e2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80033e6:	4a18      	ldr	r2, [pc, #96]	@ (8003448 <TM_STMPE811_ReadX+0xb8>)
 80033e8:	fb82 1203 	smull	r1, r2, r2, r3
 80033ec:	441a      	add	r2, r3
 80033ee:	10d2      	asrs	r2, r2, #3
 80033f0:	17db      	asrs	r3, r3, #31
 80033f2:	1ad3      	subs	r3, r2, r3
 80033f4:	81fb      	strh	r3, [r7, #14]

    if (val > 239) {
 80033f6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80033fa:	2bef      	cmp	r3, #239	@ 0xef
 80033fc:	dd02      	ble.n	8003404 <TM_STMPE811_ReadX+0x74>
        val = 239;
 80033fe:	23ef      	movs	r3, #239	@ 0xef
 8003400:	81fb      	strh	r3, [r7, #14]
 8003402:	e005      	b.n	8003410 <TM_STMPE811_ReadX+0x80>
    } else if (val < 0) {
 8003404:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003408:	2b00      	cmp	r3, #0
 800340a:	da01      	bge.n	8003410 <TM_STMPE811_ReadX+0x80>
        val = 0;
 800340c:	2300      	movs	r3, #0
 800340e:	81fb      	strh	r3, [r7, #14]
    }

    dx = (val > x) ? (val - x) : (x - val);
 8003410:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8003414:	88fb      	ldrh	r3, [r7, #6]
 8003416:	429a      	cmp	r2, r3
 8003418:	dd05      	ble.n	8003426 <TM_STMPE811_ReadX+0x96>
 800341a:	89fa      	ldrh	r2, [r7, #14]
 800341c:	88fb      	ldrh	r3, [r7, #6]
 800341e:	1ad3      	subs	r3, r2, r3
 8003420:	b29b      	uxth	r3, r3
 8003422:	b21b      	sxth	r3, r3
 8003424:	e004      	b.n	8003430 <TM_STMPE811_ReadX+0xa0>
 8003426:	89fb      	ldrh	r3, [r7, #14]
 8003428:	88fa      	ldrh	r2, [r7, #6]
 800342a:	1ad3      	subs	r3, r2, r3
 800342c:	b29b      	uxth	r3, r3
 800342e:	b21b      	sxth	r3, r3
 8003430:	81bb      	strh	r3, [r7, #12]
    if (dx > 4) {
 8003432:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8003436:	2b04      	cmp	r3, #4
 8003438:	dd01      	ble.n	800343e <TM_STMPE811_ReadX+0xae>
        return val;
 800343a:	89fb      	ldrh	r3, [r7, #14]
 800343c:	e000      	b.n	8003440 <TM_STMPE811_ReadX+0xb0>
    }
    return x;
 800343e:	88fb      	ldrh	r3, [r7, #6]
}
 8003440:	4618      	mov	r0, r3
 8003442:	3710      	adds	r7, #16
 8003444:	46bd      	mov	sp, r7
 8003446:	bd80      	pop	{r7, pc}
 8003448:	88888889 	.word	0x88888889

0800344c <TM_STMPE811_ReadY>:

/* The below function was created by Tilen MAJERLE but modified by Xavion */
uint16_t TM_STMPE811_ReadY(uint16_t y) { // TM FUNCTION 
 800344c:	b580      	push	{r7, lr}
 800344e:	b084      	sub	sp, #16
 8003450:	af00      	add	r7, sp, #0
 8003452:	4603      	mov	r3, r0
 8003454:	80fb      	strh	r3, [r7, #6]
    uint8_t data[2];
    int16_t val, dy;
    data[1] = STMPE811_Read(STMPE811_TSC_DATA_Y);
 8003456:	204f      	movs	r0, #79	@ 0x4f
 8003458:	f7ff fdb9 	bl	8002fce <STMPE811_Read>
 800345c:	4603      	mov	r3, r0
 800345e:	727b      	strb	r3, [r7, #9]
    data[0] = STMPE811_Read(STMPE811_TSC_DATA_Y + 1);
 8003460:	2050      	movs	r0, #80	@ 0x50
 8003462:	f7ff fdb4 	bl	8002fce <STMPE811_Read>
 8003466:	4603      	mov	r3, r0
 8003468:	723b      	strb	r3, [r7, #8]
    val = (data[1] << 8 | (data[0] & 0xFF));
 800346a:	7a7b      	ldrb	r3, [r7, #9]
 800346c:	021b      	lsls	r3, r3, #8
 800346e:	b21a      	sxth	r2, r3
 8003470:	7a3b      	ldrb	r3, [r7, #8]
 8003472:	b21b      	sxth	r3, r3
 8003474:	4313      	orrs	r3, r2
 8003476:	81fb      	strh	r3, [r7, #14]

    val -= 360;
 8003478:	89fb      	ldrh	r3, [r7, #14]
 800347a:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 800347e:	b29b      	uxth	r3, r3
 8003480:	81fb      	strh	r3, [r7, #14]
    val = val / 11;
 8003482:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003486:	4a19      	ldr	r2, [pc, #100]	@ (80034ec <TM_STMPE811_ReadY+0xa0>)
 8003488:	fb82 1203 	smull	r1, r2, r2, r3
 800348c:	1052      	asrs	r2, r2, #1
 800348e:	17db      	asrs	r3, r3, #31
 8003490:	1ad3      	subs	r3, r2, r3
 8003492:	81fb      	strh	r3, [r7, #14]

    if (val <= 0) {
 8003494:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003498:	2b00      	cmp	r3, #0
 800349a:	dc02      	bgt.n	80034a2 <TM_STMPE811_ReadY+0x56>
        val = 0;
 800349c:	2300      	movs	r3, #0
 800349e:	81fb      	strh	r3, [r7, #14]
 80034a0:	e007      	b.n	80034b2 <TM_STMPE811_ReadY+0x66>
    } else if (val >= 320) {
 80034a2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80034a6:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 80034aa:	db02      	blt.n	80034b2 <TM_STMPE811_ReadY+0x66>
        val = 319;
 80034ac:	f240 133f 	movw	r3, #319	@ 0x13f
 80034b0:	81fb      	strh	r3, [r7, #14]
    }

    dy = (val > y) ? (val - y) : (y - val);
 80034b2:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80034b6:	88fb      	ldrh	r3, [r7, #6]
 80034b8:	429a      	cmp	r2, r3
 80034ba:	dd05      	ble.n	80034c8 <TM_STMPE811_ReadY+0x7c>
 80034bc:	89fa      	ldrh	r2, [r7, #14]
 80034be:	88fb      	ldrh	r3, [r7, #6]
 80034c0:	1ad3      	subs	r3, r2, r3
 80034c2:	b29b      	uxth	r3, r3
 80034c4:	b21b      	sxth	r3, r3
 80034c6:	e004      	b.n	80034d2 <TM_STMPE811_ReadY+0x86>
 80034c8:	89fb      	ldrh	r3, [r7, #14]
 80034ca:	88fa      	ldrh	r2, [r7, #6]
 80034cc:	1ad3      	subs	r3, r2, r3
 80034ce:	b29b      	uxth	r3, r3
 80034d0:	b21b      	sxth	r3, r3
 80034d2:	81bb      	strh	r3, [r7, #12]
    if (dy > 4) {
 80034d4:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80034d8:	2b04      	cmp	r3, #4
 80034da:	dd01      	ble.n	80034e0 <TM_STMPE811_ReadY+0x94>
        return val;
 80034dc:	89fb      	ldrh	r3, [r7, #14]
 80034de:	e000      	b.n	80034e2 <TM_STMPE811_ReadY+0x96>
    }
    return y;
 80034e0:	88fb      	ldrh	r3, [r7, #6]
}
 80034e2:	4618      	mov	r0, r3
 80034e4:	3710      	adds	r7, #16
 80034e6:	46bd      	mov	sp, r7
 80034e8:	bd80      	pop	{r7, pc}
 80034ea:	bf00      	nop
 80034ec:	2e8ba2e9 	.word	0x2e8ba2e9

080034f0 <initialise_monitor_handles>:
char **environ = __env;


/* Functions */
void initialise_monitor_handles()
{
 80034f0:	b480      	push	{r7}
 80034f2:	af00      	add	r7, sp, #0
}
 80034f4:	bf00      	nop
 80034f6:	46bd      	mov	sp, r7
 80034f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034fc:	4770      	bx	lr

080034fe <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80034fe:	b580      	push	{r7, lr}
 8003500:	b086      	sub	sp, #24
 8003502:	af00      	add	r7, sp, #0
 8003504:	60f8      	str	r0, [r7, #12]
 8003506:	60b9      	str	r1, [r7, #8]
 8003508:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800350a:	2300      	movs	r3, #0
 800350c:	617b      	str	r3, [r7, #20]
 800350e:	e00a      	b.n	8003526 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003510:	f3af 8000 	nop.w
 8003514:	4601      	mov	r1, r0
 8003516:	68bb      	ldr	r3, [r7, #8]
 8003518:	1c5a      	adds	r2, r3, #1
 800351a:	60ba      	str	r2, [r7, #8]
 800351c:	b2ca      	uxtb	r2, r1
 800351e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003520:	697b      	ldr	r3, [r7, #20]
 8003522:	3301      	adds	r3, #1
 8003524:	617b      	str	r3, [r7, #20]
 8003526:	697a      	ldr	r2, [r7, #20]
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	429a      	cmp	r2, r3
 800352c:	dbf0      	blt.n	8003510 <_read+0x12>
  }

  return len;
 800352e:	687b      	ldr	r3, [r7, #4]
}
 8003530:	4618      	mov	r0, r3
 8003532:	3718      	adds	r7, #24
 8003534:	46bd      	mov	sp, r7
 8003536:	bd80      	pop	{r7, pc}

08003538 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003538:	b580      	push	{r7, lr}
 800353a:	b086      	sub	sp, #24
 800353c:	af00      	add	r7, sp, #0
 800353e:	60f8      	str	r0, [r7, #12]
 8003540:	60b9      	str	r1, [r7, #8]
 8003542:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003544:	2300      	movs	r3, #0
 8003546:	617b      	str	r3, [r7, #20]
 8003548:	e009      	b.n	800355e <_write+0x26>
  {
    __io_putchar(*ptr++);
 800354a:	68bb      	ldr	r3, [r7, #8]
 800354c:	1c5a      	adds	r2, r3, #1
 800354e:	60ba      	str	r2, [r7, #8]
 8003550:	781b      	ldrb	r3, [r3, #0]
 8003552:	4618      	mov	r0, r3
 8003554:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003558:	697b      	ldr	r3, [r7, #20]
 800355a:	3301      	adds	r3, #1
 800355c:	617b      	str	r3, [r7, #20]
 800355e:	697a      	ldr	r2, [r7, #20]
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	429a      	cmp	r2, r3
 8003564:	dbf1      	blt.n	800354a <_write+0x12>
  }
  return len;
 8003566:	687b      	ldr	r3, [r7, #4]
}
 8003568:	4618      	mov	r0, r3
 800356a:	3718      	adds	r7, #24
 800356c:	46bd      	mov	sp, r7
 800356e:	bd80      	pop	{r7, pc}

08003570 <_close>:

int _close(int file)
{
 8003570:	b480      	push	{r7}
 8003572:	b083      	sub	sp, #12
 8003574:	af00      	add	r7, sp, #0
 8003576:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003578:	f04f 33ff 	mov.w	r3, #4294967295
}
 800357c:	4618      	mov	r0, r3
 800357e:	370c      	adds	r7, #12
 8003580:	46bd      	mov	sp, r7
 8003582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003586:	4770      	bx	lr

08003588 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003588:	b480      	push	{r7}
 800358a:	b083      	sub	sp, #12
 800358c:	af00      	add	r7, sp, #0
 800358e:	6078      	str	r0, [r7, #4]
 8003590:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003592:	683b      	ldr	r3, [r7, #0]
 8003594:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003598:	605a      	str	r2, [r3, #4]
  return 0;
 800359a:	2300      	movs	r3, #0
}
 800359c:	4618      	mov	r0, r3
 800359e:	370c      	adds	r7, #12
 80035a0:	46bd      	mov	sp, r7
 80035a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a6:	4770      	bx	lr

080035a8 <_isatty>:

int _isatty(int file)
{
 80035a8:	b480      	push	{r7}
 80035aa:	b083      	sub	sp, #12
 80035ac:	af00      	add	r7, sp, #0
 80035ae:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80035b0:	2301      	movs	r3, #1
}
 80035b2:	4618      	mov	r0, r3
 80035b4:	370c      	adds	r7, #12
 80035b6:	46bd      	mov	sp, r7
 80035b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035bc:	4770      	bx	lr

080035be <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80035be:	b480      	push	{r7}
 80035c0:	b085      	sub	sp, #20
 80035c2:	af00      	add	r7, sp, #0
 80035c4:	60f8      	str	r0, [r7, #12]
 80035c6:	60b9      	str	r1, [r7, #8]
 80035c8:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80035ca:	2300      	movs	r3, #0
}
 80035cc:	4618      	mov	r0, r3
 80035ce:	3714      	adds	r7, #20
 80035d0:	46bd      	mov	sp, r7
 80035d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d6:	4770      	bx	lr

080035d8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80035d8:	b580      	push	{r7, lr}
 80035da:	b086      	sub	sp, #24
 80035dc:	af00      	add	r7, sp, #0
 80035de:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80035e0:	4a14      	ldr	r2, [pc, #80]	@ (8003634 <_sbrk+0x5c>)
 80035e2:	4b15      	ldr	r3, [pc, #84]	@ (8003638 <_sbrk+0x60>)
 80035e4:	1ad3      	subs	r3, r2, r3
 80035e6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80035e8:	697b      	ldr	r3, [r7, #20]
 80035ea:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80035ec:	4b13      	ldr	r3, [pc, #76]	@ (800363c <_sbrk+0x64>)
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d102      	bne.n	80035fa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80035f4:	4b11      	ldr	r3, [pc, #68]	@ (800363c <_sbrk+0x64>)
 80035f6:	4a12      	ldr	r2, [pc, #72]	@ (8003640 <_sbrk+0x68>)
 80035f8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80035fa:	4b10      	ldr	r3, [pc, #64]	@ (800363c <_sbrk+0x64>)
 80035fc:	681a      	ldr	r2, [r3, #0]
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	4413      	add	r3, r2
 8003602:	693a      	ldr	r2, [r7, #16]
 8003604:	429a      	cmp	r2, r3
 8003606:	d207      	bcs.n	8003618 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003608:	f003 fec6 	bl	8007398 <__errno>
 800360c:	4603      	mov	r3, r0
 800360e:	220c      	movs	r2, #12
 8003610:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003612:	f04f 33ff 	mov.w	r3, #4294967295
 8003616:	e009      	b.n	800362c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003618:	4b08      	ldr	r3, [pc, #32]	@ (800363c <_sbrk+0x64>)
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800361e:	4b07      	ldr	r3, [pc, #28]	@ (800363c <_sbrk+0x64>)
 8003620:	681a      	ldr	r2, [r3, #0]
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	4413      	add	r3, r2
 8003626:	4a05      	ldr	r2, [pc, #20]	@ (800363c <_sbrk+0x64>)
 8003628:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800362a:	68fb      	ldr	r3, [r7, #12]
}
 800362c:	4618      	mov	r0, r3
 800362e:	3718      	adds	r7, #24
 8003630:	46bd      	mov	sp, r7
 8003632:	bd80      	pop	{r7, pc}
 8003634:	20030000 	.word	0x20030000
 8003638:	00000400 	.word	0x00000400
 800363c:	20025bf0 	.word	0x20025bf0
 8003640:	20025d48 	.word	0x20025d48

08003644 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003644:	b480      	push	{r7}
 8003646:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003648:	4b06      	ldr	r3, [pc, #24]	@ (8003664 <SystemInit+0x20>)
 800364a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800364e:	4a05      	ldr	r2, [pc, #20]	@ (8003664 <SystemInit+0x20>)
 8003650:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003654:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003658:	bf00      	nop
 800365a:	46bd      	mov	sp, r7
 800365c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003660:	4770      	bx	lr
 8003662:	bf00      	nop
 8003664:	e000ed00 	.word	0xe000ed00

08003668 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8003668:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80036a0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800366c:	f7ff ffea 	bl	8003644 <SystemInit>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003670:	480c      	ldr	r0, [pc, #48]	@ (80036a4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003672:	490d      	ldr	r1, [pc, #52]	@ (80036a8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003674:	4a0d      	ldr	r2, [pc, #52]	@ (80036ac <LoopFillZerobss+0x1a>)
  movs r3, #0
 8003676:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003678:	e002      	b.n	8003680 <LoopCopyDataInit>

0800367a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800367a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800367c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800367e:	3304      	adds	r3, #4

08003680 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003680:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003682:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003684:	d3f9      	bcc.n	800367a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003686:	4a0a      	ldr	r2, [pc, #40]	@ (80036b0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003688:	4c0a      	ldr	r4, [pc, #40]	@ (80036b4 <LoopFillZerobss+0x22>)
  movs r3, #0
 800368a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800368c:	e001      	b.n	8003692 <LoopFillZerobss>

0800368e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800368e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003690:	3204      	adds	r2, #4

08003692 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003692:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003694:	d3fb      	bcc.n	800368e <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8003696:	f003 fe85 	bl	80073a4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800369a:	f7fe fd63 	bl	8002164 <main>
  bx  lr    
 800369e:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80036a0:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 80036a4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80036a8:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 80036ac:	08009418 	.word	0x08009418
  ldr r2, =_sbss
 80036b0:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 80036b4:	20025d44 	.word	0x20025d44

080036b8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80036b8:	e7fe      	b.n	80036b8 <ADC_IRQHandler>
	...

080036bc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80036bc:	b580      	push	{r7, lr}
 80036be:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80036c0:	4b0e      	ldr	r3, [pc, #56]	@ (80036fc <HAL_Init+0x40>)
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	4a0d      	ldr	r2, [pc, #52]	@ (80036fc <HAL_Init+0x40>)
 80036c6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80036ca:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80036cc:	4b0b      	ldr	r3, [pc, #44]	@ (80036fc <HAL_Init+0x40>)
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	4a0a      	ldr	r2, [pc, #40]	@ (80036fc <HAL_Init+0x40>)
 80036d2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80036d6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80036d8:	4b08      	ldr	r3, [pc, #32]	@ (80036fc <HAL_Init+0x40>)
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	4a07      	ldr	r2, [pc, #28]	@ (80036fc <HAL_Init+0x40>)
 80036de:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80036e2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80036e4:	2003      	movs	r0, #3
 80036e6:	f000 f991 	bl	8003a0c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80036ea:	2000      	movs	r0, #0
 80036ec:	f000 f808 	bl	8003700 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80036f0:	f7ff f8f4 	bl	80028dc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80036f4:	2300      	movs	r3, #0
}
 80036f6:	4618      	mov	r0, r3
 80036f8:	bd80      	pop	{r7, pc}
 80036fa:	bf00      	nop
 80036fc:	40023c00 	.word	0x40023c00

08003700 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003700:	b580      	push	{r7, lr}
 8003702:	b082      	sub	sp, #8
 8003704:	af00      	add	r7, sp, #0
 8003706:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003708:	4b12      	ldr	r3, [pc, #72]	@ (8003754 <HAL_InitTick+0x54>)
 800370a:	681a      	ldr	r2, [r3, #0]
 800370c:	4b12      	ldr	r3, [pc, #72]	@ (8003758 <HAL_InitTick+0x58>)
 800370e:	781b      	ldrb	r3, [r3, #0]
 8003710:	4619      	mov	r1, r3
 8003712:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003716:	fbb3 f3f1 	udiv	r3, r3, r1
 800371a:	fbb2 f3f3 	udiv	r3, r2, r3
 800371e:	4618      	mov	r0, r3
 8003720:	f000 f9b7 	bl	8003a92 <HAL_SYSTICK_Config>
 8003724:	4603      	mov	r3, r0
 8003726:	2b00      	cmp	r3, #0
 8003728:	d001      	beq.n	800372e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800372a:	2301      	movs	r3, #1
 800372c:	e00e      	b.n	800374c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	2b0f      	cmp	r3, #15
 8003732:	d80a      	bhi.n	800374a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003734:	2200      	movs	r2, #0
 8003736:	6879      	ldr	r1, [r7, #4]
 8003738:	f04f 30ff 	mov.w	r0, #4294967295
 800373c:	f000 f971 	bl	8003a22 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003740:	4a06      	ldr	r2, [pc, #24]	@ (800375c <HAL_InitTick+0x5c>)
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003746:	2300      	movs	r3, #0
 8003748:	e000      	b.n	800374c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800374a:	2301      	movs	r3, #1
}
 800374c:	4618      	mov	r0, r3
 800374e:	3708      	adds	r7, #8
 8003750:	46bd      	mov	sp, r7
 8003752:	bd80      	pop	{r7, pc}
 8003754:	20000014 	.word	0x20000014
 8003758:	2000001c 	.word	0x2000001c
 800375c:	20000018 	.word	0x20000018

08003760 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003760:	b480      	push	{r7}
 8003762:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003764:	4b06      	ldr	r3, [pc, #24]	@ (8003780 <HAL_IncTick+0x20>)
 8003766:	781b      	ldrb	r3, [r3, #0]
 8003768:	461a      	mov	r2, r3
 800376a:	4b06      	ldr	r3, [pc, #24]	@ (8003784 <HAL_IncTick+0x24>)
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	4413      	add	r3, r2
 8003770:	4a04      	ldr	r2, [pc, #16]	@ (8003784 <HAL_IncTick+0x24>)
 8003772:	6013      	str	r3, [r2, #0]
}
 8003774:	bf00      	nop
 8003776:	46bd      	mov	sp, r7
 8003778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800377c:	4770      	bx	lr
 800377e:	bf00      	nop
 8003780:	2000001c 	.word	0x2000001c
 8003784:	20025bf4 	.word	0x20025bf4

08003788 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003788:	b480      	push	{r7}
 800378a:	af00      	add	r7, sp, #0
  return uwTick;
 800378c:	4b03      	ldr	r3, [pc, #12]	@ (800379c <HAL_GetTick+0x14>)
 800378e:	681b      	ldr	r3, [r3, #0]
}
 8003790:	4618      	mov	r0, r3
 8003792:	46bd      	mov	sp, r7
 8003794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003798:	4770      	bx	lr
 800379a:	bf00      	nop
 800379c:	20025bf4 	.word	0x20025bf4

080037a0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80037a0:	b580      	push	{r7, lr}
 80037a2:	b084      	sub	sp, #16
 80037a4:	af00      	add	r7, sp, #0
 80037a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80037a8:	f7ff ffee 	bl	8003788 <HAL_GetTick>
 80037ac:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037b8:	d005      	beq.n	80037c6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80037ba:	4b0a      	ldr	r3, [pc, #40]	@ (80037e4 <HAL_Delay+0x44>)
 80037bc:	781b      	ldrb	r3, [r3, #0]
 80037be:	461a      	mov	r2, r3
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	4413      	add	r3, r2
 80037c4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80037c6:	bf00      	nop
 80037c8:	f7ff ffde 	bl	8003788 <HAL_GetTick>
 80037cc:	4602      	mov	r2, r0
 80037ce:	68bb      	ldr	r3, [r7, #8]
 80037d0:	1ad3      	subs	r3, r2, r3
 80037d2:	68fa      	ldr	r2, [r7, #12]
 80037d4:	429a      	cmp	r2, r3
 80037d6:	d8f7      	bhi.n	80037c8 <HAL_Delay+0x28>
  {
  }
}
 80037d8:	bf00      	nop
 80037da:	bf00      	nop
 80037dc:	3710      	adds	r7, #16
 80037de:	46bd      	mov	sp, r7
 80037e0:	bd80      	pop	{r7, pc}
 80037e2:	bf00      	nop
 80037e4:	2000001c 	.word	0x2000001c

080037e8 <__NVIC_SetPriorityGrouping>:
{
 80037e8:	b480      	push	{r7}
 80037ea:	b085      	sub	sp, #20
 80037ec:	af00      	add	r7, sp, #0
 80037ee:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	f003 0307 	and.w	r3, r3, #7
 80037f6:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80037f8:	4b0c      	ldr	r3, [pc, #48]	@ (800382c <__NVIC_SetPriorityGrouping+0x44>)
 80037fa:	68db      	ldr	r3, [r3, #12]
 80037fc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80037fe:	68ba      	ldr	r2, [r7, #8]
 8003800:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003804:	4013      	ands	r3, r2
 8003806:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800380c:	68bb      	ldr	r3, [r7, #8]
 800380e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003810:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003814:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003818:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800381a:	4a04      	ldr	r2, [pc, #16]	@ (800382c <__NVIC_SetPriorityGrouping+0x44>)
 800381c:	68bb      	ldr	r3, [r7, #8]
 800381e:	60d3      	str	r3, [r2, #12]
}
 8003820:	bf00      	nop
 8003822:	3714      	adds	r7, #20
 8003824:	46bd      	mov	sp, r7
 8003826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800382a:	4770      	bx	lr
 800382c:	e000ed00 	.word	0xe000ed00

08003830 <__NVIC_GetPriorityGrouping>:
{
 8003830:	b480      	push	{r7}
 8003832:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003834:	4b04      	ldr	r3, [pc, #16]	@ (8003848 <__NVIC_GetPriorityGrouping+0x18>)
 8003836:	68db      	ldr	r3, [r3, #12]
 8003838:	0a1b      	lsrs	r3, r3, #8
 800383a:	f003 0307 	and.w	r3, r3, #7
}
 800383e:	4618      	mov	r0, r3
 8003840:	46bd      	mov	sp, r7
 8003842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003846:	4770      	bx	lr
 8003848:	e000ed00 	.word	0xe000ed00

0800384c <__NVIC_EnableIRQ>:
{
 800384c:	b480      	push	{r7}
 800384e:	b083      	sub	sp, #12
 8003850:	af00      	add	r7, sp, #0
 8003852:	4603      	mov	r3, r0
 8003854:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003856:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800385a:	2b00      	cmp	r3, #0
 800385c:	db0b      	blt.n	8003876 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800385e:	79fb      	ldrb	r3, [r7, #7]
 8003860:	f003 021f 	and.w	r2, r3, #31
 8003864:	4907      	ldr	r1, [pc, #28]	@ (8003884 <__NVIC_EnableIRQ+0x38>)
 8003866:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800386a:	095b      	lsrs	r3, r3, #5
 800386c:	2001      	movs	r0, #1
 800386e:	fa00 f202 	lsl.w	r2, r0, r2
 8003872:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8003876:	bf00      	nop
 8003878:	370c      	adds	r7, #12
 800387a:	46bd      	mov	sp, r7
 800387c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003880:	4770      	bx	lr
 8003882:	bf00      	nop
 8003884:	e000e100 	.word	0xe000e100

08003888 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003888:	b480      	push	{r7}
 800388a:	b083      	sub	sp, #12
 800388c:	af00      	add	r7, sp, #0
 800388e:	4603      	mov	r3, r0
 8003890:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003892:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003896:	2b00      	cmp	r3, #0
 8003898:	db12      	blt.n	80038c0 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800389a:	79fb      	ldrb	r3, [r7, #7]
 800389c:	f003 021f 	and.w	r2, r3, #31
 80038a0:	490a      	ldr	r1, [pc, #40]	@ (80038cc <__NVIC_DisableIRQ+0x44>)
 80038a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038a6:	095b      	lsrs	r3, r3, #5
 80038a8:	2001      	movs	r0, #1
 80038aa:	fa00 f202 	lsl.w	r2, r0, r2
 80038ae:	3320      	adds	r3, #32
 80038b0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 80038b4:	f3bf 8f4f 	dsb	sy
}
 80038b8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80038ba:	f3bf 8f6f 	isb	sy
}
 80038be:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 80038c0:	bf00      	nop
 80038c2:	370c      	adds	r7, #12
 80038c4:	46bd      	mov	sp, r7
 80038c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ca:	4770      	bx	lr
 80038cc:	e000e100 	.word	0xe000e100

080038d0 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 80038d0:	b480      	push	{r7}
 80038d2:	b083      	sub	sp, #12
 80038d4:	af00      	add	r7, sp, #0
 80038d6:	4603      	mov	r3, r0
 80038d8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80038da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038de:	2b00      	cmp	r3, #0
 80038e0:	db0c      	blt.n	80038fc <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80038e2:	79fb      	ldrb	r3, [r7, #7]
 80038e4:	f003 021f 	and.w	r2, r3, #31
 80038e8:	4907      	ldr	r1, [pc, #28]	@ (8003908 <__NVIC_ClearPendingIRQ+0x38>)
 80038ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038ee:	095b      	lsrs	r3, r3, #5
 80038f0:	2001      	movs	r0, #1
 80038f2:	fa00 f202 	lsl.w	r2, r0, r2
 80038f6:	3360      	adds	r3, #96	@ 0x60
 80038f8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80038fc:	bf00      	nop
 80038fe:	370c      	adds	r7, #12
 8003900:	46bd      	mov	sp, r7
 8003902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003906:	4770      	bx	lr
 8003908:	e000e100 	.word	0xe000e100

0800390c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800390c:	b480      	push	{r7}
 800390e:	b083      	sub	sp, #12
 8003910:	af00      	add	r7, sp, #0
 8003912:	4603      	mov	r3, r0
 8003914:	6039      	str	r1, [r7, #0]
 8003916:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003918:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800391c:	2b00      	cmp	r3, #0
 800391e:	db0a      	blt.n	8003936 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003920:	683b      	ldr	r3, [r7, #0]
 8003922:	b2da      	uxtb	r2, r3
 8003924:	490c      	ldr	r1, [pc, #48]	@ (8003958 <__NVIC_SetPriority+0x4c>)
 8003926:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800392a:	0112      	lsls	r2, r2, #4
 800392c:	b2d2      	uxtb	r2, r2
 800392e:	440b      	add	r3, r1
 8003930:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003934:	e00a      	b.n	800394c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003936:	683b      	ldr	r3, [r7, #0]
 8003938:	b2da      	uxtb	r2, r3
 800393a:	4908      	ldr	r1, [pc, #32]	@ (800395c <__NVIC_SetPriority+0x50>)
 800393c:	79fb      	ldrb	r3, [r7, #7]
 800393e:	f003 030f 	and.w	r3, r3, #15
 8003942:	3b04      	subs	r3, #4
 8003944:	0112      	lsls	r2, r2, #4
 8003946:	b2d2      	uxtb	r2, r2
 8003948:	440b      	add	r3, r1
 800394a:	761a      	strb	r2, [r3, #24]
}
 800394c:	bf00      	nop
 800394e:	370c      	adds	r7, #12
 8003950:	46bd      	mov	sp, r7
 8003952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003956:	4770      	bx	lr
 8003958:	e000e100 	.word	0xe000e100
 800395c:	e000ed00 	.word	0xe000ed00

08003960 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003960:	b480      	push	{r7}
 8003962:	b089      	sub	sp, #36	@ 0x24
 8003964:	af00      	add	r7, sp, #0
 8003966:	60f8      	str	r0, [r7, #12]
 8003968:	60b9      	str	r1, [r7, #8]
 800396a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	f003 0307 	and.w	r3, r3, #7
 8003972:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003974:	69fb      	ldr	r3, [r7, #28]
 8003976:	f1c3 0307 	rsb	r3, r3, #7
 800397a:	2b04      	cmp	r3, #4
 800397c:	bf28      	it	cs
 800397e:	2304      	movcs	r3, #4
 8003980:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003982:	69fb      	ldr	r3, [r7, #28]
 8003984:	3304      	adds	r3, #4
 8003986:	2b06      	cmp	r3, #6
 8003988:	d902      	bls.n	8003990 <NVIC_EncodePriority+0x30>
 800398a:	69fb      	ldr	r3, [r7, #28]
 800398c:	3b03      	subs	r3, #3
 800398e:	e000      	b.n	8003992 <NVIC_EncodePriority+0x32>
 8003990:	2300      	movs	r3, #0
 8003992:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003994:	f04f 32ff 	mov.w	r2, #4294967295
 8003998:	69bb      	ldr	r3, [r7, #24]
 800399a:	fa02 f303 	lsl.w	r3, r2, r3
 800399e:	43da      	mvns	r2, r3
 80039a0:	68bb      	ldr	r3, [r7, #8]
 80039a2:	401a      	ands	r2, r3
 80039a4:	697b      	ldr	r3, [r7, #20]
 80039a6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80039a8:	f04f 31ff 	mov.w	r1, #4294967295
 80039ac:	697b      	ldr	r3, [r7, #20]
 80039ae:	fa01 f303 	lsl.w	r3, r1, r3
 80039b2:	43d9      	mvns	r1, r3
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80039b8:	4313      	orrs	r3, r2
         );
}
 80039ba:	4618      	mov	r0, r3
 80039bc:	3724      	adds	r7, #36	@ 0x24
 80039be:	46bd      	mov	sp, r7
 80039c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c4:	4770      	bx	lr
	...

080039c8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80039c8:	b580      	push	{r7, lr}
 80039ca:	b082      	sub	sp, #8
 80039cc:	af00      	add	r7, sp, #0
 80039ce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	3b01      	subs	r3, #1
 80039d4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80039d8:	d301      	bcc.n	80039de <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80039da:	2301      	movs	r3, #1
 80039dc:	e00f      	b.n	80039fe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80039de:	4a0a      	ldr	r2, [pc, #40]	@ (8003a08 <SysTick_Config+0x40>)
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	3b01      	subs	r3, #1
 80039e4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80039e6:	210f      	movs	r1, #15
 80039e8:	f04f 30ff 	mov.w	r0, #4294967295
 80039ec:	f7ff ff8e 	bl	800390c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80039f0:	4b05      	ldr	r3, [pc, #20]	@ (8003a08 <SysTick_Config+0x40>)
 80039f2:	2200      	movs	r2, #0
 80039f4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80039f6:	4b04      	ldr	r3, [pc, #16]	@ (8003a08 <SysTick_Config+0x40>)
 80039f8:	2207      	movs	r2, #7
 80039fa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80039fc:	2300      	movs	r3, #0
}
 80039fe:	4618      	mov	r0, r3
 8003a00:	3708      	adds	r7, #8
 8003a02:	46bd      	mov	sp, r7
 8003a04:	bd80      	pop	{r7, pc}
 8003a06:	bf00      	nop
 8003a08:	e000e010 	.word	0xe000e010

08003a0c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003a0c:	b580      	push	{r7, lr}
 8003a0e:	b082      	sub	sp, #8
 8003a10:	af00      	add	r7, sp, #0
 8003a12:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003a14:	6878      	ldr	r0, [r7, #4]
 8003a16:	f7ff fee7 	bl	80037e8 <__NVIC_SetPriorityGrouping>
}
 8003a1a:	bf00      	nop
 8003a1c:	3708      	adds	r7, #8
 8003a1e:	46bd      	mov	sp, r7
 8003a20:	bd80      	pop	{r7, pc}

08003a22 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003a22:	b580      	push	{r7, lr}
 8003a24:	b086      	sub	sp, #24
 8003a26:	af00      	add	r7, sp, #0
 8003a28:	4603      	mov	r3, r0
 8003a2a:	60b9      	str	r1, [r7, #8]
 8003a2c:	607a      	str	r2, [r7, #4]
 8003a2e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003a30:	2300      	movs	r3, #0
 8003a32:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003a34:	f7ff fefc 	bl	8003830 <__NVIC_GetPriorityGrouping>
 8003a38:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003a3a:	687a      	ldr	r2, [r7, #4]
 8003a3c:	68b9      	ldr	r1, [r7, #8]
 8003a3e:	6978      	ldr	r0, [r7, #20]
 8003a40:	f7ff ff8e 	bl	8003960 <NVIC_EncodePriority>
 8003a44:	4602      	mov	r2, r0
 8003a46:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003a4a:	4611      	mov	r1, r2
 8003a4c:	4618      	mov	r0, r3
 8003a4e:	f7ff ff5d 	bl	800390c <__NVIC_SetPriority>
}
 8003a52:	bf00      	nop
 8003a54:	3718      	adds	r7, #24
 8003a56:	46bd      	mov	sp, r7
 8003a58:	bd80      	pop	{r7, pc}

08003a5a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003a5a:	b580      	push	{r7, lr}
 8003a5c:	b082      	sub	sp, #8
 8003a5e:	af00      	add	r7, sp, #0
 8003a60:	4603      	mov	r3, r0
 8003a62:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003a64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a68:	4618      	mov	r0, r3
 8003a6a:	f7ff feef 	bl	800384c <__NVIC_EnableIRQ>
}
 8003a6e:	bf00      	nop
 8003a70:	3708      	adds	r7, #8
 8003a72:	46bd      	mov	sp, r7
 8003a74:	bd80      	pop	{r7, pc}

08003a76 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003a76:	b580      	push	{r7, lr}
 8003a78:	b082      	sub	sp, #8
 8003a7a:	af00      	add	r7, sp, #0
 8003a7c:	4603      	mov	r3, r0
 8003a7e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8003a80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a84:	4618      	mov	r0, r3
 8003a86:	f7ff feff 	bl	8003888 <__NVIC_DisableIRQ>
}
 8003a8a:	bf00      	nop
 8003a8c:	3708      	adds	r7, #8
 8003a8e:	46bd      	mov	sp, r7
 8003a90:	bd80      	pop	{r7, pc}

08003a92 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003a92:	b580      	push	{r7, lr}
 8003a94:	b082      	sub	sp, #8
 8003a96:	af00      	add	r7, sp, #0
 8003a98:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003a9a:	6878      	ldr	r0, [r7, #4]
 8003a9c:	f7ff ff94 	bl	80039c8 <SysTick_Config>
 8003aa0:	4603      	mov	r3, r0
}
 8003aa2:	4618      	mov	r0, r3
 8003aa4:	3708      	adds	r7, #8
 8003aa6:	46bd      	mov	sp, r7
 8003aa8:	bd80      	pop	{r7, pc}

08003aaa <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8003aaa:	b580      	push	{r7, lr}
 8003aac:	b082      	sub	sp, #8
 8003aae:	af00      	add	r7, sp, #0
 8003ab0:	4603      	mov	r3, r0
 8003ab2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 8003ab4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ab8:	4618      	mov	r0, r3
 8003aba:	f7ff ff09 	bl	80038d0 <__NVIC_ClearPendingIRQ>
}
 8003abe:	bf00      	nop
 8003ac0:	3708      	adds	r7, #8
 8003ac2:	46bd      	mov	sp, r7
 8003ac4:	bd80      	pop	{r7, pc}
	...

08003ac8 <HAL_EXTI_ClearPending>:
  *           @arg @ref EXTI_TRIGGER_RISING_FALLING
  *         This parameter is kept for compatibility with other series.
  * @retval None.
  */
void HAL_EXTI_ClearPending(EXTI_HandleTypeDef *hexti, uint32_t Edge)
{
 8003ac8:	b480      	push	{r7}
 8003aca:	b085      	sub	sp, #20
 8003acc:	af00      	add	r7, sp, #0
 8003ace:	6078      	str	r0, [r7, #4]
 8003ad0:	6039      	str	r1, [r7, #0]
  assert_param(IS_EXTI_LINE(hexti->Line));
  assert_param(IS_EXTI_CONFIG_LINE(hexti->Line));
  assert_param(IS_EXTI_PENDING_EDGE(Edge));

  /* Compute line mask */
  maskline = (1uL << (hexti->Line & EXTI_PIN_MASK));
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	f003 031f 	and.w	r3, r3, #31
 8003ada:	2201      	movs	r2, #1
 8003adc:	fa02 f303 	lsl.w	r3, r2, r3
 8003ae0:	60fb      	str	r3, [r7, #12]

  /* Clear Pending bit */
  EXTI->PR =  maskline;
 8003ae2:	4a04      	ldr	r2, [pc, #16]	@ (8003af4 <HAL_EXTI_ClearPending+0x2c>)
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	6153      	str	r3, [r2, #20]
}
 8003ae8:	bf00      	nop
 8003aea:	3714      	adds	r7, #20
 8003aec:	46bd      	mov	sp, r7
 8003aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af2:	4770      	bx	lr
 8003af4:	40013c00 	.word	0x40013c00

08003af8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003af8:	b480      	push	{r7}
 8003afa:	b089      	sub	sp, #36	@ 0x24
 8003afc:	af00      	add	r7, sp, #0
 8003afe:	6078      	str	r0, [r7, #4]
 8003b00:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003b02:	2300      	movs	r3, #0
 8003b04:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003b06:	2300      	movs	r3, #0
 8003b08:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003b0a:	2300      	movs	r3, #0
 8003b0c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003b0e:	2300      	movs	r3, #0
 8003b10:	61fb      	str	r3, [r7, #28]
 8003b12:	e177      	b.n	8003e04 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003b14:	2201      	movs	r2, #1
 8003b16:	69fb      	ldr	r3, [r7, #28]
 8003b18:	fa02 f303 	lsl.w	r3, r2, r3
 8003b1c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003b1e:	683b      	ldr	r3, [r7, #0]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	697a      	ldr	r2, [r7, #20]
 8003b24:	4013      	ands	r3, r2
 8003b26:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003b28:	693a      	ldr	r2, [r7, #16]
 8003b2a:	697b      	ldr	r3, [r7, #20]
 8003b2c:	429a      	cmp	r2, r3
 8003b2e:	f040 8166 	bne.w	8003dfe <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003b32:	683b      	ldr	r3, [r7, #0]
 8003b34:	685b      	ldr	r3, [r3, #4]
 8003b36:	f003 0303 	and.w	r3, r3, #3
 8003b3a:	2b01      	cmp	r3, #1
 8003b3c:	d005      	beq.n	8003b4a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003b3e:	683b      	ldr	r3, [r7, #0]
 8003b40:	685b      	ldr	r3, [r3, #4]
 8003b42:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003b46:	2b02      	cmp	r3, #2
 8003b48:	d130      	bne.n	8003bac <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	689b      	ldr	r3, [r3, #8]
 8003b4e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003b50:	69fb      	ldr	r3, [r7, #28]
 8003b52:	005b      	lsls	r3, r3, #1
 8003b54:	2203      	movs	r2, #3
 8003b56:	fa02 f303 	lsl.w	r3, r2, r3
 8003b5a:	43db      	mvns	r3, r3
 8003b5c:	69ba      	ldr	r2, [r7, #24]
 8003b5e:	4013      	ands	r3, r2
 8003b60:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003b62:	683b      	ldr	r3, [r7, #0]
 8003b64:	68da      	ldr	r2, [r3, #12]
 8003b66:	69fb      	ldr	r3, [r7, #28]
 8003b68:	005b      	lsls	r3, r3, #1
 8003b6a:	fa02 f303 	lsl.w	r3, r2, r3
 8003b6e:	69ba      	ldr	r2, [r7, #24]
 8003b70:	4313      	orrs	r3, r2
 8003b72:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	69ba      	ldr	r2, [r7, #24]
 8003b78:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	685b      	ldr	r3, [r3, #4]
 8003b7e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003b80:	2201      	movs	r2, #1
 8003b82:	69fb      	ldr	r3, [r7, #28]
 8003b84:	fa02 f303 	lsl.w	r3, r2, r3
 8003b88:	43db      	mvns	r3, r3
 8003b8a:	69ba      	ldr	r2, [r7, #24]
 8003b8c:	4013      	ands	r3, r2
 8003b8e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003b90:	683b      	ldr	r3, [r7, #0]
 8003b92:	685b      	ldr	r3, [r3, #4]
 8003b94:	091b      	lsrs	r3, r3, #4
 8003b96:	f003 0201 	and.w	r2, r3, #1
 8003b9a:	69fb      	ldr	r3, [r7, #28]
 8003b9c:	fa02 f303 	lsl.w	r3, r2, r3
 8003ba0:	69ba      	ldr	r2, [r7, #24]
 8003ba2:	4313      	orrs	r3, r2
 8003ba4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	69ba      	ldr	r2, [r7, #24]
 8003baa:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003bac:	683b      	ldr	r3, [r7, #0]
 8003bae:	685b      	ldr	r3, [r3, #4]
 8003bb0:	f003 0303 	and.w	r3, r3, #3
 8003bb4:	2b03      	cmp	r3, #3
 8003bb6:	d017      	beq.n	8003be8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	68db      	ldr	r3, [r3, #12]
 8003bbc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003bbe:	69fb      	ldr	r3, [r7, #28]
 8003bc0:	005b      	lsls	r3, r3, #1
 8003bc2:	2203      	movs	r2, #3
 8003bc4:	fa02 f303 	lsl.w	r3, r2, r3
 8003bc8:	43db      	mvns	r3, r3
 8003bca:	69ba      	ldr	r2, [r7, #24]
 8003bcc:	4013      	ands	r3, r2
 8003bce:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003bd0:	683b      	ldr	r3, [r7, #0]
 8003bd2:	689a      	ldr	r2, [r3, #8]
 8003bd4:	69fb      	ldr	r3, [r7, #28]
 8003bd6:	005b      	lsls	r3, r3, #1
 8003bd8:	fa02 f303 	lsl.w	r3, r2, r3
 8003bdc:	69ba      	ldr	r2, [r7, #24]
 8003bde:	4313      	orrs	r3, r2
 8003be0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	69ba      	ldr	r2, [r7, #24]
 8003be6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003be8:	683b      	ldr	r3, [r7, #0]
 8003bea:	685b      	ldr	r3, [r3, #4]
 8003bec:	f003 0303 	and.w	r3, r3, #3
 8003bf0:	2b02      	cmp	r3, #2
 8003bf2:	d123      	bne.n	8003c3c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003bf4:	69fb      	ldr	r3, [r7, #28]
 8003bf6:	08da      	lsrs	r2, r3, #3
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	3208      	adds	r2, #8
 8003bfc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003c00:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003c02:	69fb      	ldr	r3, [r7, #28]
 8003c04:	f003 0307 	and.w	r3, r3, #7
 8003c08:	009b      	lsls	r3, r3, #2
 8003c0a:	220f      	movs	r2, #15
 8003c0c:	fa02 f303 	lsl.w	r3, r2, r3
 8003c10:	43db      	mvns	r3, r3
 8003c12:	69ba      	ldr	r2, [r7, #24]
 8003c14:	4013      	ands	r3, r2
 8003c16:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003c18:	683b      	ldr	r3, [r7, #0]
 8003c1a:	691a      	ldr	r2, [r3, #16]
 8003c1c:	69fb      	ldr	r3, [r7, #28]
 8003c1e:	f003 0307 	and.w	r3, r3, #7
 8003c22:	009b      	lsls	r3, r3, #2
 8003c24:	fa02 f303 	lsl.w	r3, r2, r3
 8003c28:	69ba      	ldr	r2, [r7, #24]
 8003c2a:	4313      	orrs	r3, r2
 8003c2c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003c2e:	69fb      	ldr	r3, [r7, #28]
 8003c30:	08da      	lsrs	r2, r3, #3
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	3208      	adds	r2, #8
 8003c36:	69b9      	ldr	r1, [r7, #24]
 8003c38:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003c42:	69fb      	ldr	r3, [r7, #28]
 8003c44:	005b      	lsls	r3, r3, #1
 8003c46:	2203      	movs	r2, #3
 8003c48:	fa02 f303 	lsl.w	r3, r2, r3
 8003c4c:	43db      	mvns	r3, r3
 8003c4e:	69ba      	ldr	r2, [r7, #24]
 8003c50:	4013      	ands	r3, r2
 8003c52:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003c54:	683b      	ldr	r3, [r7, #0]
 8003c56:	685b      	ldr	r3, [r3, #4]
 8003c58:	f003 0203 	and.w	r2, r3, #3
 8003c5c:	69fb      	ldr	r3, [r7, #28]
 8003c5e:	005b      	lsls	r3, r3, #1
 8003c60:	fa02 f303 	lsl.w	r3, r2, r3
 8003c64:	69ba      	ldr	r2, [r7, #24]
 8003c66:	4313      	orrs	r3, r2
 8003c68:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	69ba      	ldr	r2, [r7, #24]
 8003c6e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003c70:	683b      	ldr	r3, [r7, #0]
 8003c72:	685b      	ldr	r3, [r3, #4]
 8003c74:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	f000 80c0 	beq.w	8003dfe <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003c7e:	2300      	movs	r3, #0
 8003c80:	60fb      	str	r3, [r7, #12]
 8003c82:	4b66      	ldr	r3, [pc, #408]	@ (8003e1c <HAL_GPIO_Init+0x324>)
 8003c84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c86:	4a65      	ldr	r2, [pc, #404]	@ (8003e1c <HAL_GPIO_Init+0x324>)
 8003c88:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003c8c:	6453      	str	r3, [r2, #68]	@ 0x44
 8003c8e:	4b63      	ldr	r3, [pc, #396]	@ (8003e1c <HAL_GPIO_Init+0x324>)
 8003c90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c92:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003c96:	60fb      	str	r3, [r7, #12]
 8003c98:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003c9a:	4a61      	ldr	r2, [pc, #388]	@ (8003e20 <HAL_GPIO_Init+0x328>)
 8003c9c:	69fb      	ldr	r3, [r7, #28]
 8003c9e:	089b      	lsrs	r3, r3, #2
 8003ca0:	3302      	adds	r3, #2
 8003ca2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003ca6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003ca8:	69fb      	ldr	r3, [r7, #28]
 8003caa:	f003 0303 	and.w	r3, r3, #3
 8003cae:	009b      	lsls	r3, r3, #2
 8003cb0:	220f      	movs	r2, #15
 8003cb2:	fa02 f303 	lsl.w	r3, r2, r3
 8003cb6:	43db      	mvns	r3, r3
 8003cb8:	69ba      	ldr	r2, [r7, #24]
 8003cba:	4013      	ands	r3, r2
 8003cbc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	4a58      	ldr	r2, [pc, #352]	@ (8003e24 <HAL_GPIO_Init+0x32c>)
 8003cc2:	4293      	cmp	r3, r2
 8003cc4:	d037      	beq.n	8003d36 <HAL_GPIO_Init+0x23e>
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	4a57      	ldr	r2, [pc, #348]	@ (8003e28 <HAL_GPIO_Init+0x330>)
 8003cca:	4293      	cmp	r3, r2
 8003ccc:	d031      	beq.n	8003d32 <HAL_GPIO_Init+0x23a>
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	4a56      	ldr	r2, [pc, #344]	@ (8003e2c <HAL_GPIO_Init+0x334>)
 8003cd2:	4293      	cmp	r3, r2
 8003cd4:	d02b      	beq.n	8003d2e <HAL_GPIO_Init+0x236>
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	4a55      	ldr	r2, [pc, #340]	@ (8003e30 <HAL_GPIO_Init+0x338>)
 8003cda:	4293      	cmp	r3, r2
 8003cdc:	d025      	beq.n	8003d2a <HAL_GPIO_Init+0x232>
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	4a54      	ldr	r2, [pc, #336]	@ (8003e34 <HAL_GPIO_Init+0x33c>)
 8003ce2:	4293      	cmp	r3, r2
 8003ce4:	d01f      	beq.n	8003d26 <HAL_GPIO_Init+0x22e>
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	4a53      	ldr	r2, [pc, #332]	@ (8003e38 <HAL_GPIO_Init+0x340>)
 8003cea:	4293      	cmp	r3, r2
 8003cec:	d019      	beq.n	8003d22 <HAL_GPIO_Init+0x22a>
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	4a52      	ldr	r2, [pc, #328]	@ (8003e3c <HAL_GPIO_Init+0x344>)
 8003cf2:	4293      	cmp	r3, r2
 8003cf4:	d013      	beq.n	8003d1e <HAL_GPIO_Init+0x226>
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	4a51      	ldr	r2, [pc, #324]	@ (8003e40 <HAL_GPIO_Init+0x348>)
 8003cfa:	4293      	cmp	r3, r2
 8003cfc:	d00d      	beq.n	8003d1a <HAL_GPIO_Init+0x222>
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	4a50      	ldr	r2, [pc, #320]	@ (8003e44 <HAL_GPIO_Init+0x34c>)
 8003d02:	4293      	cmp	r3, r2
 8003d04:	d007      	beq.n	8003d16 <HAL_GPIO_Init+0x21e>
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	4a4f      	ldr	r2, [pc, #316]	@ (8003e48 <HAL_GPIO_Init+0x350>)
 8003d0a:	4293      	cmp	r3, r2
 8003d0c:	d101      	bne.n	8003d12 <HAL_GPIO_Init+0x21a>
 8003d0e:	2309      	movs	r3, #9
 8003d10:	e012      	b.n	8003d38 <HAL_GPIO_Init+0x240>
 8003d12:	230a      	movs	r3, #10
 8003d14:	e010      	b.n	8003d38 <HAL_GPIO_Init+0x240>
 8003d16:	2308      	movs	r3, #8
 8003d18:	e00e      	b.n	8003d38 <HAL_GPIO_Init+0x240>
 8003d1a:	2307      	movs	r3, #7
 8003d1c:	e00c      	b.n	8003d38 <HAL_GPIO_Init+0x240>
 8003d1e:	2306      	movs	r3, #6
 8003d20:	e00a      	b.n	8003d38 <HAL_GPIO_Init+0x240>
 8003d22:	2305      	movs	r3, #5
 8003d24:	e008      	b.n	8003d38 <HAL_GPIO_Init+0x240>
 8003d26:	2304      	movs	r3, #4
 8003d28:	e006      	b.n	8003d38 <HAL_GPIO_Init+0x240>
 8003d2a:	2303      	movs	r3, #3
 8003d2c:	e004      	b.n	8003d38 <HAL_GPIO_Init+0x240>
 8003d2e:	2302      	movs	r3, #2
 8003d30:	e002      	b.n	8003d38 <HAL_GPIO_Init+0x240>
 8003d32:	2301      	movs	r3, #1
 8003d34:	e000      	b.n	8003d38 <HAL_GPIO_Init+0x240>
 8003d36:	2300      	movs	r3, #0
 8003d38:	69fa      	ldr	r2, [r7, #28]
 8003d3a:	f002 0203 	and.w	r2, r2, #3
 8003d3e:	0092      	lsls	r2, r2, #2
 8003d40:	4093      	lsls	r3, r2
 8003d42:	69ba      	ldr	r2, [r7, #24]
 8003d44:	4313      	orrs	r3, r2
 8003d46:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003d48:	4935      	ldr	r1, [pc, #212]	@ (8003e20 <HAL_GPIO_Init+0x328>)
 8003d4a:	69fb      	ldr	r3, [r7, #28]
 8003d4c:	089b      	lsrs	r3, r3, #2
 8003d4e:	3302      	adds	r3, #2
 8003d50:	69ba      	ldr	r2, [r7, #24]
 8003d52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003d56:	4b3d      	ldr	r3, [pc, #244]	@ (8003e4c <HAL_GPIO_Init+0x354>)
 8003d58:	689b      	ldr	r3, [r3, #8]
 8003d5a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003d5c:	693b      	ldr	r3, [r7, #16]
 8003d5e:	43db      	mvns	r3, r3
 8003d60:	69ba      	ldr	r2, [r7, #24]
 8003d62:	4013      	ands	r3, r2
 8003d64:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003d66:	683b      	ldr	r3, [r7, #0]
 8003d68:	685b      	ldr	r3, [r3, #4]
 8003d6a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d003      	beq.n	8003d7a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003d72:	69ba      	ldr	r2, [r7, #24]
 8003d74:	693b      	ldr	r3, [r7, #16]
 8003d76:	4313      	orrs	r3, r2
 8003d78:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003d7a:	4a34      	ldr	r2, [pc, #208]	@ (8003e4c <HAL_GPIO_Init+0x354>)
 8003d7c:	69bb      	ldr	r3, [r7, #24]
 8003d7e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003d80:	4b32      	ldr	r3, [pc, #200]	@ (8003e4c <HAL_GPIO_Init+0x354>)
 8003d82:	68db      	ldr	r3, [r3, #12]
 8003d84:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003d86:	693b      	ldr	r3, [r7, #16]
 8003d88:	43db      	mvns	r3, r3
 8003d8a:	69ba      	ldr	r2, [r7, #24]
 8003d8c:	4013      	ands	r3, r2
 8003d8e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003d90:	683b      	ldr	r3, [r7, #0]
 8003d92:	685b      	ldr	r3, [r3, #4]
 8003d94:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d003      	beq.n	8003da4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003d9c:	69ba      	ldr	r2, [r7, #24]
 8003d9e:	693b      	ldr	r3, [r7, #16]
 8003da0:	4313      	orrs	r3, r2
 8003da2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003da4:	4a29      	ldr	r2, [pc, #164]	@ (8003e4c <HAL_GPIO_Init+0x354>)
 8003da6:	69bb      	ldr	r3, [r7, #24]
 8003da8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003daa:	4b28      	ldr	r3, [pc, #160]	@ (8003e4c <HAL_GPIO_Init+0x354>)
 8003dac:	685b      	ldr	r3, [r3, #4]
 8003dae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003db0:	693b      	ldr	r3, [r7, #16]
 8003db2:	43db      	mvns	r3, r3
 8003db4:	69ba      	ldr	r2, [r7, #24]
 8003db6:	4013      	ands	r3, r2
 8003db8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003dba:	683b      	ldr	r3, [r7, #0]
 8003dbc:	685b      	ldr	r3, [r3, #4]
 8003dbe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d003      	beq.n	8003dce <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003dc6:	69ba      	ldr	r2, [r7, #24]
 8003dc8:	693b      	ldr	r3, [r7, #16]
 8003dca:	4313      	orrs	r3, r2
 8003dcc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003dce:	4a1f      	ldr	r2, [pc, #124]	@ (8003e4c <HAL_GPIO_Init+0x354>)
 8003dd0:	69bb      	ldr	r3, [r7, #24]
 8003dd2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003dd4:	4b1d      	ldr	r3, [pc, #116]	@ (8003e4c <HAL_GPIO_Init+0x354>)
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003dda:	693b      	ldr	r3, [r7, #16]
 8003ddc:	43db      	mvns	r3, r3
 8003dde:	69ba      	ldr	r2, [r7, #24]
 8003de0:	4013      	ands	r3, r2
 8003de2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003de4:	683b      	ldr	r3, [r7, #0]
 8003de6:	685b      	ldr	r3, [r3, #4]
 8003de8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d003      	beq.n	8003df8 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003df0:	69ba      	ldr	r2, [r7, #24]
 8003df2:	693b      	ldr	r3, [r7, #16]
 8003df4:	4313      	orrs	r3, r2
 8003df6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003df8:	4a14      	ldr	r2, [pc, #80]	@ (8003e4c <HAL_GPIO_Init+0x354>)
 8003dfa:	69bb      	ldr	r3, [r7, #24]
 8003dfc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003dfe:	69fb      	ldr	r3, [r7, #28]
 8003e00:	3301      	adds	r3, #1
 8003e02:	61fb      	str	r3, [r7, #28]
 8003e04:	69fb      	ldr	r3, [r7, #28]
 8003e06:	2b0f      	cmp	r3, #15
 8003e08:	f67f ae84 	bls.w	8003b14 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003e0c:	bf00      	nop
 8003e0e:	bf00      	nop
 8003e10:	3724      	adds	r7, #36	@ 0x24
 8003e12:	46bd      	mov	sp, r7
 8003e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e18:	4770      	bx	lr
 8003e1a:	bf00      	nop
 8003e1c:	40023800 	.word	0x40023800
 8003e20:	40013800 	.word	0x40013800
 8003e24:	40020000 	.word	0x40020000
 8003e28:	40020400 	.word	0x40020400
 8003e2c:	40020800 	.word	0x40020800
 8003e30:	40020c00 	.word	0x40020c00
 8003e34:	40021000 	.word	0x40021000
 8003e38:	40021400 	.word	0x40021400
 8003e3c:	40021800 	.word	0x40021800
 8003e40:	40021c00 	.word	0x40021c00
 8003e44:	40022000 	.word	0x40022000
 8003e48:	40022400 	.word	0x40022400
 8003e4c:	40013c00 	.word	0x40013c00

08003e50 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8003e50:	b480      	push	{r7}
 8003e52:	b087      	sub	sp, #28
 8003e54:	af00      	add	r7, sp, #0
 8003e56:	6078      	str	r0, [r7, #4]
 8003e58:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003e5a:	2300      	movs	r3, #0
 8003e5c:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 8003e5e:	2300      	movs	r3, #0
 8003e60:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 8003e62:	2300      	movs	r3, #0
 8003e64:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003e66:	2300      	movs	r3, #0
 8003e68:	617b      	str	r3, [r7, #20]
 8003e6a:	e0d9      	b.n	8004020 <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003e6c:	2201      	movs	r2, #1
 8003e6e:	697b      	ldr	r3, [r7, #20]
 8003e70:	fa02 f303 	lsl.w	r3, r2, r3
 8003e74:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8003e76:	683a      	ldr	r2, [r7, #0]
 8003e78:	693b      	ldr	r3, [r7, #16]
 8003e7a:	4013      	ands	r3, r2
 8003e7c:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8003e7e:	68fa      	ldr	r2, [r7, #12]
 8003e80:	693b      	ldr	r3, [r7, #16]
 8003e82:	429a      	cmp	r2, r3
 8003e84:	f040 80c9 	bne.w	800401a <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8003e88:	4a6b      	ldr	r2, [pc, #428]	@ (8004038 <HAL_GPIO_DeInit+0x1e8>)
 8003e8a:	697b      	ldr	r3, [r7, #20]
 8003e8c:	089b      	lsrs	r3, r3, #2
 8003e8e:	3302      	adds	r3, #2
 8003e90:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003e94:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8003e96:	697b      	ldr	r3, [r7, #20]
 8003e98:	f003 0303 	and.w	r3, r3, #3
 8003e9c:	009b      	lsls	r3, r3, #2
 8003e9e:	220f      	movs	r2, #15
 8003ea0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ea4:	68ba      	ldr	r2, [r7, #8]
 8003ea6:	4013      	ands	r3, r2
 8003ea8:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	4a63      	ldr	r2, [pc, #396]	@ (800403c <HAL_GPIO_DeInit+0x1ec>)
 8003eae:	4293      	cmp	r3, r2
 8003eb0:	d037      	beq.n	8003f22 <HAL_GPIO_DeInit+0xd2>
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	4a62      	ldr	r2, [pc, #392]	@ (8004040 <HAL_GPIO_DeInit+0x1f0>)
 8003eb6:	4293      	cmp	r3, r2
 8003eb8:	d031      	beq.n	8003f1e <HAL_GPIO_DeInit+0xce>
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	4a61      	ldr	r2, [pc, #388]	@ (8004044 <HAL_GPIO_DeInit+0x1f4>)
 8003ebe:	4293      	cmp	r3, r2
 8003ec0:	d02b      	beq.n	8003f1a <HAL_GPIO_DeInit+0xca>
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	4a60      	ldr	r2, [pc, #384]	@ (8004048 <HAL_GPIO_DeInit+0x1f8>)
 8003ec6:	4293      	cmp	r3, r2
 8003ec8:	d025      	beq.n	8003f16 <HAL_GPIO_DeInit+0xc6>
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	4a5f      	ldr	r2, [pc, #380]	@ (800404c <HAL_GPIO_DeInit+0x1fc>)
 8003ece:	4293      	cmp	r3, r2
 8003ed0:	d01f      	beq.n	8003f12 <HAL_GPIO_DeInit+0xc2>
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	4a5e      	ldr	r2, [pc, #376]	@ (8004050 <HAL_GPIO_DeInit+0x200>)
 8003ed6:	4293      	cmp	r3, r2
 8003ed8:	d019      	beq.n	8003f0e <HAL_GPIO_DeInit+0xbe>
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	4a5d      	ldr	r2, [pc, #372]	@ (8004054 <HAL_GPIO_DeInit+0x204>)
 8003ede:	4293      	cmp	r3, r2
 8003ee0:	d013      	beq.n	8003f0a <HAL_GPIO_DeInit+0xba>
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	4a5c      	ldr	r2, [pc, #368]	@ (8004058 <HAL_GPIO_DeInit+0x208>)
 8003ee6:	4293      	cmp	r3, r2
 8003ee8:	d00d      	beq.n	8003f06 <HAL_GPIO_DeInit+0xb6>
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	4a5b      	ldr	r2, [pc, #364]	@ (800405c <HAL_GPIO_DeInit+0x20c>)
 8003eee:	4293      	cmp	r3, r2
 8003ef0:	d007      	beq.n	8003f02 <HAL_GPIO_DeInit+0xb2>
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	4a5a      	ldr	r2, [pc, #360]	@ (8004060 <HAL_GPIO_DeInit+0x210>)
 8003ef6:	4293      	cmp	r3, r2
 8003ef8:	d101      	bne.n	8003efe <HAL_GPIO_DeInit+0xae>
 8003efa:	2309      	movs	r3, #9
 8003efc:	e012      	b.n	8003f24 <HAL_GPIO_DeInit+0xd4>
 8003efe:	230a      	movs	r3, #10
 8003f00:	e010      	b.n	8003f24 <HAL_GPIO_DeInit+0xd4>
 8003f02:	2308      	movs	r3, #8
 8003f04:	e00e      	b.n	8003f24 <HAL_GPIO_DeInit+0xd4>
 8003f06:	2307      	movs	r3, #7
 8003f08:	e00c      	b.n	8003f24 <HAL_GPIO_DeInit+0xd4>
 8003f0a:	2306      	movs	r3, #6
 8003f0c:	e00a      	b.n	8003f24 <HAL_GPIO_DeInit+0xd4>
 8003f0e:	2305      	movs	r3, #5
 8003f10:	e008      	b.n	8003f24 <HAL_GPIO_DeInit+0xd4>
 8003f12:	2304      	movs	r3, #4
 8003f14:	e006      	b.n	8003f24 <HAL_GPIO_DeInit+0xd4>
 8003f16:	2303      	movs	r3, #3
 8003f18:	e004      	b.n	8003f24 <HAL_GPIO_DeInit+0xd4>
 8003f1a:	2302      	movs	r3, #2
 8003f1c:	e002      	b.n	8003f24 <HAL_GPIO_DeInit+0xd4>
 8003f1e:	2301      	movs	r3, #1
 8003f20:	e000      	b.n	8003f24 <HAL_GPIO_DeInit+0xd4>
 8003f22:	2300      	movs	r3, #0
 8003f24:	697a      	ldr	r2, [r7, #20]
 8003f26:	f002 0203 	and.w	r2, r2, #3
 8003f2a:	0092      	lsls	r2, r2, #2
 8003f2c:	4093      	lsls	r3, r2
 8003f2e:	68ba      	ldr	r2, [r7, #8]
 8003f30:	429a      	cmp	r2, r3
 8003f32:	d132      	bne.n	8003f9a <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8003f34:	4b4b      	ldr	r3, [pc, #300]	@ (8004064 <HAL_GPIO_DeInit+0x214>)
 8003f36:	681a      	ldr	r2, [r3, #0]
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	43db      	mvns	r3, r3
 8003f3c:	4949      	ldr	r1, [pc, #292]	@ (8004064 <HAL_GPIO_DeInit+0x214>)
 8003f3e:	4013      	ands	r3, r2
 8003f40:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8003f42:	4b48      	ldr	r3, [pc, #288]	@ (8004064 <HAL_GPIO_DeInit+0x214>)
 8003f44:	685a      	ldr	r2, [r3, #4]
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	43db      	mvns	r3, r3
 8003f4a:	4946      	ldr	r1, [pc, #280]	@ (8004064 <HAL_GPIO_DeInit+0x214>)
 8003f4c:	4013      	ands	r3, r2
 8003f4e:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8003f50:	4b44      	ldr	r3, [pc, #272]	@ (8004064 <HAL_GPIO_DeInit+0x214>)
 8003f52:	68da      	ldr	r2, [r3, #12]
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	43db      	mvns	r3, r3
 8003f58:	4942      	ldr	r1, [pc, #264]	@ (8004064 <HAL_GPIO_DeInit+0x214>)
 8003f5a:	4013      	ands	r3, r2
 8003f5c:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8003f5e:	4b41      	ldr	r3, [pc, #260]	@ (8004064 <HAL_GPIO_DeInit+0x214>)
 8003f60:	689a      	ldr	r2, [r3, #8]
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	43db      	mvns	r3, r3
 8003f66:	493f      	ldr	r1, [pc, #252]	@ (8004064 <HAL_GPIO_DeInit+0x214>)
 8003f68:	4013      	ands	r3, r2
 8003f6a:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8003f6c:	697b      	ldr	r3, [r7, #20]
 8003f6e:	f003 0303 	and.w	r3, r3, #3
 8003f72:	009b      	lsls	r3, r3, #2
 8003f74:	220f      	movs	r2, #15
 8003f76:	fa02 f303 	lsl.w	r3, r2, r3
 8003f7a:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8003f7c:	4a2e      	ldr	r2, [pc, #184]	@ (8004038 <HAL_GPIO_DeInit+0x1e8>)
 8003f7e:	697b      	ldr	r3, [r7, #20]
 8003f80:	089b      	lsrs	r3, r3, #2
 8003f82:	3302      	adds	r3, #2
 8003f84:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8003f88:	68bb      	ldr	r3, [r7, #8]
 8003f8a:	43da      	mvns	r2, r3
 8003f8c:	482a      	ldr	r0, [pc, #168]	@ (8004038 <HAL_GPIO_DeInit+0x1e8>)
 8003f8e:	697b      	ldr	r3, [r7, #20]
 8003f90:	089b      	lsrs	r3, r3, #2
 8003f92:	400a      	ands	r2, r1
 8003f94:	3302      	adds	r3, #2
 8003f96:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681a      	ldr	r2, [r3, #0]
 8003f9e:	697b      	ldr	r3, [r7, #20]
 8003fa0:	005b      	lsls	r3, r3, #1
 8003fa2:	2103      	movs	r1, #3
 8003fa4:	fa01 f303 	lsl.w	r3, r1, r3
 8003fa8:	43db      	mvns	r3, r3
 8003faa:	401a      	ands	r2, r3
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003fb0:	697b      	ldr	r3, [r7, #20]
 8003fb2:	08da      	lsrs	r2, r3, #3
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	3208      	adds	r2, #8
 8003fb8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003fbc:	697b      	ldr	r3, [r7, #20]
 8003fbe:	f003 0307 	and.w	r3, r3, #7
 8003fc2:	009b      	lsls	r3, r3, #2
 8003fc4:	220f      	movs	r2, #15
 8003fc6:	fa02 f303 	lsl.w	r3, r2, r3
 8003fca:	43db      	mvns	r3, r3
 8003fcc:	697a      	ldr	r2, [r7, #20]
 8003fce:	08d2      	lsrs	r2, r2, #3
 8003fd0:	4019      	ands	r1, r3
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	3208      	adds	r2, #8
 8003fd6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	68da      	ldr	r2, [r3, #12]
 8003fde:	697b      	ldr	r3, [r7, #20]
 8003fe0:	005b      	lsls	r3, r3, #1
 8003fe2:	2103      	movs	r1, #3
 8003fe4:	fa01 f303 	lsl.w	r3, r1, r3
 8003fe8:	43db      	mvns	r3, r3
 8003fea:	401a      	ands	r2, r3
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	685a      	ldr	r2, [r3, #4]
 8003ff4:	2101      	movs	r1, #1
 8003ff6:	697b      	ldr	r3, [r7, #20]
 8003ff8:	fa01 f303 	lsl.w	r3, r1, r3
 8003ffc:	43db      	mvns	r3, r3
 8003ffe:	401a      	ands	r2, r3
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	689a      	ldr	r2, [r3, #8]
 8004008:	697b      	ldr	r3, [r7, #20]
 800400a:	005b      	lsls	r3, r3, #1
 800400c:	2103      	movs	r1, #3
 800400e:	fa01 f303 	lsl.w	r3, r1, r3
 8004012:	43db      	mvns	r3, r3
 8004014:	401a      	ands	r2, r3
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800401a:	697b      	ldr	r3, [r7, #20]
 800401c:	3301      	adds	r3, #1
 800401e:	617b      	str	r3, [r7, #20]
 8004020:	697b      	ldr	r3, [r7, #20]
 8004022:	2b0f      	cmp	r3, #15
 8004024:	f67f af22 	bls.w	8003e6c <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8004028:	bf00      	nop
 800402a:	bf00      	nop
 800402c:	371c      	adds	r7, #28
 800402e:	46bd      	mov	sp, r7
 8004030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004034:	4770      	bx	lr
 8004036:	bf00      	nop
 8004038:	40013800 	.word	0x40013800
 800403c:	40020000 	.word	0x40020000
 8004040:	40020400 	.word	0x40020400
 8004044:	40020800 	.word	0x40020800
 8004048:	40020c00 	.word	0x40020c00
 800404c:	40021000 	.word	0x40021000
 8004050:	40021400 	.word	0x40021400
 8004054:	40021800 	.word	0x40021800
 8004058:	40021c00 	.word	0x40021c00
 800405c:	40022000 	.word	0x40022000
 8004060:	40022400 	.word	0x40022400
 8004064:	40013c00 	.word	0x40013c00

08004068 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004068:	b480      	push	{r7}
 800406a:	b083      	sub	sp, #12
 800406c:	af00      	add	r7, sp, #0
 800406e:	6078      	str	r0, [r7, #4]
 8004070:	460b      	mov	r3, r1
 8004072:	807b      	strh	r3, [r7, #2]
 8004074:	4613      	mov	r3, r2
 8004076:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004078:	787b      	ldrb	r3, [r7, #1]
 800407a:	2b00      	cmp	r3, #0
 800407c:	d003      	beq.n	8004086 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800407e:	887a      	ldrh	r2, [r7, #2]
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004084:	e003      	b.n	800408e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004086:	887b      	ldrh	r3, [r7, #2]
 8004088:	041a      	lsls	r2, r3, #16
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	619a      	str	r2, [r3, #24]
}
 800408e:	bf00      	nop
 8004090:	370c      	adds	r7, #12
 8004092:	46bd      	mov	sp, r7
 8004094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004098:	4770      	bx	lr
	...

0800409c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800409c:	b580      	push	{r7, lr}
 800409e:	b084      	sub	sp, #16
 80040a0:	af00      	add	r7, sp, #0
 80040a2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d101      	bne.n	80040ae <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80040aa:	2301      	movs	r3, #1
 80040ac:	e12b      	b.n	8004306 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80040b4:	b2db      	uxtb	r3, r3
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d106      	bne.n	80040c8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	2200      	movs	r2, #0
 80040be:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80040c2:	6878      	ldr	r0, [r7, #4]
 80040c4:	f7fe fc32 	bl	800292c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	2224      	movs	r2, #36	@ 0x24
 80040cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	681a      	ldr	r2, [r3, #0]
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	f022 0201 	bic.w	r2, r2, #1
 80040de:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	681a      	ldr	r2, [r3, #0]
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80040ee:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	681a      	ldr	r2, [r3, #0]
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80040fe:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004100:	f001 ff82 	bl	8006008 <HAL_RCC_GetPCLK1Freq>
 8004104:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	685b      	ldr	r3, [r3, #4]
 800410a:	4a81      	ldr	r2, [pc, #516]	@ (8004310 <HAL_I2C_Init+0x274>)
 800410c:	4293      	cmp	r3, r2
 800410e:	d807      	bhi.n	8004120 <HAL_I2C_Init+0x84>
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	4a80      	ldr	r2, [pc, #512]	@ (8004314 <HAL_I2C_Init+0x278>)
 8004114:	4293      	cmp	r3, r2
 8004116:	bf94      	ite	ls
 8004118:	2301      	movls	r3, #1
 800411a:	2300      	movhi	r3, #0
 800411c:	b2db      	uxtb	r3, r3
 800411e:	e006      	b.n	800412e <HAL_I2C_Init+0x92>
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	4a7d      	ldr	r2, [pc, #500]	@ (8004318 <HAL_I2C_Init+0x27c>)
 8004124:	4293      	cmp	r3, r2
 8004126:	bf94      	ite	ls
 8004128:	2301      	movls	r3, #1
 800412a:	2300      	movhi	r3, #0
 800412c:	b2db      	uxtb	r3, r3
 800412e:	2b00      	cmp	r3, #0
 8004130:	d001      	beq.n	8004136 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004132:	2301      	movs	r3, #1
 8004134:	e0e7      	b.n	8004306 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	4a78      	ldr	r2, [pc, #480]	@ (800431c <HAL_I2C_Init+0x280>)
 800413a:	fba2 2303 	umull	r2, r3, r2, r3
 800413e:	0c9b      	lsrs	r3, r3, #18
 8004140:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	685b      	ldr	r3, [r3, #4]
 8004148:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	68ba      	ldr	r2, [r7, #8]
 8004152:	430a      	orrs	r2, r1
 8004154:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	6a1b      	ldr	r3, [r3, #32]
 800415c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	685b      	ldr	r3, [r3, #4]
 8004164:	4a6a      	ldr	r2, [pc, #424]	@ (8004310 <HAL_I2C_Init+0x274>)
 8004166:	4293      	cmp	r3, r2
 8004168:	d802      	bhi.n	8004170 <HAL_I2C_Init+0xd4>
 800416a:	68bb      	ldr	r3, [r7, #8]
 800416c:	3301      	adds	r3, #1
 800416e:	e009      	b.n	8004184 <HAL_I2C_Init+0xe8>
 8004170:	68bb      	ldr	r3, [r7, #8]
 8004172:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8004176:	fb02 f303 	mul.w	r3, r2, r3
 800417a:	4a69      	ldr	r2, [pc, #420]	@ (8004320 <HAL_I2C_Init+0x284>)
 800417c:	fba2 2303 	umull	r2, r3, r2, r3
 8004180:	099b      	lsrs	r3, r3, #6
 8004182:	3301      	adds	r3, #1
 8004184:	687a      	ldr	r2, [r7, #4]
 8004186:	6812      	ldr	r2, [r2, #0]
 8004188:	430b      	orrs	r3, r1
 800418a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	69db      	ldr	r3, [r3, #28]
 8004192:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8004196:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	685b      	ldr	r3, [r3, #4]
 800419e:	495c      	ldr	r1, [pc, #368]	@ (8004310 <HAL_I2C_Init+0x274>)
 80041a0:	428b      	cmp	r3, r1
 80041a2:	d819      	bhi.n	80041d8 <HAL_I2C_Init+0x13c>
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	1e59      	subs	r1, r3, #1
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	685b      	ldr	r3, [r3, #4]
 80041ac:	005b      	lsls	r3, r3, #1
 80041ae:	fbb1 f3f3 	udiv	r3, r1, r3
 80041b2:	1c59      	adds	r1, r3, #1
 80041b4:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80041b8:	400b      	ands	r3, r1
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d00a      	beq.n	80041d4 <HAL_I2C_Init+0x138>
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	1e59      	subs	r1, r3, #1
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	685b      	ldr	r3, [r3, #4]
 80041c6:	005b      	lsls	r3, r3, #1
 80041c8:	fbb1 f3f3 	udiv	r3, r1, r3
 80041cc:	3301      	adds	r3, #1
 80041ce:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80041d2:	e051      	b.n	8004278 <HAL_I2C_Init+0x1dc>
 80041d4:	2304      	movs	r3, #4
 80041d6:	e04f      	b.n	8004278 <HAL_I2C_Init+0x1dc>
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	689b      	ldr	r3, [r3, #8]
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d111      	bne.n	8004204 <HAL_I2C_Init+0x168>
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	1e58      	subs	r0, r3, #1
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	6859      	ldr	r1, [r3, #4]
 80041e8:	460b      	mov	r3, r1
 80041ea:	005b      	lsls	r3, r3, #1
 80041ec:	440b      	add	r3, r1
 80041ee:	fbb0 f3f3 	udiv	r3, r0, r3
 80041f2:	3301      	adds	r3, #1
 80041f4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	bf0c      	ite	eq
 80041fc:	2301      	moveq	r3, #1
 80041fe:	2300      	movne	r3, #0
 8004200:	b2db      	uxtb	r3, r3
 8004202:	e012      	b.n	800422a <HAL_I2C_Init+0x18e>
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	1e58      	subs	r0, r3, #1
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	6859      	ldr	r1, [r3, #4]
 800420c:	460b      	mov	r3, r1
 800420e:	009b      	lsls	r3, r3, #2
 8004210:	440b      	add	r3, r1
 8004212:	0099      	lsls	r1, r3, #2
 8004214:	440b      	add	r3, r1
 8004216:	fbb0 f3f3 	udiv	r3, r0, r3
 800421a:	3301      	adds	r3, #1
 800421c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004220:	2b00      	cmp	r3, #0
 8004222:	bf0c      	ite	eq
 8004224:	2301      	moveq	r3, #1
 8004226:	2300      	movne	r3, #0
 8004228:	b2db      	uxtb	r3, r3
 800422a:	2b00      	cmp	r3, #0
 800422c:	d001      	beq.n	8004232 <HAL_I2C_Init+0x196>
 800422e:	2301      	movs	r3, #1
 8004230:	e022      	b.n	8004278 <HAL_I2C_Init+0x1dc>
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	689b      	ldr	r3, [r3, #8]
 8004236:	2b00      	cmp	r3, #0
 8004238:	d10e      	bne.n	8004258 <HAL_I2C_Init+0x1bc>
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	1e58      	subs	r0, r3, #1
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	6859      	ldr	r1, [r3, #4]
 8004242:	460b      	mov	r3, r1
 8004244:	005b      	lsls	r3, r3, #1
 8004246:	440b      	add	r3, r1
 8004248:	fbb0 f3f3 	udiv	r3, r0, r3
 800424c:	3301      	adds	r3, #1
 800424e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004252:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004256:	e00f      	b.n	8004278 <HAL_I2C_Init+0x1dc>
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	1e58      	subs	r0, r3, #1
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	6859      	ldr	r1, [r3, #4]
 8004260:	460b      	mov	r3, r1
 8004262:	009b      	lsls	r3, r3, #2
 8004264:	440b      	add	r3, r1
 8004266:	0099      	lsls	r1, r3, #2
 8004268:	440b      	add	r3, r1
 800426a:	fbb0 f3f3 	udiv	r3, r0, r3
 800426e:	3301      	adds	r3, #1
 8004270:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004274:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004278:	6879      	ldr	r1, [r7, #4]
 800427a:	6809      	ldr	r1, [r1, #0]
 800427c:	4313      	orrs	r3, r2
 800427e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	69da      	ldr	r2, [r3, #28]
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	6a1b      	ldr	r3, [r3, #32]
 8004292:	431a      	orrs	r2, r3
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	430a      	orrs	r2, r1
 800429a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	689b      	ldr	r3, [r3, #8]
 80042a2:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80042a6:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80042aa:	687a      	ldr	r2, [r7, #4]
 80042ac:	6911      	ldr	r1, [r2, #16]
 80042ae:	687a      	ldr	r2, [r7, #4]
 80042b0:	68d2      	ldr	r2, [r2, #12]
 80042b2:	4311      	orrs	r1, r2
 80042b4:	687a      	ldr	r2, [r7, #4]
 80042b6:	6812      	ldr	r2, [r2, #0]
 80042b8:	430b      	orrs	r3, r1
 80042ba:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	68db      	ldr	r3, [r3, #12]
 80042c2:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	695a      	ldr	r2, [r3, #20]
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	699b      	ldr	r3, [r3, #24]
 80042ce:	431a      	orrs	r2, r3
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	430a      	orrs	r2, r1
 80042d6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	681a      	ldr	r2, [r3, #0]
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	f042 0201 	orr.w	r2, r2, #1
 80042e6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	2200      	movs	r2, #0
 80042ec:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	2220      	movs	r2, #32
 80042f2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	2200      	movs	r2, #0
 80042fa:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	2200      	movs	r2, #0
 8004300:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8004304:	2300      	movs	r3, #0
}
 8004306:	4618      	mov	r0, r3
 8004308:	3710      	adds	r7, #16
 800430a:	46bd      	mov	sp, r7
 800430c:	bd80      	pop	{r7, pc}
 800430e:	bf00      	nop
 8004310:	000186a0 	.word	0x000186a0
 8004314:	001e847f 	.word	0x001e847f
 8004318:	003d08ff 	.word	0x003d08ff
 800431c:	431bde83 	.word	0x431bde83
 8004320:	10624dd3 	.word	0x10624dd3

08004324 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004324:	b580      	push	{r7, lr}
 8004326:	b088      	sub	sp, #32
 8004328:	af02      	add	r7, sp, #8
 800432a:	60f8      	str	r0, [r7, #12]
 800432c:	4608      	mov	r0, r1
 800432e:	4611      	mov	r1, r2
 8004330:	461a      	mov	r2, r3
 8004332:	4603      	mov	r3, r0
 8004334:	817b      	strh	r3, [r7, #10]
 8004336:	460b      	mov	r3, r1
 8004338:	813b      	strh	r3, [r7, #8]
 800433a:	4613      	mov	r3, r2
 800433c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800433e:	f7ff fa23 	bl	8003788 <HAL_GetTick>
 8004342:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800434a:	b2db      	uxtb	r3, r3
 800434c:	2b20      	cmp	r3, #32
 800434e:	f040 80d9 	bne.w	8004504 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004352:	697b      	ldr	r3, [r7, #20]
 8004354:	9300      	str	r3, [sp, #0]
 8004356:	2319      	movs	r3, #25
 8004358:	2201      	movs	r2, #1
 800435a:	496d      	ldr	r1, [pc, #436]	@ (8004510 <HAL_I2C_Mem_Write+0x1ec>)
 800435c:	68f8      	ldr	r0, [r7, #12]
 800435e:	f000 fc8b 	bl	8004c78 <I2C_WaitOnFlagUntilTimeout>
 8004362:	4603      	mov	r3, r0
 8004364:	2b00      	cmp	r3, #0
 8004366:	d001      	beq.n	800436c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8004368:	2302      	movs	r3, #2
 800436a:	e0cc      	b.n	8004506 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004372:	2b01      	cmp	r3, #1
 8004374:	d101      	bne.n	800437a <HAL_I2C_Mem_Write+0x56>
 8004376:	2302      	movs	r3, #2
 8004378:	e0c5      	b.n	8004506 <HAL_I2C_Mem_Write+0x1e2>
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	2201      	movs	r2, #1
 800437e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	f003 0301 	and.w	r3, r3, #1
 800438c:	2b01      	cmp	r3, #1
 800438e:	d007      	beq.n	80043a0 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	681a      	ldr	r2, [r3, #0]
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	f042 0201 	orr.w	r2, r2, #1
 800439e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	681a      	ldr	r2, [r3, #0]
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80043ae:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	2221      	movs	r2, #33	@ 0x21
 80043b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	2240      	movs	r2, #64	@ 0x40
 80043bc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	2200      	movs	r2, #0
 80043c4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	6a3a      	ldr	r2, [r7, #32]
 80043ca:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80043d0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80043d6:	b29a      	uxth	r2, r3
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	4a4d      	ldr	r2, [pc, #308]	@ (8004514 <HAL_I2C_Mem_Write+0x1f0>)
 80043e0:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80043e2:	88f8      	ldrh	r0, [r7, #6]
 80043e4:	893a      	ldrh	r2, [r7, #8]
 80043e6:	8979      	ldrh	r1, [r7, #10]
 80043e8:	697b      	ldr	r3, [r7, #20]
 80043ea:	9301      	str	r3, [sp, #4]
 80043ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80043ee:	9300      	str	r3, [sp, #0]
 80043f0:	4603      	mov	r3, r0
 80043f2:	68f8      	ldr	r0, [r7, #12]
 80043f4:	f000 fac2 	bl	800497c <I2C_RequestMemoryWrite>
 80043f8:	4603      	mov	r3, r0
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d052      	beq.n	80044a4 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80043fe:	2301      	movs	r3, #1
 8004400:	e081      	b.n	8004506 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004402:	697a      	ldr	r2, [r7, #20]
 8004404:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004406:	68f8      	ldr	r0, [r7, #12]
 8004408:	f000 fd50 	bl	8004eac <I2C_WaitOnTXEFlagUntilTimeout>
 800440c:	4603      	mov	r3, r0
 800440e:	2b00      	cmp	r3, #0
 8004410:	d00d      	beq.n	800442e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004416:	2b04      	cmp	r3, #4
 8004418:	d107      	bne.n	800442a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	681a      	ldr	r2, [r3, #0]
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004428:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800442a:	2301      	movs	r3, #1
 800442c:	e06b      	b.n	8004506 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004432:	781a      	ldrb	r2, [r3, #0]
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800443e:	1c5a      	adds	r2, r3, #1
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004448:	3b01      	subs	r3, #1
 800444a:	b29a      	uxth	r2, r3
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004454:	b29b      	uxth	r3, r3
 8004456:	3b01      	subs	r3, #1
 8004458:	b29a      	uxth	r2, r3
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	695b      	ldr	r3, [r3, #20]
 8004464:	f003 0304 	and.w	r3, r3, #4
 8004468:	2b04      	cmp	r3, #4
 800446a:	d11b      	bne.n	80044a4 <HAL_I2C_Mem_Write+0x180>
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004470:	2b00      	cmp	r3, #0
 8004472:	d017      	beq.n	80044a4 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004478:	781a      	ldrb	r2, [r3, #0]
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004484:	1c5a      	adds	r2, r3, #1
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800448e:	3b01      	subs	r3, #1
 8004490:	b29a      	uxth	r2, r3
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800449a:	b29b      	uxth	r3, r3
 800449c:	3b01      	subs	r3, #1
 800449e:	b29a      	uxth	r2, r3
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d1aa      	bne.n	8004402 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80044ac:	697a      	ldr	r2, [r7, #20]
 80044ae:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80044b0:	68f8      	ldr	r0, [r7, #12]
 80044b2:	f000 fd43 	bl	8004f3c <I2C_WaitOnBTFFlagUntilTimeout>
 80044b6:	4603      	mov	r3, r0
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d00d      	beq.n	80044d8 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044c0:	2b04      	cmp	r3, #4
 80044c2:	d107      	bne.n	80044d4 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	681a      	ldr	r2, [r3, #0]
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80044d2:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80044d4:	2301      	movs	r3, #1
 80044d6:	e016      	b.n	8004506 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	681a      	ldr	r2, [r3, #0]
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80044e6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	2220      	movs	r2, #32
 80044ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	2200      	movs	r2, #0
 80044f4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	2200      	movs	r2, #0
 80044fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8004500:	2300      	movs	r3, #0
 8004502:	e000      	b.n	8004506 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8004504:	2302      	movs	r3, #2
  }
}
 8004506:	4618      	mov	r0, r3
 8004508:	3718      	adds	r7, #24
 800450a:	46bd      	mov	sp, r7
 800450c:	bd80      	pop	{r7, pc}
 800450e:	bf00      	nop
 8004510:	00100002 	.word	0x00100002
 8004514:	ffff0000 	.word	0xffff0000

08004518 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004518:	b580      	push	{r7, lr}
 800451a:	b08c      	sub	sp, #48	@ 0x30
 800451c:	af02      	add	r7, sp, #8
 800451e:	60f8      	str	r0, [r7, #12]
 8004520:	4608      	mov	r0, r1
 8004522:	4611      	mov	r1, r2
 8004524:	461a      	mov	r2, r3
 8004526:	4603      	mov	r3, r0
 8004528:	817b      	strh	r3, [r7, #10]
 800452a:	460b      	mov	r3, r1
 800452c:	813b      	strh	r3, [r7, #8]
 800452e:	4613      	mov	r3, r2
 8004530:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004532:	f7ff f929 	bl	8003788 <HAL_GetTick>
 8004536:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800453e:	b2db      	uxtb	r3, r3
 8004540:	2b20      	cmp	r3, #32
 8004542:	f040 8214 	bne.w	800496e <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004546:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004548:	9300      	str	r3, [sp, #0]
 800454a:	2319      	movs	r3, #25
 800454c:	2201      	movs	r2, #1
 800454e:	497b      	ldr	r1, [pc, #492]	@ (800473c <HAL_I2C_Mem_Read+0x224>)
 8004550:	68f8      	ldr	r0, [r7, #12]
 8004552:	f000 fb91 	bl	8004c78 <I2C_WaitOnFlagUntilTimeout>
 8004556:	4603      	mov	r3, r0
 8004558:	2b00      	cmp	r3, #0
 800455a:	d001      	beq.n	8004560 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 800455c:	2302      	movs	r3, #2
 800455e:	e207      	b.n	8004970 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004566:	2b01      	cmp	r3, #1
 8004568:	d101      	bne.n	800456e <HAL_I2C_Mem_Read+0x56>
 800456a:	2302      	movs	r3, #2
 800456c:	e200      	b.n	8004970 <HAL_I2C_Mem_Read+0x458>
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	2201      	movs	r2, #1
 8004572:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	f003 0301 	and.w	r3, r3, #1
 8004580:	2b01      	cmp	r3, #1
 8004582:	d007      	beq.n	8004594 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	681a      	ldr	r2, [r3, #0]
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	f042 0201 	orr.w	r2, r2, #1
 8004592:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	681a      	ldr	r2, [r3, #0]
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80045a2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	2222      	movs	r2, #34	@ 0x22
 80045a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	2240      	movs	r2, #64	@ 0x40
 80045b0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	2200      	movs	r2, #0
 80045b8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80045be:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 80045c4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80045ca:	b29a      	uxth	r2, r3
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	4a5b      	ldr	r2, [pc, #364]	@ (8004740 <HAL_I2C_Mem_Read+0x228>)
 80045d4:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80045d6:	88f8      	ldrh	r0, [r7, #6]
 80045d8:	893a      	ldrh	r2, [r7, #8]
 80045da:	8979      	ldrh	r1, [r7, #10]
 80045dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045de:	9301      	str	r3, [sp, #4]
 80045e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80045e2:	9300      	str	r3, [sp, #0]
 80045e4:	4603      	mov	r3, r0
 80045e6:	68f8      	ldr	r0, [r7, #12]
 80045e8:	f000 fa5e 	bl	8004aa8 <I2C_RequestMemoryRead>
 80045ec:	4603      	mov	r3, r0
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d001      	beq.n	80045f6 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80045f2:	2301      	movs	r3, #1
 80045f4:	e1bc      	b.n	8004970 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d113      	bne.n	8004626 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80045fe:	2300      	movs	r3, #0
 8004600:	623b      	str	r3, [r7, #32]
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	695b      	ldr	r3, [r3, #20]
 8004608:	623b      	str	r3, [r7, #32]
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	699b      	ldr	r3, [r3, #24]
 8004610:	623b      	str	r3, [r7, #32]
 8004612:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	681a      	ldr	r2, [r3, #0]
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004622:	601a      	str	r2, [r3, #0]
 8004624:	e190      	b.n	8004948 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800462a:	2b01      	cmp	r3, #1
 800462c:	d11b      	bne.n	8004666 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	681a      	ldr	r2, [r3, #0]
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800463c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800463e:	2300      	movs	r3, #0
 8004640:	61fb      	str	r3, [r7, #28]
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	695b      	ldr	r3, [r3, #20]
 8004648:	61fb      	str	r3, [r7, #28]
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	699b      	ldr	r3, [r3, #24]
 8004650:	61fb      	str	r3, [r7, #28]
 8004652:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	681a      	ldr	r2, [r3, #0]
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004662:	601a      	str	r2, [r3, #0]
 8004664:	e170      	b.n	8004948 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800466a:	2b02      	cmp	r3, #2
 800466c:	d11b      	bne.n	80046a6 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	681a      	ldr	r2, [r3, #0]
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800467c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	681a      	ldr	r2, [r3, #0]
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800468c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800468e:	2300      	movs	r3, #0
 8004690:	61bb      	str	r3, [r7, #24]
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	695b      	ldr	r3, [r3, #20]
 8004698:	61bb      	str	r3, [r7, #24]
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	699b      	ldr	r3, [r3, #24]
 80046a0:	61bb      	str	r3, [r7, #24]
 80046a2:	69bb      	ldr	r3, [r7, #24]
 80046a4:	e150      	b.n	8004948 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80046a6:	2300      	movs	r3, #0
 80046a8:	617b      	str	r3, [r7, #20]
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	695b      	ldr	r3, [r3, #20]
 80046b0:	617b      	str	r3, [r7, #20]
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	699b      	ldr	r3, [r3, #24]
 80046b8:	617b      	str	r3, [r7, #20]
 80046ba:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80046bc:	e144      	b.n	8004948 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80046c2:	2b03      	cmp	r3, #3
 80046c4:	f200 80f1 	bhi.w	80048aa <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80046cc:	2b01      	cmp	r3, #1
 80046ce:	d123      	bne.n	8004718 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80046d0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80046d2:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80046d4:	68f8      	ldr	r0, [r7, #12]
 80046d6:	f000 fc79 	bl	8004fcc <I2C_WaitOnRXNEFlagUntilTimeout>
 80046da:	4603      	mov	r3, r0
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d001      	beq.n	80046e4 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80046e0:	2301      	movs	r3, #1
 80046e2:	e145      	b.n	8004970 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	691a      	ldr	r2, [r3, #16]
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046ee:	b2d2      	uxtb	r2, r2
 80046f0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046f6:	1c5a      	adds	r2, r3, #1
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004700:	3b01      	subs	r3, #1
 8004702:	b29a      	uxth	r2, r3
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800470c:	b29b      	uxth	r3, r3
 800470e:	3b01      	subs	r3, #1
 8004710:	b29a      	uxth	r2, r3
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004716:	e117      	b.n	8004948 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800471c:	2b02      	cmp	r3, #2
 800471e:	d14e      	bne.n	80047be <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004720:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004722:	9300      	str	r3, [sp, #0]
 8004724:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004726:	2200      	movs	r2, #0
 8004728:	4906      	ldr	r1, [pc, #24]	@ (8004744 <HAL_I2C_Mem_Read+0x22c>)
 800472a:	68f8      	ldr	r0, [r7, #12]
 800472c:	f000 faa4 	bl	8004c78 <I2C_WaitOnFlagUntilTimeout>
 8004730:	4603      	mov	r3, r0
 8004732:	2b00      	cmp	r3, #0
 8004734:	d008      	beq.n	8004748 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8004736:	2301      	movs	r3, #1
 8004738:	e11a      	b.n	8004970 <HAL_I2C_Mem_Read+0x458>
 800473a:	bf00      	nop
 800473c:	00100002 	.word	0x00100002
 8004740:	ffff0000 	.word	0xffff0000
 8004744:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	681a      	ldr	r2, [r3, #0]
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004756:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	691a      	ldr	r2, [r3, #16]
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004762:	b2d2      	uxtb	r2, r2
 8004764:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800476a:	1c5a      	adds	r2, r3, #1
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004774:	3b01      	subs	r3, #1
 8004776:	b29a      	uxth	r2, r3
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004780:	b29b      	uxth	r3, r3
 8004782:	3b01      	subs	r3, #1
 8004784:	b29a      	uxth	r2, r3
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	691a      	ldr	r2, [r3, #16]
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004794:	b2d2      	uxtb	r2, r2
 8004796:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800479c:	1c5a      	adds	r2, r3, #1
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80047a6:	3b01      	subs	r3, #1
 80047a8:	b29a      	uxth	r2, r3
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80047b2:	b29b      	uxth	r3, r3
 80047b4:	3b01      	subs	r3, #1
 80047b6:	b29a      	uxth	r2, r3
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80047bc:	e0c4      	b.n	8004948 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80047be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047c0:	9300      	str	r3, [sp, #0]
 80047c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80047c4:	2200      	movs	r2, #0
 80047c6:	496c      	ldr	r1, [pc, #432]	@ (8004978 <HAL_I2C_Mem_Read+0x460>)
 80047c8:	68f8      	ldr	r0, [r7, #12]
 80047ca:	f000 fa55 	bl	8004c78 <I2C_WaitOnFlagUntilTimeout>
 80047ce:	4603      	mov	r3, r0
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d001      	beq.n	80047d8 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80047d4:	2301      	movs	r3, #1
 80047d6:	e0cb      	b.n	8004970 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	681a      	ldr	r2, [r3, #0]
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80047e6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	691a      	ldr	r2, [r3, #16]
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047f2:	b2d2      	uxtb	r2, r2
 80047f4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047fa:	1c5a      	adds	r2, r3, #1
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004804:	3b01      	subs	r3, #1
 8004806:	b29a      	uxth	r2, r3
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004810:	b29b      	uxth	r3, r3
 8004812:	3b01      	subs	r3, #1
 8004814:	b29a      	uxth	r2, r3
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800481a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800481c:	9300      	str	r3, [sp, #0]
 800481e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004820:	2200      	movs	r2, #0
 8004822:	4955      	ldr	r1, [pc, #340]	@ (8004978 <HAL_I2C_Mem_Read+0x460>)
 8004824:	68f8      	ldr	r0, [r7, #12]
 8004826:	f000 fa27 	bl	8004c78 <I2C_WaitOnFlagUntilTimeout>
 800482a:	4603      	mov	r3, r0
 800482c:	2b00      	cmp	r3, #0
 800482e:	d001      	beq.n	8004834 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8004830:	2301      	movs	r3, #1
 8004832:	e09d      	b.n	8004970 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	681a      	ldr	r2, [r3, #0]
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004842:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	691a      	ldr	r2, [r3, #16]
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800484e:	b2d2      	uxtb	r2, r2
 8004850:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004856:	1c5a      	adds	r2, r3, #1
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004860:	3b01      	subs	r3, #1
 8004862:	b29a      	uxth	r2, r3
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800486c:	b29b      	uxth	r3, r3
 800486e:	3b01      	subs	r3, #1
 8004870:	b29a      	uxth	r2, r3
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	691a      	ldr	r2, [r3, #16]
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004880:	b2d2      	uxtb	r2, r2
 8004882:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004888:	1c5a      	adds	r2, r3, #1
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004892:	3b01      	subs	r3, #1
 8004894:	b29a      	uxth	r2, r3
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800489e:	b29b      	uxth	r3, r3
 80048a0:	3b01      	subs	r3, #1
 80048a2:	b29a      	uxth	r2, r3
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80048a8:	e04e      	b.n	8004948 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80048aa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80048ac:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80048ae:	68f8      	ldr	r0, [r7, #12]
 80048b0:	f000 fb8c 	bl	8004fcc <I2C_WaitOnRXNEFlagUntilTimeout>
 80048b4:	4603      	mov	r3, r0
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d001      	beq.n	80048be <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80048ba:	2301      	movs	r3, #1
 80048bc:	e058      	b.n	8004970 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	691a      	ldr	r2, [r3, #16]
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048c8:	b2d2      	uxtb	r2, r2
 80048ca:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048d0:	1c5a      	adds	r2, r3, #1
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80048da:	3b01      	subs	r3, #1
 80048dc:	b29a      	uxth	r2, r3
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80048e6:	b29b      	uxth	r3, r3
 80048e8:	3b01      	subs	r3, #1
 80048ea:	b29a      	uxth	r2, r3
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	695b      	ldr	r3, [r3, #20]
 80048f6:	f003 0304 	and.w	r3, r3, #4
 80048fa:	2b04      	cmp	r3, #4
 80048fc:	d124      	bne.n	8004948 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004902:	2b03      	cmp	r3, #3
 8004904:	d107      	bne.n	8004916 <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	681a      	ldr	r2, [r3, #0]
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004914:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	691a      	ldr	r2, [r3, #16]
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004920:	b2d2      	uxtb	r2, r2
 8004922:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004928:	1c5a      	adds	r2, r3, #1
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004932:	3b01      	subs	r3, #1
 8004934:	b29a      	uxth	r2, r3
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800493e:	b29b      	uxth	r3, r3
 8004940:	3b01      	subs	r3, #1
 8004942:	b29a      	uxth	r2, r3
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800494c:	2b00      	cmp	r3, #0
 800494e:	f47f aeb6 	bne.w	80046be <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	2220      	movs	r2, #32
 8004956:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	2200      	movs	r2, #0
 800495e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	2200      	movs	r2, #0
 8004966:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800496a:	2300      	movs	r3, #0
 800496c:	e000      	b.n	8004970 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 800496e:	2302      	movs	r3, #2
  }
}
 8004970:	4618      	mov	r0, r3
 8004972:	3728      	adds	r7, #40	@ 0x28
 8004974:	46bd      	mov	sp, r7
 8004976:	bd80      	pop	{r7, pc}
 8004978:	00010004 	.word	0x00010004

0800497c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800497c:	b580      	push	{r7, lr}
 800497e:	b088      	sub	sp, #32
 8004980:	af02      	add	r7, sp, #8
 8004982:	60f8      	str	r0, [r7, #12]
 8004984:	4608      	mov	r0, r1
 8004986:	4611      	mov	r1, r2
 8004988:	461a      	mov	r2, r3
 800498a:	4603      	mov	r3, r0
 800498c:	817b      	strh	r3, [r7, #10]
 800498e:	460b      	mov	r3, r1
 8004990:	813b      	strh	r3, [r7, #8]
 8004992:	4613      	mov	r3, r2
 8004994:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	681a      	ldr	r2, [r3, #0]
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80049a4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80049a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049a8:	9300      	str	r3, [sp, #0]
 80049aa:	6a3b      	ldr	r3, [r7, #32]
 80049ac:	2200      	movs	r2, #0
 80049ae:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80049b2:	68f8      	ldr	r0, [r7, #12]
 80049b4:	f000 f960 	bl	8004c78 <I2C_WaitOnFlagUntilTimeout>
 80049b8:	4603      	mov	r3, r0
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d00d      	beq.n	80049da <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80049c8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80049cc:	d103      	bne.n	80049d6 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80049d4:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80049d6:	2303      	movs	r3, #3
 80049d8:	e05f      	b.n	8004a9a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80049da:	897b      	ldrh	r3, [r7, #10]
 80049dc:	b2db      	uxtb	r3, r3
 80049de:	461a      	mov	r2, r3
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80049e8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80049ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049ec:	6a3a      	ldr	r2, [r7, #32]
 80049ee:	492d      	ldr	r1, [pc, #180]	@ (8004aa4 <I2C_RequestMemoryWrite+0x128>)
 80049f0:	68f8      	ldr	r0, [r7, #12]
 80049f2:	f000 f9bb 	bl	8004d6c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80049f6:	4603      	mov	r3, r0
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d001      	beq.n	8004a00 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80049fc:	2301      	movs	r3, #1
 80049fe:	e04c      	b.n	8004a9a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004a00:	2300      	movs	r3, #0
 8004a02:	617b      	str	r3, [r7, #20]
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	695b      	ldr	r3, [r3, #20]
 8004a0a:	617b      	str	r3, [r7, #20]
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	699b      	ldr	r3, [r3, #24]
 8004a12:	617b      	str	r3, [r7, #20]
 8004a14:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004a16:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004a18:	6a39      	ldr	r1, [r7, #32]
 8004a1a:	68f8      	ldr	r0, [r7, #12]
 8004a1c:	f000 fa46 	bl	8004eac <I2C_WaitOnTXEFlagUntilTimeout>
 8004a20:	4603      	mov	r3, r0
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d00d      	beq.n	8004a42 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a2a:	2b04      	cmp	r3, #4
 8004a2c:	d107      	bne.n	8004a3e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	681a      	ldr	r2, [r3, #0]
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004a3c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004a3e:	2301      	movs	r3, #1
 8004a40:	e02b      	b.n	8004a9a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004a42:	88fb      	ldrh	r3, [r7, #6]
 8004a44:	2b01      	cmp	r3, #1
 8004a46:	d105      	bne.n	8004a54 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004a48:	893b      	ldrh	r3, [r7, #8]
 8004a4a:	b2da      	uxtb	r2, r3
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	611a      	str	r2, [r3, #16]
 8004a52:	e021      	b.n	8004a98 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004a54:	893b      	ldrh	r3, [r7, #8]
 8004a56:	0a1b      	lsrs	r3, r3, #8
 8004a58:	b29b      	uxth	r3, r3
 8004a5a:	b2da      	uxtb	r2, r3
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004a62:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004a64:	6a39      	ldr	r1, [r7, #32]
 8004a66:	68f8      	ldr	r0, [r7, #12]
 8004a68:	f000 fa20 	bl	8004eac <I2C_WaitOnTXEFlagUntilTimeout>
 8004a6c:	4603      	mov	r3, r0
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d00d      	beq.n	8004a8e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a76:	2b04      	cmp	r3, #4
 8004a78:	d107      	bne.n	8004a8a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	681a      	ldr	r2, [r3, #0]
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004a88:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004a8a:	2301      	movs	r3, #1
 8004a8c:	e005      	b.n	8004a9a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004a8e:	893b      	ldrh	r3, [r7, #8]
 8004a90:	b2da      	uxtb	r2, r3
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8004a98:	2300      	movs	r3, #0
}
 8004a9a:	4618      	mov	r0, r3
 8004a9c:	3718      	adds	r7, #24
 8004a9e:	46bd      	mov	sp, r7
 8004aa0:	bd80      	pop	{r7, pc}
 8004aa2:	bf00      	nop
 8004aa4:	00010002 	.word	0x00010002

08004aa8 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004aa8:	b580      	push	{r7, lr}
 8004aaa:	b088      	sub	sp, #32
 8004aac:	af02      	add	r7, sp, #8
 8004aae:	60f8      	str	r0, [r7, #12]
 8004ab0:	4608      	mov	r0, r1
 8004ab2:	4611      	mov	r1, r2
 8004ab4:	461a      	mov	r2, r3
 8004ab6:	4603      	mov	r3, r0
 8004ab8:	817b      	strh	r3, [r7, #10]
 8004aba:	460b      	mov	r3, r1
 8004abc:	813b      	strh	r3, [r7, #8]
 8004abe:	4613      	mov	r3, r2
 8004ac0:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	681a      	ldr	r2, [r3, #0]
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004ad0:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	681a      	ldr	r2, [r3, #0]
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004ae0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004ae2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ae4:	9300      	str	r3, [sp, #0]
 8004ae6:	6a3b      	ldr	r3, [r7, #32]
 8004ae8:	2200      	movs	r2, #0
 8004aea:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004aee:	68f8      	ldr	r0, [r7, #12]
 8004af0:	f000 f8c2 	bl	8004c78 <I2C_WaitOnFlagUntilTimeout>
 8004af4:	4603      	mov	r3, r0
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d00d      	beq.n	8004b16 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004b04:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004b08:	d103      	bne.n	8004b12 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004b10:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004b12:	2303      	movs	r3, #3
 8004b14:	e0aa      	b.n	8004c6c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004b16:	897b      	ldrh	r3, [r7, #10]
 8004b18:	b2db      	uxtb	r3, r3
 8004b1a:	461a      	mov	r2, r3
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004b24:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004b26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b28:	6a3a      	ldr	r2, [r7, #32]
 8004b2a:	4952      	ldr	r1, [pc, #328]	@ (8004c74 <I2C_RequestMemoryRead+0x1cc>)
 8004b2c:	68f8      	ldr	r0, [r7, #12]
 8004b2e:	f000 f91d 	bl	8004d6c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004b32:	4603      	mov	r3, r0
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d001      	beq.n	8004b3c <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8004b38:	2301      	movs	r3, #1
 8004b3a:	e097      	b.n	8004c6c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004b3c:	2300      	movs	r3, #0
 8004b3e:	617b      	str	r3, [r7, #20]
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	695b      	ldr	r3, [r3, #20]
 8004b46:	617b      	str	r3, [r7, #20]
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	699b      	ldr	r3, [r3, #24]
 8004b4e:	617b      	str	r3, [r7, #20]
 8004b50:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004b52:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004b54:	6a39      	ldr	r1, [r7, #32]
 8004b56:	68f8      	ldr	r0, [r7, #12]
 8004b58:	f000 f9a8 	bl	8004eac <I2C_WaitOnTXEFlagUntilTimeout>
 8004b5c:	4603      	mov	r3, r0
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d00d      	beq.n	8004b7e <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b66:	2b04      	cmp	r3, #4
 8004b68:	d107      	bne.n	8004b7a <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	681a      	ldr	r2, [r3, #0]
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004b78:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004b7a:	2301      	movs	r3, #1
 8004b7c:	e076      	b.n	8004c6c <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004b7e:	88fb      	ldrh	r3, [r7, #6]
 8004b80:	2b01      	cmp	r3, #1
 8004b82:	d105      	bne.n	8004b90 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004b84:	893b      	ldrh	r3, [r7, #8]
 8004b86:	b2da      	uxtb	r2, r3
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	611a      	str	r2, [r3, #16]
 8004b8e:	e021      	b.n	8004bd4 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004b90:	893b      	ldrh	r3, [r7, #8]
 8004b92:	0a1b      	lsrs	r3, r3, #8
 8004b94:	b29b      	uxth	r3, r3
 8004b96:	b2da      	uxtb	r2, r3
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004b9e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004ba0:	6a39      	ldr	r1, [r7, #32]
 8004ba2:	68f8      	ldr	r0, [r7, #12]
 8004ba4:	f000 f982 	bl	8004eac <I2C_WaitOnTXEFlagUntilTimeout>
 8004ba8:	4603      	mov	r3, r0
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d00d      	beq.n	8004bca <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004bb2:	2b04      	cmp	r3, #4
 8004bb4:	d107      	bne.n	8004bc6 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	681a      	ldr	r2, [r3, #0]
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004bc4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004bc6:	2301      	movs	r3, #1
 8004bc8:	e050      	b.n	8004c6c <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004bca:	893b      	ldrh	r3, [r7, #8]
 8004bcc:	b2da      	uxtb	r2, r3
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004bd4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004bd6:	6a39      	ldr	r1, [r7, #32]
 8004bd8:	68f8      	ldr	r0, [r7, #12]
 8004bda:	f000 f967 	bl	8004eac <I2C_WaitOnTXEFlagUntilTimeout>
 8004bde:	4603      	mov	r3, r0
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d00d      	beq.n	8004c00 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004be8:	2b04      	cmp	r3, #4
 8004bea:	d107      	bne.n	8004bfc <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	681a      	ldr	r2, [r3, #0]
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004bfa:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004bfc:	2301      	movs	r3, #1
 8004bfe:	e035      	b.n	8004c6c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	681a      	ldr	r2, [r3, #0]
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004c0e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004c10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c12:	9300      	str	r3, [sp, #0]
 8004c14:	6a3b      	ldr	r3, [r7, #32]
 8004c16:	2200      	movs	r2, #0
 8004c18:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004c1c:	68f8      	ldr	r0, [r7, #12]
 8004c1e:	f000 f82b 	bl	8004c78 <I2C_WaitOnFlagUntilTimeout>
 8004c22:	4603      	mov	r3, r0
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d00d      	beq.n	8004c44 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004c32:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004c36:	d103      	bne.n	8004c40 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004c3e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004c40:	2303      	movs	r3, #3
 8004c42:	e013      	b.n	8004c6c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004c44:	897b      	ldrh	r3, [r7, #10]
 8004c46:	b2db      	uxtb	r3, r3
 8004c48:	f043 0301 	orr.w	r3, r3, #1
 8004c4c:	b2da      	uxtb	r2, r3
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004c54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c56:	6a3a      	ldr	r2, [r7, #32]
 8004c58:	4906      	ldr	r1, [pc, #24]	@ (8004c74 <I2C_RequestMemoryRead+0x1cc>)
 8004c5a:	68f8      	ldr	r0, [r7, #12]
 8004c5c:	f000 f886 	bl	8004d6c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004c60:	4603      	mov	r3, r0
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d001      	beq.n	8004c6a <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8004c66:	2301      	movs	r3, #1
 8004c68:	e000      	b.n	8004c6c <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8004c6a:	2300      	movs	r3, #0
}
 8004c6c:	4618      	mov	r0, r3
 8004c6e:	3718      	adds	r7, #24
 8004c70:	46bd      	mov	sp, r7
 8004c72:	bd80      	pop	{r7, pc}
 8004c74:	00010002 	.word	0x00010002

08004c78 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004c78:	b580      	push	{r7, lr}
 8004c7a:	b084      	sub	sp, #16
 8004c7c:	af00      	add	r7, sp, #0
 8004c7e:	60f8      	str	r0, [r7, #12]
 8004c80:	60b9      	str	r1, [r7, #8]
 8004c82:	603b      	str	r3, [r7, #0]
 8004c84:	4613      	mov	r3, r2
 8004c86:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004c88:	e048      	b.n	8004d1c <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004c8a:	683b      	ldr	r3, [r7, #0]
 8004c8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c90:	d044      	beq.n	8004d1c <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004c92:	f7fe fd79 	bl	8003788 <HAL_GetTick>
 8004c96:	4602      	mov	r2, r0
 8004c98:	69bb      	ldr	r3, [r7, #24]
 8004c9a:	1ad3      	subs	r3, r2, r3
 8004c9c:	683a      	ldr	r2, [r7, #0]
 8004c9e:	429a      	cmp	r2, r3
 8004ca0:	d302      	bcc.n	8004ca8 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004ca2:	683b      	ldr	r3, [r7, #0]
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d139      	bne.n	8004d1c <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004ca8:	68bb      	ldr	r3, [r7, #8]
 8004caa:	0c1b      	lsrs	r3, r3, #16
 8004cac:	b2db      	uxtb	r3, r3
 8004cae:	2b01      	cmp	r3, #1
 8004cb0:	d10d      	bne.n	8004cce <I2C_WaitOnFlagUntilTimeout+0x56>
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	695b      	ldr	r3, [r3, #20]
 8004cb8:	43da      	mvns	r2, r3
 8004cba:	68bb      	ldr	r3, [r7, #8]
 8004cbc:	4013      	ands	r3, r2
 8004cbe:	b29b      	uxth	r3, r3
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	bf0c      	ite	eq
 8004cc4:	2301      	moveq	r3, #1
 8004cc6:	2300      	movne	r3, #0
 8004cc8:	b2db      	uxtb	r3, r3
 8004cca:	461a      	mov	r2, r3
 8004ccc:	e00c      	b.n	8004ce8 <I2C_WaitOnFlagUntilTimeout+0x70>
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	699b      	ldr	r3, [r3, #24]
 8004cd4:	43da      	mvns	r2, r3
 8004cd6:	68bb      	ldr	r3, [r7, #8]
 8004cd8:	4013      	ands	r3, r2
 8004cda:	b29b      	uxth	r3, r3
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	bf0c      	ite	eq
 8004ce0:	2301      	moveq	r3, #1
 8004ce2:	2300      	movne	r3, #0
 8004ce4:	b2db      	uxtb	r3, r3
 8004ce6:	461a      	mov	r2, r3
 8004ce8:	79fb      	ldrb	r3, [r7, #7]
 8004cea:	429a      	cmp	r2, r3
 8004cec:	d116      	bne.n	8004d1c <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	2200      	movs	r2, #0
 8004cf2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	2220      	movs	r2, #32
 8004cf8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	2200      	movs	r2, #0
 8004d00:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d08:	f043 0220 	orr.w	r2, r3, #32
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	2200      	movs	r2, #0
 8004d14:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004d18:	2301      	movs	r3, #1
 8004d1a:	e023      	b.n	8004d64 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004d1c:	68bb      	ldr	r3, [r7, #8]
 8004d1e:	0c1b      	lsrs	r3, r3, #16
 8004d20:	b2db      	uxtb	r3, r3
 8004d22:	2b01      	cmp	r3, #1
 8004d24:	d10d      	bne.n	8004d42 <I2C_WaitOnFlagUntilTimeout+0xca>
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	695b      	ldr	r3, [r3, #20]
 8004d2c:	43da      	mvns	r2, r3
 8004d2e:	68bb      	ldr	r3, [r7, #8]
 8004d30:	4013      	ands	r3, r2
 8004d32:	b29b      	uxth	r3, r3
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	bf0c      	ite	eq
 8004d38:	2301      	moveq	r3, #1
 8004d3a:	2300      	movne	r3, #0
 8004d3c:	b2db      	uxtb	r3, r3
 8004d3e:	461a      	mov	r2, r3
 8004d40:	e00c      	b.n	8004d5c <I2C_WaitOnFlagUntilTimeout+0xe4>
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	699b      	ldr	r3, [r3, #24]
 8004d48:	43da      	mvns	r2, r3
 8004d4a:	68bb      	ldr	r3, [r7, #8]
 8004d4c:	4013      	ands	r3, r2
 8004d4e:	b29b      	uxth	r3, r3
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	bf0c      	ite	eq
 8004d54:	2301      	moveq	r3, #1
 8004d56:	2300      	movne	r3, #0
 8004d58:	b2db      	uxtb	r3, r3
 8004d5a:	461a      	mov	r2, r3
 8004d5c:	79fb      	ldrb	r3, [r7, #7]
 8004d5e:	429a      	cmp	r2, r3
 8004d60:	d093      	beq.n	8004c8a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004d62:	2300      	movs	r3, #0
}
 8004d64:	4618      	mov	r0, r3
 8004d66:	3710      	adds	r7, #16
 8004d68:	46bd      	mov	sp, r7
 8004d6a:	bd80      	pop	{r7, pc}

08004d6c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004d6c:	b580      	push	{r7, lr}
 8004d6e:	b084      	sub	sp, #16
 8004d70:	af00      	add	r7, sp, #0
 8004d72:	60f8      	str	r0, [r7, #12]
 8004d74:	60b9      	str	r1, [r7, #8]
 8004d76:	607a      	str	r2, [r7, #4]
 8004d78:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004d7a:	e071      	b.n	8004e60 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	695b      	ldr	r3, [r3, #20]
 8004d82:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004d86:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004d8a:	d123      	bne.n	8004dd4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	681a      	ldr	r2, [r3, #0]
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004d9a:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004da4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	2200      	movs	r2, #0
 8004daa:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	2220      	movs	r2, #32
 8004db0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	2200      	movs	r2, #0
 8004db8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004dc0:	f043 0204 	orr.w	r2, r3, #4
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	2200      	movs	r2, #0
 8004dcc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004dd0:	2301      	movs	r3, #1
 8004dd2:	e067      	b.n	8004ea4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004dda:	d041      	beq.n	8004e60 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004ddc:	f7fe fcd4 	bl	8003788 <HAL_GetTick>
 8004de0:	4602      	mov	r2, r0
 8004de2:	683b      	ldr	r3, [r7, #0]
 8004de4:	1ad3      	subs	r3, r2, r3
 8004de6:	687a      	ldr	r2, [r7, #4]
 8004de8:	429a      	cmp	r2, r3
 8004dea:	d302      	bcc.n	8004df2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d136      	bne.n	8004e60 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8004df2:	68bb      	ldr	r3, [r7, #8]
 8004df4:	0c1b      	lsrs	r3, r3, #16
 8004df6:	b2db      	uxtb	r3, r3
 8004df8:	2b01      	cmp	r3, #1
 8004dfa:	d10c      	bne.n	8004e16 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	695b      	ldr	r3, [r3, #20]
 8004e02:	43da      	mvns	r2, r3
 8004e04:	68bb      	ldr	r3, [r7, #8]
 8004e06:	4013      	ands	r3, r2
 8004e08:	b29b      	uxth	r3, r3
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	bf14      	ite	ne
 8004e0e:	2301      	movne	r3, #1
 8004e10:	2300      	moveq	r3, #0
 8004e12:	b2db      	uxtb	r3, r3
 8004e14:	e00b      	b.n	8004e2e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	699b      	ldr	r3, [r3, #24]
 8004e1c:	43da      	mvns	r2, r3
 8004e1e:	68bb      	ldr	r3, [r7, #8]
 8004e20:	4013      	ands	r3, r2
 8004e22:	b29b      	uxth	r3, r3
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	bf14      	ite	ne
 8004e28:	2301      	movne	r3, #1
 8004e2a:	2300      	moveq	r3, #0
 8004e2c:	b2db      	uxtb	r3, r3
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d016      	beq.n	8004e60 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	2200      	movs	r2, #0
 8004e36:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	2220      	movs	r2, #32
 8004e3c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	2200      	movs	r2, #0
 8004e44:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e4c:	f043 0220 	orr.w	r2, r3, #32
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	2200      	movs	r2, #0
 8004e58:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004e5c:	2301      	movs	r3, #1
 8004e5e:	e021      	b.n	8004ea4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004e60:	68bb      	ldr	r3, [r7, #8]
 8004e62:	0c1b      	lsrs	r3, r3, #16
 8004e64:	b2db      	uxtb	r3, r3
 8004e66:	2b01      	cmp	r3, #1
 8004e68:	d10c      	bne.n	8004e84 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	695b      	ldr	r3, [r3, #20]
 8004e70:	43da      	mvns	r2, r3
 8004e72:	68bb      	ldr	r3, [r7, #8]
 8004e74:	4013      	ands	r3, r2
 8004e76:	b29b      	uxth	r3, r3
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	bf14      	ite	ne
 8004e7c:	2301      	movne	r3, #1
 8004e7e:	2300      	moveq	r3, #0
 8004e80:	b2db      	uxtb	r3, r3
 8004e82:	e00b      	b.n	8004e9c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	699b      	ldr	r3, [r3, #24]
 8004e8a:	43da      	mvns	r2, r3
 8004e8c:	68bb      	ldr	r3, [r7, #8]
 8004e8e:	4013      	ands	r3, r2
 8004e90:	b29b      	uxth	r3, r3
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	bf14      	ite	ne
 8004e96:	2301      	movne	r3, #1
 8004e98:	2300      	moveq	r3, #0
 8004e9a:	b2db      	uxtb	r3, r3
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	f47f af6d 	bne.w	8004d7c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8004ea2:	2300      	movs	r3, #0
}
 8004ea4:	4618      	mov	r0, r3
 8004ea6:	3710      	adds	r7, #16
 8004ea8:	46bd      	mov	sp, r7
 8004eaa:	bd80      	pop	{r7, pc}

08004eac <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004eac:	b580      	push	{r7, lr}
 8004eae:	b084      	sub	sp, #16
 8004eb0:	af00      	add	r7, sp, #0
 8004eb2:	60f8      	str	r0, [r7, #12]
 8004eb4:	60b9      	str	r1, [r7, #8]
 8004eb6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004eb8:	e034      	b.n	8004f24 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004eba:	68f8      	ldr	r0, [r7, #12]
 8004ebc:	f000 f8e3 	bl	8005086 <I2C_IsAcknowledgeFailed>
 8004ec0:	4603      	mov	r3, r0
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d001      	beq.n	8004eca <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004ec6:	2301      	movs	r3, #1
 8004ec8:	e034      	b.n	8004f34 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004eca:	68bb      	ldr	r3, [r7, #8]
 8004ecc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ed0:	d028      	beq.n	8004f24 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004ed2:	f7fe fc59 	bl	8003788 <HAL_GetTick>
 8004ed6:	4602      	mov	r2, r0
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	1ad3      	subs	r3, r2, r3
 8004edc:	68ba      	ldr	r2, [r7, #8]
 8004ede:	429a      	cmp	r2, r3
 8004ee0:	d302      	bcc.n	8004ee8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004ee2:	68bb      	ldr	r3, [r7, #8]
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d11d      	bne.n	8004f24 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	695b      	ldr	r3, [r3, #20]
 8004eee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004ef2:	2b80      	cmp	r3, #128	@ 0x80
 8004ef4:	d016      	beq.n	8004f24 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	2200      	movs	r2, #0
 8004efa:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	2220      	movs	r2, #32
 8004f00:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	2200      	movs	r2, #0
 8004f08:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f10:	f043 0220 	orr.w	r2, r3, #32
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	2200      	movs	r2, #0
 8004f1c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004f20:	2301      	movs	r3, #1
 8004f22:	e007      	b.n	8004f34 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	695b      	ldr	r3, [r3, #20]
 8004f2a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004f2e:	2b80      	cmp	r3, #128	@ 0x80
 8004f30:	d1c3      	bne.n	8004eba <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004f32:	2300      	movs	r3, #0
}
 8004f34:	4618      	mov	r0, r3
 8004f36:	3710      	adds	r7, #16
 8004f38:	46bd      	mov	sp, r7
 8004f3a:	bd80      	pop	{r7, pc}

08004f3c <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004f3c:	b580      	push	{r7, lr}
 8004f3e:	b084      	sub	sp, #16
 8004f40:	af00      	add	r7, sp, #0
 8004f42:	60f8      	str	r0, [r7, #12]
 8004f44:	60b9      	str	r1, [r7, #8]
 8004f46:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004f48:	e034      	b.n	8004fb4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004f4a:	68f8      	ldr	r0, [r7, #12]
 8004f4c:	f000 f89b 	bl	8005086 <I2C_IsAcknowledgeFailed>
 8004f50:	4603      	mov	r3, r0
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d001      	beq.n	8004f5a <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004f56:	2301      	movs	r3, #1
 8004f58:	e034      	b.n	8004fc4 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004f5a:	68bb      	ldr	r3, [r7, #8]
 8004f5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f60:	d028      	beq.n	8004fb4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004f62:	f7fe fc11 	bl	8003788 <HAL_GetTick>
 8004f66:	4602      	mov	r2, r0
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	1ad3      	subs	r3, r2, r3
 8004f6c:	68ba      	ldr	r2, [r7, #8]
 8004f6e:	429a      	cmp	r2, r3
 8004f70:	d302      	bcc.n	8004f78 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004f72:	68bb      	ldr	r3, [r7, #8]
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d11d      	bne.n	8004fb4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	695b      	ldr	r3, [r3, #20]
 8004f7e:	f003 0304 	and.w	r3, r3, #4
 8004f82:	2b04      	cmp	r3, #4
 8004f84:	d016      	beq.n	8004fb4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	2200      	movs	r2, #0
 8004f8a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	2220      	movs	r2, #32
 8004f90:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	2200      	movs	r2, #0
 8004f98:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fa0:	f043 0220 	orr.w	r2, r3, #32
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	2200      	movs	r2, #0
 8004fac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004fb0:	2301      	movs	r3, #1
 8004fb2:	e007      	b.n	8004fc4 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	695b      	ldr	r3, [r3, #20]
 8004fba:	f003 0304 	and.w	r3, r3, #4
 8004fbe:	2b04      	cmp	r3, #4
 8004fc0:	d1c3      	bne.n	8004f4a <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004fc2:	2300      	movs	r3, #0
}
 8004fc4:	4618      	mov	r0, r3
 8004fc6:	3710      	adds	r7, #16
 8004fc8:	46bd      	mov	sp, r7
 8004fca:	bd80      	pop	{r7, pc}

08004fcc <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004fcc:	b580      	push	{r7, lr}
 8004fce:	b084      	sub	sp, #16
 8004fd0:	af00      	add	r7, sp, #0
 8004fd2:	60f8      	str	r0, [r7, #12]
 8004fd4:	60b9      	str	r1, [r7, #8]
 8004fd6:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004fd8:	e049      	b.n	800506e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	695b      	ldr	r3, [r3, #20]
 8004fe0:	f003 0310 	and.w	r3, r3, #16
 8004fe4:	2b10      	cmp	r3, #16
 8004fe6:	d119      	bne.n	800501c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	f06f 0210 	mvn.w	r2, #16
 8004ff0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	2200      	movs	r2, #0
 8004ff6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	2220      	movs	r2, #32
 8004ffc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	2200      	movs	r2, #0
 8005004:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	2200      	movs	r2, #0
 8005014:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8005018:	2301      	movs	r3, #1
 800501a:	e030      	b.n	800507e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800501c:	f7fe fbb4 	bl	8003788 <HAL_GetTick>
 8005020:	4602      	mov	r2, r0
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	1ad3      	subs	r3, r2, r3
 8005026:	68ba      	ldr	r2, [r7, #8]
 8005028:	429a      	cmp	r2, r3
 800502a:	d302      	bcc.n	8005032 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800502c:	68bb      	ldr	r3, [r7, #8]
 800502e:	2b00      	cmp	r3, #0
 8005030:	d11d      	bne.n	800506e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	695b      	ldr	r3, [r3, #20]
 8005038:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800503c:	2b40      	cmp	r3, #64	@ 0x40
 800503e:	d016      	beq.n	800506e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	2200      	movs	r2, #0
 8005044:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	2220      	movs	r2, #32
 800504a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	2200      	movs	r2, #0
 8005052:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800505a:	f043 0220 	orr.w	r2, r3, #32
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	2200      	movs	r2, #0
 8005066:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800506a:	2301      	movs	r3, #1
 800506c:	e007      	b.n	800507e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	695b      	ldr	r3, [r3, #20]
 8005074:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005078:	2b40      	cmp	r3, #64	@ 0x40
 800507a:	d1ae      	bne.n	8004fda <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800507c:	2300      	movs	r3, #0
}
 800507e:	4618      	mov	r0, r3
 8005080:	3710      	adds	r7, #16
 8005082:	46bd      	mov	sp, r7
 8005084:	bd80      	pop	{r7, pc}

08005086 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005086:	b480      	push	{r7}
 8005088:	b083      	sub	sp, #12
 800508a:	af00      	add	r7, sp, #0
 800508c:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	695b      	ldr	r3, [r3, #20]
 8005094:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005098:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800509c:	d11b      	bne.n	80050d6 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80050a6:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	2200      	movs	r2, #0
 80050ac:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	2220      	movs	r2, #32
 80050b2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	2200      	movs	r2, #0
 80050ba:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050c2:	f043 0204 	orr.w	r2, r3, #4
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	2200      	movs	r2, #0
 80050ce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80050d2:	2301      	movs	r3, #1
 80050d4:	e000      	b.n	80050d8 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80050d6:	2300      	movs	r3, #0
}
 80050d8:	4618      	mov	r0, r3
 80050da:	370c      	adds	r7, #12
 80050dc:	46bd      	mov	sp, r7
 80050de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e2:	4770      	bx	lr

080050e4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80050e4:	b480      	push	{r7}
 80050e6:	b083      	sub	sp, #12
 80050e8:	af00      	add	r7, sp, #0
 80050ea:	6078      	str	r0, [r7, #4]
 80050ec:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80050f4:	b2db      	uxtb	r3, r3
 80050f6:	2b20      	cmp	r3, #32
 80050f8:	d129      	bne.n	800514e <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	2224      	movs	r2, #36	@ 0x24
 80050fe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	681a      	ldr	r2, [r3, #0]
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	f022 0201 	bic.w	r2, r2, #1
 8005110:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	f022 0210 	bic.w	r2, r2, #16
 8005120:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	683a      	ldr	r2, [r7, #0]
 800512e:	430a      	orrs	r2, r1
 8005130:	625a      	str	r2, [r3, #36]	@ 0x24

    __HAL_I2C_ENABLE(hi2c);
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	681a      	ldr	r2, [r3, #0]
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	f042 0201 	orr.w	r2, r2, #1
 8005140:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	2220      	movs	r2, #32
 8005146:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 800514a:	2300      	movs	r3, #0
 800514c:	e000      	b.n	8005150 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 800514e:	2302      	movs	r3, #2
  }
}
 8005150:	4618      	mov	r0, r3
 8005152:	370c      	adds	r7, #12
 8005154:	46bd      	mov	sp, r7
 8005156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800515a:	4770      	bx	lr

0800515c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800515c:	b480      	push	{r7}
 800515e:	b085      	sub	sp, #20
 8005160:	af00      	add	r7, sp, #0
 8005162:	6078      	str	r0, [r7, #4]
 8005164:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8005166:	2300      	movs	r3, #0
 8005168:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005170:	b2db      	uxtb	r3, r3
 8005172:	2b20      	cmp	r3, #32
 8005174:	d12a      	bne.n	80051cc <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	2224      	movs	r2, #36	@ 0x24
 800517a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	681a      	ldr	r2, [r3, #0]
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	f022 0201 	bic.w	r2, r2, #1
 800518c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005194:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8005196:	89fb      	ldrh	r3, [r7, #14]
 8005198:	f023 030f 	bic.w	r3, r3, #15
 800519c:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 800519e:	683b      	ldr	r3, [r7, #0]
 80051a0:	b29a      	uxth	r2, r3
 80051a2:	89fb      	ldrh	r3, [r7, #14]
 80051a4:	4313      	orrs	r3, r2
 80051a6:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	89fa      	ldrh	r2, [r7, #14]
 80051ae:	625a      	str	r2, [r3, #36]	@ 0x24

    __HAL_I2C_ENABLE(hi2c);
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	681a      	ldr	r2, [r3, #0]
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	f042 0201 	orr.w	r2, r2, #1
 80051be:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	2220      	movs	r2, #32
 80051c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 80051c8:	2300      	movs	r3, #0
 80051ca:	e000      	b.n	80051ce <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 80051cc:	2302      	movs	r3, #2
  }
}
 80051ce:	4618      	mov	r0, r3
 80051d0:	3714      	adds	r7, #20
 80051d2:	46bd      	mov	sp, r7
 80051d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d8:	4770      	bx	lr
	...

080051dc <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 80051dc:	b580      	push	{r7, lr}
 80051de:	b084      	sub	sp, #16
 80051e0:	af00      	add	r7, sp, #0
 80051e2:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d101      	bne.n	80051ee <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 80051ea:	2301      	movs	r3, #1
 80051ec:	e0bf      	b.n	800536e <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 80051f4:	b2db      	uxtb	r3, r3
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d106      	bne.n	8005208 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	2200      	movs	r2, #0
 80051fe:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8005202:	6878      	ldr	r0, [r7, #4]
 8005204:	f7fd fbfc 	bl	8002a00 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	2202      	movs	r2, #2
 800520c:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	699a      	ldr	r2, [r3, #24]
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	f022 4270 	bic.w	r2, r2, #4026531840	@ 0xf0000000
 800521e:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	6999      	ldr	r1, [r3, #24]
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	685a      	ldr	r2, [r3, #4]
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	689b      	ldr	r3, [r3, #8]
 800522e:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8005234:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	691b      	ldr	r3, [r3, #16]
 800523a:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	430a      	orrs	r2, r1
 8005242:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	6899      	ldr	r1, [r3, #8]
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681a      	ldr	r2, [r3, #0]
 800524e:	4b4a      	ldr	r3, [pc, #296]	@ (8005378 <HAL_LTDC_Init+0x19c>)
 8005250:	400b      	ands	r3, r1
 8005252:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	695b      	ldr	r3, [r3, #20]
 8005258:	041b      	lsls	r3, r3, #16
 800525a:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	6899      	ldr	r1, [r3, #8]
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	699a      	ldr	r2, [r3, #24]
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	431a      	orrs	r2, r3
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	430a      	orrs	r2, r1
 8005270:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	68d9      	ldr	r1, [r3, #12]
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681a      	ldr	r2, [r3, #0]
 800527c:	4b3e      	ldr	r3, [pc, #248]	@ (8005378 <HAL_LTDC_Init+0x19c>)
 800527e:	400b      	ands	r3, r1
 8005280:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	69db      	ldr	r3, [r3, #28]
 8005286:	041b      	lsls	r3, r3, #16
 8005288:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	68d9      	ldr	r1, [r3, #12]
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	6a1a      	ldr	r2, [r3, #32]
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	431a      	orrs	r2, r3
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	430a      	orrs	r2, r1
 800529e:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	6919      	ldr	r1, [r3, #16]
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681a      	ldr	r2, [r3, #0]
 80052aa:	4b33      	ldr	r3, [pc, #204]	@ (8005378 <HAL_LTDC_Init+0x19c>)
 80052ac:	400b      	ands	r3, r1
 80052ae:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052b4:	041b      	lsls	r3, r3, #16
 80052b6:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	6919      	ldr	r1, [r3, #16]
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	431a      	orrs	r2, r3
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	430a      	orrs	r2, r1
 80052cc:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	6959      	ldr	r1, [r3, #20]
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681a      	ldr	r2, [r3, #0]
 80052d8:	4b27      	ldr	r3, [pc, #156]	@ (8005378 <HAL_LTDC_Init+0x19c>)
 80052da:	400b      	ands	r3, r1
 80052dc:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80052e2:	041b      	lsls	r3, r3, #16
 80052e4:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	6959      	ldr	r1, [r3, #20]
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	431a      	orrs	r2, r3
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	430a      	orrs	r2, r1
 80052fa:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005302:	021b      	lsls	r3, r3, #8
 8005304:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 800530c:	041b      	lsls	r3, r3, #16
 800530e:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	f002 427f 	and.w	r2, r2, #4278190080	@ 0xff000000
 800531e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8005326:	68ba      	ldr	r2, [r7, #8]
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	4313      	orrs	r3, r2
 800532c:	687a      	ldr	r2, [r7, #4]
 800532e:	f892 2034 	ldrb.w	r2, [r2, #52]	@ 0x34
 8005332:	431a      	orrs	r2, r3
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	430a      	orrs	r2, r1
 800533a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	f042 0206 	orr.w	r2, r2, #6
 800534a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	699a      	ldr	r2, [r3, #24]
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	f042 0201 	orr.w	r2, r2, #1
 800535a:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	2200      	movs	r2, #0
 8005360:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	2201      	movs	r2, #1
 8005368:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  return HAL_OK;
 800536c:	2300      	movs	r3, #0
}
 800536e:	4618      	mov	r0, r3
 8005370:	3710      	adds	r7, #16
 8005372:	46bd      	mov	sp, r7
 8005374:	bd80      	pop	{r7, pc}
 8005376:	bf00      	nop
 8005378:	f000f800 	.word	0xf000f800

0800537c <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 800537c:	b5b0      	push	{r4, r5, r7, lr}
 800537e:	b084      	sub	sp, #16
 8005380:	af00      	add	r7, sp, #0
 8005382:	60f8      	str	r0, [r7, #12]
 8005384:	60b9      	str	r1, [r7, #8]
 8005386:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 800538e:	2b01      	cmp	r3, #1
 8005390:	d101      	bne.n	8005396 <HAL_LTDC_ConfigLayer+0x1a>
 8005392:	2302      	movs	r3, #2
 8005394:	e02c      	b.n	80053f0 <HAL_LTDC_ConfigLayer+0x74>
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	2201      	movs	r2, #1
 800539a:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	2202      	movs	r2, #2
 80053a2:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 80053a6:	68fa      	ldr	r2, [r7, #12]
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	2134      	movs	r1, #52	@ 0x34
 80053ac:	fb01 f303 	mul.w	r3, r1, r3
 80053b0:	4413      	add	r3, r2
 80053b2:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 80053b6:	68bb      	ldr	r3, [r7, #8]
 80053b8:	4614      	mov	r4, r2
 80053ba:	461d      	mov	r5, r3
 80053bc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80053be:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80053c0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80053c2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80053c4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80053c6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80053c8:	682b      	ldr	r3, [r5, #0]
 80053ca:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 80053cc:	687a      	ldr	r2, [r7, #4]
 80053ce:	68b9      	ldr	r1, [r7, #8]
 80053d0:	68f8      	ldr	r0, [r7, #12]
 80053d2:	f000 f811 	bl	80053f8 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	2201      	movs	r2, #1
 80053dc:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	2201      	movs	r2, #1
 80053e2:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	2200      	movs	r2, #0
 80053ea:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  return HAL_OK;
 80053ee:	2300      	movs	r3, #0
}
 80053f0:	4618      	mov	r0, r3
 80053f2:	3710      	adds	r7, #16
 80053f4:	46bd      	mov	sp, r7
 80053f6:	bdb0      	pop	{r4, r5, r7, pc}

080053f8 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 80053f8:	b480      	push	{r7}
 80053fa:	b089      	sub	sp, #36	@ 0x24
 80053fc:	af00      	add	r7, sp, #0
 80053fe:	60f8      	str	r0, [r7, #12]
 8005400:	60b9      	str	r1, [r7, #8]
 8005402:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8005404:	68bb      	ldr	r3, [r7, #8]
 8005406:	685a      	ldr	r2, [r3, #4]
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	68db      	ldr	r3, [r3, #12]
 800540e:	0c1b      	lsrs	r3, r3, #16
 8005410:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005414:	4413      	add	r3, r2
 8005416:	041b      	lsls	r3, r3, #16
 8005418:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	461a      	mov	r2, r3
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	01db      	lsls	r3, r3, #7
 8005424:	4413      	add	r3, r2
 8005426:	3384      	adds	r3, #132	@ 0x84
 8005428:	685b      	ldr	r3, [r3, #4]
 800542a:	68fa      	ldr	r2, [r7, #12]
 800542c:	6812      	ldr	r2, [r2, #0]
 800542e:	4611      	mov	r1, r2
 8005430:	687a      	ldr	r2, [r7, #4]
 8005432:	01d2      	lsls	r2, r2, #7
 8005434:	440a      	add	r2, r1
 8005436:	3284      	adds	r2, #132	@ 0x84
 8005438:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 800543c:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800543e:	68bb      	ldr	r3, [r7, #8]
 8005440:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	68db      	ldr	r3, [r3, #12]
 8005448:	0c1b      	lsrs	r3, r3, #16
 800544a:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800544e:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8005450:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	4619      	mov	r1, r3
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	01db      	lsls	r3, r3, #7
 800545c:	440b      	add	r3, r1
 800545e:	3384      	adds	r3, #132	@ 0x84
 8005460:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8005462:	69fb      	ldr	r3, [r7, #28]
 8005464:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8005466:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8005468:	68bb      	ldr	r3, [r7, #8]
 800546a:	68da      	ldr	r2, [r3, #12]
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	68db      	ldr	r3, [r3, #12]
 8005472:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005476:	4413      	add	r3, r2
 8005478:	041b      	lsls	r3, r3, #16
 800547a:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	461a      	mov	r2, r3
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	01db      	lsls	r3, r3, #7
 8005486:	4413      	add	r3, r2
 8005488:	3384      	adds	r3, #132	@ 0x84
 800548a:	689b      	ldr	r3, [r3, #8]
 800548c:	68fa      	ldr	r2, [r7, #12]
 800548e:	6812      	ldr	r2, [r2, #0]
 8005490:	4611      	mov	r1, r2
 8005492:	687a      	ldr	r2, [r7, #4]
 8005494:	01d2      	lsls	r2, r2, #7
 8005496:	440a      	add	r2, r1
 8005498:	3284      	adds	r2, #132	@ 0x84
 800549a:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 800549e:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 80054a0:	68bb      	ldr	r3, [r7, #8]
 80054a2:	689a      	ldr	r2, [r3, #8]
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	68db      	ldr	r3, [r3, #12]
 80054aa:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80054ae:	4413      	add	r3, r2
 80054b0:	1c5a      	adds	r2, r3, #1
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	4619      	mov	r1, r3
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	01db      	lsls	r3, r3, #7
 80054bc:	440b      	add	r3, r1
 80054be:	3384      	adds	r3, #132	@ 0x84
 80054c0:	4619      	mov	r1, r3
 80054c2:	69fb      	ldr	r3, [r7, #28]
 80054c4:	4313      	orrs	r3, r2
 80054c6:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	461a      	mov	r2, r3
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	01db      	lsls	r3, r3, #7
 80054d2:	4413      	add	r3, r2
 80054d4:	3384      	adds	r3, #132	@ 0x84
 80054d6:	691b      	ldr	r3, [r3, #16]
 80054d8:	68fa      	ldr	r2, [r7, #12]
 80054da:	6812      	ldr	r2, [r2, #0]
 80054dc:	4611      	mov	r1, r2
 80054de:	687a      	ldr	r2, [r7, #4]
 80054e0:	01d2      	lsls	r2, r2, #7
 80054e2:	440a      	add	r2, r1
 80054e4:	3284      	adds	r2, #132	@ 0x84
 80054e6:	f023 0307 	bic.w	r3, r3, #7
 80054ea:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	461a      	mov	r2, r3
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	01db      	lsls	r3, r3, #7
 80054f6:	4413      	add	r3, r2
 80054f8:	3384      	adds	r3, #132	@ 0x84
 80054fa:	461a      	mov	r2, r3
 80054fc:	68bb      	ldr	r3, [r7, #8]
 80054fe:	691b      	ldr	r3, [r3, #16]
 8005500:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8005502:	68bb      	ldr	r3, [r7, #8]
 8005504:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8005508:	021b      	lsls	r3, r3, #8
 800550a:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 800550c:	68bb      	ldr	r3, [r7, #8]
 800550e:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8005512:	041b      	lsls	r3, r3, #16
 8005514:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8005516:	68bb      	ldr	r3, [r7, #8]
 8005518:	699b      	ldr	r3, [r3, #24]
 800551a:	061b      	lsls	r3, r3, #24
 800551c:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	461a      	mov	r2, r3
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	01db      	lsls	r3, r3, #7
 8005528:	4413      	add	r3, r2
 800552a:	3384      	adds	r3, #132	@ 0x84
 800552c:	699b      	ldr	r3, [r3, #24]
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	461a      	mov	r2, r3
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	01db      	lsls	r3, r3, #7
 8005538:	4413      	add	r3, r2
 800553a:	3384      	adds	r3, #132	@ 0x84
 800553c:	461a      	mov	r2, r3
 800553e:	2300      	movs	r3, #0
 8005540:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8005542:	68bb      	ldr	r3, [r7, #8]
 8005544:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8005548:	461a      	mov	r2, r3
 800554a:	69fb      	ldr	r3, [r7, #28]
 800554c:	431a      	orrs	r2, r3
 800554e:	69bb      	ldr	r3, [r7, #24]
 8005550:	431a      	orrs	r2, r3
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	4619      	mov	r1, r3
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	01db      	lsls	r3, r3, #7
 800555c:	440b      	add	r3, r1
 800555e:	3384      	adds	r3, #132	@ 0x84
 8005560:	4619      	mov	r1, r3
 8005562:	697b      	ldr	r3, [r7, #20]
 8005564:	4313      	orrs	r3, r2
 8005566:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	461a      	mov	r2, r3
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	01db      	lsls	r3, r3, #7
 8005572:	4413      	add	r3, r2
 8005574:	3384      	adds	r3, #132	@ 0x84
 8005576:	695b      	ldr	r3, [r3, #20]
 8005578:	68fa      	ldr	r2, [r7, #12]
 800557a:	6812      	ldr	r2, [r2, #0]
 800557c:	4611      	mov	r1, r2
 800557e:	687a      	ldr	r2, [r7, #4]
 8005580:	01d2      	lsls	r2, r2, #7
 8005582:	440a      	add	r2, r1
 8005584:	3284      	adds	r2, #132	@ 0x84
 8005586:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800558a:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	461a      	mov	r2, r3
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	01db      	lsls	r3, r3, #7
 8005596:	4413      	add	r3, r2
 8005598:	3384      	adds	r3, #132	@ 0x84
 800559a:	461a      	mov	r2, r3
 800559c:	68bb      	ldr	r3, [r7, #8]
 800559e:	695b      	ldr	r3, [r3, #20]
 80055a0:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	461a      	mov	r2, r3
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	01db      	lsls	r3, r3, #7
 80055ac:	4413      	add	r3, r2
 80055ae:	3384      	adds	r3, #132	@ 0x84
 80055b0:	69db      	ldr	r3, [r3, #28]
 80055b2:	68fa      	ldr	r2, [r7, #12]
 80055b4:	6812      	ldr	r2, [r2, #0]
 80055b6:	4611      	mov	r1, r2
 80055b8:	687a      	ldr	r2, [r7, #4]
 80055ba:	01d2      	lsls	r2, r2, #7
 80055bc:	440a      	add	r2, r1
 80055be:	3284      	adds	r2, #132	@ 0x84
 80055c0:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 80055c4:	f023 0307 	bic.w	r3, r3, #7
 80055c8:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 80055ca:	68bb      	ldr	r3, [r7, #8]
 80055cc:	69da      	ldr	r2, [r3, #28]
 80055ce:	68bb      	ldr	r3, [r7, #8]
 80055d0:	6a1b      	ldr	r3, [r3, #32]
 80055d2:	68f9      	ldr	r1, [r7, #12]
 80055d4:	6809      	ldr	r1, [r1, #0]
 80055d6:	4608      	mov	r0, r1
 80055d8:	6879      	ldr	r1, [r7, #4]
 80055da:	01c9      	lsls	r1, r1, #7
 80055dc:	4401      	add	r1, r0
 80055de:	3184      	adds	r1, #132	@ 0x84
 80055e0:	4313      	orrs	r3, r2
 80055e2:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	461a      	mov	r2, r3
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	01db      	lsls	r3, r3, #7
 80055ee:	4413      	add	r3, r2
 80055f0:	3384      	adds	r3, #132	@ 0x84
 80055f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	461a      	mov	r2, r3
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	01db      	lsls	r3, r3, #7
 80055fe:	4413      	add	r3, r2
 8005600:	3384      	adds	r3, #132	@ 0x84
 8005602:	461a      	mov	r2, r3
 8005604:	2300      	movs	r3, #0
 8005606:	6293      	str	r3, [r2, #40]	@ 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	461a      	mov	r2, r3
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	01db      	lsls	r3, r3, #7
 8005612:	4413      	add	r3, r2
 8005614:	3384      	adds	r3, #132	@ 0x84
 8005616:	461a      	mov	r2, r3
 8005618:	68bb      	ldr	r3, [r7, #8]
 800561a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800561c:	6293      	str	r3, [r2, #40]	@ 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 800561e:	68bb      	ldr	r3, [r7, #8]
 8005620:	691b      	ldr	r3, [r3, #16]
 8005622:	2b00      	cmp	r3, #0
 8005624:	d102      	bne.n	800562c <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 8005626:	2304      	movs	r3, #4
 8005628:	61fb      	str	r3, [r7, #28]
 800562a:	e01b      	b.n	8005664 <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 800562c:	68bb      	ldr	r3, [r7, #8]
 800562e:	691b      	ldr	r3, [r3, #16]
 8005630:	2b01      	cmp	r3, #1
 8005632:	d102      	bne.n	800563a <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 8005634:	2303      	movs	r3, #3
 8005636:	61fb      	str	r3, [r7, #28]
 8005638:	e014      	b.n	8005664 <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800563a:	68bb      	ldr	r3, [r7, #8]
 800563c:	691b      	ldr	r3, [r3, #16]
 800563e:	2b04      	cmp	r3, #4
 8005640:	d00b      	beq.n	800565a <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8005642:	68bb      	ldr	r3, [r7, #8]
 8005644:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8005646:	2b02      	cmp	r3, #2
 8005648:	d007      	beq.n	800565a <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800564a:	68bb      	ldr	r3, [r7, #8]
 800564c:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800564e:	2b03      	cmp	r3, #3
 8005650:	d003      	beq.n	800565a <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8005652:	68bb      	ldr	r3, [r7, #8]
 8005654:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8005656:	2b07      	cmp	r3, #7
 8005658:	d102      	bne.n	8005660 <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 800565a:	2302      	movs	r3, #2
 800565c:	61fb      	str	r3, [r7, #28]
 800565e:	e001      	b.n	8005664 <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 8005660:	2301      	movs	r3, #1
 8005662:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	461a      	mov	r2, r3
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	01db      	lsls	r3, r3, #7
 800566e:	4413      	add	r3, r2
 8005670:	3384      	adds	r3, #132	@ 0x84
 8005672:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005674:	68fa      	ldr	r2, [r7, #12]
 8005676:	6812      	ldr	r2, [r2, #0]
 8005678:	4611      	mov	r1, r2
 800567a:	687a      	ldr	r2, [r7, #4]
 800567c:	01d2      	lsls	r2, r2, #7
 800567e:	440a      	add	r2, r1
 8005680:	3284      	adds	r2, #132	@ 0x84
 8005682:	f003 23e0 	and.w	r3, r3, #3758153728	@ 0xe000e000
 8005686:	62d3      	str	r3, [r2, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8005688:	68bb      	ldr	r3, [r7, #8]
 800568a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800568c:	69fa      	ldr	r2, [r7, #28]
 800568e:	fb02 f303 	mul.w	r3, r2, r3
 8005692:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8005694:	68bb      	ldr	r3, [r7, #8]
 8005696:	6859      	ldr	r1, [r3, #4]
 8005698:	68bb      	ldr	r3, [r7, #8]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	1acb      	subs	r3, r1, r3
 800569e:	69f9      	ldr	r1, [r7, #28]
 80056a0:	fb01 f303 	mul.w	r3, r1, r3
 80056a4:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 80056a6:	68f9      	ldr	r1, [r7, #12]
 80056a8:	6809      	ldr	r1, [r1, #0]
 80056aa:	4608      	mov	r0, r1
 80056ac:	6879      	ldr	r1, [r7, #4]
 80056ae:	01c9      	lsls	r1, r1, #7
 80056b0:	4401      	add	r1, r0
 80056b2:	3184      	adds	r1, #132	@ 0x84
 80056b4:	4313      	orrs	r3, r2
 80056b6:	62cb      	str	r3, [r1, #44]	@ 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	461a      	mov	r2, r3
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	01db      	lsls	r3, r3, #7
 80056c2:	4413      	add	r3, r2
 80056c4:	3384      	adds	r3, #132	@ 0x84
 80056c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80056c8:	68fa      	ldr	r2, [r7, #12]
 80056ca:	6812      	ldr	r2, [r2, #0]
 80056cc:	4611      	mov	r1, r2
 80056ce:	687a      	ldr	r2, [r7, #4]
 80056d0:	01d2      	lsls	r2, r2, #7
 80056d2:	440a      	add	r2, r1
 80056d4:	3284      	adds	r2, #132	@ 0x84
 80056d6:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 80056da:	f023 0307 	bic.w	r3, r3, #7
 80056de:	6313      	str	r3, [r2, #48]	@ 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	461a      	mov	r2, r3
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	01db      	lsls	r3, r3, #7
 80056ea:	4413      	add	r3, r2
 80056ec:	3384      	adds	r3, #132	@ 0x84
 80056ee:	461a      	mov	r2, r3
 80056f0:	68bb      	ldr	r3, [r7, #8]
 80056f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80056f4:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	461a      	mov	r2, r3
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	01db      	lsls	r3, r3, #7
 8005700:	4413      	add	r3, r2
 8005702:	3384      	adds	r3, #132	@ 0x84
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	68fa      	ldr	r2, [r7, #12]
 8005708:	6812      	ldr	r2, [r2, #0]
 800570a:	4611      	mov	r1, r2
 800570c:	687a      	ldr	r2, [r7, #4]
 800570e:	01d2      	lsls	r2, r2, #7
 8005710:	440a      	add	r2, r1
 8005712:	3284      	adds	r2, #132	@ 0x84
 8005714:	f043 0301 	orr.w	r3, r3, #1
 8005718:	6013      	str	r3, [r2, #0]
}
 800571a:	bf00      	nop
 800571c:	3724      	adds	r7, #36	@ 0x24
 800571e:	46bd      	mov	sp, r7
 8005720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005724:	4770      	bx	lr
	...

08005728 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005728:	b580      	push	{r7, lr}
 800572a:	b086      	sub	sp, #24
 800572c:	af00      	add	r7, sp, #0
 800572e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	2b00      	cmp	r3, #0
 8005734:	d101      	bne.n	800573a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005736:	2301      	movs	r3, #1
 8005738:	e267      	b.n	8005c0a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	f003 0301 	and.w	r3, r3, #1
 8005742:	2b00      	cmp	r3, #0
 8005744:	d075      	beq.n	8005832 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8005746:	4b88      	ldr	r3, [pc, #544]	@ (8005968 <HAL_RCC_OscConfig+0x240>)
 8005748:	689b      	ldr	r3, [r3, #8]
 800574a:	f003 030c 	and.w	r3, r3, #12
 800574e:	2b04      	cmp	r3, #4
 8005750:	d00c      	beq.n	800576c <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005752:	4b85      	ldr	r3, [pc, #532]	@ (8005968 <HAL_RCC_OscConfig+0x240>)
 8005754:	689b      	ldr	r3, [r3, #8]
 8005756:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800575a:	2b08      	cmp	r3, #8
 800575c:	d112      	bne.n	8005784 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800575e:	4b82      	ldr	r3, [pc, #520]	@ (8005968 <HAL_RCC_OscConfig+0x240>)
 8005760:	685b      	ldr	r3, [r3, #4]
 8005762:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005766:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800576a:	d10b      	bne.n	8005784 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800576c:	4b7e      	ldr	r3, [pc, #504]	@ (8005968 <HAL_RCC_OscConfig+0x240>)
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005774:	2b00      	cmp	r3, #0
 8005776:	d05b      	beq.n	8005830 <HAL_RCC_OscConfig+0x108>
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	685b      	ldr	r3, [r3, #4]
 800577c:	2b00      	cmp	r3, #0
 800577e:	d157      	bne.n	8005830 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005780:	2301      	movs	r3, #1
 8005782:	e242      	b.n	8005c0a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	685b      	ldr	r3, [r3, #4]
 8005788:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800578c:	d106      	bne.n	800579c <HAL_RCC_OscConfig+0x74>
 800578e:	4b76      	ldr	r3, [pc, #472]	@ (8005968 <HAL_RCC_OscConfig+0x240>)
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	4a75      	ldr	r2, [pc, #468]	@ (8005968 <HAL_RCC_OscConfig+0x240>)
 8005794:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005798:	6013      	str	r3, [r2, #0]
 800579a:	e01d      	b.n	80057d8 <HAL_RCC_OscConfig+0xb0>
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	685b      	ldr	r3, [r3, #4]
 80057a0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80057a4:	d10c      	bne.n	80057c0 <HAL_RCC_OscConfig+0x98>
 80057a6:	4b70      	ldr	r3, [pc, #448]	@ (8005968 <HAL_RCC_OscConfig+0x240>)
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	4a6f      	ldr	r2, [pc, #444]	@ (8005968 <HAL_RCC_OscConfig+0x240>)
 80057ac:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80057b0:	6013      	str	r3, [r2, #0]
 80057b2:	4b6d      	ldr	r3, [pc, #436]	@ (8005968 <HAL_RCC_OscConfig+0x240>)
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	4a6c      	ldr	r2, [pc, #432]	@ (8005968 <HAL_RCC_OscConfig+0x240>)
 80057b8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80057bc:	6013      	str	r3, [r2, #0]
 80057be:	e00b      	b.n	80057d8 <HAL_RCC_OscConfig+0xb0>
 80057c0:	4b69      	ldr	r3, [pc, #420]	@ (8005968 <HAL_RCC_OscConfig+0x240>)
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	4a68      	ldr	r2, [pc, #416]	@ (8005968 <HAL_RCC_OscConfig+0x240>)
 80057c6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80057ca:	6013      	str	r3, [r2, #0]
 80057cc:	4b66      	ldr	r3, [pc, #408]	@ (8005968 <HAL_RCC_OscConfig+0x240>)
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	4a65      	ldr	r2, [pc, #404]	@ (8005968 <HAL_RCC_OscConfig+0x240>)
 80057d2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80057d6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	685b      	ldr	r3, [r3, #4]
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d013      	beq.n	8005808 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80057e0:	f7fd ffd2 	bl	8003788 <HAL_GetTick>
 80057e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80057e6:	e008      	b.n	80057fa <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80057e8:	f7fd ffce 	bl	8003788 <HAL_GetTick>
 80057ec:	4602      	mov	r2, r0
 80057ee:	693b      	ldr	r3, [r7, #16]
 80057f0:	1ad3      	subs	r3, r2, r3
 80057f2:	2b64      	cmp	r3, #100	@ 0x64
 80057f4:	d901      	bls.n	80057fa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80057f6:	2303      	movs	r3, #3
 80057f8:	e207      	b.n	8005c0a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80057fa:	4b5b      	ldr	r3, [pc, #364]	@ (8005968 <HAL_RCC_OscConfig+0x240>)
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005802:	2b00      	cmp	r3, #0
 8005804:	d0f0      	beq.n	80057e8 <HAL_RCC_OscConfig+0xc0>
 8005806:	e014      	b.n	8005832 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005808:	f7fd ffbe 	bl	8003788 <HAL_GetTick>
 800580c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800580e:	e008      	b.n	8005822 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005810:	f7fd ffba 	bl	8003788 <HAL_GetTick>
 8005814:	4602      	mov	r2, r0
 8005816:	693b      	ldr	r3, [r7, #16]
 8005818:	1ad3      	subs	r3, r2, r3
 800581a:	2b64      	cmp	r3, #100	@ 0x64
 800581c:	d901      	bls.n	8005822 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800581e:	2303      	movs	r3, #3
 8005820:	e1f3      	b.n	8005c0a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005822:	4b51      	ldr	r3, [pc, #324]	@ (8005968 <HAL_RCC_OscConfig+0x240>)
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800582a:	2b00      	cmp	r3, #0
 800582c:	d1f0      	bne.n	8005810 <HAL_RCC_OscConfig+0xe8>
 800582e:	e000      	b.n	8005832 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005830:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	f003 0302 	and.w	r3, r3, #2
 800583a:	2b00      	cmp	r3, #0
 800583c:	d063      	beq.n	8005906 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800583e:	4b4a      	ldr	r3, [pc, #296]	@ (8005968 <HAL_RCC_OscConfig+0x240>)
 8005840:	689b      	ldr	r3, [r3, #8]
 8005842:	f003 030c 	and.w	r3, r3, #12
 8005846:	2b00      	cmp	r3, #0
 8005848:	d00b      	beq.n	8005862 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800584a:	4b47      	ldr	r3, [pc, #284]	@ (8005968 <HAL_RCC_OscConfig+0x240>)
 800584c:	689b      	ldr	r3, [r3, #8]
 800584e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8005852:	2b08      	cmp	r3, #8
 8005854:	d11c      	bne.n	8005890 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005856:	4b44      	ldr	r3, [pc, #272]	@ (8005968 <HAL_RCC_OscConfig+0x240>)
 8005858:	685b      	ldr	r3, [r3, #4]
 800585a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800585e:	2b00      	cmp	r3, #0
 8005860:	d116      	bne.n	8005890 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005862:	4b41      	ldr	r3, [pc, #260]	@ (8005968 <HAL_RCC_OscConfig+0x240>)
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	f003 0302 	and.w	r3, r3, #2
 800586a:	2b00      	cmp	r3, #0
 800586c:	d005      	beq.n	800587a <HAL_RCC_OscConfig+0x152>
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	68db      	ldr	r3, [r3, #12]
 8005872:	2b01      	cmp	r3, #1
 8005874:	d001      	beq.n	800587a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005876:	2301      	movs	r3, #1
 8005878:	e1c7      	b.n	8005c0a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800587a:	4b3b      	ldr	r3, [pc, #236]	@ (8005968 <HAL_RCC_OscConfig+0x240>)
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	691b      	ldr	r3, [r3, #16]
 8005886:	00db      	lsls	r3, r3, #3
 8005888:	4937      	ldr	r1, [pc, #220]	@ (8005968 <HAL_RCC_OscConfig+0x240>)
 800588a:	4313      	orrs	r3, r2
 800588c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800588e:	e03a      	b.n	8005906 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	68db      	ldr	r3, [r3, #12]
 8005894:	2b00      	cmp	r3, #0
 8005896:	d020      	beq.n	80058da <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005898:	4b34      	ldr	r3, [pc, #208]	@ (800596c <HAL_RCC_OscConfig+0x244>)
 800589a:	2201      	movs	r2, #1
 800589c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800589e:	f7fd ff73 	bl	8003788 <HAL_GetTick>
 80058a2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80058a4:	e008      	b.n	80058b8 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80058a6:	f7fd ff6f 	bl	8003788 <HAL_GetTick>
 80058aa:	4602      	mov	r2, r0
 80058ac:	693b      	ldr	r3, [r7, #16]
 80058ae:	1ad3      	subs	r3, r2, r3
 80058b0:	2b02      	cmp	r3, #2
 80058b2:	d901      	bls.n	80058b8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80058b4:	2303      	movs	r3, #3
 80058b6:	e1a8      	b.n	8005c0a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80058b8:	4b2b      	ldr	r3, [pc, #172]	@ (8005968 <HAL_RCC_OscConfig+0x240>)
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	f003 0302 	and.w	r3, r3, #2
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d0f0      	beq.n	80058a6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80058c4:	4b28      	ldr	r3, [pc, #160]	@ (8005968 <HAL_RCC_OscConfig+0x240>)
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	691b      	ldr	r3, [r3, #16]
 80058d0:	00db      	lsls	r3, r3, #3
 80058d2:	4925      	ldr	r1, [pc, #148]	@ (8005968 <HAL_RCC_OscConfig+0x240>)
 80058d4:	4313      	orrs	r3, r2
 80058d6:	600b      	str	r3, [r1, #0]
 80058d8:	e015      	b.n	8005906 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80058da:	4b24      	ldr	r3, [pc, #144]	@ (800596c <HAL_RCC_OscConfig+0x244>)
 80058dc:	2200      	movs	r2, #0
 80058de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80058e0:	f7fd ff52 	bl	8003788 <HAL_GetTick>
 80058e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80058e6:	e008      	b.n	80058fa <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80058e8:	f7fd ff4e 	bl	8003788 <HAL_GetTick>
 80058ec:	4602      	mov	r2, r0
 80058ee:	693b      	ldr	r3, [r7, #16]
 80058f0:	1ad3      	subs	r3, r2, r3
 80058f2:	2b02      	cmp	r3, #2
 80058f4:	d901      	bls.n	80058fa <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80058f6:	2303      	movs	r3, #3
 80058f8:	e187      	b.n	8005c0a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80058fa:	4b1b      	ldr	r3, [pc, #108]	@ (8005968 <HAL_RCC_OscConfig+0x240>)
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	f003 0302 	and.w	r3, r3, #2
 8005902:	2b00      	cmp	r3, #0
 8005904:	d1f0      	bne.n	80058e8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	f003 0308 	and.w	r3, r3, #8
 800590e:	2b00      	cmp	r3, #0
 8005910:	d036      	beq.n	8005980 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	695b      	ldr	r3, [r3, #20]
 8005916:	2b00      	cmp	r3, #0
 8005918:	d016      	beq.n	8005948 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800591a:	4b15      	ldr	r3, [pc, #84]	@ (8005970 <HAL_RCC_OscConfig+0x248>)
 800591c:	2201      	movs	r2, #1
 800591e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005920:	f7fd ff32 	bl	8003788 <HAL_GetTick>
 8005924:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005926:	e008      	b.n	800593a <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005928:	f7fd ff2e 	bl	8003788 <HAL_GetTick>
 800592c:	4602      	mov	r2, r0
 800592e:	693b      	ldr	r3, [r7, #16]
 8005930:	1ad3      	subs	r3, r2, r3
 8005932:	2b02      	cmp	r3, #2
 8005934:	d901      	bls.n	800593a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005936:	2303      	movs	r3, #3
 8005938:	e167      	b.n	8005c0a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800593a:	4b0b      	ldr	r3, [pc, #44]	@ (8005968 <HAL_RCC_OscConfig+0x240>)
 800593c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800593e:	f003 0302 	and.w	r3, r3, #2
 8005942:	2b00      	cmp	r3, #0
 8005944:	d0f0      	beq.n	8005928 <HAL_RCC_OscConfig+0x200>
 8005946:	e01b      	b.n	8005980 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005948:	4b09      	ldr	r3, [pc, #36]	@ (8005970 <HAL_RCC_OscConfig+0x248>)
 800594a:	2200      	movs	r2, #0
 800594c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800594e:	f7fd ff1b 	bl	8003788 <HAL_GetTick>
 8005952:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005954:	e00e      	b.n	8005974 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005956:	f7fd ff17 	bl	8003788 <HAL_GetTick>
 800595a:	4602      	mov	r2, r0
 800595c:	693b      	ldr	r3, [r7, #16]
 800595e:	1ad3      	subs	r3, r2, r3
 8005960:	2b02      	cmp	r3, #2
 8005962:	d907      	bls.n	8005974 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005964:	2303      	movs	r3, #3
 8005966:	e150      	b.n	8005c0a <HAL_RCC_OscConfig+0x4e2>
 8005968:	40023800 	.word	0x40023800
 800596c:	42470000 	.word	0x42470000
 8005970:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005974:	4b88      	ldr	r3, [pc, #544]	@ (8005b98 <HAL_RCC_OscConfig+0x470>)
 8005976:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005978:	f003 0302 	and.w	r3, r3, #2
 800597c:	2b00      	cmp	r3, #0
 800597e:	d1ea      	bne.n	8005956 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	f003 0304 	and.w	r3, r3, #4
 8005988:	2b00      	cmp	r3, #0
 800598a:	f000 8097 	beq.w	8005abc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800598e:	2300      	movs	r3, #0
 8005990:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005992:	4b81      	ldr	r3, [pc, #516]	@ (8005b98 <HAL_RCC_OscConfig+0x470>)
 8005994:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005996:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800599a:	2b00      	cmp	r3, #0
 800599c:	d10f      	bne.n	80059be <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800599e:	2300      	movs	r3, #0
 80059a0:	60bb      	str	r3, [r7, #8]
 80059a2:	4b7d      	ldr	r3, [pc, #500]	@ (8005b98 <HAL_RCC_OscConfig+0x470>)
 80059a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80059a6:	4a7c      	ldr	r2, [pc, #496]	@ (8005b98 <HAL_RCC_OscConfig+0x470>)
 80059a8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80059ac:	6413      	str	r3, [r2, #64]	@ 0x40
 80059ae:	4b7a      	ldr	r3, [pc, #488]	@ (8005b98 <HAL_RCC_OscConfig+0x470>)
 80059b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80059b2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80059b6:	60bb      	str	r3, [r7, #8]
 80059b8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80059ba:	2301      	movs	r3, #1
 80059bc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80059be:	4b77      	ldr	r3, [pc, #476]	@ (8005b9c <HAL_RCC_OscConfig+0x474>)
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d118      	bne.n	80059fc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80059ca:	4b74      	ldr	r3, [pc, #464]	@ (8005b9c <HAL_RCC_OscConfig+0x474>)
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	4a73      	ldr	r2, [pc, #460]	@ (8005b9c <HAL_RCC_OscConfig+0x474>)
 80059d0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80059d4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80059d6:	f7fd fed7 	bl	8003788 <HAL_GetTick>
 80059da:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80059dc:	e008      	b.n	80059f0 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80059de:	f7fd fed3 	bl	8003788 <HAL_GetTick>
 80059e2:	4602      	mov	r2, r0
 80059e4:	693b      	ldr	r3, [r7, #16]
 80059e6:	1ad3      	subs	r3, r2, r3
 80059e8:	2b02      	cmp	r3, #2
 80059ea:	d901      	bls.n	80059f0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80059ec:	2303      	movs	r3, #3
 80059ee:	e10c      	b.n	8005c0a <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80059f0:	4b6a      	ldr	r3, [pc, #424]	@ (8005b9c <HAL_RCC_OscConfig+0x474>)
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d0f0      	beq.n	80059de <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	689b      	ldr	r3, [r3, #8]
 8005a00:	2b01      	cmp	r3, #1
 8005a02:	d106      	bne.n	8005a12 <HAL_RCC_OscConfig+0x2ea>
 8005a04:	4b64      	ldr	r3, [pc, #400]	@ (8005b98 <HAL_RCC_OscConfig+0x470>)
 8005a06:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005a08:	4a63      	ldr	r2, [pc, #396]	@ (8005b98 <HAL_RCC_OscConfig+0x470>)
 8005a0a:	f043 0301 	orr.w	r3, r3, #1
 8005a0e:	6713      	str	r3, [r2, #112]	@ 0x70
 8005a10:	e01c      	b.n	8005a4c <HAL_RCC_OscConfig+0x324>
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	689b      	ldr	r3, [r3, #8]
 8005a16:	2b05      	cmp	r3, #5
 8005a18:	d10c      	bne.n	8005a34 <HAL_RCC_OscConfig+0x30c>
 8005a1a:	4b5f      	ldr	r3, [pc, #380]	@ (8005b98 <HAL_RCC_OscConfig+0x470>)
 8005a1c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005a1e:	4a5e      	ldr	r2, [pc, #376]	@ (8005b98 <HAL_RCC_OscConfig+0x470>)
 8005a20:	f043 0304 	orr.w	r3, r3, #4
 8005a24:	6713      	str	r3, [r2, #112]	@ 0x70
 8005a26:	4b5c      	ldr	r3, [pc, #368]	@ (8005b98 <HAL_RCC_OscConfig+0x470>)
 8005a28:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005a2a:	4a5b      	ldr	r2, [pc, #364]	@ (8005b98 <HAL_RCC_OscConfig+0x470>)
 8005a2c:	f043 0301 	orr.w	r3, r3, #1
 8005a30:	6713      	str	r3, [r2, #112]	@ 0x70
 8005a32:	e00b      	b.n	8005a4c <HAL_RCC_OscConfig+0x324>
 8005a34:	4b58      	ldr	r3, [pc, #352]	@ (8005b98 <HAL_RCC_OscConfig+0x470>)
 8005a36:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005a38:	4a57      	ldr	r2, [pc, #348]	@ (8005b98 <HAL_RCC_OscConfig+0x470>)
 8005a3a:	f023 0301 	bic.w	r3, r3, #1
 8005a3e:	6713      	str	r3, [r2, #112]	@ 0x70
 8005a40:	4b55      	ldr	r3, [pc, #340]	@ (8005b98 <HAL_RCC_OscConfig+0x470>)
 8005a42:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005a44:	4a54      	ldr	r2, [pc, #336]	@ (8005b98 <HAL_RCC_OscConfig+0x470>)
 8005a46:	f023 0304 	bic.w	r3, r3, #4
 8005a4a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	689b      	ldr	r3, [r3, #8]
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d015      	beq.n	8005a80 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005a54:	f7fd fe98 	bl	8003788 <HAL_GetTick>
 8005a58:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005a5a:	e00a      	b.n	8005a72 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005a5c:	f7fd fe94 	bl	8003788 <HAL_GetTick>
 8005a60:	4602      	mov	r2, r0
 8005a62:	693b      	ldr	r3, [r7, #16]
 8005a64:	1ad3      	subs	r3, r2, r3
 8005a66:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005a6a:	4293      	cmp	r3, r2
 8005a6c:	d901      	bls.n	8005a72 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005a6e:	2303      	movs	r3, #3
 8005a70:	e0cb      	b.n	8005c0a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005a72:	4b49      	ldr	r3, [pc, #292]	@ (8005b98 <HAL_RCC_OscConfig+0x470>)
 8005a74:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005a76:	f003 0302 	and.w	r3, r3, #2
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d0ee      	beq.n	8005a5c <HAL_RCC_OscConfig+0x334>
 8005a7e:	e014      	b.n	8005aaa <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005a80:	f7fd fe82 	bl	8003788 <HAL_GetTick>
 8005a84:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005a86:	e00a      	b.n	8005a9e <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005a88:	f7fd fe7e 	bl	8003788 <HAL_GetTick>
 8005a8c:	4602      	mov	r2, r0
 8005a8e:	693b      	ldr	r3, [r7, #16]
 8005a90:	1ad3      	subs	r3, r2, r3
 8005a92:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005a96:	4293      	cmp	r3, r2
 8005a98:	d901      	bls.n	8005a9e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8005a9a:	2303      	movs	r3, #3
 8005a9c:	e0b5      	b.n	8005c0a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005a9e:	4b3e      	ldr	r3, [pc, #248]	@ (8005b98 <HAL_RCC_OscConfig+0x470>)
 8005aa0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005aa2:	f003 0302 	and.w	r3, r3, #2
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d1ee      	bne.n	8005a88 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005aaa:	7dfb      	ldrb	r3, [r7, #23]
 8005aac:	2b01      	cmp	r3, #1
 8005aae:	d105      	bne.n	8005abc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005ab0:	4b39      	ldr	r3, [pc, #228]	@ (8005b98 <HAL_RCC_OscConfig+0x470>)
 8005ab2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ab4:	4a38      	ldr	r2, [pc, #224]	@ (8005b98 <HAL_RCC_OscConfig+0x470>)
 8005ab6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005aba:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	699b      	ldr	r3, [r3, #24]
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	f000 80a1 	beq.w	8005c08 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005ac6:	4b34      	ldr	r3, [pc, #208]	@ (8005b98 <HAL_RCC_OscConfig+0x470>)
 8005ac8:	689b      	ldr	r3, [r3, #8]
 8005aca:	f003 030c 	and.w	r3, r3, #12
 8005ace:	2b08      	cmp	r3, #8
 8005ad0:	d05c      	beq.n	8005b8c <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	699b      	ldr	r3, [r3, #24]
 8005ad6:	2b02      	cmp	r3, #2
 8005ad8:	d141      	bne.n	8005b5e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005ada:	4b31      	ldr	r3, [pc, #196]	@ (8005ba0 <HAL_RCC_OscConfig+0x478>)
 8005adc:	2200      	movs	r2, #0
 8005ade:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005ae0:	f7fd fe52 	bl	8003788 <HAL_GetTick>
 8005ae4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005ae6:	e008      	b.n	8005afa <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005ae8:	f7fd fe4e 	bl	8003788 <HAL_GetTick>
 8005aec:	4602      	mov	r2, r0
 8005aee:	693b      	ldr	r3, [r7, #16]
 8005af0:	1ad3      	subs	r3, r2, r3
 8005af2:	2b02      	cmp	r3, #2
 8005af4:	d901      	bls.n	8005afa <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8005af6:	2303      	movs	r3, #3
 8005af8:	e087      	b.n	8005c0a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005afa:	4b27      	ldr	r3, [pc, #156]	@ (8005b98 <HAL_RCC_OscConfig+0x470>)
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d1f0      	bne.n	8005ae8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	69da      	ldr	r2, [r3, #28]
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	6a1b      	ldr	r3, [r3, #32]
 8005b0e:	431a      	orrs	r2, r3
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b14:	019b      	lsls	r3, r3, #6
 8005b16:	431a      	orrs	r2, r3
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b1c:	085b      	lsrs	r3, r3, #1
 8005b1e:	3b01      	subs	r3, #1
 8005b20:	041b      	lsls	r3, r3, #16
 8005b22:	431a      	orrs	r2, r3
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b28:	061b      	lsls	r3, r3, #24
 8005b2a:	491b      	ldr	r1, [pc, #108]	@ (8005b98 <HAL_RCC_OscConfig+0x470>)
 8005b2c:	4313      	orrs	r3, r2
 8005b2e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005b30:	4b1b      	ldr	r3, [pc, #108]	@ (8005ba0 <HAL_RCC_OscConfig+0x478>)
 8005b32:	2201      	movs	r2, #1
 8005b34:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005b36:	f7fd fe27 	bl	8003788 <HAL_GetTick>
 8005b3a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005b3c:	e008      	b.n	8005b50 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005b3e:	f7fd fe23 	bl	8003788 <HAL_GetTick>
 8005b42:	4602      	mov	r2, r0
 8005b44:	693b      	ldr	r3, [r7, #16]
 8005b46:	1ad3      	subs	r3, r2, r3
 8005b48:	2b02      	cmp	r3, #2
 8005b4a:	d901      	bls.n	8005b50 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005b4c:	2303      	movs	r3, #3
 8005b4e:	e05c      	b.n	8005c0a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005b50:	4b11      	ldr	r3, [pc, #68]	@ (8005b98 <HAL_RCC_OscConfig+0x470>)
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d0f0      	beq.n	8005b3e <HAL_RCC_OscConfig+0x416>
 8005b5c:	e054      	b.n	8005c08 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005b5e:	4b10      	ldr	r3, [pc, #64]	@ (8005ba0 <HAL_RCC_OscConfig+0x478>)
 8005b60:	2200      	movs	r2, #0
 8005b62:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005b64:	f7fd fe10 	bl	8003788 <HAL_GetTick>
 8005b68:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005b6a:	e008      	b.n	8005b7e <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005b6c:	f7fd fe0c 	bl	8003788 <HAL_GetTick>
 8005b70:	4602      	mov	r2, r0
 8005b72:	693b      	ldr	r3, [r7, #16]
 8005b74:	1ad3      	subs	r3, r2, r3
 8005b76:	2b02      	cmp	r3, #2
 8005b78:	d901      	bls.n	8005b7e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8005b7a:	2303      	movs	r3, #3
 8005b7c:	e045      	b.n	8005c0a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005b7e:	4b06      	ldr	r3, [pc, #24]	@ (8005b98 <HAL_RCC_OscConfig+0x470>)
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d1f0      	bne.n	8005b6c <HAL_RCC_OscConfig+0x444>
 8005b8a:	e03d      	b.n	8005c08 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	699b      	ldr	r3, [r3, #24]
 8005b90:	2b01      	cmp	r3, #1
 8005b92:	d107      	bne.n	8005ba4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005b94:	2301      	movs	r3, #1
 8005b96:	e038      	b.n	8005c0a <HAL_RCC_OscConfig+0x4e2>
 8005b98:	40023800 	.word	0x40023800
 8005b9c:	40007000 	.word	0x40007000
 8005ba0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005ba4:	4b1b      	ldr	r3, [pc, #108]	@ (8005c14 <HAL_RCC_OscConfig+0x4ec>)
 8005ba6:	685b      	ldr	r3, [r3, #4]
 8005ba8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	699b      	ldr	r3, [r3, #24]
 8005bae:	2b01      	cmp	r3, #1
 8005bb0:	d028      	beq.n	8005c04 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005bbc:	429a      	cmp	r2, r3
 8005bbe:	d121      	bne.n	8005c04 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005bca:	429a      	cmp	r2, r3
 8005bcc:	d11a      	bne.n	8005c04 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005bce:	68fa      	ldr	r2, [r7, #12]
 8005bd0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8005bd4:	4013      	ands	r3, r2
 8005bd6:	687a      	ldr	r2, [r7, #4]
 8005bd8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005bda:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005bdc:	4293      	cmp	r3, r2
 8005bde:	d111      	bne.n	8005c04 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005bea:	085b      	lsrs	r3, r3, #1
 8005bec:	3b01      	subs	r3, #1
 8005bee:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005bf0:	429a      	cmp	r2, r3
 8005bf2:	d107      	bne.n	8005c04 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005bfe:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005c00:	429a      	cmp	r2, r3
 8005c02:	d001      	beq.n	8005c08 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8005c04:	2301      	movs	r3, #1
 8005c06:	e000      	b.n	8005c0a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005c08:	2300      	movs	r3, #0
}
 8005c0a:	4618      	mov	r0, r3
 8005c0c:	3718      	adds	r7, #24
 8005c0e:	46bd      	mov	sp, r7
 8005c10:	bd80      	pop	{r7, pc}
 8005c12:	bf00      	nop
 8005c14:	40023800 	.word	0x40023800

08005c18 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005c18:	b580      	push	{r7, lr}
 8005c1a:	b084      	sub	sp, #16
 8005c1c:	af00      	add	r7, sp, #0
 8005c1e:	6078      	str	r0, [r7, #4]
 8005c20:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d101      	bne.n	8005c2c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005c28:	2301      	movs	r3, #1
 8005c2a:	e0cc      	b.n	8005dc6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005c2c:	4b68      	ldr	r3, [pc, #416]	@ (8005dd0 <HAL_RCC_ClockConfig+0x1b8>)
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	f003 030f 	and.w	r3, r3, #15
 8005c34:	683a      	ldr	r2, [r7, #0]
 8005c36:	429a      	cmp	r2, r3
 8005c38:	d90c      	bls.n	8005c54 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005c3a:	4b65      	ldr	r3, [pc, #404]	@ (8005dd0 <HAL_RCC_ClockConfig+0x1b8>)
 8005c3c:	683a      	ldr	r2, [r7, #0]
 8005c3e:	b2d2      	uxtb	r2, r2
 8005c40:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005c42:	4b63      	ldr	r3, [pc, #396]	@ (8005dd0 <HAL_RCC_ClockConfig+0x1b8>)
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	f003 030f 	and.w	r3, r3, #15
 8005c4a:	683a      	ldr	r2, [r7, #0]
 8005c4c:	429a      	cmp	r2, r3
 8005c4e:	d001      	beq.n	8005c54 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005c50:	2301      	movs	r3, #1
 8005c52:	e0b8      	b.n	8005dc6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	f003 0302 	and.w	r3, r3, #2
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d020      	beq.n	8005ca2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	f003 0304 	and.w	r3, r3, #4
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d005      	beq.n	8005c78 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005c6c:	4b59      	ldr	r3, [pc, #356]	@ (8005dd4 <HAL_RCC_ClockConfig+0x1bc>)
 8005c6e:	689b      	ldr	r3, [r3, #8]
 8005c70:	4a58      	ldr	r2, [pc, #352]	@ (8005dd4 <HAL_RCC_ClockConfig+0x1bc>)
 8005c72:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8005c76:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	f003 0308 	and.w	r3, r3, #8
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d005      	beq.n	8005c90 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005c84:	4b53      	ldr	r3, [pc, #332]	@ (8005dd4 <HAL_RCC_ClockConfig+0x1bc>)
 8005c86:	689b      	ldr	r3, [r3, #8]
 8005c88:	4a52      	ldr	r2, [pc, #328]	@ (8005dd4 <HAL_RCC_ClockConfig+0x1bc>)
 8005c8a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8005c8e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005c90:	4b50      	ldr	r3, [pc, #320]	@ (8005dd4 <HAL_RCC_ClockConfig+0x1bc>)
 8005c92:	689b      	ldr	r3, [r3, #8]
 8005c94:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	689b      	ldr	r3, [r3, #8]
 8005c9c:	494d      	ldr	r1, [pc, #308]	@ (8005dd4 <HAL_RCC_ClockConfig+0x1bc>)
 8005c9e:	4313      	orrs	r3, r2
 8005ca0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	f003 0301 	and.w	r3, r3, #1
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d044      	beq.n	8005d38 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	685b      	ldr	r3, [r3, #4]
 8005cb2:	2b01      	cmp	r3, #1
 8005cb4:	d107      	bne.n	8005cc6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005cb6:	4b47      	ldr	r3, [pc, #284]	@ (8005dd4 <HAL_RCC_ClockConfig+0x1bc>)
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d119      	bne.n	8005cf6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005cc2:	2301      	movs	r3, #1
 8005cc4:	e07f      	b.n	8005dc6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	685b      	ldr	r3, [r3, #4]
 8005cca:	2b02      	cmp	r3, #2
 8005ccc:	d003      	beq.n	8005cd6 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005cd2:	2b03      	cmp	r3, #3
 8005cd4:	d107      	bne.n	8005ce6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005cd6:	4b3f      	ldr	r3, [pc, #252]	@ (8005dd4 <HAL_RCC_ClockConfig+0x1bc>)
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d109      	bne.n	8005cf6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005ce2:	2301      	movs	r3, #1
 8005ce4:	e06f      	b.n	8005dc6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005ce6:	4b3b      	ldr	r3, [pc, #236]	@ (8005dd4 <HAL_RCC_ClockConfig+0x1bc>)
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	f003 0302 	and.w	r3, r3, #2
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d101      	bne.n	8005cf6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005cf2:	2301      	movs	r3, #1
 8005cf4:	e067      	b.n	8005dc6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005cf6:	4b37      	ldr	r3, [pc, #220]	@ (8005dd4 <HAL_RCC_ClockConfig+0x1bc>)
 8005cf8:	689b      	ldr	r3, [r3, #8]
 8005cfa:	f023 0203 	bic.w	r2, r3, #3
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	685b      	ldr	r3, [r3, #4]
 8005d02:	4934      	ldr	r1, [pc, #208]	@ (8005dd4 <HAL_RCC_ClockConfig+0x1bc>)
 8005d04:	4313      	orrs	r3, r2
 8005d06:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005d08:	f7fd fd3e 	bl	8003788 <HAL_GetTick>
 8005d0c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005d0e:	e00a      	b.n	8005d26 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005d10:	f7fd fd3a 	bl	8003788 <HAL_GetTick>
 8005d14:	4602      	mov	r2, r0
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	1ad3      	subs	r3, r2, r3
 8005d1a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005d1e:	4293      	cmp	r3, r2
 8005d20:	d901      	bls.n	8005d26 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005d22:	2303      	movs	r3, #3
 8005d24:	e04f      	b.n	8005dc6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005d26:	4b2b      	ldr	r3, [pc, #172]	@ (8005dd4 <HAL_RCC_ClockConfig+0x1bc>)
 8005d28:	689b      	ldr	r3, [r3, #8]
 8005d2a:	f003 020c 	and.w	r2, r3, #12
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	685b      	ldr	r3, [r3, #4]
 8005d32:	009b      	lsls	r3, r3, #2
 8005d34:	429a      	cmp	r2, r3
 8005d36:	d1eb      	bne.n	8005d10 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005d38:	4b25      	ldr	r3, [pc, #148]	@ (8005dd0 <HAL_RCC_ClockConfig+0x1b8>)
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	f003 030f 	and.w	r3, r3, #15
 8005d40:	683a      	ldr	r2, [r7, #0]
 8005d42:	429a      	cmp	r2, r3
 8005d44:	d20c      	bcs.n	8005d60 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005d46:	4b22      	ldr	r3, [pc, #136]	@ (8005dd0 <HAL_RCC_ClockConfig+0x1b8>)
 8005d48:	683a      	ldr	r2, [r7, #0]
 8005d4a:	b2d2      	uxtb	r2, r2
 8005d4c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005d4e:	4b20      	ldr	r3, [pc, #128]	@ (8005dd0 <HAL_RCC_ClockConfig+0x1b8>)
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	f003 030f 	and.w	r3, r3, #15
 8005d56:	683a      	ldr	r2, [r7, #0]
 8005d58:	429a      	cmp	r2, r3
 8005d5a:	d001      	beq.n	8005d60 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005d5c:	2301      	movs	r3, #1
 8005d5e:	e032      	b.n	8005dc6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	f003 0304 	and.w	r3, r3, #4
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d008      	beq.n	8005d7e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005d6c:	4b19      	ldr	r3, [pc, #100]	@ (8005dd4 <HAL_RCC_ClockConfig+0x1bc>)
 8005d6e:	689b      	ldr	r3, [r3, #8]
 8005d70:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	68db      	ldr	r3, [r3, #12]
 8005d78:	4916      	ldr	r1, [pc, #88]	@ (8005dd4 <HAL_RCC_ClockConfig+0x1bc>)
 8005d7a:	4313      	orrs	r3, r2
 8005d7c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	f003 0308 	and.w	r3, r3, #8
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d009      	beq.n	8005d9e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005d8a:	4b12      	ldr	r3, [pc, #72]	@ (8005dd4 <HAL_RCC_ClockConfig+0x1bc>)
 8005d8c:	689b      	ldr	r3, [r3, #8]
 8005d8e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	691b      	ldr	r3, [r3, #16]
 8005d96:	00db      	lsls	r3, r3, #3
 8005d98:	490e      	ldr	r1, [pc, #56]	@ (8005dd4 <HAL_RCC_ClockConfig+0x1bc>)
 8005d9a:	4313      	orrs	r3, r2
 8005d9c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005d9e:	f000 f821 	bl	8005de4 <HAL_RCC_GetSysClockFreq>
 8005da2:	4602      	mov	r2, r0
 8005da4:	4b0b      	ldr	r3, [pc, #44]	@ (8005dd4 <HAL_RCC_ClockConfig+0x1bc>)
 8005da6:	689b      	ldr	r3, [r3, #8]
 8005da8:	091b      	lsrs	r3, r3, #4
 8005daa:	f003 030f 	and.w	r3, r3, #15
 8005dae:	490a      	ldr	r1, [pc, #40]	@ (8005dd8 <HAL_RCC_ClockConfig+0x1c0>)
 8005db0:	5ccb      	ldrb	r3, [r1, r3]
 8005db2:	fa22 f303 	lsr.w	r3, r2, r3
 8005db6:	4a09      	ldr	r2, [pc, #36]	@ (8005ddc <HAL_RCC_ClockConfig+0x1c4>)
 8005db8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8005dba:	4b09      	ldr	r3, [pc, #36]	@ (8005de0 <HAL_RCC_ClockConfig+0x1c8>)
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	4618      	mov	r0, r3
 8005dc0:	f7fd fc9e 	bl	8003700 <HAL_InitTick>

  return HAL_OK;
 8005dc4:	2300      	movs	r3, #0
}
 8005dc6:	4618      	mov	r0, r3
 8005dc8:	3710      	adds	r7, #16
 8005dca:	46bd      	mov	sp, r7
 8005dcc:	bd80      	pop	{r7, pc}
 8005dce:	bf00      	nop
 8005dd0:	40023c00 	.word	0x40023c00
 8005dd4:	40023800 	.word	0x40023800
 8005dd8:	080093bc 	.word	0x080093bc
 8005ddc:	20000014 	.word	0x20000014
 8005de0:	20000018 	.word	0x20000018

08005de4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005de4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005de8:	b094      	sub	sp, #80	@ 0x50
 8005dea:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8005dec:	2300      	movs	r3, #0
 8005dee:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8005df0:	2300      	movs	r3, #0
 8005df2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8005df4:	2300      	movs	r3, #0
 8005df6:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8005df8:	2300      	movs	r3, #0
 8005dfa:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005dfc:	4b79      	ldr	r3, [pc, #484]	@ (8005fe4 <HAL_RCC_GetSysClockFreq+0x200>)
 8005dfe:	689b      	ldr	r3, [r3, #8]
 8005e00:	f003 030c 	and.w	r3, r3, #12
 8005e04:	2b08      	cmp	r3, #8
 8005e06:	d00d      	beq.n	8005e24 <HAL_RCC_GetSysClockFreq+0x40>
 8005e08:	2b08      	cmp	r3, #8
 8005e0a:	f200 80e1 	bhi.w	8005fd0 <HAL_RCC_GetSysClockFreq+0x1ec>
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d002      	beq.n	8005e18 <HAL_RCC_GetSysClockFreq+0x34>
 8005e12:	2b04      	cmp	r3, #4
 8005e14:	d003      	beq.n	8005e1e <HAL_RCC_GetSysClockFreq+0x3a>
 8005e16:	e0db      	b.n	8005fd0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005e18:	4b73      	ldr	r3, [pc, #460]	@ (8005fe8 <HAL_RCC_GetSysClockFreq+0x204>)
 8005e1a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005e1c:	e0db      	b.n	8005fd6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005e1e:	4b73      	ldr	r3, [pc, #460]	@ (8005fec <HAL_RCC_GetSysClockFreq+0x208>)
 8005e20:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005e22:	e0d8      	b.n	8005fd6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005e24:	4b6f      	ldr	r3, [pc, #444]	@ (8005fe4 <HAL_RCC_GetSysClockFreq+0x200>)
 8005e26:	685b      	ldr	r3, [r3, #4]
 8005e28:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005e2c:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005e2e:	4b6d      	ldr	r3, [pc, #436]	@ (8005fe4 <HAL_RCC_GetSysClockFreq+0x200>)
 8005e30:	685b      	ldr	r3, [r3, #4]
 8005e32:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d063      	beq.n	8005f02 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005e3a:	4b6a      	ldr	r3, [pc, #424]	@ (8005fe4 <HAL_RCC_GetSysClockFreq+0x200>)
 8005e3c:	685b      	ldr	r3, [r3, #4]
 8005e3e:	099b      	lsrs	r3, r3, #6
 8005e40:	2200      	movs	r2, #0
 8005e42:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005e44:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8005e46:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e48:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005e4c:	633b      	str	r3, [r7, #48]	@ 0x30
 8005e4e:	2300      	movs	r3, #0
 8005e50:	637b      	str	r3, [r7, #52]	@ 0x34
 8005e52:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8005e56:	4622      	mov	r2, r4
 8005e58:	462b      	mov	r3, r5
 8005e5a:	f04f 0000 	mov.w	r0, #0
 8005e5e:	f04f 0100 	mov.w	r1, #0
 8005e62:	0159      	lsls	r1, r3, #5
 8005e64:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005e68:	0150      	lsls	r0, r2, #5
 8005e6a:	4602      	mov	r2, r0
 8005e6c:	460b      	mov	r3, r1
 8005e6e:	4621      	mov	r1, r4
 8005e70:	1a51      	subs	r1, r2, r1
 8005e72:	6139      	str	r1, [r7, #16]
 8005e74:	4629      	mov	r1, r5
 8005e76:	eb63 0301 	sbc.w	r3, r3, r1
 8005e7a:	617b      	str	r3, [r7, #20]
 8005e7c:	f04f 0200 	mov.w	r2, #0
 8005e80:	f04f 0300 	mov.w	r3, #0
 8005e84:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005e88:	4659      	mov	r1, fp
 8005e8a:	018b      	lsls	r3, r1, #6
 8005e8c:	4651      	mov	r1, sl
 8005e8e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005e92:	4651      	mov	r1, sl
 8005e94:	018a      	lsls	r2, r1, #6
 8005e96:	4651      	mov	r1, sl
 8005e98:	ebb2 0801 	subs.w	r8, r2, r1
 8005e9c:	4659      	mov	r1, fp
 8005e9e:	eb63 0901 	sbc.w	r9, r3, r1
 8005ea2:	f04f 0200 	mov.w	r2, #0
 8005ea6:	f04f 0300 	mov.w	r3, #0
 8005eaa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005eae:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005eb2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005eb6:	4690      	mov	r8, r2
 8005eb8:	4699      	mov	r9, r3
 8005eba:	4623      	mov	r3, r4
 8005ebc:	eb18 0303 	adds.w	r3, r8, r3
 8005ec0:	60bb      	str	r3, [r7, #8]
 8005ec2:	462b      	mov	r3, r5
 8005ec4:	eb49 0303 	adc.w	r3, r9, r3
 8005ec8:	60fb      	str	r3, [r7, #12]
 8005eca:	f04f 0200 	mov.w	r2, #0
 8005ece:	f04f 0300 	mov.w	r3, #0
 8005ed2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8005ed6:	4629      	mov	r1, r5
 8005ed8:	024b      	lsls	r3, r1, #9
 8005eda:	4621      	mov	r1, r4
 8005edc:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005ee0:	4621      	mov	r1, r4
 8005ee2:	024a      	lsls	r2, r1, #9
 8005ee4:	4610      	mov	r0, r2
 8005ee6:	4619      	mov	r1, r3
 8005ee8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005eea:	2200      	movs	r2, #0
 8005eec:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005eee:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005ef0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005ef4:	f7fa f9cc 	bl	8000290 <__aeabi_uldivmod>
 8005ef8:	4602      	mov	r2, r0
 8005efa:	460b      	mov	r3, r1
 8005efc:	4613      	mov	r3, r2
 8005efe:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005f00:	e058      	b.n	8005fb4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005f02:	4b38      	ldr	r3, [pc, #224]	@ (8005fe4 <HAL_RCC_GetSysClockFreq+0x200>)
 8005f04:	685b      	ldr	r3, [r3, #4]
 8005f06:	099b      	lsrs	r3, r3, #6
 8005f08:	2200      	movs	r2, #0
 8005f0a:	4618      	mov	r0, r3
 8005f0c:	4611      	mov	r1, r2
 8005f0e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005f12:	623b      	str	r3, [r7, #32]
 8005f14:	2300      	movs	r3, #0
 8005f16:	627b      	str	r3, [r7, #36]	@ 0x24
 8005f18:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005f1c:	4642      	mov	r2, r8
 8005f1e:	464b      	mov	r3, r9
 8005f20:	f04f 0000 	mov.w	r0, #0
 8005f24:	f04f 0100 	mov.w	r1, #0
 8005f28:	0159      	lsls	r1, r3, #5
 8005f2a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005f2e:	0150      	lsls	r0, r2, #5
 8005f30:	4602      	mov	r2, r0
 8005f32:	460b      	mov	r3, r1
 8005f34:	4641      	mov	r1, r8
 8005f36:	ebb2 0a01 	subs.w	sl, r2, r1
 8005f3a:	4649      	mov	r1, r9
 8005f3c:	eb63 0b01 	sbc.w	fp, r3, r1
 8005f40:	f04f 0200 	mov.w	r2, #0
 8005f44:	f04f 0300 	mov.w	r3, #0
 8005f48:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005f4c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005f50:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005f54:	ebb2 040a 	subs.w	r4, r2, sl
 8005f58:	eb63 050b 	sbc.w	r5, r3, fp
 8005f5c:	f04f 0200 	mov.w	r2, #0
 8005f60:	f04f 0300 	mov.w	r3, #0
 8005f64:	00eb      	lsls	r3, r5, #3
 8005f66:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005f6a:	00e2      	lsls	r2, r4, #3
 8005f6c:	4614      	mov	r4, r2
 8005f6e:	461d      	mov	r5, r3
 8005f70:	4643      	mov	r3, r8
 8005f72:	18e3      	adds	r3, r4, r3
 8005f74:	603b      	str	r3, [r7, #0]
 8005f76:	464b      	mov	r3, r9
 8005f78:	eb45 0303 	adc.w	r3, r5, r3
 8005f7c:	607b      	str	r3, [r7, #4]
 8005f7e:	f04f 0200 	mov.w	r2, #0
 8005f82:	f04f 0300 	mov.w	r3, #0
 8005f86:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005f8a:	4629      	mov	r1, r5
 8005f8c:	028b      	lsls	r3, r1, #10
 8005f8e:	4621      	mov	r1, r4
 8005f90:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005f94:	4621      	mov	r1, r4
 8005f96:	028a      	lsls	r2, r1, #10
 8005f98:	4610      	mov	r0, r2
 8005f9a:	4619      	mov	r1, r3
 8005f9c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005f9e:	2200      	movs	r2, #0
 8005fa0:	61bb      	str	r3, [r7, #24]
 8005fa2:	61fa      	str	r2, [r7, #28]
 8005fa4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005fa8:	f7fa f972 	bl	8000290 <__aeabi_uldivmod>
 8005fac:	4602      	mov	r2, r0
 8005fae:	460b      	mov	r3, r1
 8005fb0:	4613      	mov	r3, r2
 8005fb2:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8005fb4:	4b0b      	ldr	r3, [pc, #44]	@ (8005fe4 <HAL_RCC_GetSysClockFreq+0x200>)
 8005fb6:	685b      	ldr	r3, [r3, #4]
 8005fb8:	0c1b      	lsrs	r3, r3, #16
 8005fba:	f003 0303 	and.w	r3, r3, #3
 8005fbe:	3301      	adds	r3, #1
 8005fc0:	005b      	lsls	r3, r3, #1
 8005fc2:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8005fc4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005fc6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005fc8:	fbb2 f3f3 	udiv	r3, r2, r3
 8005fcc:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005fce:	e002      	b.n	8005fd6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005fd0:	4b05      	ldr	r3, [pc, #20]	@ (8005fe8 <HAL_RCC_GetSysClockFreq+0x204>)
 8005fd2:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005fd4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005fd6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8005fd8:	4618      	mov	r0, r3
 8005fda:	3750      	adds	r7, #80	@ 0x50
 8005fdc:	46bd      	mov	sp, r7
 8005fde:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005fe2:	bf00      	nop
 8005fe4:	40023800 	.word	0x40023800
 8005fe8:	00f42400 	.word	0x00f42400
 8005fec:	007a1200 	.word	0x007a1200

08005ff0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005ff0:	b480      	push	{r7}
 8005ff2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005ff4:	4b03      	ldr	r3, [pc, #12]	@ (8006004 <HAL_RCC_GetHCLKFreq+0x14>)
 8005ff6:	681b      	ldr	r3, [r3, #0]
}
 8005ff8:	4618      	mov	r0, r3
 8005ffa:	46bd      	mov	sp, r7
 8005ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006000:	4770      	bx	lr
 8006002:	bf00      	nop
 8006004:	20000014 	.word	0x20000014

08006008 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006008:	b580      	push	{r7, lr}
 800600a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800600c:	f7ff fff0 	bl	8005ff0 <HAL_RCC_GetHCLKFreq>
 8006010:	4602      	mov	r2, r0
 8006012:	4b05      	ldr	r3, [pc, #20]	@ (8006028 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006014:	689b      	ldr	r3, [r3, #8]
 8006016:	0a9b      	lsrs	r3, r3, #10
 8006018:	f003 0307 	and.w	r3, r3, #7
 800601c:	4903      	ldr	r1, [pc, #12]	@ (800602c <HAL_RCC_GetPCLK1Freq+0x24>)
 800601e:	5ccb      	ldrb	r3, [r1, r3]
 8006020:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006024:	4618      	mov	r0, r3
 8006026:	bd80      	pop	{r7, pc}
 8006028:	40023800 	.word	0x40023800
 800602c:	080093cc 	.word	0x080093cc

08006030 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006030:	b580      	push	{r7, lr}
 8006032:	b086      	sub	sp, #24
 8006034:	af00      	add	r7, sp, #0
 8006036:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006038:	2300      	movs	r3, #0
 800603a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 800603c:	2300      	movs	r3, #0
 800603e:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	f003 0301 	and.w	r3, r3, #1
 8006048:	2b00      	cmp	r3, #0
 800604a:	d10b      	bne.n	8006064 <HAL_RCCEx_PeriphCLKConfig+0x34>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	f003 0302 	and.w	r3, r3, #2
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8006054:	2b00      	cmp	r3, #0
 8006056:	d105      	bne.n	8006064 <HAL_RCCEx_PeriphCLKConfig+0x34>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8006060:	2b00      	cmp	r3, #0
 8006062:	d075      	beq.n	8006150 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8006064:	4b91      	ldr	r3, [pc, #580]	@ (80062ac <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8006066:	2200      	movs	r2, #0
 8006068:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800606a:	f7fd fb8d 	bl	8003788 <HAL_GetTick>
 800606e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006070:	e008      	b.n	8006084 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8006072:	f7fd fb89 	bl	8003788 <HAL_GetTick>
 8006076:	4602      	mov	r2, r0
 8006078:	697b      	ldr	r3, [r7, #20]
 800607a:	1ad3      	subs	r3, r2, r3
 800607c:	2b02      	cmp	r3, #2
 800607e:	d901      	bls.n	8006084 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006080:	2303      	movs	r3, #3
 8006082:	e189      	b.n	8006398 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006084:	4b8a      	ldr	r3, [pc, #552]	@ (80062b0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800608c:	2b00      	cmp	r3, #0
 800608e:	d1f0      	bne.n	8006072 <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	f003 0301 	and.w	r3, r3, #1
 8006098:	2b00      	cmp	r3, #0
 800609a:	d009      	beq.n	80060b0 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	685b      	ldr	r3, [r3, #4]
 80060a0:	019a      	lsls	r2, r3, #6
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	689b      	ldr	r3, [r3, #8]
 80060a6:	071b      	lsls	r3, r3, #28
 80060a8:	4981      	ldr	r1, [pc, #516]	@ (80062b0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80060aa:	4313      	orrs	r3, r2
 80060ac:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	f003 0302 	and.w	r3, r3, #2
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d01f      	beq.n	80060fc <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80060bc:	4b7c      	ldr	r3, [pc, #496]	@ (80062b0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80060be:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80060c2:	0f1b      	lsrs	r3, r3, #28
 80060c4:	f003 0307 	and.w	r3, r3, #7
 80060c8:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	685b      	ldr	r3, [r3, #4]
 80060ce:	019a      	lsls	r2, r3, #6
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	68db      	ldr	r3, [r3, #12]
 80060d4:	061b      	lsls	r3, r3, #24
 80060d6:	431a      	orrs	r2, r3
 80060d8:	693b      	ldr	r3, [r7, #16]
 80060da:	071b      	lsls	r3, r3, #28
 80060dc:	4974      	ldr	r1, [pc, #464]	@ (80062b0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80060de:	4313      	orrs	r3, r2
 80060e0:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80060e4:	4b72      	ldr	r3, [pc, #456]	@ (80062b0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80060e6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80060ea:	f023 021f 	bic.w	r2, r3, #31
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	69db      	ldr	r3, [r3, #28]
 80060f2:	3b01      	subs	r3, #1
 80060f4:	496e      	ldr	r1, [pc, #440]	@ (80062b0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80060f6:	4313      	orrs	r3, r2
 80060f8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006104:	2b00      	cmp	r3, #0
 8006106:	d00d      	beq.n	8006124 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ,
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	685b      	ldr	r3, [r3, #4]
 800610c:	019a      	lsls	r2, r3, #6
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	68db      	ldr	r3, [r3, #12]
 8006112:	061b      	lsls	r3, r3, #24
 8006114:	431a      	orrs	r2, r3
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	689b      	ldr	r3, [r3, #8]
 800611a:	071b      	lsls	r3, r3, #28
 800611c:	4964      	ldr	r1, [pc, #400]	@ (80062b0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800611e:	4313      	orrs	r3, r2
 8006120:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                                     PeriphClkInit->PLLI2S.PLLI2SR);
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8006124:	4b61      	ldr	r3, [pc, #388]	@ (80062ac <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8006126:	2201      	movs	r2, #1
 8006128:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800612a:	f7fd fb2d 	bl	8003788 <HAL_GetTick>
 800612e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006130:	e008      	b.n	8006144 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8006132:	f7fd fb29 	bl	8003788 <HAL_GetTick>
 8006136:	4602      	mov	r2, r0
 8006138:	697b      	ldr	r3, [r7, #20]
 800613a:	1ad3      	subs	r3, r2, r3
 800613c:	2b02      	cmp	r3, #2
 800613e:	d901      	bls.n	8006144 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006140:	2303      	movs	r3, #3
 8006142:	e129      	b.n	8006398 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006144:	4b5a      	ldr	r3, [pc, #360]	@ (80062b0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800614c:	2b00      	cmp	r3, #0
 800614e:	d0f0      	beq.n	8006132 <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	f003 0304 	and.w	r3, r3, #4
 8006158:	2b00      	cmp	r3, #0
 800615a:	d105      	bne.n	8006168 <HAL_RCCEx_PeriphCLKConfig+0x138>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	f003 0308 	and.w	r3, r3, #8
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8006164:	2b00      	cmp	r3, #0
 8006166:	d079      	beq.n	800625c <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8006168:	4b52      	ldr	r3, [pc, #328]	@ (80062b4 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 800616a:	2200      	movs	r2, #0
 800616c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800616e:	f7fd fb0b 	bl	8003788 <HAL_GetTick>
 8006172:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006174:	e008      	b.n	8006188 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8006176:	f7fd fb07 	bl	8003788 <HAL_GetTick>
 800617a:	4602      	mov	r2, r0
 800617c:	697b      	ldr	r3, [r7, #20]
 800617e:	1ad3      	subs	r3, r2, r3
 8006180:	2b02      	cmp	r3, #2
 8006182:	d901      	bls.n	8006188 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006184:	2303      	movs	r3, #3
 8006186:	e107      	b.n	8006398 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006188:	4b49      	ldr	r3, [pc, #292]	@ (80062b0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006190:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006194:	d0ef      	beq.n	8006176 <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	f003 0304 	and.w	r3, r3, #4
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d020      	beq.n	80061e4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80061a2:	4b43      	ldr	r3, [pc, #268]	@ (80062b0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80061a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80061a8:	0f1b      	lsrs	r3, r3, #28
 80061aa:	f003 0307 	and.w	r3, r3, #7
 80061ae:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	691b      	ldr	r3, [r3, #16]
 80061b4:	019a      	lsls	r2, r3, #6
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	695b      	ldr	r3, [r3, #20]
 80061ba:	061b      	lsls	r3, r3, #24
 80061bc:	431a      	orrs	r2, r3
 80061be:	693b      	ldr	r3, [r7, #16]
 80061c0:	071b      	lsls	r3, r3, #28
 80061c2:	493b      	ldr	r1, [pc, #236]	@ (80062b0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80061c4:	4313      	orrs	r3, r2
 80061c6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80061ca:	4b39      	ldr	r3, [pc, #228]	@ (80062b0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80061cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80061d0:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	6a1b      	ldr	r3, [r3, #32]
 80061d8:	3b01      	subs	r3, #1
 80061da:	021b      	lsls	r3, r3, #8
 80061dc:	4934      	ldr	r1, [pc, #208]	@ (80062b0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80061de:	4313      	orrs	r3, r2
 80061e0:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	f003 0308 	and.w	r3, r3, #8
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d01e      	beq.n	800622e <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80061f0:	4b2f      	ldr	r3, [pc, #188]	@ (80062b0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80061f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80061f6:	0e1b      	lsrs	r3, r3, #24
 80061f8:	f003 030f 	and.w	r3, r3, #15
 80061fc:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	691b      	ldr	r3, [r3, #16]
 8006202:	019a      	lsls	r2, r3, #6
 8006204:	693b      	ldr	r3, [r7, #16]
 8006206:	061b      	lsls	r3, r3, #24
 8006208:	431a      	orrs	r2, r3
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	699b      	ldr	r3, [r3, #24]
 800620e:	071b      	lsls	r3, r3, #28
 8006210:	4927      	ldr	r1, [pc, #156]	@ (80062b0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006212:	4313      	orrs	r3, r2
 8006214:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8006218:	4b25      	ldr	r3, [pc, #148]	@ (80062b0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800621a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800621e:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006226:	4922      	ldr	r1, [pc, #136]	@ (80062b0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006228:	4313      	orrs	r3, r2
 800622a:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800622e:	4b21      	ldr	r3, [pc, #132]	@ (80062b4 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8006230:	2201      	movs	r2, #1
 8006232:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006234:	f7fd faa8 	bl	8003788 <HAL_GetTick>
 8006238:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800623a:	e008      	b.n	800624e <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800623c:	f7fd faa4 	bl	8003788 <HAL_GetTick>
 8006240:	4602      	mov	r2, r0
 8006242:	697b      	ldr	r3, [r7, #20]
 8006244:	1ad3      	subs	r3, r2, r3
 8006246:	2b02      	cmp	r3, #2
 8006248:	d901      	bls.n	800624e <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800624a:	2303      	movs	r3, #3
 800624c:	e0a4      	b.n	8006398 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800624e:	4b18      	ldr	r3, [pc, #96]	@ (80062b0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006256:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800625a:	d1ef      	bne.n	800623c <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	f003 0320 	and.w	r3, r3, #32
 8006264:	2b00      	cmp	r3, #0
 8006266:	f000 808b 	beq.w	8006380 <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800626a:	2300      	movs	r3, #0
 800626c:	60fb      	str	r3, [r7, #12]
 800626e:	4b10      	ldr	r3, [pc, #64]	@ (80062b0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006270:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006272:	4a0f      	ldr	r2, [pc, #60]	@ (80062b0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006274:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006278:	6413      	str	r3, [r2, #64]	@ 0x40
 800627a:	4b0d      	ldr	r3, [pc, #52]	@ (80062b0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800627c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800627e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006282:	60fb      	str	r3, [r7, #12]
 8006284:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8006286:	4b0c      	ldr	r3, [pc, #48]	@ (80062b8 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	4a0b      	ldr	r2, [pc, #44]	@ (80062b8 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 800628c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006290:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8006292:	f7fd fa79 	bl	8003788 <HAL_GetTick>
 8006296:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8006298:	e010      	b.n	80062bc <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800629a:	f7fd fa75 	bl	8003788 <HAL_GetTick>
 800629e:	4602      	mov	r2, r0
 80062a0:	697b      	ldr	r3, [r7, #20]
 80062a2:	1ad3      	subs	r3, r2, r3
 80062a4:	2b02      	cmp	r3, #2
 80062a6:	d909      	bls.n	80062bc <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 80062a8:	2303      	movs	r3, #3
 80062aa:	e075      	b.n	8006398 <HAL_RCCEx_PeriphCLKConfig+0x368>
 80062ac:	42470068 	.word	0x42470068
 80062b0:	40023800 	.word	0x40023800
 80062b4:	42470070 	.word	0x42470070
 80062b8:	40007000 	.word	0x40007000
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 80062bc:	4b38      	ldr	r3, [pc, #224]	@ (80063a0 <HAL_RCCEx_PeriphCLKConfig+0x370>)
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d0e8      	beq.n	800629a <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80062c8:	4b36      	ldr	r3, [pc, #216]	@ (80063a4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80062ca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80062cc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80062d0:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80062d2:	693b      	ldr	r3, [r7, #16]
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d02f      	beq.n	8006338 <HAL_RCCEx_PeriphCLKConfig+0x308>
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80062dc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80062e0:	693a      	ldr	r2, [r7, #16]
 80062e2:	429a      	cmp	r2, r3
 80062e4:	d028      	beq.n	8006338 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80062e6:	4b2f      	ldr	r3, [pc, #188]	@ (80063a4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80062e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80062ea:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80062ee:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80062f0:	4b2d      	ldr	r3, [pc, #180]	@ (80063a8 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 80062f2:	2201      	movs	r2, #1
 80062f4:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80062f6:	4b2c      	ldr	r3, [pc, #176]	@ (80063a8 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 80062f8:	2200      	movs	r2, #0
 80062fa:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80062fc:	4a29      	ldr	r2, [pc, #164]	@ (80063a4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80062fe:	693b      	ldr	r3, [r7, #16]
 8006300:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8006302:	4b28      	ldr	r3, [pc, #160]	@ (80063a4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006304:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006306:	f003 0301 	and.w	r3, r3, #1
 800630a:	2b01      	cmp	r3, #1
 800630c:	d114      	bne.n	8006338 <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800630e:	f7fd fa3b 	bl	8003788 <HAL_GetTick>
 8006312:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006314:	e00a      	b.n	800632c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006316:	f7fd fa37 	bl	8003788 <HAL_GetTick>
 800631a:	4602      	mov	r2, r0
 800631c:	697b      	ldr	r3, [r7, #20]
 800631e:	1ad3      	subs	r3, r2, r3
 8006320:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006324:	4293      	cmp	r3, r2
 8006326:	d901      	bls.n	800632c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 8006328:	2303      	movs	r3, #3
 800632a:	e035      	b.n	8006398 <HAL_RCCEx_PeriphCLKConfig+0x368>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800632c:	4b1d      	ldr	r3, [pc, #116]	@ (80063a4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800632e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006330:	f003 0302 	and.w	r3, r3, #2
 8006334:	2b00      	cmp	r3, #0
 8006336:	d0ee      	beq.n	8006316 <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800633c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006340:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006344:	d10d      	bne.n	8006362 <HAL_RCCEx_PeriphCLKConfig+0x332>
 8006346:	4b17      	ldr	r3, [pc, #92]	@ (80063a4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006348:	689b      	ldr	r3, [r3, #8]
 800634a:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006352:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8006356:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800635a:	4912      	ldr	r1, [pc, #72]	@ (80063a4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800635c:	4313      	orrs	r3, r2
 800635e:	608b      	str	r3, [r1, #8]
 8006360:	e005      	b.n	800636e <HAL_RCCEx_PeriphCLKConfig+0x33e>
 8006362:	4b10      	ldr	r3, [pc, #64]	@ (80063a4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006364:	689b      	ldr	r3, [r3, #8]
 8006366:	4a0f      	ldr	r2, [pc, #60]	@ (80063a4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006368:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 800636c:	6093      	str	r3, [r2, #8]
 800636e:	4b0d      	ldr	r3, [pc, #52]	@ (80063a4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006370:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006376:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800637a:	490a      	ldr	r1, [pc, #40]	@ (80063a4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800637c:	4313      	orrs	r3, r2
 800637e:	670b      	str	r3, [r1, #112]	@ 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	f003 0310 	and.w	r3, r3, #16
 8006388:	2b00      	cmp	r3, #0
 800638a:	d004      	beq.n	8006396 <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	f893 202c 	ldrb.w	r2, [r3, #44]	@ 0x2c
 8006392:	4b06      	ldr	r3, [pc, #24]	@ (80063ac <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 8006394:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 8006396:	2300      	movs	r3, #0
}
 8006398:	4618      	mov	r0, r3
 800639a:	3718      	adds	r7, #24
 800639c:	46bd      	mov	sp, r7
 800639e:	bd80      	pop	{r7, pc}
 80063a0:	40007000 	.word	0x40007000
 80063a4:	40023800 	.word	0x40023800
 80063a8:	42470e40 	.word	0x42470e40
 80063ac:	424711e0 	.word	0x424711e0

080063b0 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 80063b0:	b580      	push	{r7, lr}
 80063b2:	b082      	sub	sp, #8
 80063b4:	af00      	add	r7, sp, #0
 80063b6:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d101      	bne.n	80063c2 <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 80063be:	2301      	movs	r3, #1
 80063c0:	e01c      	b.n	80063fc <HAL_RNG_Init+0x4c>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	795b      	ldrb	r3, [r3, #5]
 80063c6:	b2db      	uxtb	r3, r3
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d105      	bne.n	80063d8 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	2200      	movs	r2, #0
 80063d0:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 80063d2:	6878      	ldr	r0, [r7, #4]
 80063d4:	f7fc fc3c 	bl	8002c50 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	2202      	movs	r2, #2
 80063dc:	715a      	strb	r2, [r3, #5]


  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	681a      	ldr	r2, [r3, #0]
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	f042 0204 	orr.w	r2, r2, #4
 80063ec:	601a      	str	r2, [r3, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	2201      	movs	r2, #1
 80063f2:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	2200      	movs	r2, #0
 80063f8:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 80063fa:	2300      	movs	r3, #0
}
 80063fc:	4618      	mov	r0, r3
 80063fe:	3708      	adds	r7, #8
 8006400:	46bd      	mov	sp, r7
 8006402:	bd80      	pop	{r7, pc}

08006404 <HAL_RNG_GenerateRandomNumber>:
  * @param  random32bit pointer to generated random number variable if successful.
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_RNG_GenerateRandomNumber(RNG_HandleTypeDef *hrng, uint32_t *random32bit)
{
 8006404:	b580      	push	{r7, lr}
 8006406:	b084      	sub	sp, #16
 8006408:	af00      	add	r7, sp, #0
 800640a:	6078      	str	r0, [r7, #4]
 800640c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800640e:	2300      	movs	r3, #0
 8006410:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(hrng);
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	791b      	ldrb	r3, [r3, #4]
 8006416:	2b01      	cmp	r3, #1
 8006418:	d101      	bne.n	800641e <HAL_RNG_GenerateRandomNumber+0x1a>
 800641a:	2302      	movs	r3, #2
 800641c:	e044      	b.n	80064a8 <HAL_RNG_GenerateRandomNumber+0xa4>
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	2201      	movs	r2, #1
 8006422:	711a      	strb	r2, [r3, #4]

  /* Check RNG peripheral state */
  if (hrng->State == HAL_RNG_STATE_READY)
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	795b      	ldrb	r3, [r3, #5]
 8006428:	b2db      	uxtb	r3, r3
 800642a:	2b01      	cmp	r3, #1
 800642c:	d133      	bne.n	8006496 <HAL_RNG_GenerateRandomNumber+0x92>
  {
    /* Change RNG peripheral state */
    hrng->State = HAL_RNG_STATE_BUSY;
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	2202      	movs	r2, #2
 8006432:	715a      	strb	r2, [r3, #5]

    /* Get tick */
    tickstart = HAL_GetTick();
 8006434:	f7fd f9a8 	bl	8003788 <HAL_GetTick>
 8006438:	60b8      	str	r0, [r7, #8]

    /* Check if data register contains valid random data */
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 800643a:	e018      	b.n	800646e <HAL_RNG_GenerateRandomNumber+0x6a>
    {
      if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 800643c:	f7fd f9a4 	bl	8003788 <HAL_GetTick>
 8006440:	4602      	mov	r2, r0
 8006442:	68bb      	ldr	r3, [r7, #8]
 8006444:	1ad3      	subs	r3, r2, r3
 8006446:	2b02      	cmp	r3, #2
 8006448:	d911      	bls.n	800646e <HAL_RNG_GenerateRandomNumber+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	685b      	ldr	r3, [r3, #4]
 8006450:	f003 0301 	and.w	r3, r3, #1
 8006454:	2b01      	cmp	r3, #1
 8006456:	d00a      	beq.n	800646e <HAL_RNG_GenerateRandomNumber+0x6a>
        {
          hrng->State = HAL_RNG_STATE_READY;
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	2201      	movs	r2, #1
 800645c:	715a      	strb	r2, [r3, #5]
          hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	2202      	movs	r2, #2
 8006462:	609a      	str	r2, [r3, #8]
          /* Process Unlocked */
          __HAL_UNLOCK(hrng);
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	2200      	movs	r2, #0
 8006468:	711a      	strb	r2, [r3, #4]
          return HAL_ERROR;
 800646a:	2301      	movs	r3, #1
 800646c:	e01c      	b.n	80064a8 <HAL_RNG_GenerateRandomNumber+0xa4>
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	685b      	ldr	r3, [r3, #4]
 8006474:	f003 0301 	and.w	r3, r3, #1
 8006478:	2b01      	cmp	r3, #1
 800647a:	d1df      	bne.n	800643c <HAL_RNG_GenerateRandomNumber+0x38>
        }
      }
    }

    /* Get a 32bit Random number */
    hrng->RandomNumber = hrng->Instance->DR;
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	689a      	ldr	r2, [r3, #8]
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	60da      	str	r2, [r3, #12]
    *random32bit = hrng->RandomNumber;
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	68da      	ldr	r2, [r3, #12]
 800648a:	683b      	ldr	r3, [r7, #0]
 800648c:	601a      	str	r2, [r3, #0]

    hrng->State = HAL_RNG_STATE_READY;
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	2201      	movs	r2, #1
 8006492:	715a      	strb	r2, [r3, #5]
 8006494:	e004      	b.n	80064a0 <HAL_RNG_GenerateRandomNumber+0x9c>
  }
  else
  {
    hrng->ErrorCode = HAL_RNG_ERROR_BUSY;
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	2204      	movs	r2, #4
 800649a:	609a      	str	r2, [r3, #8]
    status = HAL_ERROR;
 800649c:	2301      	movs	r3, #1
 800649e:	73fb      	strb	r3, [r7, #15]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrng);
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	2200      	movs	r2, #0
 80064a4:	711a      	strb	r2, [r3, #4]

  return status;
 80064a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80064a8:	4618      	mov	r0, r3
 80064aa:	3710      	adds	r7, #16
 80064ac:	46bd      	mov	sp, r7
 80064ae:	bd80      	pop	{r7, pc}

080064b0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80064b0:	b580      	push	{r7, lr}
 80064b2:	b082      	sub	sp, #8
 80064b4:	af00      	add	r7, sp, #0
 80064b6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d101      	bne.n	80064c2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80064be:	2301      	movs	r3, #1
 80064c0:	e07b      	b.n	80065ba <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d108      	bne.n	80064dc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	685b      	ldr	r3, [r3, #4]
 80064ce:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80064d2:	d009      	beq.n	80064e8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	2200      	movs	r2, #0
 80064d8:	61da      	str	r2, [r3, #28]
 80064da:	e005      	b.n	80064e8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	2200      	movs	r2, #0
 80064e0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	2200      	movs	r2, #0
 80064e6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	2200      	movs	r2, #0
 80064ec:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80064f4:	b2db      	uxtb	r3, r3
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d106      	bne.n	8006508 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	2200      	movs	r2, #0
 80064fe:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006502:	6878      	ldr	r0, [r7, #4]
 8006504:	f7fc fbc6 	bl	8002c94 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	2202      	movs	r2, #2
 800650c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	681a      	ldr	r2, [r3, #0]
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800651e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	685b      	ldr	r3, [r3, #4]
 8006524:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	689b      	ldr	r3, [r3, #8]
 800652c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8006530:	431a      	orrs	r2, r3
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	68db      	ldr	r3, [r3, #12]
 8006536:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800653a:	431a      	orrs	r2, r3
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	691b      	ldr	r3, [r3, #16]
 8006540:	f003 0302 	and.w	r3, r3, #2
 8006544:	431a      	orrs	r2, r3
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	695b      	ldr	r3, [r3, #20]
 800654a:	f003 0301 	and.w	r3, r3, #1
 800654e:	431a      	orrs	r2, r3
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	699b      	ldr	r3, [r3, #24]
 8006554:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006558:	431a      	orrs	r2, r3
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	69db      	ldr	r3, [r3, #28]
 800655e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006562:	431a      	orrs	r2, r3
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	6a1b      	ldr	r3, [r3, #32]
 8006568:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800656c:	ea42 0103 	orr.w	r1, r2, r3
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006574:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	430a      	orrs	r2, r1
 800657e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	699b      	ldr	r3, [r3, #24]
 8006584:	0c1b      	lsrs	r3, r3, #16
 8006586:	f003 0104 	and.w	r1, r3, #4
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800658e:	f003 0210 	and.w	r2, r3, #16
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	430a      	orrs	r2, r1
 8006598:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	69da      	ldr	r2, [r3, #28]
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80065a8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	2200      	movs	r2, #0
 80065ae:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	2201      	movs	r2, #1
 80065b4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80065b8:	2300      	movs	r3, #0
}
 80065ba:	4618      	mov	r0, r3
 80065bc:	3708      	adds	r7, #8
 80065be:	46bd      	mov	sp, r7
 80065c0:	bd80      	pop	{r7, pc}

080065c2 <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 80065c2:	b580      	push	{r7, lr}
 80065c4:	b082      	sub	sp, #8
 80065c6:	af00      	add	r7, sp, #0
 80065c8:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d101      	bne.n	80065d4 <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 80065d0:	2301      	movs	r3, #1
 80065d2:	e01a      	b.n	800660a <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	2202      	movs	r2, #2
 80065d8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	681a      	ldr	r2, [r3, #0]
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80065ea:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 80065ec:	6878      	ldr	r0, [r7, #4]
 80065ee:	f7fc fb99 	bl	8002d24 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	2200      	movs	r2, #0
 80065f6:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State = HAL_SPI_STATE_RESET;
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	2200      	movs	r2, #0
 80065fc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	2200      	movs	r2, #0
 8006604:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 8006608:	2300      	movs	r3, #0
}
 800660a:	4618      	mov	r0, r3
 800660c:	3708      	adds	r7, #8
 800660e:	46bd      	mov	sp, r7
 8006610:	bd80      	pop	{r7, pc}

08006612 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006612:	b580      	push	{r7, lr}
 8006614:	b088      	sub	sp, #32
 8006616:	af00      	add	r7, sp, #0
 8006618:	60f8      	str	r0, [r7, #12]
 800661a:	60b9      	str	r1, [r7, #8]
 800661c:	603b      	str	r3, [r7, #0]
 800661e:	4613      	mov	r3, r2
 8006620:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006622:	f7fd f8b1 	bl	8003788 <HAL_GetTick>
 8006626:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8006628:	88fb      	ldrh	r3, [r7, #6]
 800662a:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006632:	b2db      	uxtb	r3, r3
 8006634:	2b01      	cmp	r3, #1
 8006636:	d001      	beq.n	800663c <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8006638:	2302      	movs	r3, #2
 800663a:	e12a      	b.n	8006892 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 800663c:	68bb      	ldr	r3, [r7, #8]
 800663e:	2b00      	cmp	r3, #0
 8006640:	d002      	beq.n	8006648 <HAL_SPI_Transmit+0x36>
 8006642:	88fb      	ldrh	r3, [r7, #6]
 8006644:	2b00      	cmp	r3, #0
 8006646:	d101      	bne.n	800664c <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8006648:	2301      	movs	r3, #1
 800664a:	e122      	b.n	8006892 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8006652:	2b01      	cmp	r3, #1
 8006654:	d101      	bne.n	800665a <HAL_SPI_Transmit+0x48>
 8006656:	2302      	movs	r3, #2
 8006658:	e11b      	b.n	8006892 <HAL_SPI_Transmit+0x280>
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	2201      	movs	r2, #1
 800665e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	2203      	movs	r2, #3
 8006666:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	2200      	movs	r2, #0
 800666e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	68ba      	ldr	r2, [r7, #8]
 8006674:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	88fa      	ldrh	r2, [r7, #6]
 800667a:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	88fa      	ldrh	r2, [r7, #6]
 8006680:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	2200      	movs	r2, #0
 8006686:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	2200      	movs	r2, #0
 800668c:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	2200      	movs	r2, #0
 8006692:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	2200      	movs	r2, #0
 8006698:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	2200      	movs	r2, #0
 800669e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	689b      	ldr	r3, [r3, #8]
 80066a4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80066a8:	d10f      	bne.n	80066ca <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	681a      	ldr	r2, [r3, #0]
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80066b8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	681a      	ldr	r2, [r3, #0]
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80066c8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80066d4:	2b40      	cmp	r3, #64	@ 0x40
 80066d6:	d007      	beq.n	80066e8 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	681a      	ldr	r2, [r3, #0]
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80066e6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	68db      	ldr	r3, [r3, #12]
 80066ec:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80066f0:	d152      	bne.n	8006798 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	685b      	ldr	r3, [r3, #4]
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d002      	beq.n	8006700 <HAL_SPI_Transmit+0xee>
 80066fa:	8b7b      	ldrh	r3, [r7, #26]
 80066fc:	2b01      	cmp	r3, #1
 80066fe:	d145      	bne.n	800678c <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006704:	881a      	ldrh	r2, [r3, #0]
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006710:	1c9a      	adds	r2, r3, #2
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800671a:	b29b      	uxth	r3, r3
 800671c:	3b01      	subs	r3, #1
 800671e:	b29a      	uxth	r2, r3
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8006724:	e032      	b.n	800678c <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	689b      	ldr	r3, [r3, #8]
 800672c:	f003 0302 	and.w	r3, r3, #2
 8006730:	2b02      	cmp	r3, #2
 8006732:	d112      	bne.n	800675a <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006738:	881a      	ldrh	r2, [r3, #0]
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006744:	1c9a      	adds	r2, r3, #2
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800674e:	b29b      	uxth	r3, r3
 8006750:	3b01      	subs	r3, #1
 8006752:	b29a      	uxth	r2, r3
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	86da      	strh	r2, [r3, #54]	@ 0x36
 8006758:	e018      	b.n	800678c <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800675a:	f7fd f815 	bl	8003788 <HAL_GetTick>
 800675e:	4602      	mov	r2, r0
 8006760:	69fb      	ldr	r3, [r7, #28]
 8006762:	1ad3      	subs	r3, r2, r3
 8006764:	683a      	ldr	r2, [r7, #0]
 8006766:	429a      	cmp	r2, r3
 8006768:	d803      	bhi.n	8006772 <HAL_SPI_Transmit+0x160>
 800676a:	683b      	ldr	r3, [r7, #0]
 800676c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006770:	d102      	bne.n	8006778 <HAL_SPI_Transmit+0x166>
 8006772:	683b      	ldr	r3, [r7, #0]
 8006774:	2b00      	cmp	r3, #0
 8006776:	d109      	bne.n	800678c <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	2201      	movs	r2, #1
 800677c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	2200      	movs	r2, #0
 8006784:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8006788:	2303      	movs	r3, #3
 800678a:	e082      	b.n	8006892 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006790:	b29b      	uxth	r3, r3
 8006792:	2b00      	cmp	r3, #0
 8006794:	d1c7      	bne.n	8006726 <HAL_SPI_Transmit+0x114>
 8006796:	e053      	b.n	8006840 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	685b      	ldr	r3, [r3, #4]
 800679c:	2b00      	cmp	r3, #0
 800679e:	d002      	beq.n	80067a6 <HAL_SPI_Transmit+0x194>
 80067a0:	8b7b      	ldrh	r3, [r7, #26]
 80067a2:	2b01      	cmp	r3, #1
 80067a4:	d147      	bne.n	8006836 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	330c      	adds	r3, #12
 80067b0:	7812      	ldrb	r2, [r2, #0]
 80067b2:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80067b8:	1c5a      	adds	r2, r3, #1
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80067c2:	b29b      	uxth	r3, r3
 80067c4:	3b01      	subs	r3, #1
 80067c6:	b29a      	uxth	r2, r3
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 80067cc:	e033      	b.n	8006836 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	689b      	ldr	r3, [r3, #8]
 80067d4:	f003 0302 	and.w	r3, r3, #2
 80067d8:	2b02      	cmp	r3, #2
 80067da:	d113      	bne.n	8006804 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	330c      	adds	r3, #12
 80067e6:	7812      	ldrb	r2, [r2, #0]
 80067e8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80067ee:	1c5a      	adds	r2, r3, #1
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80067f8:	b29b      	uxth	r3, r3
 80067fa:	3b01      	subs	r3, #1
 80067fc:	b29a      	uxth	r2, r3
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	86da      	strh	r2, [r3, #54]	@ 0x36
 8006802:	e018      	b.n	8006836 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006804:	f7fc ffc0 	bl	8003788 <HAL_GetTick>
 8006808:	4602      	mov	r2, r0
 800680a:	69fb      	ldr	r3, [r7, #28]
 800680c:	1ad3      	subs	r3, r2, r3
 800680e:	683a      	ldr	r2, [r7, #0]
 8006810:	429a      	cmp	r2, r3
 8006812:	d803      	bhi.n	800681c <HAL_SPI_Transmit+0x20a>
 8006814:	683b      	ldr	r3, [r7, #0]
 8006816:	f1b3 3fff 	cmp.w	r3, #4294967295
 800681a:	d102      	bne.n	8006822 <HAL_SPI_Transmit+0x210>
 800681c:	683b      	ldr	r3, [r7, #0]
 800681e:	2b00      	cmp	r3, #0
 8006820:	d109      	bne.n	8006836 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	2201      	movs	r2, #1
 8006826:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	2200      	movs	r2, #0
 800682e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8006832:	2303      	movs	r3, #3
 8006834:	e02d      	b.n	8006892 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800683a:	b29b      	uxth	r3, r3
 800683c:	2b00      	cmp	r3, #0
 800683e:	d1c6      	bne.n	80067ce <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006840:	69fa      	ldr	r2, [r7, #28]
 8006842:	6839      	ldr	r1, [r7, #0]
 8006844:	68f8      	ldr	r0, [r7, #12]
 8006846:	f000 f8bf 	bl	80069c8 <SPI_EndRxTxTransaction>
 800684a:	4603      	mov	r3, r0
 800684c:	2b00      	cmp	r3, #0
 800684e:	d002      	beq.n	8006856 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	2220      	movs	r2, #32
 8006854:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	689b      	ldr	r3, [r3, #8]
 800685a:	2b00      	cmp	r3, #0
 800685c:	d10a      	bne.n	8006874 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800685e:	2300      	movs	r3, #0
 8006860:	617b      	str	r3, [r7, #20]
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	68db      	ldr	r3, [r3, #12]
 8006868:	617b      	str	r3, [r7, #20]
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	689b      	ldr	r3, [r3, #8]
 8006870:	617b      	str	r3, [r7, #20]
 8006872:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	2201      	movs	r2, #1
 8006878:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	2200      	movs	r2, #0
 8006880:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006888:	2b00      	cmp	r3, #0
 800688a:	d001      	beq.n	8006890 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 800688c:	2301      	movs	r3, #1
 800688e:	e000      	b.n	8006892 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8006890:	2300      	movs	r3, #0
  }
}
 8006892:	4618      	mov	r0, r3
 8006894:	3720      	adds	r7, #32
 8006896:	46bd      	mov	sp, r7
 8006898:	bd80      	pop	{r7, pc}

0800689a <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(const SPI_HandleTypeDef *hspi)
{
 800689a:	b480      	push	{r7}
 800689c:	b083      	sub	sp, #12
 800689e:	af00      	add	r7, sp, #0
 80068a0:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80068a8:	b2db      	uxtb	r3, r3
}
 80068aa:	4618      	mov	r0, r3
 80068ac:	370c      	adds	r7, #12
 80068ae:	46bd      	mov	sp, r7
 80068b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068b4:	4770      	bx	lr
	...

080068b8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80068b8:	b580      	push	{r7, lr}
 80068ba:	b088      	sub	sp, #32
 80068bc:	af00      	add	r7, sp, #0
 80068be:	60f8      	str	r0, [r7, #12]
 80068c0:	60b9      	str	r1, [r7, #8]
 80068c2:	603b      	str	r3, [r7, #0]
 80068c4:	4613      	mov	r3, r2
 80068c6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80068c8:	f7fc ff5e 	bl	8003788 <HAL_GetTick>
 80068cc:	4602      	mov	r2, r0
 80068ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80068d0:	1a9b      	subs	r3, r3, r2
 80068d2:	683a      	ldr	r2, [r7, #0]
 80068d4:	4413      	add	r3, r2
 80068d6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80068d8:	f7fc ff56 	bl	8003788 <HAL_GetTick>
 80068dc:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80068de:	4b39      	ldr	r3, [pc, #228]	@ (80069c4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	015b      	lsls	r3, r3, #5
 80068e4:	0d1b      	lsrs	r3, r3, #20
 80068e6:	69fa      	ldr	r2, [r7, #28]
 80068e8:	fb02 f303 	mul.w	r3, r2, r3
 80068ec:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80068ee:	e054      	b.n	800699a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80068f0:	683b      	ldr	r3, [r7, #0]
 80068f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80068f6:	d050      	beq.n	800699a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80068f8:	f7fc ff46 	bl	8003788 <HAL_GetTick>
 80068fc:	4602      	mov	r2, r0
 80068fe:	69bb      	ldr	r3, [r7, #24]
 8006900:	1ad3      	subs	r3, r2, r3
 8006902:	69fa      	ldr	r2, [r7, #28]
 8006904:	429a      	cmp	r2, r3
 8006906:	d902      	bls.n	800690e <SPI_WaitFlagStateUntilTimeout+0x56>
 8006908:	69fb      	ldr	r3, [r7, #28]
 800690a:	2b00      	cmp	r3, #0
 800690c:	d13d      	bne.n	800698a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	685a      	ldr	r2, [r3, #4]
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800691c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	685b      	ldr	r3, [r3, #4]
 8006922:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006926:	d111      	bne.n	800694c <SPI_WaitFlagStateUntilTimeout+0x94>
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	689b      	ldr	r3, [r3, #8]
 800692c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006930:	d004      	beq.n	800693c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	689b      	ldr	r3, [r3, #8]
 8006936:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800693a:	d107      	bne.n	800694c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	681a      	ldr	r2, [r3, #0]
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800694a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006950:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006954:	d10f      	bne.n	8006976 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	681a      	ldr	r2, [r3, #0]
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006964:	601a      	str	r2, [r3, #0]
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	681a      	ldr	r2, [r3, #0]
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006974:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	2201      	movs	r2, #1
 800697a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	2200      	movs	r2, #0
 8006982:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8006986:	2303      	movs	r3, #3
 8006988:	e017      	b.n	80069ba <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800698a:	697b      	ldr	r3, [r7, #20]
 800698c:	2b00      	cmp	r3, #0
 800698e:	d101      	bne.n	8006994 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006990:	2300      	movs	r3, #0
 8006992:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006994:	697b      	ldr	r3, [r7, #20]
 8006996:	3b01      	subs	r3, #1
 8006998:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	689a      	ldr	r2, [r3, #8]
 80069a0:	68bb      	ldr	r3, [r7, #8]
 80069a2:	4013      	ands	r3, r2
 80069a4:	68ba      	ldr	r2, [r7, #8]
 80069a6:	429a      	cmp	r2, r3
 80069a8:	bf0c      	ite	eq
 80069aa:	2301      	moveq	r3, #1
 80069ac:	2300      	movne	r3, #0
 80069ae:	b2db      	uxtb	r3, r3
 80069b0:	461a      	mov	r2, r3
 80069b2:	79fb      	ldrb	r3, [r7, #7]
 80069b4:	429a      	cmp	r2, r3
 80069b6:	d19b      	bne.n	80068f0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80069b8:	2300      	movs	r3, #0
}
 80069ba:	4618      	mov	r0, r3
 80069bc:	3720      	adds	r7, #32
 80069be:	46bd      	mov	sp, r7
 80069c0:	bd80      	pop	{r7, pc}
 80069c2:	bf00      	nop
 80069c4:	20000014 	.word	0x20000014

080069c8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80069c8:	b580      	push	{r7, lr}
 80069ca:	b088      	sub	sp, #32
 80069cc:	af02      	add	r7, sp, #8
 80069ce:	60f8      	str	r0, [r7, #12]
 80069d0:	60b9      	str	r1, [r7, #8]
 80069d2:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	9300      	str	r3, [sp, #0]
 80069d8:	68bb      	ldr	r3, [r7, #8]
 80069da:	2201      	movs	r2, #1
 80069dc:	2102      	movs	r1, #2
 80069de:	68f8      	ldr	r0, [r7, #12]
 80069e0:	f7ff ff6a 	bl	80068b8 <SPI_WaitFlagStateUntilTimeout>
 80069e4:	4603      	mov	r3, r0
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d007      	beq.n	80069fa <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80069ee:	f043 0220 	orr.w	r2, r3, #32
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 80069f6:	2303      	movs	r3, #3
 80069f8:	e032      	b.n	8006a60 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80069fa:	4b1b      	ldr	r3, [pc, #108]	@ (8006a68 <SPI_EndRxTxTransaction+0xa0>)
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	4a1b      	ldr	r2, [pc, #108]	@ (8006a6c <SPI_EndRxTxTransaction+0xa4>)
 8006a00:	fba2 2303 	umull	r2, r3, r2, r3
 8006a04:	0d5b      	lsrs	r3, r3, #21
 8006a06:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8006a0a:	fb02 f303 	mul.w	r3, r2, r3
 8006a0e:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	685b      	ldr	r3, [r3, #4]
 8006a14:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006a18:	d112      	bne.n	8006a40 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	9300      	str	r3, [sp, #0]
 8006a1e:	68bb      	ldr	r3, [r7, #8]
 8006a20:	2200      	movs	r2, #0
 8006a22:	2180      	movs	r1, #128	@ 0x80
 8006a24:	68f8      	ldr	r0, [r7, #12]
 8006a26:	f7ff ff47 	bl	80068b8 <SPI_WaitFlagStateUntilTimeout>
 8006a2a:	4603      	mov	r3, r0
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d016      	beq.n	8006a5e <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006a34:	f043 0220 	orr.w	r2, r3, #32
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8006a3c:	2303      	movs	r3, #3
 8006a3e:	e00f      	b.n	8006a60 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8006a40:	697b      	ldr	r3, [r7, #20]
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d00a      	beq.n	8006a5c <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8006a46:	697b      	ldr	r3, [r7, #20]
 8006a48:	3b01      	subs	r3, #1
 8006a4a:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	689b      	ldr	r3, [r3, #8]
 8006a52:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006a56:	2b80      	cmp	r3, #128	@ 0x80
 8006a58:	d0f2      	beq.n	8006a40 <SPI_EndRxTxTransaction+0x78>
 8006a5a:	e000      	b.n	8006a5e <SPI_EndRxTxTransaction+0x96>
        break;
 8006a5c:	bf00      	nop
  }

  return HAL_OK;
 8006a5e:	2300      	movs	r3, #0
}
 8006a60:	4618      	mov	r0, r3
 8006a62:	3718      	adds	r7, #24
 8006a64:	46bd      	mov	sp, r7
 8006a66:	bd80      	pop	{r7, pc}
 8006a68:	20000014 	.word	0x20000014
 8006a6c:	165e9f81 	.word	0x165e9f81

08006a70 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006a70:	b580      	push	{r7, lr}
 8006a72:	b082      	sub	sp, #8
 8006a74:	af00      	add	r7, sp, #0
 8006a76:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d101      	bne.n	8006a82 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006a7e:	2301      	movs	r3, #1
 8006a80:	e041      	b.n	8006b06 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006a88:	b2db      	uxtb	r3, r3
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d106      	bne.n	8006a9c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	2200      	movs	r2, #0
 8006a92:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006a96:	6878      	ldr	r0, [r7, #4]
 8006a98:	f7fc f962 	bl	8002d60 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	2202      	movs	r2, #2
 8006aa0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	681a      	ldr	r2, [r3, #0]
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	3304      	adds	r3, #4
 8006aac:	4619      	mov	r1, r3
 8006aae:	4610      	mov	r0, r2
 8006ab0:	f000 f8be 	bl	8006c30 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	2201      	movs	r2, #1
 8006ab8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	2201      	movs	r2, #1
 8006ac0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	2201      	movs	r2, #1
 8006ac8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	2201      	movs	r2, #1
 8006ad0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	2201      	movs	r2, #1
 8006ad8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	2201      	movs	r2, #1
 8006ae0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	2201      	movs	r2, #1
 8006ae8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	2201      	movs	r2, #1
 8006af0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	2201      	movs	r2, #1
 8006af8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	2201      	movs	r2, #1
 8006b00:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006b04:	2300      	movs	r3, #0
}
 8006b06:	4618      	mov	r0, r3
 8006b08:	3708      	adds	r7, #8
 8006b0a:	46bd      	mov	sp, r7
 8006b0c:	bd80      	pop	{r7, pc}
	...

08006b10 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8006b10:	b480      	push	{r7}
 8006b12:	b085      	sub	sp, #20
 8006b14:	af00      	add	r7, sp, #0
 8006b16:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006b1e:	b2db      	uxtb	r3, r3
 8006b20:	2b01      	cmp	r3, #1
 8006b22:	d001      	beq.n	8006b28 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8006b24:	2301      	movs	r3, #1
 8006b26:	e046      	b.n	8006bb6 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	2202      	movs	r2, #2
 8006b2c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	4a23      	ldr	r2, [pc, #140]	@ (8006bc4 <HAL_TIM_Base_Start+0xb4>)
 8006b36:	4293      	cmp	r3, r2
 8006b38:	d022      	beq.n	8006b80 <HAL_TIM_Base_Start+0x70>
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006b42:	d01d      	beq.n	8006b80 <HAL_TIM_Base_Start+0x70>
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	4a1f      	ldr	r2, [pc, #124]	@ (8006bc8 <HAL_TIM_Base_Start+0xb8>)
 8006b4a:	4293      	cmp	r3, r2
 8006b4c:	d018      	beq.n	8006b80 <HAL_TIM_Base_Start+0x70>
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	4a1e      	ldr	r2, [pc, #120]	@ (8006bcc <HAL_TIM_Base_Start+0xbc>)
 8006b54:	4293      	cmp	r3, r2
 8006b56:	d013      	beq.n	8006b80 <HAL_TIM_Base_Start+0x70>
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	4a1c      	ldr	r2, [pc, #112]	@ (8006bd0 <HAL_TIM_Base_Start+0xc0>)
 8006b5e:	4293      	cmp	r3, r2
 8006b60:	d00e      	beq.n	8006b80 <HAL_TIM_Base_Start+0x70>
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	4a1b      	ldr	r2, [pc, #108]	@ (8006bd4 <HAL_TIM_Base_Start+0xc4>)
 8006b68:	4293      	cmp	r3, r2
 8006b6a:	d009      	beq.n	8006b80 <HAL_TIM_Base_Start+0x70>
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	4a19      	ldr	r2, [pc, #100]	@ (8006bd8 <HAL_TIM_Base_Start+0xc8>)
 8006b72:	4293      	cmp	r3, r2
 8006b74:	d004      	beq.n	8006b80 <HAL_TIM_Base_Start+0x70>
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	4a18      	ldr	r2, [pc, #96]	@ (8006bdc <HAL_TIM_Base_Start+0xcc>)
 8006b7c:	4293      	cmp	r3, r2
 8006b7e:	d111      	bne.n	8006ba4 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	689b      	ldr	r3, [r3, #8]
 8006b86:	f003 0307 	and.w	r3, r3, #7
 8006b8a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	2b06      	cmp	r3, #6
 8006b90:	d010      	beq.n	8006bb4 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	681a      	ldr	r2, [r3, #0]
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	f042 0201 	orr.w	r2, r2, #1
 8006ba0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006ba2:	e007      	b.n	8006bb4 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	681a      	ldr	r2, [r3, #0]
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	f042 0201 	orr.w	r2, r2, #1
 8006bb2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006bb4:	2300      	movs	r3, #0
}
 8006bb6:	4618      	mov	r0, r3
 8006bb8:	3714      	adds	r7, #20
 8006bba:	46bd      	mov	sp, r7
 8006bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bc0:	4770      	bx	lr
 8006bc2:	bf00      	nop
 8006bc4:	40010000 	.word	0x40010000
 8006bc8:	40000400 	.word	0x40000400
 8006bcc:	40000800 	.word	0x40000800
 8006bd0:	40000c00 	.word	0x40000c00
 8006bd4:	40010400 	.word	0x40010400
 8006bd8:	40014000 	.word	0x40014000
 8006bdc:	40001800 	.word	0x40001800

08006be0 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8006be0:	b480      	push	{r7}
 8006be2:	b083      	sub	sp, #12
 8006be4:	af00      	add	r7, sp, #0
 8006be6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	6a1a      	ldr	r2, [r3, #32]
 8006bee:	f241 1311 	movw	r3, #4369	@ 0x1111
 8006bf2:	4013      	ands	r3, r2
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	d10f      	bne.n	8006c18 <HAL_TIM_Base_Stop+0x38>
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	6a1a      	ldr	r2, [r3, #32]
 8006bfe:	f240 4344 	movw	r3, #1092	@ 0x444
 8006c02:	4013      	ands	r3, r2
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	d107      	bne.n	8006c18 <HAL_TIM_Base_Stop+0x38>
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	681a      	ldr	r2, [r3, #0]
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	f022 0201 	bic.w	r2, r2, #1
 8006c16:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	2201      	movs	r2, #1
 8006c1c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 8006c20:	2300      	movs	r3, #0
}
 8006c22:	4618      	mov	r0, r3
 8006c24:	370c      	adds	r7, #12
 8006c26:	46bd      	mov	sp, r7
 8006c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c2c:	4770      	bx	lr
	...

08006c30 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006c30:	b480      	push	{r7}
 8006c32:	b085      	sub	sp, #20
 8006c34:	af00      	add	r7, sp, #0
 8006c36:	6078      	str	r0, [r7, #4]
 8006c38:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	4a46      	ldr	r2, [pc, #280]	@ (8006d5c <TIM_Base_SetConfig+0x12c>)
 8006c44:	4293      	cmp	r3, r2
 8006c46:	d013      	beq.n	8006c70 <TIM_Base_SetConfig+0x40>
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006c4e:	d00f      	beq.n	8006c70 <TIM_Base_SetConfig+0x40>
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	4a43      	ldr	r2, [pc, #268]	@ (8006d60 <TIM_Base_SetConfig+0x130>)
 8006c54:	4293      	cmp	r3, r2
 8006c56:	d00b      	beq.n	8006c70 <TIM_Base_SetConfig+0x40>
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	4a42      	ldr	r2, [pc, #264]	@ (8006d64 <TIM_Base_SetConfig+0x134>)
 8006c5c:	4293      	cmp	r3, r2
 8006c5e:	d007      	beq.n	8006c70 <TIM_Base_SetConfig+0x40>
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	4a41      	ldr	r2, [pc, #260]	@ (8006d68 <TIM_Base_SetConfig+0x138>)
 8006c64:	4293      	cmp	r3, r2
 8006c66:	d003      	beq.n	8006c70 <TIM_Base_SetConfig+0x40>
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	4a40      	ldr	r2, [pc, #256]	@ (8006d6c <TIM_Base_SetConfig+0x13c>)
 8006c6c:	4293      	cmp	r3, r2
 8006c6e:	d108      	bne.n	8006c82 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006c76:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006c78:	683b      	ldr	r3, [r7, #0]
 8006c7a:	685b      	ldr	r3, [r3, #4]
 8006c7c:	68fa      	ldr	r2, [r7, #12]
 8006c7e:	4313      	orrs	r3, r2
 8006c80:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	4a35      	ldr	r2, [pc, #212]	@ (8006d5c <TIM_Base_SetConfig+0x12c>)
 8006c86:	4293      	cmp	r3, r2
 8006c88:	d02b      	beq.n	8006ce2 <TIM_Base_SetConfig+0xb2>
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006c90:	d027      	beq.n	8006ce2 <TIM_Base_SetConfig+0xb2>
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	4a32      	ldr	r2, [pc, #200]	@ (8006d60 <TIM_Base_SetConfig+0x130>)
 8006c96:	4293      	cmp	r3, r2
 8006c98:	d023      	beq.n	8006ce2 <TIM_Base_SetConfig+0xb2>
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	4a31      	ldr	r2, [pc, #196]	@ (8006d64 <TIM_Base_SetConfig+0x134>)
 8006c9e:	4293      	cmp	r3, r2
 8006ca0:	d01f      	beq.n	8006ce2 <TIM_Base_SetConfig+0xb2>
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	4a30      	ldr	r2, [pc, #192]	@ (8006d68 <TIM_Base_SetConfig+0x138>)
 8006ca6:	4293      	cmp	r3, r2
 8006ca8:	d01b      	beq.n	8006ce2 <TIM_Base_SetConfig+0xb2>
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	4a2f      	ldr	r2, [pc, #188]	@ (8006d6c <TIM_Base_SetConfig+0x13c>)
 8006cae:	4293      	cmp	r3, r2
 8006cb0:	d017      	beq.n	8006ce2 <TIM_Base_SetConfig+0xb2>
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	4a2e      	ldr	r2, [pc, #184]	@ (8006d70 <TIM_Base_SetConfig+0x140>)
 8006cb6:	4293      	cmp	r3, r2
 8006cb8:	d013      	beq.n	8006ce2 <TIM_Base_SetConfig+0xb2>
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	4a2d      	ldr	r2, [pc, #180]	@ (8006d74 <TIM_Base_SetConfig+0x144>)
 8006cbe:	4293      	cmp	r3, r2
 8006cc0:	d00f      	beq.n	8006ce2 <TIM_Base_SetConfig+0xb2>
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	4a2c      	ldr	r2, [pc, #176]	@ (8006d78 <TIM_Base_SetConfig+0x148>)
 8006cc6:	4293      	cmp	r3, r2
 8006cc8:	d00b      	beq.n	8006ce2 <TIM_Base_SetConfig+0xb2>
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	4a2b      	ldr	r2, [pc, #172]	@ (8006d7c <TIM_Base_SetConfig+0x14c>)
 8006cce:	4293      	cmp	r3, r2
 8006cd0:	d007      	beq.n	8006ce2 <TIM_Base_SetConfig+0xb2>
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	4a2a      	ldr	r2, [pc, #168]	@ (8006d80 <TIM_Base_SetConfig+0x150>)
 8006cd6:	4293      	cmp	r3, r2
 8006cd8:	d003      	beq.n	8006ce2 <TIM_Base_SetConfig+0xb2>
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	4a29      	ldr	r2, [pc, #164]	@ (8006d84 <TIM_Base_SetConfig+0x154>)
 8006cde:	4293      	cmp	r3, r2
 8006ce0:	d108      	bne.n	8006cf4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006ce8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006cea:	683b      	ldr	r3, [r7, #0]
 8006cec:	68db      	ldr	r3, [r3, #12]
 8006cee:	68fa      	ldr	r2, [r7, #12]
 8006cf0:	4313      	orrs	r3, r2
 8006cf2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8006cfa:	683b      	ldr	r3, [r7, #0]
 8006cfc:	695b      	ldr	r3, [r3, #20]
 8006cfe:	4313      	orrs	r3, r2
 8006d00:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	68fa      	ldr	r2, [r7, #12]
 8006d06:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006d08:	683b      	ldr	r3, [r7, #0]
 8006d0a:	689a      	ldr	r2, [r3, #8]
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006d10:	683b      	ldr	r3, [r7, #0]
 8006d12:	681a      	ldr	r2, [r3, #0]
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	4a10      	ldr	r2, [pc, #64]	@ (8006d5c <TIM_Base_SetConfig+0x12c>)
 8006d1c:	4293      	cmp	r3, r2
 8006d1e:	d003      	beq.n	8006d28 <TIM_Base_SetConfig+0xf8>
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	4a12      	ldr	r2, [pc, #72]	@ (8006d6c <TIM_Base_SetConfig+0x13c>)
 8006d24:	4293      	cmp	r3, r2
 8006d26:	d103      	bne.n	8006d30 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006d28:	683b      	ldr	r3, [r7, #0]
 8006d2a:	691a      	ldr	r2, [r3, #16]
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	2201      	movs	r2, #1
 8006d34:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	691b      	ldr	r3, [r3, #16]
 8006d3a:	f003 0301 	and.w	r3, r3, #1
 8006d3e:	2b01      	cmp	r3, #1
 8006d40:	d105      	bne.n	8006d4e <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	691b      	ldr	r3, [r3, #16]
 8006d46:	f023 0201 	bic.w	r2, r3, #1
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	611a      	str	r2, [r3, #16]
  }
}
 8006d4e:	bf00      	nop
 8006d50:	3714      	adds	r7, #20
 8006d52:	46bd      	mov	sp, r7
 8006d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d58:	4770      	bx	lr
 8006d5a:	bf00      	nop
 8006d5c:	40010000 	.word	0x40010000
 8006d60:	40000400 	.word	0x40000400
 8006d64:	40000800 	.word	0x40000800
 8006d68:	40000c00 	.word	0x40000c00
 8006d6c:	40010400 	.word	0x40010400
 8006d70:	40014000 	.word	0x40014000
 8006d74:	40014400 	.word	0x40014400
 8006d78:	40014800 	.word	0x40014800
 8006d7c:	40001800 	.word	0x40001800
 8006d80:	40001c00 	.word	0x40001c00
 8006d84:	40002000 	.word	0x40002000

08006d88 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006d88:	b480      	push	{r7}
 8006d8a:	b085      	sub	sp, #20
 8006d8c:	af00      	add	r7, sp, #0
 8006d8e:	6078      	str	r0, [r7, #4]
 8006d90:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006d98:	2b01      	cmp	r3, #1
 8006d9a:	d101      	bne.n	8006da0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006d9c:	2302      	movs	r3, #2
 8006d9e:	e05a      	b.n	8006e56 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	2201      	movs	r2, #1
 8006da4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	2202      	movs	r2, #2
 8006dac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	685b      	ldr	r3, [r3, #4]
 8006db6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	689b      	ldr	r3, [r3, #8]
 8006dbe:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006dc6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006dc8:	683b      	ldr	r3, [r7, #0]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	68fa      	ldr	r2, [r7, #12]
 8006dce:	4313      	orrs	r3, r2
 8006dd0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	68fa      	ldr	r2, [r7, #12]
 8006dd8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	4a21      	ldr	r2, [pc, #132]	@ (8006e64 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006de0:	4293      	cmp	r3, r2
 8006de2:	d022      	beq.n	8006e2a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006dec:	d01d      	beq.n	8006e2a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	4a1d      	ldr	r2, [pc, #116]	@ (8006e68 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006df4:	4293      	cmp	r3, r2
 8006df6:	d018      	beq.n	8006e2a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	4a1b      	ldr	r2, [pc, #108]	@ (8006e6c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8006dfe:	4293      	cmp	r3, r2
 8006e00:	d013      	beq.n	8006e2a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	4a1a      	ldr	r2, [pc, #104]	@ (8006e70 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006e08:	4293      	cmp	r3, r2
 8006e0a:	d00e      	beq.n	8006e2a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	4a18      	ldr	r2, [pc, #96]	@ (8006e74 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8006e12:	4293      	cmp	r3, r2
 8006e14:	d009      	beq.n	8006e2a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	4a17      	ldr	r2, [pc, #92]	@ (8006e78 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006e1c:	4293      	cmp	r3, r2
 8006e1e:	d004      	beq.n	8006e2a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	4a15      	ldr	r2, [pc, #84]	@ (8006e7c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006e26:	4293      	cmp	r3, r2
 8006e28:	d10c      	bne.n	8006e44 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006e2a:	68bb      	ldr	r3, [r7, #8]
 8006e2c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006e30:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006e32:	683b      	ldr	r3, [r7, #0]
 8006e34:	685b      	ldr	r3, [r3, #4]
 8006e36:	68ba      	ldr	r2, [r7, #8]
 8006e38:	4313      	orrs	r3, r2
 8006e3a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	68ba      	ldr	r2, [r7, #8]
 8006e42:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	2201      	movs	r2, #1
 8006e48:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	2200      	movs	r2, #0
 8006e50:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006e54:	2300      	movs	r3, #0
}
 8006e56:	4618      	mov	r0, r3
 8006e58:	3714      	adds	r7, #20
 8006e5a:	46bd      	mov	sp, r7
 8006e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e60:	4770      	bx	lr
 8006e62:	bf00      	nop
 8006e64:	40010000 	.word	0x40010000
 8006e68:	40000400 	.word	0x40000400
 8006e6c:	40000800 	.word	0x40000800
 8006e70:	40000c00 	.word	0x40000c00
 8006e74:	40010400 	.word	0x40010400
 8006e78:	40014000 	.word	0x40014000
 8006e7c:	40001800 	.word	0x40001800

08006e80 <std>:
 8006e80:	2300      	movs	r3, #0
 8006e82:	b510      	push	{r4, lr}
 8006e84:	4604      	mov	r4, r0
 8006e86:	e9c0 3300 	strd	r3, r3, [r0]
 8006e8a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006e8e:	6083      	str	r3, [r0, #8]
 8006e90:	8181      	strh	r1, [r0, #12]
 8006e92:	6643      	str	r3, [r0, #100]	@ 0x64
 8006e94:	81c2      	strh	r2, [r0, #14]
 8006e96:	6183      	str	r3, [r0, #24]
 8006e98:	4619      	mov	r1, r3
 8006e9a:	2208      	movs	r2, #8
 8006e9c:	305c      	adds	r0, #92	@ 0x5c
 8006e9e:	f000 fa2d 	bl	80072fc <memset>
 8006ea2:	4b0d      	ldr	r3, [pc, #52]	@ (8006ed8 <std+0x58>)
 8006ea4:	6263      	str	r3, [r4, #36]	@ 0x24
 8006ea6:	4b0d      	ldr	r3, [pc, #52]	@ (8006edc <std+0x5c>)
 8006ea8:	62a3      	str	r3, [r4, #40]	@ 0x28
 8006eaa:	4b0d      	ldr	r3, [pc, #52]	@ (8006ee0 <std+0x60>)
 8006eac:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8006eae:	4b0d      	ldr	r3, [pc, #52]	@ (8006ee4 <std+0x64>)
 8006eb0:	6323      	str	r3, [r4, #48]	@ 0x30
 8006eb2:	4b0d      	ldr	r3, [pc, #52]	@ (8006ee8 <std+0x68>)
 8006eb4:	6224      	str	r4, [r4, #32]
 8006eb6:	429c      	cmp	r4, r3
 8006eb8:	d006      	beq.n	8006ec8 <std+0x48>
 8006eba:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8006ebe:	4294      	cmp	r4, r2
 8006ec0:	d002      	beq.n	8006ec8 <std+0x48>
 8006ec2:	33d0      	adds	r3, #208	@ 0xd0
 8006ec4:	429c      	cmp	r4, r3
 8006ec6:	d105      	bne.n	8006ed4 <std+0x54>
 8006ec8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8006ecc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006ed0:	f000 ba8c 	b.w	80073ec <__retarget_lock_init_recursive>
 8006ed4:	bd10      	pop	{r4, pc}
 8006ed6:	bf00      	nop
 8006ed8:	0800714d 	.word	0x0800714d
 8006edc:	0800716f 	.word	0x0800716f
 8006ee0:	080071a7 	.word	0x080071a7
 8006ee4:	080071cb 	.word	0x080071cb
 8006ee8:	20025bf8 	.word	0x20025bf8

08006eec <stdio_exit_handler>:
 8006eec:	4a02      	ldr	r2, [pc, #8]	@ (8006ef8 <stdio_exit_handler+0xc>)
 8006eee:	4903      	ldr	r1, [pc, #12]	@ (8006efc <stdio_exit_handler+0x10>)
 8006ef0:	4803      	ldr	r0, [pc, #12]	@ (8006f00 <stdio_exit_handler+0x14>)
 8006ef2:	f000 b869 	b.w	8006fc8 <_fwalk_sglue>
 8006ef6:	bf00      	nop
 8006ef8:	20000020 	.word	0x20000020
 8006efc:	08007f3d 	.word	0x08007f3d
 8006f00:	20000030 	.word	0x20000030

08006f04 <cleanup_stdio>:
 8006f04:	6841      	ldr	r1, [r0, #4]
 8006f06:	4b0c      	ldr	r3, [pc, #48]	@ (8006f38 <cleanup_stdio+0x34>)
 8006f08:	4299      	cmp	r1, r3
 8006f0a:	b510      	push	{r4, lr}
 8006f0c:	4604      	mov	r4, r0
 8006f0e:	d001      	beq.n	8006f14 <cleanup_stdio+0x10>
 8006f10:	f001 f814 	bl	8007f3c <_fflush_r>
 8006f14:	68a1      	ldr	r1, [r4, #8]
 8006f16:	4b09      	ldr	r3, [pc, #36]	@ (8006f3c <cleanup_stdio+0x38>)
 8006f18:	4299      	cmp	r1, r3
 8006f1a:	d002      	beq.n	8006f22 <cleanup_stdio+0x1e>
 8006f1c:	4620      	mov	r0, r4
 8006f1e:	f001 f80d 	bl	8007f3c <_fflush_r>
 8006f22:	68e1      	ldr	r1, [r4, #12]
 8006f24:	4b06      	ldr	r3, [pc, #24]	@ (8006f40 <cleanup_stdio+0x3c>)
 8006f26:	4299      	cmp	r1, r3
 8006f28:	d004      	beq.n	8006f34 <cleanup_stdio+0x30>
 8006f2a:	4620      	mov	r0, r4
 8006f2c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006f30:	f001 b804 	b.w	8007f3c <_fflush_r>
 8006f34:	bd10      	pop	{r4, pc}
 8006f36:	bf00      	nop
 8006f38:	20025bf8 	.word	0x20025bf8
 8006f3c:	20025c60 	.word	0x20025c60
 8006f40:	20025cc8 	.word	0x20025cc8

08006f44 <global_stdio_init.part.0>:
 8006f44:	b510      	push	{r4, lr}
 8006f46:	4b0b      	ldr	r3, [pc, #44]	@ (8006f74 <global_stdio_init.part.0+0x30>)
 8006f48:	4c0b      	ldr	r4, [pc, #44]	@ (8006f78 <global_stdio_init.part.0+0x34>)
 8006f4a:	4a0c      	ldr	r2, [pc, #48]	@ (8006f7c <global_stdio_init.part.0+0x38>)
 8006f4c:	601a      	str	r2, [r3, #0]
 8006f4e:	4620      	mov	r0, r4
 8006f50:	2200      	movs	r2, #0
 8006f52:	2104      	movs	r1, #4
 8006f54:	f7ff ff94 	bl	8006e80 <std>
 8006f58:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8006f5c:	2201      	movs	r2, #1
 8006f5e:	2109      	movs	r1, #9
 8006f60:	f7ff ff8e 	bl	8006e80 <std>
 8006f64:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8006f68:	2202      	movs	r2, #2
 8006f6a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006f6e:	2112      	movs	r1, #18
 8006f70:	f7ff bf86 	b.w	8006e80 <std>
 8006f74:	20025d30 	.word	0x20025d30
 8006f78:	20025bf8 	.word	0x20025bf8
 8006f7c:	08006eed 	.word	0x08006eed

08006f80 <__sfp_lock_acquire>:
 8006f80:	4801      	ldr	r0, [pc, #4]	@ (8006f88 <__sfp_lock_acquire+0x8>)
 8006f82:	f000 ba34 	b.w	80073ee <__retarget_lock_acquire_recursive>
 8006f86:	bf00      	nop
 8006f88:	20025d39 	.word	0x20025d39

08006f8c <__sfp_lock_release>:
 8006f8c:	4801      	ldr	r0, [pc, #4]	@ (8006f94 <__sfp_lock_release+0x8>)
 8006f8e:	f000 ba2f 	b.w	80073f0 <__retarget_lock_release_recursive>
 8006f92:	bf00      	nop
 8006f94:	20025d39 	.word	0x20025d39

08006f98 <__sinit>:
 8006f98:	b510      	push	{r4, lr}
 8006f9a:	4604      	mov	r4, r0
 8006f9c:	f7ff fff0 	bl	8006f80 <__sfp_lock_acquire>
 8006fa0:	6a23      	ldr	r3, [r4, #32]
 8006fa2:	b11b      	cbz	r3, 8006fac <__sinit+0x14>
 8006fa4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006fa8:	f7ff bff0 	b.w	8006f8c <__sfp_lock_release>
 8006fac:	4b04      	ldr	r3, [pc, #16]	@ (8006fc0 <__sinit+0x28>)
 8006fae:	6223      	str	r3, [r4, #32]
 8006fb0:	4b04      	ldr	r3, [pc, #16]	@ (8006fc4 <__sinit+0x2c>)
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	d1f5      	bne.n	8006fa4 <__sinit+0xc>
 8006fb8:	f7ff ffc4 	bl	8006f44 <global_stdio_init.part.0>
 8006fbc:	e7f2      	b.n	8006fa4 <__sinit+0xc>
 8006fbe:	bf00      	nop
 8006fc0:	08006f05 	.word	0x08006f05
 8006fc4:	20025d30 	.word	0x20025d30

08006fc8 <_fwalk_sglue>:
 8006fc8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006fcc:	4607      	mov	r7, r0
 8006fce:	4688      	mov	r8, r1
 8006fd0:	4614      	mov	r4, r2
 8006fd2:	2600      	movs	r6, #0
 8006fd4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006fd8:	f1b9 0901 	subs.w	r9, r9, #1
 8006fdc:	d505      	bpl.n	8006fea <_fwalk_sglue+0x22>
 8006fde:	6824      	ldr	r4, [r4, #0]
 8006fe0:	2c00      	cmp	r4, #0
 8006fe2:	d1f7      	bne.n	8006fd4 <_fwalk_sglue+0xc>
 8006fe4:	4630      	mov	r0, r6
 8006fe6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006fea:	89ab      	ldrh	r3, [r5, #12]
 8006fec:	2b01      	cmp	r3, #1
 8006fee:	d907      	bls.n	8007000 <_fwalk_sglue+0x38>
 8006ff0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006ff4:	3301      	adds	r3, #1
 8006ff6:	d003      	beq.n	8007000 <_fwalk_sglue+0x38>
 8006ff8:	4629      	mov	r1, r5
 8006ffa:	4638      	mov	r0, r7
 8006ffc:	47c0      	blx	r8
 8006ffe:	4306      	orrs	r6, r0
 8007000:	3568      	adds	r5, #104	@ 0x68
 8007002:	e7e9      	b.n	8006fd8 <_fwalk_sglue+0x10>

08007004 <iprintf>:
 8007004:	b40f      	push	{r0, r1, r2, r3}
 8007006:	b507      	push	{r0, r1, r2, lr}
 8007008:	4906      	ldr	r1, [pc, #24]	@ (8007024 <iprintf+0x20>)
 800700a:	ab04      	add	r3, sp, #16
 800700c:	6808      	ldr	r0, [r1, #0]
 800700e:	f853 2b04 	ldr.w	r2, [r3], #4
 8007012:	6881      	ldr	r1, [r0, #8]
 8007014:	9301      	str	r3, [sp, #4]
 8007016:	f000 fc67 	bl	80078e8 <_vfiprintf_r>
 800701a:	b003      	add	sp, #12
 800701c:	f85d eb04 	ldr.w	lr, [sp], #4
 8007020:	b004      	add	sp, #16
 8007022:	4770      	bx	lr
 8007024:	2000002c 	.word	0x2000002c

08007028 <_puts_r>:
 8007028:	6a03      	ldr	r3, [r0, #32]
 800702a:	b570      	push	{r4, r5, r6, lr}
 800702c:	6884      	ldr	r4, [r0, #8]
 800702e:	4605      	mov	r5, r0
 8007030:	460e      	mov	r6, r1
 8007032:	b90b      	cbnz	r3, 8007038 <_puts_r+0x10>
 8007034:	f7ff ffb0 	bl	8006f98 <__sinit>
 8007038:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800703a:	07db      	lsls	r3, r3, #31
 800703c:	d405      	bmi.n	800704a <_puts_r+0x22>
 800703e:	89a3      	ldrh	r3, [r4, #12]
 8007040:	0598      	lsls	r0, r3, #22
 8007042:	d402      	bmi.n	800704a <_puts_r+0x22>
 8007044:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007046:	f000 f9d2 	bl	80073ee <__retarget_lock_acquire_recursive>
 800704a:	89a3      	ldrh	r3, [r4, #12]
 800704c:	0719      	lsls	r1, r3, #28
 800704e:	d502      	bpl.n	8007056 <_puts_r+0x2e>
 8007050:	6923      	ldr	r3, [r4, #16]
 8007052:	2b00      	cmp	r3, #0
 8007054:	d135      	bne.n	80070c2 <_puts_r+0x9a>
 8007056:	4621      	mov	r1, r4
 8007058:	4628      	mov	r0, r5
 800705a:	f000 f8f9 	bl	8007250 <__swsetup_r>
 800705e:	b380      	cbz	r0, 80070c2 <_puts_r+0x9a>
 8007060:	f04f 35ff 	mov.w	r5, #4294967295
 8007064:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007066:	07da      	lsls	r2, r3, #31
 8007068:	d405      	bmi.n	8007076 <_puts_r+0x4e>
 800706a:	89a3      	ldrh	r3, [r4, #12]
 800706c:	059b      	lsls	r3, r3, #22
 800706e:	d402      	bmi.n	8007076 <_puts_r+0x4e>
 8007070:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007072:	f000 f9bd 	bl	80073f0 <__retarget_lock_release_recursive>
 8007076:	4628      	mov	r0, r5
 8007078:	bd70      	pop	{r4, r5, r6, pc}
 800707a:	2b00      	cmp	r3, #0
 800707c:	da04      	bge.n	8007088 <_puts_r+0x60>
 800707e:	69a2      	ldr	r2, [r4, #24]
 8007080:	429a      	cmp	r2, r3
 8007082:	dc17      	bgt.n	80070b4 <_puts_r+0x8c>
 8007084:	290a      	cmp	r1, #10
 8007086:	d015      	beq.n	80070b4 <_puts_r+0x8c>
 8007088:	6823      	ldr	r3, [r4, #0]
 800708a:	1c5a      	adds	r2, r3, #1
 800708c:	6022      	str	r2, [r4, #0]
 800708e:	7019      	strb	r1, [r3, #0]
 8007090:	68a3      	ldr	r3, [r4, #8]
 8007092:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8007096:	3b01      	subs	r3, #1
 8007098:	60a3      	str	r3, [r4, #8]
 800709a:	2900      	cmp	r1, #0
 800709c:	d1ed      	bne.n	800707a <_puts_r+0x52>
 800709e:	2b00      	cmp	r3, #0
 80070a0:	da11      	bge.n	80070c6 <_puts_r+0x9e>
 80070a2:	4622      	mov	r2, r4
 80070a4:	210a      	movs	r1, #10
 80070a6:	4628      	mov	r0, r5
 80070a8:	f000 f893 	bl	80071d2 <__swbuf_r>
 80070ac:	3001      	adds	r0, #1
 80070ae:	d0d7      	beq.n	8007060 <_puts_r+0x38>
 80070b0:	250a      	movs	r5, #10
 80070b2:	e7d7      	b.n	8007064 <_puts_r+0x3c>
 80070b4:	4622      	mov	r2, r4
 80070b6:	4628      	mov	r0, r5
 80070b8:	f000 f88b 	bl	80071d2 <__swbuf_r>
 80070bc:	3001      	adds	r0, #1
 80070be:	d1e7      	bne.n	8007090 <_puts_r+0x68>
 80070c0:	e7ce      	b.n	8007060 <_puts_r+0x38>
 80070c2:	3e01      	subs	r6, #1
 80070c4:	e7e4      	b.n	8007090 <_puts_r+0x68>
 80070c6:	6823      	ldr	r3, [r4, #0]
 80070c8:	1c5a      	adds	r2, r3, #1
 80070ca:	6022      	str	r2, [r4, #0]
 80070cc:	220a      	movs	r2, #10
 80070ce:	701a      	strb	r2, [r3, #0]
 80070d0:	e7ee      	b.n	80070b0 <_puts_r+0x88>
	...

080070d4 <puts>:
 80070d4:	4b02      	ldr	r3, [pc, #8]	@ (80070e0 <puts+0xc>)
 80070d6:	4601      	mov	r1, r0
 80070d8:	6818      	ldr	r0, [r3, #0]
 80070da:	f7ff bfa5 	b.w	8007028 <_puts_r>
 80070de:	bf00      	nop
 80070e0:	2000002c 	.word	0x2000002c

080070e4 <sniprintf>:
 80070e4:	b40c      	push	{r2, r3}
 80070e6:	b530      	push	{r4, r5, lr}
 80070e8:	4b17      	ldr	r3, [pc, #92]	@ (8007148 <sniprintf+0x64>)
 80070ea:	1e0c      	subs	r4, r1, #0
 80070ec:	681d      	ldr	r5, [r3, #0]
 80070ee:	b09d      	sub	sp, #116	@ 0x74
 80070f0:	da08      	bge.n	8007104 <sniprintf+0x20>
 80070f2:	238b      	movs	r3, #139	@ 0x8b
 80070f4:	602b      	str	r3, [r5, #0]
 80070f6:	f04f 30ff 	mov.w	r0, #4294967295
 80070fa:	b01d      	add	sp, #116	@ 0x74
 80070fc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007100:	b002      	add	sp, #8
 8007102:	4770      	bx	lr
 8007104:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8007108:	f8ad 3014 	strh.w	r3, [sp, #20]
 800710c:	bf14      	ite	ne
 800710e:	f104 33ff 	addne.w	r3, r4, #4294967295
 8007112:	4623      	moveq	r3, r4
 8007114:	9304      	str	r3, [sp, #16]
 8007116:	9307      	str	r3, [sp, #28]
 8007118:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800711c:	9002      	str	r0, [sp, #8]
 800711e:	9006      	str	r0, [sp, #24]
 8007120:	f8ad 3016 	strh.w	r3, [sp, #22]
 8007124:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8007126:	ab21      	add	r3, sp, #132	@ 0x84
 8007128:	a902      	add	r1, sp, #8
 800712a:	4628      	mov	r0, r5
 800712c:	9301      	str	r3, [sp, #4]
 800712e:	f000 fab5 	bl	800769c <_svfiprintf_r>
 8007132:	1c43      	adds	r3, r0, #1
 8007134:	bfbc      	itt	lt
 8007136:	238b      	movlt	r3, #139	@ 0x8b
 8007138:	602b      	strlt	r3, [r5, #0]
 800713a:	2c00      	cmp	r4, #0
 800713c:	d0dd      	beq.n	80070fa <sniprintf+0x16>
 800713e:	9b02      	ldr	r3, [sp, #8]
 8007140:	2200      	movs	r2, #0
 8007142:	701a      	strb	r2, [r3, #0]
 8007144:	e7d9      	b.n	80070fa <sniprintf+0x16>
 8007146:	bf00      	nop
 8007148:	2000002c 	.word	0x2000002c

0800714c <__sread>:
 800714c:	b510      	push	{r4, lr}
 800714e:	460c      	mov	r4, r1
 8007150:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007154:	f000 f8fc 	bl	8007350 <_read_r>
 8007158:	2800      	cmp	r0, #0
 800715a:	bfab      	itete	ge
 800715c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800715e:	89a3      	ldrhlt	r3, [r4, #12]
 8007160:	181b      	addge	r3, r3, r0
 8007162:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8007166:	bfac      	ite	ge
 8007168:	6563      	strge	r3, [r4, #84]	@ 0x54
 800716a:	81a3      	strhlt	r3, [r4, #12]
 800716c:	bd10      	pop	{r4, pc}

0800716e <__swrite>:
 800716e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007172:	461f      	mov	r7, r3
 8007174:	898b      	ldrh	r3, [r1, #12]
 8007176:	05db      	lsls	r3, r3, #23
 8007178:	4605      	mov	r5, r0
 800717a:	460c      	mov	r4, r1
 800717c:	4616      	mov	r6, r2
 800717e:	d505      	bpl.n	800718c <__swrite+0x1e>
 8007180:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007184:	2302      	movs	r3, #2
 8007186:	2200      	movs	r2, #0
 8007188:	f000 f8d0 	bl	800732c <_lseek_r>
 800718c:	89a3      	ldrh	r3, [r4, #12]
 800718e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007192:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007196:	81a3      	strh	r3, [r4, #12]
 8007198:	4632      	mov	r2, r6
 800719a:	463b      	mov	r3, r7
 800719c:	4628      	mov	r0, r5
 800719e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80071a2:	f000 b8e7 	b.w	8007374 <_write_r>

080071a6 <__sseek>:
 80071a6:	b510      	push	{r4, lr}
 80071a8:	460c      	mov	r4, r1
 80071aa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80071ae:	f000 f8bd 	bl	800732c <_lseek_r>
 80071b2:	1c43      	adds	r3, r0, #1
 80071b4:	89a3      	ldrh	r3, [r4, #12]
 80071b6:	bf15      	itete	ne
 80071b8:	6560      	strne	r0, [r4, #84]	@ 0x54
 80071ba:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80071be:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80071c2:	81a3      	strheq	r3, [r4, #12]
 80071c4:	bf18      	it	ne
 80071c6:	81a3      	strhne	r3, [r4, #12]
 80071c8:	bd10      	pop	{r4, pc}

080071ca <__sclose>:
 80071ca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80071ce:	f000 b89d 	b.w	800730c <_close_r>

080071d2 <__swbuf_r>:
 80071d2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80071d4:	460e      	mov	r6, r1
 80071d6:	4614      	mov	r4, r2
 80071d8:	4605      	mov	r5, r0
 80071da:	b118      	cbz	r0, 80071e4 <__swbuf_r+0x12>
 80071dc:	6a03      	ldr	r3, [r0, #32]
 80071de:	b90b      	cbnz	r3, 80071e4 <__swbuf_r+0x12>
 80071e0:	f7ff feda 	bl	8006f98 <__sinit>
 80071e4:	69a3      	ldr	r3, [r4, #24]
 80071e6:	60a3      	str	r3, [r4, #8]
 80071e8:	89a3      	ldrh	r3, [r4, #12]
 80071ea:	071a      	lsls	r2, r3, #28
 80071ec:	d501      	bpl.n	80071f2 <__swbuf_r+0x20>
 80071ee:	6923      	ldr	r3, [r4, #16]
 80071f0:	b943      	cbnz	r3, 8007204 <__swbuf_r+0x32>
 80071f2:	4621      	mov	r1, r4
 80071f4:	4628      	mov	r0, r5
 80071f6:	f000 f82b 	bl	8007250 <__swsetup_r>
 80071fa:	b118      	cbz	r0, 8007204 <__swbuf_r+0x32>
 80071fc:	f04f 37ff 	mov.w	r7, #4294967295
 8007200:	4638      	mov	r0, r7
 8007202:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007204:	6823      	ldr	r3, [r4, #0]
 8007206:	6922      	ldr	r2, [r4, #16]
 8007208:	1a98      	subs	r0, r3, r2
 800720a:	6963      	ldr	r3, [r4, #20]
 800720c:	b2f6      	uxtb	r6, r6
 800720e:	4283      	cmp	r3, r0
 8007210:	4637      	mov	r7, r6
 8007212:	dc05      	bgt.n	8007220 <__swbuf_r+0x4e>
 8007214:	4621      	mov	r1, r4
 8007216:	4628      	mov	r0, r5
 8007218:	f000 fe90 	bl	8007f3c <_fflush_r>
 800721c:	2800      	cmp	r0, #0
 800721e:	d1ed      	bne.n	80071fc <__swbuf_r+0x2a>
 8007220:	68a3      	ldr	r3, [r4, #8]
 8007222:	3b01      	subs	r3, #1
 8007224:	60a3      	str	r3, [r4, #8]
 8007226:	6823      	ldr	r3, [r4, #0]
 8007228:	1c5a      	adds	r2, r3, #1
 800722a:	6022      	str	r2, [r4, #0]
 800722c:	701e      	strb	r6, [r3, #0]
 800722e:	6962      	ldr	r2, [r4, #20]
 8007230:	1c43      	adds	r3, r0, #1
 8007232:	429a      	cmp	r2, r3
 8007234:	d004      	beq.n	8007240 <__swbuf_r+0x6e>
 8007236:	89a3      	ldrh	r3, [r4, #12]
 8007238:	07db      	lsls	r3, r3, #31
 800723a:	d5e1      	bpl.n	8007200 <__swbuf_r+0x2e>
 800723c:	2e0a      	cmp	r6, #10
 800723e:	d1df      	bne.n	8007200 <__swbuf_r+0x2e>
 8007240:	4621      	mov	r1, r4
 8007242:	4628      	mov	r0, r5
 8007244:	f000 fe7a 	bl	8007f3c <_fflush_r>
 8007248:	2800      	cmp	r0, #0
 800724a:	d0d9      	beq.n	8007200 <__swbuf_r+0x2e>
 800724c:	e7d6      	b.n	80071fc <__swbuf_r+0x2a>
	...

08007250 <__swsetup_r>:
 8007250:	b538      	push	{r3, r4, r5, lr}
 8007252:	4b29      	ldr	r3, [pc, #164]	@ (80072f8 <__swsetup_r+0xa8>)
 8007254:	4605      	mov	r5, r0
 8007256:	6818      	ldr	r0, [r3, #0]
 8007258:	460c      	mov	r4, r1
 800725a:	b118      	cbz	r0, 8007264 <__swsetup_r+0x14>
 800725c:	6a03      	ldr	r3, [r0, #32]
 800725e:	b90b      	cbnz	r3, 8007264 <__swsetup_r+0x14>
 8007260:	f7ff fe9a 	bl	8006f98 <__sinit>
 8007264:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007268:	0719      	lsls	r1, r3, #28
 800726a:	d422      	bmi.n	80072b2 <__swsetup_r+0x62>
 800726c:	06da      	lsls	r2, r3, #27
 800726e:	d407      	bmi.n	8007280 <__swsetup_r+0x30>
 8007270:	2209      	movs	r2, #9
 8007272:	602a      	str	r2, [r5, #0]
 8007274:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007278:	81a3      	strh	r3, [r4, #12]
 800727a:	f04f 30ff 	mov.w	r0, #4294967295
 800727e:	e033      	b.n	80072e8 <__swsetup_r+0x98>
 8007280:	0758      	lsls	r0, r3, #29
 8007282:	d512      	bpl.n	80072aa <__swsetup_r+0x5a>
 8007284:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007286:	b141      	cbz	r1, 800729a <__swsetup_r+0x4a>
 8007288:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800728c:	4299      	cmp	r1, r3
 800728e:	d002      	beq.n	8007296 <__swsetup_r+0x46>
 8007290:	4628      	mov	r0, r5
 8007292:	f000 f8af 	bl	80073f4 <_free_r>
 8007296:	2300      	movs	r3, #0
 8007298:	6363      	str	r3, [r4, #52]	@ 0x34
 800729a:	89a3      	ldrh	r3, [r4, #12]
 800729c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80072a0:	81a3      	strh	r3, [r4, #12]
 80072a2:	2300      	movs	r3, #0
 80072a4:	6063      	str	r3, [r4, #4]
 80072a6:	6923      	ldr	r3, [r4, #16]
 80072a8:	6023      	str	r3, [r4, #0]
 80072aa:	89a3      	ldrh	r3, [r4, #12]
 80072ac:	f043 0308 	orr.w	r3, r3, #8
 80072b0:	81a3      	strh	r3, [r4, #12]
 80072b2:	6923      	ldr	r3, [r4, #16]
 80072b4:	b94b      	cbnz	r3, 80072ca <__swsetup_r+0x7a>
 80072b6:	89a3      	ldrh	r3, [r4, #12]
 80072b8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80072bc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80072c0:	d003      	beq.n	80072ca <__swsetup_r+0x7a>
 80072c2:	4621      	mov	r1, r4
 80072c4:	4628      	mov	r0, r5
 80072c6:	f000 fe87 	bl	8007fd8 <__smakebuf_r>
 80072ca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80072ce:	f013 0201 	ands.w	r2, r3, #1
 80072d2:	d00a      	beq.n	80072ea <__swsetup_r+0x9a>
 80072d4:	2200      	movs	r2, #0
 80072d6:	60a2      	str	r2, [r4, #8]
 80072d8:	6962      	ldr	r2, [r4, #20]
 80072da:	4252      	negs	r2, r2
 80072dc:	61a2      	str	r2, [r4, #24]
 80072de:	6922      	ldr	r2, [r4, #16]
 80072e0:	b942      	cbnz	r2, 80072f4 <__swsetup_r+0xa4>
 80072e2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80072e6:	d1c5      	bne.n	8007274 <__swsetup_r+0x24>
 80072e8:	bd38      	pop	{r3, r4, r5, pc}
 80072ea:	0799      	lsls	r1, r3, #30
 80072ec:	bf58      	it	pl
 80072ee:	6962      	ldrpl	r2, [r4, #20]
 80072f0:	60a2      	str	r2, [r4, #8]
 80072f2:	e7f4      	b.n	80072de <__swsetup_r+0x8e>
 80072f4:	2000      	movs	r0, #0
 80072f6:	e7f7      	b.n	80072e8 <__swsetup_r+0x98>
 80072f8:	2000002c 	.word	0x2000002c

080072fc <memset>:
 80072fc:	4402      	add	r2, r0
 80072fe:	4603      	mov	r3, r0
 8007300:	4293      	cmp	r3, r2
 8007302:	d100      	bne.n	8007306 <memset+0xa>
 8007304:	4770      	bx	lr
 8007306:	f803 1b01 	strb.w	r1, [r3], #1
 800730a:	e7f9      	b.n	8007300 <memset+0x4>

0800730c <_close_r>:
 800730c:	b538      	push	{r3, r4, r5, lr}
 800730e:	4d06      	ldr	r5, [pc, #24]	@ (8007328 <_close_r+0x1c>)
 8007310:	2300      	movs	r3, #0
 8007312:	4604      	mov	r4, r0
 8007314:	4608      	mov	r0, r1
 8007316:	602b      	str	r3, [r5, #0]
 8007318:	f7fc f92a 	bl	8003570 <_close>
 800731c:	1c43      	adds	r3, r0, #1
 800731e:	d102      	bne.n	8007326 <_close_r+0x1a>
 8007320:	682b      	ldr	r3, [r5, #0]
 8007322:	b103      	cbz	r3, 8007326 <_close_r+0x1a>
 8007324:	6023      	str	r3, [r4, #0]
 8007326:	bd38      	pop	{r3, r4, r5, pc}
 8007328:	20025d34 	.word	0x20025d34

0800732c <_lseek_r>:
 800732c:	b538      	push	{r3, r4, r5, lr}
 800732e:	4d07      	ldr	r5, [pc, #28]	@ (800734c <_lseek_r+0x20>)
 8007330:	4604      	mov	r4, r0
 8007332:	4608      	mov	r0, r1
 8007334:	4611      	mov	r1, r2
 8007336:	2200      	movs	r2, #0
 8007338:	602a      	str	r2, [r5, #0]
 800733a:	461a      	mov	r2, r3
 800733c:	f7fc f93f 	bl	80035be <_lseek>
 8007340:	1c43      	adds	r3, r0, #1
 8007342:	d102      	bne.n	800734a <_lseek_r+0x1e>
 8007344:	682b      	ldr	r3, [r5, #0]
 8007346:	b103      	cbz	r3, 800734a <_lseek_r+0x1e>
 8007348:	6023      	str	r3, [r4, #0]
 800734a:	bd38      	pop	{r3, r4, r5, pc}
 800734c:	20025d34 	.word	0x20025d34

08007350 <_read_r>:
 8007350:	b538      	push	{r3, r4, r5, lr}
 8007352:	4d07      	ldr	r5, [pc, #28]	@ (8007370 <_read_r+0x20>)
 8007354:	4604      	mov	r4, r0
 8007356:	4608      	mov	r0, r1
 8007358:	4611      	mov	r1, r2
 800735a:	2200      	movs	r2, #0
 800735c:	602a      	str	r2, [r5, #0]
 800735e:	461a      	mov	r2, r3
 8007360:	f7fc f8cd 	bl	80034fe <_read>
 8007364:	1c43      	adds	r3, r0, #1
 8007366:	d102      	bne.n	800736e <_read_r+0x1e>
 8007368:	682b      	ldr	r3, [r5, #0]
 800736a:	b103      	cbz	r3, 800736e <_read_r+0x1e>
 800736c:	6023      	str	r3, [r4, #0]
 800736e:	bd38      	pop	{r3, r4, r5, pc}
 8007370:	20025d34 	.word	0x20025d34

08007374 <_write_r>:
 8007374:	b538      	push	{r3, r4, r5, lr}
 8007376:	4d07      	ldr	r5, [pc, #28]	@ (8007394 <_write_r+0x20>)
 8007378:	4604      	mov	r4, r0
 800737a:	4608      	mov	r0, r1
 800737c:	4611      	mov	r1, r2
 800737e:	2200      	movs	r2, #0
 8007380:	602a      	str	r2, [r5, #0]
 8007382:	461a      	mov	r2, r3
 8007384:	f7fc f8d8 	bl	8003538 <_write>
 8007388:	1c43      	adds	r3, r0, #1
 800738a:	d102      	bne.n	8007392 <_write_r+0x1e>
 800738c:	682b      	ldr	r3, [r5, #0]
 800738e:	b103      	cbz	r3, 8007392 <_write_r+0x1e>
 8007390:	6023      	str	r3, [r4, #0]
 8007392:	bd38      	pop	{r3, r4, r5, pc}
 8007394:	20025d34 	.word	0x20025d34

08007398 <__errno>:
 8007398:	4b01      	ldr	r3, [pc, #4]	@ (80073a0 <__errno+0x8>)
 800739a:	6818      	ldr	r0, [r3, #0]
 800739c:	4770      	bx	lr
 800739e:	bf00      	nop
 80073a0:	2000002c 	.word	0x2000002c

080073a4 <__libc_init_array>:
 80073a4:	b570      	push	{r4, r5, r6, lr}
 80073a6:	4d0d      	ldr	r5, [pc, #52]	@ (80073dc <__libc_init_array+0x38>)
 80073a8:	4c0d      	ldr	r4, [pc, #52]	@ (80073e0 <__libc_init_array+0x3c>)
 80073aa:	1b64      	subs	r4, r4, r5
 80073ac:	10a4      	asrs	r4, r4, #2
 80073ae:	2600      	movs	r6, #0
 80073b0:	42a6      	cmp	r6, r4
 80073b2:	d109      	bne.n	80073c8 <__libc_init_array+0x24>
 80073b4:	4d0b      	ldr	r5, [pc, #44]	@ (80073e4 <__libc_init_array+0x40>)
 80073b6:	4c0c      	ldr	r4, [pc, #48]	@ (80073e8 <__libc_init_array+0x44>)
 80073b8:	f000 feda 	bl	8008170 <_init>
 80073bc:	1b64      	subs	r4, r4, r5
 80073be:	10a4      	asrs	r4, r4, #2
 80073c0:	2600      	movs	r6, #0
 80073c2:	42a6      	cmp	r6, r4
 80073c4:	d105      	bne.n	80073d2 <__libc_init_array+0x2e>
 80073c6:	bd70      	pop	{r4, r5, r6, pc}
 80073c8:	f855 3b04 	ldr.w	r3, [r5], #4
 80073cc:	4798      	blx	r3
 80073ce:	3601      	adds	r6, #1
 80073d0:	e7ee      	b.n	80073b0 <__libc_init_array+0xc>
 80073d2:	f855 3b04 	ldr.w	r3, [r5], #4
 80073d6:	4798      	blx	r3
 80073d8:	3601      	adds	r6, #1
 80073da:	e7f2      	b.n	80073c2 <__libc_init_array+0x1e>
 80073dc:	08009410 	.word	0x08009410
 80073e0:	08009410 	.word	0x08009410
 80073e4:	08009410 	.word	0x08009410
 80073e8:	08009414 	.word	0x08009414

080073ec <__retarget_lock_init_recursive>:
 80073ec:	4770      	bx	lr

080073ee <__retarget_lock_acquire_recursive>:
 80073ee:	4770      	bx	lr

080073f0 <__retarget_lock_release_recursive>:
 80073f0:	4770      	bx	lr
	...

080073f4 <_free_r>:
 80073f4:	b538      	push	{r3, r4, r5, lr}
 80073f6:	4605      	mov	r5, r0
 80073f8:	2900      	cmp	r1, #0
 80073fa:	d041      	beq.n	8007480 <_free_r+0x8c>
 80073fc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007400:	1f0c      	subs	r4, r1, #4
 8007402:	2b00      	cmp	r3, #0
 8007404:	bfb8      	it	lt
 8007406:	18e4      	addlt	r4, r4, r3
 8007408:	f000 f8e0 	bl	80075cc <__malloc_lock>
 800740c:	4a1d      	ldr	r2, [pc, #116]	@ (8007484 <_free_r+0x90>)
 800740e:	6813      	ldr	r3, [r2, #0]
 8007410:	b933      	cbnz	r3, 8007420 <_free_r+0x2c>
 8007412:	6063      	str	r3, [r4, #4]
 8007414:	6014      	str	r4, [r2, #0]
 8007416:	4628      	mov	r0, r5
 8007418:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800741c:	f000 b8dc 	b.w	80075d8 <__malloc_unlock>
 8007420:	42a3      	cmp	r3, r4
 8007422:	d908      	bls.n	8007436 <_free_r+0x42>
 8007424:	6820      	ldr	r0, [r4, #0]
 8007426:	1821      	adds	r1, r4, r0
 8007428:	428b      	cmp	r3, r1
 800742a:	bf01      	itttt	eq
 800742c:	6819      	ldreq	r1, [r3, #0]
 800742e:	685b      	ldreq	r3, [r3, #4]
 8007430:	1809      	addeq	r1, r1, r0
 8007432:	6021      	streq	r1, [r4, #0]
 8007434:	e7ed      	b.n	8007412 <_free_r+0x1e>
 8007436:	461a      	mov	r2, r3
 8007438:	685b      	ldr	r3, [r3, #4]
 800743a:	b10b      	cbz	r3, 8007440 <_free_r+0x4c>
 800743c:	42a3      	cmp	r3, r4
 800743e:	d9fa      	bls.n	8007436 <_free_r+0x42>
 8007440:	6811      	ldr	r1, [r2, #0]
 8007442:	1850      	adds	r0, r2, r1
 8007444:	42a0      	cmp	r0, r4
 8007446:	d10b      	bne.n	8007460 <_free_r+0x6c>
 8007448:	6820      	ldr	r0, [r4, #0]
 800744a:	4401      	add	r1, r0
 800744c:	1850      	adds	r0, r2, r1
 800744e:	4283      	cmp	r3, r0
 8007450:	6011      	str	r1, [r2, #0]
 8007452:	d1e0      	bne.n	8007416 <_free_r+0x22>
 8007454:	6818      	ldr	r0, [r3, #0]
 8007456:	685b      	ldr	r3, [r3, #4]
 8007458:	6053      	str	r3, [r2, #4]
 800745a:	4408      	add	r0, r1
 800745c:	6010      	str	r0, [r2, #0]
 800745e:	e7da      	b.n	8007416 <_free_r+0x22>
 8007460:	d902      	bls.n	8007468 <_free_r+0x74>
 8007462:	230c      	movs	r3, #12
 8007464:	602b      	str	r3, [r5, #0]
 8007466:	e7d6      	b.n	8007416 <_free_r+0x22>
 8007468:	6820      	ldr	r0, [r4, #0]
 800746a:	1821      	adds	r1, r4, r0
 800746c:	428b      	cmp	r3, r1
 800746e:	bf04      	itt	eq
 8007470:	6819      	ldreq	r1, [r3, #0]
 8007472:	685b      	ldreq	r3, [r3, #4]
 8007474:	6063      	str	r3, [r4, #4]
 8007476:	bf04      	itt	eq
 8007478:	1809      	addeq	r1, r1, r0
 800747a:	6021      	streq	r1, [r4, #0]
 800747c:	6054      	str	r4, [r2, #4]
 800747e:	e7ca      	b.n	8007416 <_free_r+0x22>
 8007480:	bd38      	pop	{r3, r4, r5, pc}
 8007482:	bf00      	nop
 8007484:	20025d40 	.word	0x20025d40

08007488 <sbrk_aligned>:
 8007488:	b570      	push	{r4, r5, r6, lr}
 800748a:	4e0f      	ldr	r6, [pc, #60]	@ (80074c8 <sbrk_aligned+0x40>)
 800748c:	460c      	mov	r4, r1
 800748e:	6831      	ldr	r1, [r6, #0]
 8007490:	4605      	mov	r5, r0
 8007492:	b911      	cbnz	r1, 800749a <sbrk_aligned+0x12>
 8007494:	f000 fe18 	bl	80080c8 <_sbrk_r>
 8007498:	6030      	str	r0, [r6, #0]
 800749a:	4621      	mov	r1, r4
 800749c:	4628      	mov	r0, r5
 800749e:	f000 fe13 	bl	80080c8 <_sbrk_r>
 80074a2:	1c43      	adds	r3, r0, #1
 80074a4:	d103      	bne.n	80074ae <sbrk_aligned+0x26>
 80074a6:	f04f 34ff 	mov.w	r4, #4294967295
 80074aa:	4620      	mov	r0, r4
 80074ac:	bd70      	pop	{r4, r5, r6, pc}
 80074ae:	1cc4      	adds	r4, r0, #3
 80074b0:	f024 0403 	bic.w	r4, r4, #3
 80074b4:	42a0      	cmp	r0, r4
 80074b6:	d0f8      	beq.n	80074aa <sbrk_aligned+0x22>
 80074b8:	1a21      	subs	r1, r4, r0
 80074ba:	4628      	mov	r0, r5
 80074bc:	f000 fe04 	bl	80080c8 <_sbrk_r>
 80074c0:	3001      	adds	r0, #1
 80074c2:	d1f2      	bne.n	80074aa <sbrk_aligned+0x22>
 80074c4:	e7ef      	b.n	80074a6 <sbrk_aligned+0x1e>
 80074c6:	bf00      	nop
 80074c8:	20025d3c 	.word	0x20025d3c

080074cc <_malloc_r>:
 80074cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80074d0:	1ccd      	adds	r5, r1, #3
 80074d2:	f025 0503 	bic.w	r5, r5, #3
 80074d6:	3508      	adds	r5, #8
 80074d8:	2d0c      	cmp	r5, #12
 80074da:	bf38      	it	cc
 80074dc:	250c      	movcc	r5, #12
 80074de:	2d00      	cmp	r5, #0
 80074e0:	4606      	mov	r6, r0
 80074e2:	db01      	blt.n	80074e8 <_malloc_r+0x1c>
 80074e4:	42a9      	cmp	r1, r5
 80074e6:	d904      	bls.n	80074f2 <_malloc_r+0x26>
 80074e8:	230c      	movs	r3, #12
 80074ea:	6033      	str	r3, [r6, #0]
 80074ec:	2000      	movs	r0, #0
 80074ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80074f2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80075c8 <_malloc_r+0xfc>
 80074f6:	f000 f869 	bl	80075cc <__malloc_lock>
 80074fa:	f8d8 3000 	ldr.w	r3, [r8]
 80074fe:	461c      	mov	r4, r3
 8007500:	bb44      	cbnz	r4, 8007554 <_malloc_r+0x88>
 8007502:	4629      	mov	r1, r5
 8007504:	4630      	mov	r0, r6
 8007506:	f7ff ffbf 	bl	8007488 <sbrk_aligned>
 800750a:	1c43      	adds	r3, r0, #1
 800750c:	4604      	mov	r4, r0
 800750e:	d158      	bne.n	80075c2 <_malloc_r+0xf6>
 8007510:	f8d8 4000 	ldr.w	r4, [r8]
 8007514:	4627      	mov	r7, r4
 8007516:	2f00      	cmp	r7, #0
 8007518:	d143      	bne.n	80075a2 <_malloc_r+0xd6>
 800751a:	2c00      	cmp	r4, #0
 800751c:	d04b      	beq.n	80075b6 <_malloc_r+0xea>
 800751e:	6823      	ldr	r3, [r4, #0]
 8007520:	4639      	mov	r1, r7
 8007522:	4630      	mov	r0, r6
 8007524:	eb04 0903 	add.w	r9, r4, r3
 8007528:	f000 fdce 	bl	80080c8 <_sbrk_r>
 800752c:	4581      	cmp	r9, r0
 800752e:	d142      	bne.n	80075b6 <_malloc_r+0xea>
 8007530:	6821      	ldr	r1, [r4, #0]
 8007532:	1a6d      	subs	r5, r5, r1
 8007534:	4629      	mov	r1, r5
 8007536:	4630      	mov	r0, r6
 8007538:	f7ff ffa6 	bl	8007488 <sbrk_aligned>
 800753c:	3001      	adds	r0, #1
 800753e:	d03a      	beq.n	80075b6 <_malloc_r+0xea>
 8007540:	6823      	ldr	r3, [r4, #0]
 8007542:	442b      	add	r3, r5
 8007544:	6023      	str	r3, [r4, #0]
 8007546:	f8d8 3000 	ldr.w	r3, [r8]
 800754a:	685a      	ldr	r2, [r3, #4]
 800754c:	bb62      	cbnz	r2, 80075a8 <_malloc_r+0xdc>
 800754e:	f8c8 7000 	str.w	r7, [r8]
 8007552:	e00f      	b.n	8007574 <_malloc_r+0xa8>
 8007554:	6822      	ldr	r2, [r4, #0]
 8007556:	1b52      	subs	r2, r2, r5
 8007558:	d420      	bmi.n	800759c <_malloc_r+0xd0>
 800755a:	2a0b      	cmp	r2, #11
 800755c:	d917      	bls.n	800758e <_malloc_r+0xc2>
 800755e:	1961      	adds	r1, r4, r5
 8007560:	42a3      	cmp	r3, r4
 8007562:	6025      	str	r5, [r4, #0]
 8007564:	bf18      	it	ne
 8007566:	6059      	strne	r1, [r3, #4]
 8007568:	6863      	ldr	r3, [r4, #4]
 800756a:	bf08      	it	eq
 800756c:	f8c8 1000 	streq.w	r1, [r8]
 8007570:	5162      	str	r2, [r4, r5]
 8007572:	604b      	str	r3, [r1, #4]
 8007574:	4630      	mov	r0, r6
 8007576:	f000 f82f 	bl	80075d8 <__malloc_unlock>
 800757a:	f104 000b 	add.w	r0, r4, #11
 800757e:	1d23      	adds	r3, r4, #4
 8007580:	f020 0007 	bic.w	r0, r0, #7
 8007584:	1ac2      	subs	r2, r0, r3
 8007586:	bf1c      	itt	ne
 8007588:	1a1b      	subne	r3, r3, r0
 800758a:	50a3      	strne	r3, [r4, r2]
 800758c:	e7af      	b.n	80074ee <_malloc_r+0x22>
 800758e:	6862      	ldr	r2, [r4, #4]
 8007590:	42a3      	cmp	r3, r4
 8007592:	bf0c      	ite	eq
 8007594:	f8c8 2000 	streq.w	r2, [r8]
 8007598:	605a      	strne	r2, [r3, #4]
 800759a:	e7eb      	b.n	8007574 <_malloc_r+0xa8>
 800759c:	4623      	mov	r3, r4
 800759e:	6864      	ldr	r4, [r4, #4]
 80075a0:	e7ae      	b.n	8007500 <_malloc_r+0x34>
 80075a2:	463c      	mov	r4, r7
 80075a4:	687f      	ldr	r7, [r7, #4]
 80075a6:	e7b6      	b.n	8007516 <_malloc_r+0x4a>
 80075a8:	461a      	mov	r2, r3
 80075aa:	685b      	ldr	r3, [r3, #4]
 80075ac:	42a3      	cmp	r3, r4
 80075ae:	d1fb      	bne.n	80075a8 <_malloc_r+0xdc>
 80075b0:	2300      	movs	r3, #0
 80075b2:	6053      	str	r3, [r2, #4]
 80075b4:	e7de      	b.n	8007574 <_malloc_r+0xa8>
 80075b6:	230c      	movs	r3, #12
 80075b8:	6033      	str	r3, [r6, #0]
 80075ba:	4630      	mov	r0, r6
 80075bc:	f000 f80c 	bl	80075d8 <__malloc_unlock>
 80075c0:	e794      	b.n	80074ec <_malloc_r+0x20>
 80075c2:	6005      	str	r5, [r0, #0]
 80075c4:	e7d6      	b.n	8007574 <_malloc_r+0xa8>
 80075c6:	bf00      	nop
 80075c8:	20025d40 	.word	0x20025d40

080075cc <__malloc_lock>:
 80075cc:	4801      	ldr	r0, [pc, #4]	@ (80075d4 <__malloc_lock+0x8>)
 80075ce:	f7ff bf0e 	b.w	80073ee <__retarget_lock_acquire_recursive>
 80075d2:	bf00      	nop
 80075d4:	20025d38 	.word	0x20025d38

080075d8 <__malloc_unlock>:
 80075d8:	4801      	ldr	r0, [pc, #4]	@ (80075e0 <__malloc_unlock+0x8>)
 80075da:	f7ff bf09 	b.w	80073f0 <__retarget_lock_release_recursive>
 80075de:	bf00      	nop
 80075e0:	20025d38 	.word	0x20025d38

080075e4 <__ssputs_r>:
 80075e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80075e8:	688e      	ldr	r6, [r1, #8]
 80075ea:	461f      	mov	r7, r3
 80075ec:	42be      	cmp	r6, r7
 80075ee:	680b      	ldr	r3, [r1, #0]
 80075f0:	4682      	mov	sl, r0
 80075f2:	460c      	mov	r4, r1
 80075f4:	4690      	mov	r8, r2
 80075f6:	d82d      	bhi.n	8007654 <__ssputs_r+0x70>
 80075f8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80075fc:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8007600:	d026      	beq.n	8007650 <__ssputs_r+0x6c>
 8007602:	6965      	ldr	r5, [r4, #20]
 8007604:	6909      	ldr	r1, [r1, #16]
 8007606:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800760a:	eba3 0901 	sub.w	r9, r3, r1
 800760e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007612:	1c7b      	adds	r3, r7, #1
 8007614:	444b      	add	r3, r9
 8007616:	106d      	asrs	r5, r5, #1
 8007618:	429d      	cmp	r5, r3
 800761a:	bf38      	it	cc
 800761c:	461d      	movcc	r5, r3
 800761e:	0553      	lsls	r3, r2, #21
 8007620:	d527      	bpl.n	8007672 <__ssputs_r+0x8e>
 8007622:	4629      	mov	r1, r5
 8007624:	f7ff ff52 	bl	80074cc <_malloc_r>
 8007628:	4606      	mov	r6, r0
 800762a:	b360      	cbz	r0, 8007686 <__ssputs_r+0xa2>
 800762c:	6921      	ldr	r1, [r4, #16]
 800762e:	464a      	mov	r2, r9
 8007630:	f000 fd5a 	bl	80080e8 <memcpy>
 8007634:	89a3      	ldrh	r3, [r4, #12]
 8007636:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800763a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800763e:	81a3      	strh	r3, [r4, #12]
 8007640:	6126      	str	r6, [r4, #16]
 8007642:	6165      	str	r5, [r4, #20]
 8007644:	444e      	add	r6, r9
 8007646:	eba5 0509 	sub.w	r5, r5, r9
 800764a:	6026      	str	r6, [r4, #0]
 800764c:	60a5      	str	r5, [r4, #8]
 800764e:	463e      	mov	r6, r7
 8007650:	42be      	cmp	r6, r7
 8007652:	d900      	bls.n	8007656 <__ssputs_r+0x72>
 8007654:	463e      	mov	r6, r7
 8007656:	6820      	ldr	r0, [r4, #0]
 8007658:	4632      	mov	r2, r6
 800765a:	4641      	mov	r1, r8
 800765c:	f000 fcf8 	bl	8008050 <memmove>
 8007660:	68a3      	ldr	r3, [r4, #8]
 8007662:	1b9b      	subs	r3, r3, r6
 8007664:	60a3      	str	r3, [r4, #8]
 8007666:	6823      	ldr	r3, [r4, #0]
 8007668:	4433      	add	r3, r6
 800766a:	6023      	str	r3, [r4, #0]
 800766c:	2000      	movs	r0, #0
 800766e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007672:	462a      	mov	r2, r5
 8007674:	f000 fd46 	bl	8008104 <_realloc_r>
 8007678:	4606      	mov	r6, r0
 800767a:	2800      	cmp	r0, #0
 800767c:	d1e0      	bne.n	8007640 <__ssputs_r+0x5c>
 800767e:	6921      	ldr	r1, [r4, #16]
 8007680:	4650      	mov	r0, sl
 8007682:	f7ff feb7 	bl	80073f4 <_free_r>
 8007686:	230c      	movs	r3, #12
 8007688:	f8ca 3000 	str.w	r3, [sl]
 800768c:	89a3      	ldrh	r3, [r4, #12]
 800768e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007692:	81a3      	strh	r3, [r4, #12]
 8007694:	f04f 30ff 	mov.w	r0, #4294967295
 8007698:	e7e9      	b.n	800766e <__ssputs_r+0x8a>
	...

0800769c <_svfiprintf_r>:
 800769c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80076a0:	4698      	mov	r8, r3
 80076a2:	898b      	ldrh	r3, [r1, #12]
 80076a4:	061b      	lsls	r3, r3, #24
 80076a6:	b09d      	sub	sp, #116	@ 0x74
 80076a8:	4607      	mov	r7, r0
 80076aa:	460d      	mov	r5, r1
 80076ac:	4614      	mov	r4, r2
 80076ae:	d510      	bpl.n	80076d2 <_svfiprintf_r+0x36>
 80076b0:	690b      	ldr	r3, [r1, #16]
 80076b2:	b973      	cbnz	r3, 80076d2 <_svfiprintf_r+0x36>
 80076b4:	2140      	movs	r1, #64	@ 0x40
 80076b6:	f7ff ff09 	bl	80074cc <_malloc_r>
 80076ba:	6028      	str	r0, [r5, #0]
 80076bc:	6128      	str	r0, [r5, #16]
 80076be:	b930      	cbnz	r0, 80076ce <_svfiprintf_r+0x32>
 80076c0:	230c      	movs	r3, #12
 80076c2:	603b      	str	r3, [r7, #0]
 80076c4:	f04f 30ff 	mov.w	r0, #4294967295
 80076c8:	b01d      	add	sp, #116	@ 0x74
 80076ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80076ce:	2340      	movs	r3, #64	@ 0x40
 80076d0:	616b      	str	r3, [r5, #20]
 80076d2:	2300      	movs	r3, #0
 80076d4:	9309      	str	r3, [sp, #36]	@ 0x24
 80076d6:	2320      	movs	r3, #32
 80076d8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80076dc:	f8cd 800c 	str.w	r8, [sp, #12]
 80076e0:	2330      	movs	r3, #48	@ 0x30
 80076e2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8007880 <_svfiprintf_r+0x1e4>
 80076e6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80076ea:	f04f 0901 	mov.w	r9, #1
 80076ee:	4623      	mov	r3, r4
 80076f0:	469a      	mov	sl, r3
 80076f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80076f6:	b10a      	cbz	r2, 80076fc <_svfiprintf_r+0x60>
 80076f8:	2a25      	cmp	r2, #37	@ 0x25
 80076fa:	d1f9      	bne.n	80076f0 <_svfiprintf_r+0x54>
 80076fc:	ebba 0b04 	subs.w	fp, sl, r4
 8007700:	d00b      	beq.n	800771a <_svfiprintf_r+0x7e>
 8007702:	465b      	mov	r3, fp
 8007704:	4622      	mov	r2, r4
 8007706:	4629      	mov	r1, r5
 8007708:	4638      	mov	r0, r7
 800770a:	f7ff ff6b 	bl	80075e4 <__ssputs_r>
 800770e:	3001      	adds	r0, #1
 8007710:	f000 80a7 	beq.w	8007862 <_svfiprintf_r+0x1c6>
 8007714:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007716:	445a      	add	r2, fp
 8007718:	9209      	str	r2, [sp, #36]	@ 0x24
 800771a:	f89a 3000 	ldrb.w	r3, [sl]
 800771e:	2b00      	cmp	r3, #0
 8007720:	f000 809f 	beq.w	8007862 <_svfiprintf_r+0x1c6>
 8007724:	2300      	movs	r3, #0
 8007726:	f04f 32ff 	mov.w	r2, #4294967295
 800772a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800772e:	f10a 0a01 	add.w	sl, sl, #1
 8007732:	9304      	str	r3, [sp, #16]
 8007734:	9307      	str	r3, [sp, #28]
 8007736:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800773a:	931a      	str	r3, [sp, #104]	@ 0x68
 800773c:	4654      	mov	r4, sl
 800773e:	2205      	movs	r2, #5
 8007740:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007744:	484e      	ldr	r0, [pc, #312]	@ (8007880 <_svfiprintf_r+0x1e4>)
 8007746:	f7f8 fd53 	bl	80001f0 <memchr>
 800774a:	9a04      	ldr	r2, [sp, #16]
 800774c:	b9d8      	cbnz	r0, 8007786 <_svfiprintf_r+0xea>
 800774e:	06d0      	lsls	r0, r2, #27
 8007750:	bf44      	itt	mi
 8007752:	2320      	movmi	r3, #32
 8007754:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007758:	0711      	lsls	r1, r2, #28
 800775a:	bf44      	itt	mi
 800775c:	232b      	movmi	r3, #43	@ 0x2b
 800775e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007762:	f89a 3000 	ldrb.w	r3, [sl]
 8007766:	2b2a      	cmp	r3, #42	@ 0x2a
 8007768:	d015      	beq.n	8007796 <_svfiprintf_r+0xfa>
 800776a:	9a07      	ldr	r2, [sp, #28]
 800776c:	4654      	mov	r4, sl
 800776e:	2000      	movs	r0, #0
 8007770:	f04f 0c0a 	mov.w	ip, #10
 8007774:	4621      	mov	r1, r4
 8007776:	f811 3b01 	ldrb.w	r3, [r1], #1
 800777a:	3b30      	subs	r3, #48	@ 0x30
 800777c:	2b09      	cmp	r3, #9
 800777e:	d94b      	bls.n	8007818 <_svfiprintf_r+0x17c>
 8007780:	b1b0      	cbz	r0, 80077b0 <_svfiprintf_r+0x114>
 8007782:	9207      	str	r2, [sp, #28]
 8007784:	e014      	b.n	80077b0 <_svfiprintf_r+0x114>
 8007786:	eba0 0308 	sub.w	r3, r0, r8
 800778a:	fa09 f303 	lsl.w	r3, r9, r3
 800778e:	4313      	orrs	r3, r2
 8007790:	9304      	str	r3, [sp, #16]
 8007792:	46a2      	mov	sl, r4
 8007794:	e7d2      	b.n	800773c <_svfiprintf_r+0xa0>
 8007796:	9b03      	ldr	r3, [sp, #12]
 8007798:	1d19      	adds	r1, r3, #4
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	9103      	str	r1, [sp, #12]
 800779e:	2b00      	cmp	r3, #0
 80077a0:	bfbb      	ittet	lt
 80077a2:	425b      	neglt	r3, r3
 80077a4:	f042 0202 	orrlt.w	r2, r2, #2
 80077a8:	9307      	strge	r3, [sp, #28]
 80077aa:	9307      	strlt	r3, [sp, #28]
 80077ac:	bfb8      	it	lt
 80077ae:	9204      	strlt	r2, [sp, #16]
 80077b0:	7823      	ldrb	r3, [r4, #0]
 80077b2:	2b2e      	cmp	r3, #46	@ 0x2e
 80077b4:	d10a      	bne.n	80077cc <_svfiprintf_r+0x130>
 80077b6:	7863      	ldrb	r3, [r4, #1]
 80077b8:	2b2a      	cmp	r3, #42	@ 0x2a
 80077ba:	d132      	bne.n	8007822 <_svfiprintf_r+0x186>
 80077bc:	9b03      	ldr	r3, [sp, #12]
 80077be:	1d1a      	adds	r2, r3, #4
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	9203      	str	r2, [sp, #12]
 80077c4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80077c8:	3402      	adds	r4, #2
 80077ca:	9305      	str	r3, [sp, #20]
 80077cc:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8007890 <_svfiprintf_r+0x1f4>
 80077d0:	7821      	ldrb	r1, [r4, #0]
 80077d2:	2203      	movs	r2, #3
 80077d4:	4650      	mov	r0, sl
 80077d6:	f7f8 fd0b 	bl	80001f0 <memchr>
 80077da:	b138      	cbz	r0, 80077ec <_svfiprintf_r+0x150>
 80077dc:	9b04      	ldr	r3, [sp, #16]
 80077de:	eba0 000a 	sub.w	r0, r0, sl
 80077e2:	2240      	movs	r2, #64	@ 0x40
 80077e4:	4082      	lsls	r2, r0
 80077e6:	4313      	orrs	r3, r2
 80077e8:	3401      	adds	r4, #1
 80077ea:	9304      	str	r3, [sp, #16]
 80077ec:	f814 1b01 	ldrb.w	r1, [r4], #1
 80077f0:	4824      	ldr	r0, [pc, #144]	@ (8007884 <_svfiprintf_r+0x1e8>)
 80077f2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80077f6:	2206      	movs	r2, #6
 80077f8:	f7f8 fcfa 	bl	80001f0 <memchr>
 80077fc:	2800      	cmp	r0, #0
 80077fe:	d036      	beq.n	800786e <_svfiprintf_r+0x1d2>
 8007800:	4b21      	ldr	r3, [pc, #132]	@ (8007888 <_svfiprintf_r+0x1ec>)
 8007802:	bb1b      	cbnz	r3, 800784c <_svfiprintf_r+0x1b0>
 8007804:	9b03      	ldr	r3, [sp, #12]
 8007806:	3307      	adds	r3, #7
 8007808:	f023 0307 	bic.w	r3, r3, #7
 800780c:	3308      	adds	r3, #8
 800780e:	9303      	str	r3, [sp, #12]
 8007810:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007812:	4433      	add	r3, r6
 8007814:	9309      	str	r3, [sp, #36]	@ 0x24
 8007816:	e76a      	b.n	80076ee <_svfiprintf_r+0x52>
 8007818:	fb0c 3202 	mla	r2, ip, r2, r3
 800781c:	460c      	mov	r4, r1
 800781e:	2001      	movs	r0, #1
 8007820:	e7a8      	b.n	8007774 <_svfiprintf_r+0xd8>
 8007822:	2300      	movs	r3, #0
 8007824:	3401      	adds	r4, #1
 8007826:	9305      	str	r3, [sp, #20]
 8007828:	4619      	mov	r1, r3
 800782a:	f04f 0c0a 	mov.w	ip, #10
 800782e:	4620      	mov	r0, r4
 8007830:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007834:	3a30      	subs	r2, #48	@ 0x30
 8007836:	2a09      	cmp	r2, #9
 8007838:	d903      	bls.n	8007842 <_svfiprintf_r+0x1a6>
 800783a:	2b00      	cmp	r3, #0
 800783c:	d0c6      	beq.n	80077cc <_svfiprintf_r+0x130>
 800783e:	9105      	str	r1, [sp, #20]
 8007840:	e7c4      	b.n	80077cc <_svfiprintf_r+0x130>
 8007842:	fb0c 2101 	mla	r1, ip, r1, r2
 8007846:	4604      	mov	r4, r0
 8007848:	2301      	movs	r3, #1
 800784a:	e7f0      	b.n	800782e <_svfiprintf_r+0x192>
 800784c:	ab03      	add	r3, sp, #12
 800784e:	9300      	str	r3, [sp, #0]
 8007850:	462a      	mov	r2, r5
 8007852:	4b0e      	ldr	r3, [pc, #56]	@ (800788c <_svfiprintf_r+0x1f0>)
 8007854:	a904      	add	r1, sp, #16
 8007856:	4638      	mov	r0, r7
 8007858:	f3af 8000 	nop.w
 800785c:	1c42      	adds	r2, r0, #1
 800785e:	4606      	mov	r6, r0
 8007860:	d1d6      	bne.n	8007810 <_svfiprintf_r+0x174>
 8007862:	89ab      	ldrh	r3, [r5, #12]
 8007864:	065b      	lsls	r3, r3, #25
 8007866:	f53f af2d 	bmi.w	80076c4 <_svfiprintf_r+0x28>
 800786a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800786c:	e72c      	b.n	80076c8 <_svfiprintf_r+0x2c>
 800786e:	ab03      	add	r3, sp, #12
 8007870:	9300      	str	r3, [sp, #0]
 8007872:	462a      	mov	r2, r5
 8007874:	4b05      	ldr	r3, [pc, #20]	@ (800788c <_svfiprintf_r+0x1f0>)
 8007876:	a904      	add	r1, sp, #16
 8007878:	4638      	mov	r0, r7
 800787a:	f000 f9bb 	bl	8007bf4 <_printf_i>
 800787e:	e7ed      	b.n	800785c <_svfiprintf_r+0x1c0>
 8007880:	080093d4 	.word	0x080093d4
 8007884:	080093de 	.word	0x080093de
 8007888:	00000000 	.word	0x00000000
 800788c:	080075e5 	.word	0x080075e5
 8007890:	080093da 	.word	0x080093da

08007894 <__sfputc_r>:
 8007894:	6893      	ldr	r3, [r2, #8]
 8007896:	3b01      	subs	r3, #1
 8007898:	2b00      	cmp	r3, #0
 800789a:	b410      	push	{r4}
 800789c:	6093      	str	r3, [r2, #8]
 800789e:	da08      	bge.n	80078b2 <__sfputc_r+0x1e>
 80078a0:	6994      	ldr	r4, [r2, #24]
 80078a2:	42a3      	cmp	r3, r4
 80078a4:	db01      	blt.n	80078aa <__sfputc_r+0x16>
 80078a6:	290a      	cmp	r1, #10
 80078a8:	d103      	bne.n	80078b2 <__sfputc_r+0x1e>
 80078aa:	f85d 4b04 	ldr.w	r4, [sp], #4
 80078ae:	f7ff bc90 	b.w	80071d2 <__swbuf_r>
 80078b2:	6813      	ldr	r3, [r2, #0]
 80078b4:	1c58      	adds	r0, r3, #1
 80078b6:	6010      	str	r0, [r2, #0]
 80078b8:	7019      	strb	r1, [r3, #0]
 80078ba:	4608      	mov	r0, r1
 80078bc:	f85d 4b04 	ldr.w	r4, [sp], #4
 80078c0:	4770      	bx	lr

080078c2 <__sfputs_r>:
 80078c2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80078c4:	4606      	mov	r6, r0
 80078c6:	460f      	mov	r7, r1
 80078c8:	4614      	mov	r4, r2
 80078ca:	18d5      	adds	r5, r2, r3
 80078cc:	42ac      	cmp	r4, r5
 80078ce:	d101      	bne.n	80078d4 <__sfputs_r+0x12>
 80078d0:	2000      	movs	r0, #0
 80078d2:	e007      	b.n	80078e4 <__sfputs_r+0x22>
 80078d4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80078d8:	463a      	mov	r2, r7
 80078da:	4630      	mov	r0, r6
 80078dc:	f7ff ffda 	bl	8007894 <__sfputc_r>
 80078e0:	1c43      	adds	r3, r0, #1
 80078e2:	d1f3      	bne.n	80078cc <__sfputs_r+0xa>
 80078e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080078e8 <_vfiprintf_r>:
 80078e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80078ec:	460d      	mov	r5, r1
 80078ee:	b09d      	sub	sp, #116	@ 0x74
 80078f0:	4614      	mov	r4, r2
 80078f2:	4698      	mov	r8, r3
 80078f4:	4606      	mov	r6, r0
 80078f6:	b118      	cbz	r0, 8007900 <_vfiprintf_r+0x18>
 80078f8:	6a03      	ldr	r3, [r0, #32]
 80078fa:	b90b      	cbnz	r3, 8007900 <_vfiprintf_r+0x18>
 80078fc:	f7ff fb4c 	bl	8006f98 <__sinit>
 8007900:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007902:	07d9      	lsls	r1, r3, #31
 8007904:	d405      	bmi.n	8007912 <_vfiprintf_r+0x2a>
 8007906:	89ab      	ldrh	r3, [r5, #12]
 8007908:	059a      	lsls	r2, r3, #22
 800790a:	d402      	bmi.n	8007912 <_vfiprintf_r+0x2a>
 800790c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800790e:	f7ff fd6e 	bl	80073ee <__retarget_lock_acquire_recursive>
 8007912:	89ab      	ldrh	r3, [r5, #12]
 8007914:	071b      	lsls	r3, r3, #28
 8007916:	d501      	bpl.n	800791c <_vfiprintf_r+0x34>
 8007918:	692b      	ldr	r3, [r5, #16]
 800791a:	b99b      	cbnz	r3, 8007944 <_vfiprintf_r+0x5c>
 800791c:	4629      	mov	r1, r5
 800791e:	4630      	mov	r0, r6
 8007920:	f7ff fc96 	bl	8007250 <__swsetup_r>
 8007924:	b170      	cbz	r0, 8007944 <_vfiprintf_r+0x5c>
 8007926:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007928:	07dc      	lsls	r4, r3, #31
 800792a:	d504      	bpl.n	8007936 <_vfiprintf_r+0x4e>
 800792c:	f04f 30ff 	mov.w	r0, #4294967295
 8007930:	b01d      	add	sp, #116	@ 0x74
 8007932:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007936:	89ab      	ldrh	r3, [r5, #12]
 8007938:	0598      	lsls	r0, r3, #22
 800793a:	d4f7      	bmi.n	800792c <_vfiprintf_r+0x44>
 800793c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800793e:	f7ff fd57 	bl	80073f0 <__retarget_lock_release_recursive>
 8007942:	e7f3      	b.n	800792c <_vfiprintf_r+0x44>
 8007944:	2300      	movs	r3, #0
 8007946:	9309      	str	r3, [sp, #36]	@ 0x24
 8007948:	2320      	movs	r3, #32
 800794a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800794e:	f8cd 800c 	str.w	r8, [sp, #12]
 8007952:	2330      	movs	r3, #48	@ 0x30
 8007954:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8007b04 <_vfiprintf_r+0x21c>
 8007958:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800795c:	f04f 0901 	mov.w	r9, #1
 8007960:	4623      	mov	r3, r4
 8007962:	469a      	mov	sl, r3
 8007964:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007968:	b10a      	cbz	r2, 800796e <_vfiprintf_r+0x86>
 800796a:	2a25      	cmp	r2, #37	@ 0x25
 800796c:	d1f9      	bne.n	8007962 <_vfiprintf_r+0x7a>
 800796e:	ebba 0b04 	subs.w	fp, sl, r4
 8007972:	d00b      	beq.n	800798c <_vfiprintf_r+0xa4>
 8007974:	465b      	mov	r3, fp
 8007976:	4622      	mov	r2, r4
 8007978:	4629      	mov	r1, r5
 800797a:	4630      	mov	r0, r6
 800797c:	f7ff ffa1 	bl	80078c2 <__sfputs_r>
 8007980:	3001      	adds	r0, #1
 8007982:	f000 80a7 	beq.w	8007ad4 <_vfiprintf_r+0x1ec>
 8007986:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007988:	445a      	add	r2, fp
 800798a:	9209      	str	r2, [sp, #36]	@ 0x24
 800798c:	f89a 3000 	ldrb.w	r3, [sl]
 8007990:	2b00      	cmp	r3, #0
 8007992:	f000 809f 	beq.w	8007ad4 <_vfiprintf_r+0x1ec>
 8007996:	2300      	movs	r3, #0
 8007998:	f04f 32ff 	mov.w	r2, #4294967295
 800799c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80079a0:	f10a 0a01 	add.w	sl, sl, #1
 80079a4:	9304      	str	r3, [sp, #16]
 80079a6:	9307      	str	r3, [sp, #28]
 80079a8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80079ac:	931a      	str	r3, [sp, #104]	@ 0x68
 80079ae:	4654      	mov	r4, sl
 80079b0:	2205      	movs	r2, #5
 80079b2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80079b6:	4853      	ldr	r0, [pc, #332]	@ (8007b04 <_vfiprintf_r+0x21c>)
 80079b8:	f7f8 fc1a 	bl	80001f0 <memchr>
 80079bc:	9a04      	ldr	r2, [sp, #16]
 80079be:	b9d8      	cbnz	r0, 80079f8 <_vfiprintf_r+0x110>
 80079c0:	06d1      	lsls	r1, r2, #27
 80079c2:	bf44      	itt	mi
 80079c4:	2320      	movmi	r3, #32
 80079c6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80079ca:	0713      	lsls	r3, r2, #28
 80079cc:	bf44      	itt	mi
 80079ce:	232b      	movmi	r3, #43	@ 0x2b
 80079d0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80079d4:	f89a 3000 	ldrb.w	r3, [sl]
 80079d8:	2b2a      	cmp	r3, #42	@ 0x2a
 80079da:	d015      	beq.n	8007a08 <_vfiprintf_r+0x120>
 80079dc:	9a07      	ldr	r2, [sp, #28]
 80079de:	4654      	mov	r4, sl
 80079e0:	2000      	movs	r0, #0
 80079e2:	f04f 0c0a 	mov.w	ip, #10
 80079e6:	4621      	mov	r1, r4
 80079e8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80079ec:	3b30      	subs	r3, #48	@ 0x30
 80079ee:	2b09      	cmp	r3, #9
 80079f0:	d94b      	bls.n	8007a8a <_vfiprintf_r+0x1a2>
 80079f2:	b1b0      	cbz	r0, 8007a22 <_vfiprintf_r+0x13a>
 80079f4:	9207      	str	r2, [sp, #28]
 80079f6:	e014      	b.n	8007a22 <_vfiprintf_r+0x13a>
 80079f8:	eba0 0308 	sub.w	r3, r0, r8
 80079fc:	fa09 f303 	lsl.w	r3, r9, r3
 8007a00:	4313      	orrs	r3, r2
 8007a02:	9304      	str	r3, [sp, #16]
 8007a04:	46a2      	mov	sl, r4
 8007a06:	e7d2      	b.n	80079ae <_vfiprintf_r+0xc6>
 8007a08:	9b03      	ldr	r3, [sp, #12]
 8007a0a:	1d19      	adds	r1, r3, #4
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	9103      	str	r1, [sp, #12]
 8007a10:	2b00      	cmp	r3, #0
 8007a12:	bfbb      	ittet	lt
 8007a14:	425b      	neglt	r3, r3
 8007a16:	f042 0202 	orrlt.w	r2, r2, #2
 8007a1a:	9307      	strge	r3, [sp, #28]
 8007a1c:	9307      	strlt	r3, [sp, #28]
 8007a1e:	bfb8      	it	lt
 8007a20:	9204      	strlt	r2, [sp, #16]
 8007a22:	7823      	ldrb	r3, [r4, #0]
 8007a24:	2b2e      	cmp	r3, #46	@ 0x2e
 8007a26:	d10a      	bne.n	8007a3e <_vfiprintf_r+0x156>
 8007a28:	7863      	ldrb	r3, [r4, #1]
 8007a2a:	2b2a      	cmp	r3, #42	@ 0x2a
 8007a2c:	d132      	bne.n	8007a94 <_vfiprintf_r+0x1ac>
 8007a2e:	9b03      	ldr	r3, [sp, #12]
 8007a30:	1d1a      	adds	r2, r3, #4
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	9203      	str	r2, [sp, #12]
 8007a36:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007a3a:	3402      	adds	r4, #2
 8007a3c:	9305      	str	r3, [sp, #20]
 8007a3e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8007b14 <_vfiprintf_r+0x22c>
 8007a42:	7821      	ldrb	r1, [r4, #0]
 8007a44:	2203      	movs	r2, #3
 8007a46:	4650      	mov	r0, sl
 8007a48:	f7f8 fbd2 	bl	80001f0 <memchr>
 8007a4c:	b138      	cbz	r0, 8007a5e <_vfiprintf_r+0x176>
 8007a4e:	9b04      	ldr	r3, [sp, #16]
 8007a50:	eba0 000a 	sub.w	r0, r0, sl
 8007a54:	2240      	movs	r2, #64	@ 0x40
 8007a56:	4082      	lsls	r2, r0
 8007a58:	4313      	orrs	r3, r2
 8007a5a:	3401      	adds	r4, #1
 8007a5c:	9304      	str	r3, [sp, #16]
 8007a5e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007a62:	4829      	ldr	r0, [pc, #164]	@ (8007b08 <_vfiprintf_r+0x220>)
 8007a64:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007a68:	2206      	movs	r2, #6
 8007a6a:	f7f8 fbc1 	bl	80001f0 <memchr>
 8007a6e:	2800      	cmp	r0, #0
 8007a70:	d03f      	beq.n	8007af2 <_vfiprintf_r+0x20a>
 8007a72:	4b26      	ldr	r3, [pc, #152]	@ (8007b0c <_vfiprintf_r+0x224>)
 8007a74:	bb1b      	cbnz	r3, 8007abe <_vfiprintf_r+0x1d6>
 8007a76:	9b03      	ldr	r3, [sp, #12]
 8007a78:	3307      	adds	r3, #7
 8007a7a:	f023 0307 	bic.w	r3, r3, #7
 8007a7e:	3308      	adds	r3, #8
 8007a80:	9303      	str	r3, [sp, #12]
 8007a82:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007a84:	443b      	add	r3, r7
 8007a86:	9309      	str	r3, [sp, #36]	@ 0x24
 8007a88:	e76a      	b.n	8007960 <_vfiprintf_r+0x78>
 8007a8a:	fb0c 3202 	mla	r2, ip, r2, r3
 8007a8e:	460c      	mov	r4, r1
 8007a90:	2001      	movs	r0, #1
 8007a92:	e7a8      	b.n	80079e6 <_vfiprintf_r+0xfe>
 8007a94:	2300      	movs	r3, #0
 8007a96:	3401      	adds	r4, #1
 8007a98:	9305      	str	r3, [sp, #20]
 8007a9a:	4619      	mov	r1, r3
 8007a9c:	f04f 0c0a 	mov.w	ip, #10
 8007aa0:	4620      	mov	r0, r4
 8007aa2:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007aa6:	3a30      	subs	r2, #48	@ 0x30
 8007aa8:	2a09      	cmp	r2, #9
 8007aaa:	d903      	bls.n	8007ab4 <_vfiprintf_r+0x1cc>
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	d0c6      	beq.n	8007a3e <_vfiprintf_r+0x156>
 8007ab0:	9105      	str	r1, [sp, #20]
 8007ab2:	e7c4      	b.n	8007a3e <_vfiprintf_r+0x156>
 8007ab4:	fb0c 2101 	mla	r1, ip, r1, r2
 8007ab8:	4604      	mov	r4, r0
 8007aba:	2301      	movs	r3, #1
 8007abc:	e7f0      	b.n	8007aa0 <_vfiprintf_r+0x1b8>
 8007abe:	ab03      	add	r3, sp, #12
 8007ac0:	9300      	str	r3, [sp, #0]
 8007ac2:	462a      	mov	r2, r5
 8007ac4:	4b12      	ldr	r3, [pc, #72]	@ (8007b10 <_vfiprintf_r+0x228>)
 8007ac6:	a904      	add	r1, sp, #16
 8007ac8:	4630      	mov	r0, r6
 8007aca:	f3af 8000 	nop.w
 8007ace:	4607      	mov	r7, r0
 8007ad0:	1c78      	adds	r0, r7, #1
 8007ad2:	d1d6      	bne.n	8007a82 <_vfiprintf_r+0x19a>
 8007ad4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007ad6:	07d9      	lsls	r1, r3, #31
 8007ad8:	d405      	bmi.n	8007ae6 <_vfiprintf_r+0x1fe>
 8007ada:	89ab      	ldrh	r3, [r5, #12]
 8007adc:	059a      	lsls	r2, r3, #22
 8007ade:	d402      	bmi.n	8007ae6 <_vfiprintf_r+0x1fe>
 8007ae0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007ae2:	f7ff fc85 	bl	80073f0 <__retarget_lock_release_recursive>
 8007ae6:	89ab      	ldrh	r3, [r5, #12]
 8007ae8:	065b      	lsls	r3, r3, #25
 8007aea:	f53f af1f 	bmi.w	800792c <_vfiprintf_r+0x44>
 8007aee:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007af0:	e71e      	b.n	8007930 <_vfiprintf_r+0x48>
 8007af2:	ab03      	add	r3, sp, #12
 8007af4:	9300      	str	r3, [sp, #0]
 8007af6:	462a      	mov	r2, r5
 8007af8:	4b05      	ldr	r3, [pc, #20]	@ (8007b10 <_vfiprintf_r+0x228>)
 8007afa:	a904      	add	r1, sp, #16
 8007afc:	4630      	mov	r0, r6
 8007afe:	f000 f879 	bl	8007bf4 <_printf_i>
 8007b02:	e7e4      	b.n	8007ace <_vfiprintf_r+0x1e6>
 8007b04:	080093d4 	.word	0x080093d4
 8007b08:	080093de 	.word	0x080093de
 8007b0c:	00000000 	.word	0x00000000
 8007b10:	080078c3 	.word	0x080078c3
 8007b14:	080093da 	.word	0x080093da

08007b18 <_printf_common>:
 8007b18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007b1c:	4616      	mov	r6, r2
 8007b1e:	4698      	mov	r8, r3
 8007b20:	688a      	ldr	r2, [r1, #8]
 8007b22:	690b      	ldr	r3, [r1, #16]
 8007b24:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007b28:	4293      	cmp	r3, r2
 8007b2a:	bfb8      	it	lt
 8007b2c:	4613      	movlt	r3, r2
 8007b2e:	6033      	str	r3, [r6, #0]
 8007b30:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8007b34:	4607      	mov	r7, r0
 8007b36:	460c      	mov	r4, r1
 8007b38:	b10a      	cbz	r2, 8007b3e <_printf_common+0x26>
 8007b3a:	3301      	adds	r3, #1
 8007b3c:	6033      	str	r3, [r6, #0]
 8007b3e:	6823      	ldr	r3, [r4, #0]
 8007b40:	0699      	lsls	r1, r3, #26
 8007b42:	bf42      	ittt	mi
 8007b44:	6833      	ldrmi	r3, [r6, #0]
 8007b46:	3302      	addmi	r3, #2
 8007b48:	6033      	strmi	r3, [r6, #0]
 8007b4a:	6825      	ldr	r5, [r4, #0]
 8007b4c:	f015 0506 	ands.w	r5, r5, #6
 8007b50:	d106      	bne.n	8007b60 <_printf_common+0x48>
 8007b52:	f104 0a19 	add.w	sl, r4, #25
 8007b56:	68e3      	ldr	r3, [r4, #12]
 8007b58:	6832      	ldr	r2, [r6, #0]
 8007b5a:	1a9b      	subs	r3, r3, r2
 8007b5c:	42ab      	cmp	r3, r5
 8007b5e:	dc26      	bgt.n	8007bae <_printf_common+0x96>
 8007b60:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8007b64:	6822      	ldr	r2, [r4, #0]
 8007b66:	3b00      	subs	r3, #0
 8007b68:	bf18      	it	ne
 8007b6a:	2301      	movne	r3, #1
 8007b6c:	0692      	lsls	r2, r2, #26
 8007b6e:	d42b      	bmi.n	8007bc8 <_printf_common+0xb0>
 8007b70:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8007b74:	4641      	mov	r1, r8
 8007b76:	4638      	mov	r0, r7
 8007b78:	47c8      	blx	r9
 8007b7a:	3001      	adds	r0, #1
 8007b7c:	d01e      	beq.n	8007bbc <_printf_common+0xa4>
 8007b7e:	6823      	ldr	r3, [r4, #0]
 8007b80:	6922      	ldr	r2, [r4, #16]
 8007b82:	f003 0306 	and.w	r3, r3, #6
 8007b86:	2b04      	cmp	r3, #4
 8007b88:	bf02      	ittt	eq
 8007b8a:	68e5      	ldreq	r5, [r4, #12]
 8007b8c:	6833      	ldreq	r3, [r6, #0]
 8007b8e:	1aed      	subeq	r5, r5, r3
 8007b90:	68a3      	ldr	r3, [r4, #8]
 8007b92:	bf0c      	ite	eq
 8007b94:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007b98:	2500      	movne	r5, #0
 8007b9a:	4293      	cmp	r3, r2
 8007b9c:	bfc4      	itt	gt
 8007b9e:	1a9b      	subgt	r3, r3, r2
 8007ba0:	18ed      	addgt	r5, r5, r3
 8007ba2:	2600      	movs	r6, #0
 8007ba4:	341a      	adds	r4, #26
 8007ba6:	42b5      	cmp	r5, r6
 8007ba8:	d11a      	bne.n	8007be0 <_printf_common+0xc8>
 8007baa:	2000      	movs	r0, #0
 8007bac:	e008      	b.n	8007bc0 <_printf_common+0xa8>
 8007bae:	2301      	movs	r3, #1
 8007bb0:	4652      	mov	r2, sl
 8007bb2:	4641      	mov	r1, r8
 8007bb4:	4638      	mov	r0, r7
 8007bb6:	47c8      	blx	r9
 8007bb8:	3001      	adds	r0, #1
 8007bba:	d103      	bne.n	8007bc4 <_printf_common+0xac>
 8007bbc:	f04f 30ff 	mov.w	r0, #4294967295
 8007bc0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007bc4:	3501      	adds	r5, #1
 8007bc6:	e7c6      	b.n	8007b56 <_printf_common+0x3e>
 8007bc8:	18e1      	adds	r1, r4, r3
 8007bca:	1c5a      	adds	r2, r3, #1
 8007bcc:	2030      	movs	r0, #48	@ 0x30
 8007bce:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8007bd2:	4422      	add	r2, r4
 8007bd4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8007bd8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8007bdc:	3302      	adds	r3, #2
 8007bde:	e7c7      	b.n	8007b70 <_printf_common+0x58>
 8007be0:	2301      	movs	r3, #1
 8007be2:	4622      	mov	r2, r4
 8007be4:	4641      	mov	r1, r8
 8007be6:	4638      	mov	r0, r7
 8007be8:	47c8      	blx	r9
 8007bea:	3001      	adds	r0, #1
 8007bec:	d0e6      	beq.n	8007bbc <_printf_common+0xa4>
 8007bee:	3601      	adds	r6, #1
 8007bf0:	e7d9      	b.n	8007ba6 <_printf_common+0x8e>
	...

08007bf4 <_printf_i>:
 8007bf4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007bf8:	7e0f      	ldrb	r7, [r1, #24]
 8007bfa:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8007bfc:	2f78      	cmp	r7, #120	@ 0x78
 8007bfe:	4691      	mov	r9, r2
 8007c00:	4680      	mov	r8, r0
 8007c02:	460c      	mov	r4, r1
 8007c04:	469a      	mov	sl, r3
 8007c06:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8007c0a:	d807      	bhi.n	8007c1c <_printf_i+0x28>
 8007c0c:	2f62      	cmp	r7, #98	@ 0x62
 8007c0e:	d80a      	bhi.n	8007c26 <_printf_i+0x32>
 8007c10:	2f00      	cmp	r7, #0
 8007c12:	f000 80d2 	beq.w	8007dba <_printf_i+0x1c6>
 8007c16:	2f58      	cmp	r7, #88	@ 0x58
 8007c18:	f000 80b9 	beq.w	8007d8e <_printf_i+0x19a>
 8007c1c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007c20:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007c24:	e03a      	b.n	8007c9c <_printf_i+0xa8>
 8007c26:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8007c2a:	2b15      	cmp	r3, #21
 8007c2c:	d8f6      	bhi.n	8007c1c <_printf_i+0x28>
 8007c2e:	a101      	add	r1, pc, #4	@ (adr r1, 8007c34 <_printf_i+0x40>)
 8007c30:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007c34:	08007c8d 	.word	0x08007c8d
 8007c38:	08007ca1 	.word	0x08007ca1
 8007c3c:	08007c1d 	.word	0x08007c1d
 8007c40:	08007c1d 	.word	0x08007c1d
 8007c44:	08007c1d 	.word	0x08007c1d
 8007c48:	08007c1d 	.word	0x08007c1d
 8007c4c:	08007ca1 	.word	0x08007ca1
 8007c50:	08007c1d 	.word	0x08007c1d
 8007c54:	08007c1d 	.word	0x08007c1d
 8007c58:	08007c1d 	.word	0x08007c1d
 8007c5c:	08007c1d 	.word	0x08007c1d
 8007c60:	08007da1 	.word	0x08007da1
 8007c64:	08007ccb 	.word	0x08007ccb
 8007c68:	08007d5b 	.word	0x08007d5b
 8007c6c:	08007c1d 	.word	0x08007c1d
 8007c70:	08007c1d 	.word	0x08007c1d
 8007c74:	08007dc3 	.word	0x08007dc3
 8007c78:	08007c1d 	.word	0x08007c1d
 8007c7c:	08007ccb 	.word	0x08007ccb
 8007c80:	08007c1d 	.word	0x08007c1d
 8007c84:	08007c1d 	.word	0x08007c1d
 8007c88:	08007d63 	.word	0x08007d63
 8007c8c:	6833      	ldr	r3, [r6, #0]
 8007c8e:	1d1a      	adds	r2, r3, #4
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	6032      	str	r2, [r6, #0]
 8007c94:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007c98:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007c9c:	2301      	movs	r3, #1
 8007c9e:	e09d      	b.n	8007ddc <_printf_i+0x1e8>
 8007ca0:	6833      	ldr	r3, [r6, #0]
 8007ca2:	6820      	ldr	r0, [r4, #0]
 8007ca4:	1d19      	adds	r1, r3, #4
 8007ca6:	6031      	str	r1, [r6, #0]
 8007ca8:	0606      	lsls	r6, r0, #24
 8007caa:	d501      	bpl.n	8007cb0 <_printf_i+0xbc>
 8007cac:	681d      	ldr	r5, [r3, #0]
 8007cae:	e003      	b.n	8007cb8 <_printf_i+0xc4>
 8007cb0:	0645      	lsls	r5, r0, #25
 8007cb2:	d5fb      	bpl.n	8007cac <_printf_i+0xb8>
 8007cb4:	f9b3 5000 	ldrsh.w	r5, [r3]
 8007cb8:	2d00      	cmp	r5, #0
 8007cba:	da03      	bge.n	8007cc4 <_printf_i+0xd0>
 8007cbc:	232d      	movs	r3, #45	@ 0x2d
 8007cbe:	426d      	negs	r5, r5
 8007cc0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007cc4:	4859      	ldr	r0, [pc, #356]	@ (8007e2c <_printf_i+0x238>)
 8007cc6:	230a      	movs	r3, #10
 8007cc8:	e011      	b.n	8007cee <_printf_i+0xfa>
 8007cca:	6821      	ldr	r1, [r4, #0]
 8007ccc:	6833      	ldr	r3, [r6, #0]
 8007cce:	0608      	lsls	r0, r1, #24
 8007cd0:	f853 5b04 	ldr.w	r5, [r3], #4
 8007cd4:	d402      	bmi.n	8007cdc <_printf_i+0xe8>
 8007cd6:	0649      	lsls	r1, r1, #25
 8007cd8:	bf48      	it	mi
 8007cda:	b2ad      	uxthmi	r5, r5
 8007cdc:	2f6f      	cmp	r7, #111	@ 0x6f
 8007cde:	4853      	ldr	r0, [pc, #332]	@ (8007e2c <_printf_i+0x238>)
 8007ce0:	6033      	str	r3, [r6, #0]
 8007ce2:	bf14      	ite	ne
 8007ce4:	230a      	movne	r3, #10
 8007ce6:	2308      	moveq	r3, #8
 8007ce8:	2100      	movs	r1, #0
 8007cea:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8007cee:	6866      	ldr	r6, [r4, #4]
 8007cf0:	60a6      	str	r6, [r4, #8]
 8007cf2:	2e00      	cmp	r6, #0
 8007cf4:	bfa2      	ittt	ge
 8007cf6:	6821      	ldrge	r1, [r4, #0]
 8007cf8:	f021 0104 	bicge.w	r1, r1, #4
 8007cfc:	6021      	strge	r1, [r4, #0]
 8007cfe:	b90d      	cbnz	r5, 8007d04 <_printf_i+0x110>
 8007d00:	2e00      	cmp	r6, #0
 8007d02:	d04b      	beq.n	8007d9c <_printf_i+0x1a8>
 8007d04:	4616      	mov	r6, r2
 8007d06:	fbb5 f1f3 	udiv	r1, r5, r3
 8007d0a:	fb03 5711 	mls	r7, r3, r1, r5
 8007d0e:	5dc7      	ldrb	r7, [r0, r7]
 8007d10:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007d14:	462f      	mov	r7, r5
 8007d16:	42bb      	cmp	r3, r7
 8007d18:	460d      	mov	r5, r1
 8007d1a:	d9f4      	bls.n	8007d06 <_printf_i+0x112>
 8007d1c:	2b08      	cmp	r3, #8
 8007d1e:	d10b      	bne.n	8007d38 <_printf_i+0x144>
 8007d20:	6823      	ldr	r3, [r4, #0]
 8007d22:	07df      	lsls	r7, r3, #31
 8007d24:	d508      	bpl.n	8007d38 <_printf_i+0x144>
 8007d26:	6923      	ldr	r3, [r4, #16]
 8007d28:	6861      	ldr	r1, [r4, #4]
 8007d2a:	4299      	cmp	r1, r3
 8007d2c:	bfde      	ittt	le
 8007d2e:	2330      	movle	r3, #48	@ 0x30
 8007d30:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007d34:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007d38:	1b92      	subs	r2, r2, r6
 8007d3a:	6122      	str	r2, [r4, #16]
 8007d3c:	f8cd a000 	str.w	sl, [sp]
 8007d40:	464b      	mov	r3, r9
 8007d42:	aa03      	add	r2, sp, #12
 8007d44:	4621      	mov	r1, r4
 8007d46:	4640      	mov	r0, r8
 8007d48:	f7ff fee6 	bl	8007b18 <_printf_common>
 8007d4c:	3001      	adds	r0, #1
 8007d4e:	d14a      	bne.n	8007de6 <_printf_i+0x1f2>
 8007d50:	f04f 30ff 	mov.w	r0, #4294967295
 8007d54:	b004      	add	sp, #16
 8007d56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007d5a:	6823      	ldr	r3, [r4, #0]
 8007d5c:	f043 0320 	orr.w	r3, r3, #32
 8007d60:	6023      	str	r3, [r4, #0]
 8007d62:	4833      	ldr	r0, [pc, #204]	@ (8007e30 <_printf_i+0x23c>)
 8007d64:	2778      	movs	r7, #120	@ 0x78
 8007d66:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8007d6a:	6823      	ldr	r3, [r4, #0]
 8007d6c:	6831      	ldr	r1, [r6, #0]
 8007d6e:	061f      	lsls	r7, r3, #24
 8007d70:	f851 5b04 	ldr.w	r5, [r1], #4
 8007d74:	d402      	bmi.n	8007d7c <_printf_i+0x188>
 8007d76:	065f      	lsls	r7, r3, #25
 8007d78:	bf48      	it	mi
 8007d7a:	b2ad      	uxthmi	r5, r5
 8007d7c:	6031      	str	r1, [r6, #0]
 8007d7e:	07d9      	lsls	r1, r3, #31
 8007d80:	bf44      	itt	mi
 8007d82:	f043 0320 	orrmi.w	r3, r3, #32
 8007d86:	6023      	strmi	r3, [r4, #0]
 8007d88:	b11d      	cbz	r5, 8007d92 <_printf_i+0x19e>
 8007d8a:	2310      	movs	r3, #16
 8007d8c:	e7ac      	b.n	8007ce8 <_printf_i+0xf4>
 8007d8e:	4827      	ldr	r0, [pc, #156]	@ (8007e2c <_printf_i+0x238>)
 8007d90:	e7e9      	b.n	8007d66 <_printf_i+0x172>
 8007d92:	6823      	ldr	r3, [r4, #0]
 8007d94:	f023 0320 	bic.w	r3, r3, #32
 8007d98:	6023      	str	r3, [r4, #0]
 8007d9a:	e7f6      	b.n	8007d8a <_printf_i+0x196>
 8007d9c:	4616      	mov	r6, r2
 8007d9e:	e7bd      	b.n	8007d1c <_printf_i+0x128>
 8007da0:	6833      	ldr	r3, [r6, #0]
 8007da2:	6825      	ldr	r5, [r4, #0]
 8007da4:	6961      	ldr	r1, [r4, #20]
 8007da6:	1d18      	adds	r0, r3, #4
 8007da8:	6030      	str	r0, [r6, #0]
 8007daa:	062e      	lsls	r6, r5, #24
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	d501      	bpl.n	8007db4 <_printf_i+0x1c0>
 8007db0:	6019      	str	r1, [r3, #0]
 8007db2:	e002      	b.n	8007dba <_printf_i+0x1c6>
 8007db4:	0668      	lsls	r0, r5, #25
 8007db6:	d5fb      	bpl.n	8007db0 <_printf_i+0x1bc>
 8007db8:	8019      	strh	r1, [r3, #0]
 8007dba:	2300      	movs	r3, #0
 8007dbc:	6123      	str	r3, [r4, #16]
 8007dbe:	4616      	mov	r6, r2
 8007dc0:	e7bc      	b.n	8007d3c <_printf_i+0x148>
 8007dc2:	6833      	ldr	r3, [r6, #0]
 8007dc4:	1d1a      	adds	r2, r3, #4
 8007dc6:	6032      	str	r2, [r6, #0]
 8007dc8:	681e      	ldr	r6, [r3, #0]
 8007dca:	6862      	ldr	r2, [r4, #4]
 8007dcc:	2100      	movs	r1, #0
 8007dce:	4630      	mov	r0, r6
 8007dd0:	f7f8 fa0e 	bl	80001f0 <memchr>
 8007dd4:	b108      	cbz	r0, 8007dda <_printf_i+0x1e6>
 8007dd6:	1b80      	subs	r0, r0, r6
 8007dd8:	6060      	str	r0, [r4, #4]
 8007dda:	6863      	ldr	r3, [r4, #4]
 8007ddc:	6123      	str	r3, [r4, #16]
 8007dde:	2300      	movs	r3, #0
 8007de0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007de4:	e7aa      	b.n	8007d3c <_printf_i+0x148>
 8007de6:	6923      	ldr	r3, [r4, #16]
 8007de8:	4632      	mov	r2, r6
 8007dea:	4649      	mov	r1, r9
 8007dec:	4640      	mov	r0, r8
 8007dee:	47d0      	blx	sl
 8007df0:	3001      	adds	r0, #1
 8007df2:	d0ad      	beq.n	8007d50 <_printf_i+0x15c>
 8007df4:	6823      	ldr	r3, [r4, #0]
 8007df6:	079b      	lsls	r3, r3, #30
 8007df8:	d413      	bmi.n	8007e22 <_printf_i+0x22e>
 8007dfa:	68e0      	ldr	r0, [r4, #12]
 8007dfc:	9b03      	ldr	r3, [sp, #12]
 8007dfe:	4298      	cmp	r0, r3
 8007e00:	bfb8      	it	lt
 8007e02:	4618      	movlt	r0, r3
 8007e04:	e7a6      	b.n	8007d54 <_printf_i+0x160>
 8007e06:	2301      	movs	r3, #1
 8007e08:	4632      	mov	r2, r6
 8007e0a:	4649      	mov	r1, r9
 8007e0c:	4640      	mov	r0, r8
 8007e0e:	47d0      	blx	sl
 8007e10:	3001      	adds	r0, #1
 8007e12:	d09d      	beq.n	8007d50 <_printf_i+0x15c>
 8007e14:	3501      	adds	r5, #1
 8007e16:	68e3      	ldr	r3, [r4, #12]
 8007e18:	9903      	ldr	r1, [sp, #12]
 8007e1a:	1a5b      	subs	r3, r3, r1
 8007e1c:	42ab      	cmp	r3, r5
 8007e1e:	dcf2      	bgt.n	8007e06 <_printf_i+0x212>
 8007e20:	e7eb      	b.n	8007dfa <_printf_i+0x206>
 8007e22:	2500      	movs	r5, #0
 8007e24:	f104 0619 	add.w	r6, r4, #25
 8007e28:	e7f5      	b.n	8007e16 <_printf_i+0x222>
 8007e2a:	bf00      	nop
 8007e2c:	080093e5 	.word	0x080093e5
 8007e30:	080093f6 	.word	0x080093f6

08007e34 <__sflush_r>:
 8007e34:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007e38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007e3c:	0716      	lsls	r6, r2, #28
 8007e3e:	4605      	mov	r5, r0
 8007e40:	460c      	mov	r4, r1
 8007e42:	d454      	bmi.n	8007eee <__sflush_r+0xba>
 8007e44:	684b      	ldr	r3, [r1, #4]
 8007e46:	2b00      	cmp	r3, #0
 8007e48:	dc02      	bgt.n	8007e50 <__sflush_r+0x1c>
 8007e4a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8007e4c:	2b00      	cmp	r3, #0
 8007e4e:	dd48      	ble.n	8007ee2 <__sflush_r+0xae>
 8007e50:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007e52:	2e00      	cmp	r6, #0
 8007e54:	d045      	beq.n	8007ee2 <__sflush_r+0xae>
 8007e56:	2300      	movs	r3, #0
 8007e58:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8007e5c:	682f      	ldr	r7, [r5, #0]
 8007e5e:	6a21      	ldr	r1, [r4, #32]
 8007e60:	602b      	str	r3, [r5, #0]
 8007e62:	d030      	beq.n	8007ec6 <__sflush_r+0x92>
 8007e64:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8007e66:	89a3      	ldrh	r3, [r4, #12]
 8007e68:	0759      	lsls	r1, r3, #29
 8007e6a:	d505      	bpl.n	8007e78 <__sflush_r+0x44>
 8007e6c:	6863      	ldr	r3, [r4, #4]
 8007e6e:	1ad2      	subs	r2, r2, r3
 8007e70:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8007e72:	b10b      	cbz	r3, 8007e78 <__sflush_r+0x44>
 8007e74:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8007e76:	1ad2      	subs	r2, r2, r3
 8007e78:	2300      	movs	r3, #0
 8007e7a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007e7c:	6a21      	ldr	r1, [r4, #32]
 8007e7e:	4628      	mov	r0, r5
 8007e80:	47b0      	blx	r6
 8007e82:	1c43      	adds	r3, r0, #1
 8007e84:	89a3      	ldrh	r3, [r4, #12]
 8007e86:	d106      	bne.n	8007e96 <__sflush_r+0x62>
 8007e88:	6829      	ldr	r1, [r5, #0]
 8007e8a:	291d      	cmp	r1, #29
 8007e8c:	d82b      	bhi.n	8007ee6 <__sflush_r+0xb2>
 8007e8e:	4a2a      	ldr	r2, [pc, #168]	@ (8007f38 <__sflush_r+0x104>)
 8007e90:	410a      	asrs	r2, r1
 8007e92:	07d6      	lsls	r6, r2, #31
 8007e94:	d427      	bmi.n	8007ee6 <__sflush_r+0xb2>
 8007e96:	2200      	movs	r2, #0
 8007e98:	6062      	str	r2, [r4, #4]
 8007e9a:	04d9      	lsls	r1, r3, #19
 8007e9c:	6922      	ldr	r2, [r4, #16]
 8007e9e:	6022      	str	r2, [r4, #0]
 8007ea0:	d504      	bpl.n	8007eac <__sflush_r+0x78>
 8007ea2:	1c42      	adds	r2, r0, #1
 8007ea4:	d101      	bne.n	8007eaa <__sflush_r+0x76>
 8007ea6:	682b      	ldr	r3, [r5, #0]
 8007ea8:	b903      	cbnz	r3, 8007eac <__sflush_r+0x78>
 8007eaa:	6560      	str	r0, [r4, #84]	@ 0x54
 8007eac:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007eae:	602f      	str	r7, [r5, #0]
 8007eb0:	b1b9      	cbz	r1, 8007ee2 <__sflush_r+0xae>
 8007eb2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007eb6:	4299      	cmp	r1, r3
 8007eb8:	d002      	beq.n	8007ec0 <__sflush_r+0x8c>
 8007eba:	4628      	mov	r0, r5
 8007ebc:	f7ff fa9a 	bl	80073f4 <_free_r>
 8007ec0:	2300      	movs	r3, #0
 8007ec2:	6363      	str	r3, [r4, #52]	@ 0x34
 8007ec4:	e00d      	b.n	8007ee2 <__sflush_r+0xae>
 8007ec6:	2301      	movs	r3, #1
 8007ec8:	4628      	mov	r0, r5
 8007eca:	47b0      	blx	r6
 8007ecc:	4602      	mov	r2, r0
 8007ece:	1c50      	adds	r0, r2, #1
 8007ed0:	d1c9      	bne.n	8007e66 <__sflush_r+0x32>
 8007ed2:	682b      	ldr	r3, [r5, #0]
 8007ed4:	2b00      	cmp	r3, #0
 8007ed6:	d0c6      	beq.n	8007e66 <__sflush_r+0x32>
 8007ed8:	2b1d      	cmp	r3, #29
 8007eda:	d001      	beq.n	8007ee0 <__sflush_r+0xac>
 8007edc:	2b16      	cmp	r3, #22
 8007ede:	d11e      	bne.n	8007f1e <__sflush_r+0xea>
 8007ee0:	602f      	str	r7, [r5, #0]
 8007ee2:	2000      	movs	r0, #0
 8007ee4:	e022      	b.n	8007f2c <__sflush_r+0xf8>
 8007ee6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007eea:	b21b      	sxth	r3, r3
 8007eec:	e01b      	b.n	8007f26 <__sflush_r+0xf2>
 8007eee:	690f      	ldr	r7, [r1, #16]
 8007ef0:	2f00      	cmp	r7, #0
 8007ef2:	d0f6      	beq.n	8007ee2 <__sflush_r+0xae>
 8007ef4:	0793      	lsls	r3, r2, #30
 8007ef6:	680e      	ldr	r6, [r1, #0]
 8007ef8:	bf08      	it	eq
 8007efa:	694b      	ldreq	r3, [r1, #20]
 8007efc:	600f      	str	r7, [r1, #0]
 8007efe:	bf18      	it	ne
 8007f00:	2300      	movne	r3, #0
 8007f02:	eba6 0807 	sub.w	r8, r6, r7
 8007f06:	608b      	str	r3, [r1, #8]
 8007f08:	f1b8 0f00 	cmp.w	r8, #0
 8007f0c:	dde9      	ble.n	8007ee2 <__sflush_r+0xae>
 8007f0e:	6a21      	ldr	r1, [r4, #32]
 8007f10:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8007f12:	4643      	mov	r3, r8
 8007f14:	463a      	mov	r2, r7
 8007f16:	4628      	mov	r0, r5
 8007f18:	47b0      	blx	r6
 8007f1a:	2800      	cmp	r0, #0
 8007f1c:	dc08      	bgt.n	8007f30 <__sflush_r+0xfc>
 8007f1e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007f22:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007f26:	81a3      	strh	r3, [r4, #12]
 8007f28:	f04f 30ff 	mov.w	r0, #4294967295
 8007f2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007f30:	4407      	add	r7, r0
 8007f32:	eba8 0800 	sub.w	r8, r8, r0
 8007f36:	e7e7      	b.n	8007f08 <__sflush_r+0xd4>
 8007f38:	dfbffffe 	.word	0xdfbffffe

08007f3c <_fflush_r>:
 8007f3c:	b538      	push	{r3, r4, r5, lr}
 8007f3e:	690b      	ldr	r3, [r1, #16]
 8007f40:	4605      	mov	r5, r0
 8007f42:	460c      	mov	r4, r1
 8007f44:	b913      	cbnz	r3, 8007f4c <_fflush_r+0x10>
 8007f46:	2500      	movs	r5, #0
 8007f48:	4628      	mov	r0, r5
 8007f4a:	bd38      	pop	{r3, r4, r5, pc}
 8007f4c:	b118      	cbz	r0, 8007f56 <_fflush_r+0x1a>
 8007f4e:	6a03      	ldr	r3, [r0, #32]
 8007f50:	b90b      	cbnz	r3, 8007f56 <_fflush_r+0x1a>
 8007f52:	f7ff f821 	bl	8006f98 <__sinit>
 8007f56:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007f5a:	2b00      	cmp	r3, #0
 8007f5c:	d0f3      	beq.n	8007f46 <_fflush_r+0xa>
 8007f5e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8007f60:	07d0      	lsls	r0, r2, #31
 8007f62:	d404      	bmi.n	8007f6e <_fflush_r+0x32>
 8007f64:	0599      	lsls	r1, r3, #22
 8007f66:	d402      	bmi.n	8007f6e <_fflush_r+0x32>
 8007f68:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007f6a:	f7ff fa40 	bl	80073ee <__retarget_lock_acquire_recursive>
 8007f6e:	4628      	mov	r0, r5
 8007f70:	4621      	mov	r1, r4
 8007f72:	f7ff ff5f 	bl	8007e34 <__sflush_r>
 8007f76:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007f78:	07da      	lsls	r2, r3, #31
 8007f7a:	4605      	mov	r5, r0
 8007f7c:	d4e4      	bmi.n	8007f48 <_fflush_r+0xc>
 8007f7e:	89a3      	ldrh	r3, [r4, #12]
 8007f80:	059b      	lsls	r3, r3, #22
 8007f82:	d4e1      	bmi.n	8007f48 <_fflush_r+0xc>
 8007f84:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007f86:	f7ff fa33 	bl	80073f0 <__retarget_lock_release_recursive>
 8007f8a:	e7dd      	b.n	8007f48 <_fflush_r+0xc>

08007f8c <__swhatbuf_r>:
 8007f8c:	b570      	push	{r4, r5, r6, lr}
 8007f8e:	460c      	mov	r4, r1
 8007f90:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007f94:	2900      	cmp	r1, #0
 8007f96:	b096      	sub	sp, #88	@ 0x58
 8007f98:	4615      	mov	r5, r2
 8007f9a:	461e      	mov	r6, r3
 8007f9c:	da0d      	bge.n	8007fba <__swhatbuf_r+0x2e>
 8007f9e:	89a3      	ldrh	r3, [r4, #12]
 8007fa0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8007fa4:	f04f 0100 	mov.w	r1, #0
 8007fa8:	bf14      	ite	ne
 8007faa:	2340      	movne	r3, #64	@ 0x40
 8007fac:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8007fb0:	2000      	movs	r0, #0
 8007fb2:	6031      	str	r1, [r6, #0]
 8007fb4:	602b      	str	r3, [r5, #0]
 8007fb6:	b016      	add	sp, #88	@ 0x58
 8007fb8:	bd70      	pop	{r4, r5, r6, pc}
 8007fba:	466a      	mov	r2, sp
 8007fbc:	f000 f862 	bl	8008084 <_fstat_r>
 8007fc0:	2800      	cmp	r0, #0
 8007fc2:	dbec      	blt.n	8007f9e <__swhatbuf_r+0x12>
 8007fc4:	9901      	ldr	r1, [sp, #4]
 8007fc6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8007fca:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8007fce:	4259      	negs	r1, r3
 8007fd0:	4159      	adcs	r1, r3
 8007fd2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007fd6:	e7eb      	b.n	8007fb0 <__swhatbuf_r+0x24>

08007fd8 <__smakebuf_r>:
 8007fd8:	898b      	ldrh	r3, [r1, #12]
 8007fda:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007fdc:	079d      	lsls	r5, r3, #30
 8007fde:	4606      	mov	r6, r0
 8007fe0:	460c      	mov	r4, r1
 8007fe2:	d507      	bpl.n	8007ff4 <__smakebuf_r+0x1c>
 8007fe4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8007fe8:	6023      	str	r3, [r4, #0]
 8007fea:	6123      	str	r3, [r4, #16]
 8007fec:	2301      	movs	r3, #1
 8007fee:	6163      	str	r3, [r4, #20]
 8007ff0:	b003      	add	sp, #12
 8007ff2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007ff4:	ab01      	add	r3, sp, #4
 8007ff6:	466a      	mov	r2, sp
 8007ff8:	f7ff ffc8 	bl	8007f8c <__swhatbuf_r>
 8007ffc:	9f00      	ldr	r7, [sp, #0]
 8007ffe:	4605      	mov	r5, r0
 8008000:	4639      	mov	r1, r7
 8008002:	4630      	mov	r0, r6
 8008004:	f7ff fa62 	bl	80074cc <_malloc_r>
 8008008:	b948      	cbnz	r0, 800801e <__smakebuf_r+0x46>
 800800a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800800e:	059a      	lsls	r2, r3, #22
 8008010:	d4ee      	bmi.n	8007ff0 <__smakebuf_r+0x18>
 8008012:	f023 0303 	bic.w	r3, r3, #3
 8008016:	f043 0302 	orr.w	r3, r3, #2
 800801a:	81a3      	strh	r3, [r4, #12]
 800801c:	e7e2      	b.n	8007fe4 <__smakebuf_r+0xc>
 800801e:	89a3      	ldrh	r3, [r4, #12]
 8008020:	6020      	str	r0, [r4, #0]
 8008022:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008026:	81a3      	strh	r3, [r4, #12]
 8008028:	9b01      	ldr	r3, [sp, #4]
 800802a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800802e:	b15b      	cbz	r3, 8008048 <__smakebuf_r+0x70>
 8008030:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008034:	4630      	mov	r0, r6
 8008036:	f000 f837 	bl	80080a8 <_isatty_r>
 800803a:	b128      	cbz	r0, 8008048 <__smakebuf_r+0x70>
 800803c:	89a3      	ldrh	r3, [r4, #12]
 800803e:	f023 0303 	bic.w	r3, r3, #3
 8008042:	f043 0301 	orr.w	r3, r3, #1
 8008046:	81a3      	strh	r3, [r4, #12]
 8008048:	89a3      	ldrh	r3, [r4, #12]
 800804a:	431d      	orrs	r5, r3
 800804c:	81a5      	strh	r5, [r4, #12]
 800804e:	e7cf      	b.n	8007ff0 <__smakebuf_r+0x18>

08008050 <memmove>:
 8008050:	4288      	cmp	r0, r1
 8008052:	b510      	push	{r4, lr}
 8008054:	eb01 0402 	add.w	r4, r1, r2
 8008058:	d902      	bls.n	8008060 <memmove+0x10>
 800805a:	4284      	cmp	r4, r0
 800805c:	4623      	mov	r3, r4
 800805e:	d807      	bhi.n	8008070 <memmove+0x20>
 8008060:	1e43      	subs	r3, r0, #1
 8008062:	42a1      	cmp	r1, r4
 8008064:	d008      	beq.n	8008078 <memmove+0x28>
 8008066:	f811 2b01 	ldrb.w	r2, [r1], #1
 800806a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800806e:	e7f8      	b.n	8008062 <memmove+0x12>
 8008070:	4402      	add	r2, r0
 8008072:	4601      	mov	r1, r0
 8008074:	428a      	cmp	r2, r1
 8008076:	d100      	bne.n	800807a <memmove+0x2a>
 8008078:	bd10      	pop	{r4, pc}
 800807a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800807e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008082:	e7f7      	b.n	8008074 <memmove+0x24>

08008084 <_fstat_r>:
 8008084:	b538      	push	{r3, r4, r5, lr}
 8008086:	4d07      	ldr	r5, [pc, #28]	@ (80080a4 <_fstat_r+0x20>)
 8008088:	2300      	movs	r3, #0
 800808a:	4604      	mov	r4, r0
 800808c:	4608      	mov	r0, r1
 800808e:	4611      	mov	r1, r2
 8008090:	602b      	str	r3, [r5, #0]
 8008092:	f7fb fa79 	bl	8003588 <_fstat>
 8008096:	1c43      	adds	r3, r0, #1
 8008098:	d102      	bne.n	80080a0 <_fstat_r+0x1c>
 800809a:	682b      	ldr	r3, [r5, #0]
 800809c:	b103      	cbz	r3, 80080a0 <_fstat_r+0x1c>
 800809e:	6023      	str	r3, [r4, #0]
 80080a0:	bd38      	pop	{r3, r4, r5, pc}
 80080a2:	bf00      	nop
 80080a4:	20025d34 	.word	0x20025d34

080080a8 <_isatty_r>:
 80080a8:	b538      	push	{r3, r4, r5, lr}
 80080aa:	4d06      	ldr	r5, [pc, #24]	@ (80080c4 <_isatty_r+0x1c>)
 80080ac:	2300      	movs	r3, #0
 80080ae:	4604      	mov	r4, r0
 80080b0:	4608      	mov	r0, r1
 80080b2:	602b      	str	r3, [r5, #0]
 80080b4:	f7fb fa78 	bl	80035a8 <_isatty>
 80080b8:	1c43      	adds	r3, r0, #1
 80080ba:	d102      	bne.n	80080c2 <_isatty_r+0x1a>
 80080bc:	682b      	ldr	r3, [r5, #0]
 80080be:	b103      	cbz	r3, 80080c2 <_isatty_r+0x1a>
 80080c0:	6023      	str	r3, [r4, #0]
 80080c2:	bd38      	pop	{r3, r4, r5, pc}
 80080c4:	20025d34 	.word	0x20025d34

080080c8 <_sbrk_r>:
 80080c8:	b538      	push	{r3, r4, r5, lr}
 80080ca:	4d06      	ldr	r5, [pc, #24]	@ (80080e4 <_sbrk_r+0x1c>)
 80080cc:	2300      	movs	r3, #0
 80080ce:	4604      	mov	r4, r0
 80080d0:	4608      	mov	r0, r1
 80080d2:	602b      	str	r3, [r5, #0]
 80080d4:	f7fb fa80 	bl	80035d8 <_sbrk>
 80080d8:	1c43      	adds	r3, r0, #1
 80080da:	d102      	bne.n	80080e2 <_sbrk_r+0x1a>
 80080dc:	682b      	ldr	r3, [r5, #0]
 80080de:	b103      	cbz	r3, 80080e2 <_sbrk_r+0x1a>
 80080e0:	6023      	str	r3, [r4, #0]
 80080e2:	bd38      	pop	{r3, r4, r5, pc}
 80080e4:	20025d34 	.word	0x20025d34

080080e8 <memcpy>:
 80080e8:	440a      	add	r2, r1
 80080ea:	4291      	cmp	r1, r2
 80080ec:	f100 33ff 	add.w	r3, r0, #4294967295
 80080f0:	d100      	bne.n	80080f4 <memcpy+0xc>
 80080f2:	4770      	bx	lr
 80080f4:	b510      	push	{r4, lr}
 80080f6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80080fa:	f803 4f01 	strb.w	r4, [r3, #1]!
 80080fe:	4291      	cmp	r1, r2
 8008100:	d1f9      	bne.n	80080f6 <memcpy+0xe>
 8008102:	bd10      	pop	{r4, pc}

08008104 <_realloc_r>:
 8008104:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008108:	4680      	mov	r8, r0
 800810a:	4615      	mov	r5, r2
 800810c:	460c      	mov	r4, r1
 800810e:	b921      	cbnz	r1, 800811a <_realloc_r+0x16>
 8008110:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008114:	4611      	mov	r1, r2
 8008116:	f7ff b9d9 	b.w	80074cc <_malloc_r>
 800811a:	b92a      	cbnz	r2, 8008128 <_realloc_r+0x24>
 800811c:	f7ff f96a 	bl	80073f4 <_free_r>
 8008120:	2400      	movs	r4, #0
 8008122:	4620      	mov	r0, r4
 8008124:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008128:	f000 f81a 	bl	8008160 <_malloc_usable_size_r>
 800812c:	4285      	cmp	r5, r0
 800812e:	4606      	mov	r6, r0
 8008130:	d802      	bhi.n	8008138 <_realloc_r+0x34>
 8008132:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8008136:	d8f4      	bhi.n	8008122 <_realloc_r+0x1e>
 8008138:	4629      	mov	r1, r5
 800813a:	4640      	mov	r0, r8
 800813c:	f7ff f9c6 	bl	80074cc <_malloc_r>
 8008140:	4607      	mov	r7, r0
 8008142:	2800      	cmp	r0, #0
 8008144:	d0ec      	beq.n	8008120 <_realloc_r+0x1c>
 8008146:	42b5      	cmp	r5, r6
 8008148:	462a      	mov	r2, r5
 800814a:	4621      	mov	r1, r4
 800814c:	bf28      	it	cs
 800814e:	4632      	movcs	r2, r6
 8008150:	f7ff ffca 	bl	80080e8 <memcpy>
 8008154:	4621      	mov	r1, r4
 8008156:	4640      	mov	r0, r8
 8008158:	f7ff f94c 	bl	80073f4 <_free_r>
 800815c:	463c      	mov	r4, r7
 800815e:	e7e0      	b.n	8008122 <_realloc_r+0x1e>

08008160 <_malloc_usable_size_r>:
 8008160:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008164:	1f18      	subs	r0, r3, #4
 8008166:	2b00      	cmp	r3, #0
 8008168:	bfbc      	itt	lt
 800816a:	580b      	ldrlt	r3, [r1, r0]
 800816c:	18c0      	addlt	r0, r0, r3
 800816e:	4770      	bx	lr

08008170 <_init>:
 8008170:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008172:	bf00      	nop
 8008174:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008176:	bc08      	pop	{r3}
 8008178:	469e      	mov	lr, r3
 800817a:	4770      	bx	lr

0800817c <_fini>:
 800817c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800817e:	bf00      	nop
 8008180:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008182:	bc08      	pop	{r3}
 8008184:	469e      	mov	lr, r3
 8008186:	4770      	bx	lr
