
FTenneyLabFinalProject.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006fc8  080001b0  080001b0  000011b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001270  08007178  08007178  00008178  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080083e8  080083e8  0000a078  2**0
                  CONTENTS
  4 .ARM          00000008  080083e8  080083e8  000093e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080083f0  080083f0  0000a078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080083f0  080083f0  000093f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080083f4  080083f4  000093f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000078  20000000  080083f8  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000a078  2**0
                  CONTENTS
 10 .bss          00025cc4  20000078  20000078  0000a078  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20025d3c  20025d3c  0000a078  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000a078  2**0
                  CONTENTS, READONLY
 13 .debug_info   000143f8  00000000  00000000  0000a0a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000031be  00000000  00000000  0001e4a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001458  00000000  00000000  00021660  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000fad  00000000  00000000  00022ab8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00026fc9  00000000  00000000  00023a65  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00018e16  00000000  00000000  0004aa2e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e2c93  00000000  00000000  00063844  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  001464d7  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005cdc  00000000  00000000  0014651c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000072  00000000  00000000  0014c1f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	@ (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	@ (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000078 	.word	0x20000078
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08007160 	.word	0x08007160

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	@ (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	@ (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	@ (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	2000007c 	.word	0x2000007c
 80001ec:	08007160 	.word	0x08007160

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b96a 	b.w	800057c <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	460c      	mov	r4, r1
 80002c8:	2b00      	cmp	r3, #0
 80002ca:	d14e      	bne.n	800036a <__udivmoddi4+0xaa>
 80002cc:	4694      	mov	ip, r2
 80002ce:	458c      	cmp	ip, r1
 80002d0:	4686      	mov	lr, r0
 80002d2:	fab2 f282 	clz	r2, r2
 80002d6:	d962      	bls.n	800039e <__udivmoddi4+0xde>
 80002d8:	b14a      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002da:	f1c2 0320 	rsb	r3, r2, #32
 80002de:	4091      	lsls	r1, r2
 80002e0:	fa20 f303 	lsr.w	r3, r0, r3
 80002e4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002e8:	4319      	orrs	r1, r3
 80002ea:	fa00 fe02 	lsl.w	lr, r0, r2
 80002ee:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f2:	fa1f f68c 	uxth.w	r6, ip
 80002f6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002fa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002fe:	fb07 1114 	mls	r1, r7, r4, r1
 8000302:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000306:	fb04 f106 	mul.w	r1, r4, r6
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f104 30ff 	add.w	r0, r4, #4294967295
 8000316:	f080 8112 	bcs.w	800053e <__udivmoddi4+0x27e>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 810f 	bls.w	800053e <__udivmoddi4+0x27e>
 8000320:	3c02      	subs	r4, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a59      	subs	r1, r3, r1
 8000326:	fa1f f38e 	uxth.w	r3, lr
 800032a:	fbb1 f0f7 	udiv	r0, r1, r7
 800032e:	fb07 1110 	mls	r1, r7, r0, r1
 8000332:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000336:	fb00 f606 	mul.w	r6, r0, r6
 800033a:	429e      	cmp	r6, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x94>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f100 31ff 	add.w	r1, r0, #4294967295
 8000346:	f080 80fc 	bcs.w	8000542 <__udivmoddi4+0x282>
 800034a:	429e      	cmp	r6, r3
 800034c:	f240 80f9 	bls.w	8000542 <__udivmoddi4+0x282>
 8000350:	4463      	add	r3, ip
 8000352:	3802      	subs	r0, #2
 8000354:	1b9b      	subs	r3, r3, r6
 8000356:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800035a:	2100      	movs	r1, #0
 800035c:	b11d      	cbz	r5, 8000366 <__udivmoddi4+0xa6>
 800035e:	40d3      	lsrs	r3, r2
 8000360:	2200      	movs	r2, #0
 8000362:	e9c5 3200 	strd	r3, r2, [r5]
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d905      	bls.n	800037a <__udivmoddi4+0xba>
 800036e:	b10d      	cbz	r5, 8000374 <__udivmoddi4+0xb4>
 8000370:	e9c5 0100 	strd	r0, r1, [r5]
 8000374:	2100      	movs	r1, #0
 8000376:	4608      	mov	r0, r1
 8000378:	e7f5      	b.n	8000366 <__udivmoddi4+0xa6>
 800037a:	fab3 f183 	clz	r1, r3
 800037e:	2900      	cmp	r1, #0
 8000380:	d146      	bne.n	8000410 <__udivmoddi4+0x150>
 8000382:	42a3      	cmp	r3, r4
 8000384:	d302      	bcc.n	800038c <__udivmoddi4+0xcc>
 8000386:	4290      	cmp	r0, r2
 8000388:	f0c0 80f0 	bcc.w	800056c <__udivmoddi4+0x2ac>
 800038c:	1a86      	subs	r6, r0, r2
 800038e:	eb64 0303 	sbc.w	r3, r4, r3
 8000392:	2001      	movs	r0, #1
 8000394:	2d00      	cmp	r5, #0
 8000396:	d0e6      	beq.n	8000366 <__udivmoddi4+0xa6>
 8000398:	e9c5 6300 	strd	r6, r3, [r5]
 800039c:	e7e3      	b.n	8000366 <__udivmoddi4+0xa6>
 800039e:	2a00      	cmp	r2, #0
 80003a0:	f040 8090 	bne.w	80004c4 <__udivmoddi4+0x204>
 80003a4:	eba1 040c 	sub.w	r4, r1, ip
 80003a8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003ac:	fa1f f78c 	uxth.w	r7, ip
 80003b0:	2101      	movs	r1, #1
 80003b2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003b6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ba:	fb08 4416 	mls	r4, r8, r6, r4
 80003be:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003c2:	fb07 f006 	mul.w	r0, r7, r6
 80003c6:	4298      	cmp	r0, r3
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x11c>
 80003ca:	eb1c 0303 	adds.w	r3, ip, r3
 80003ce:	f106 34ff 	add.w	r4, r6, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x11a>
 80003d4:	4298      	cmp	r0, r3
 80003d6:	f200 80cd 	bhi.w	8000574 <__udivmoddi4+0x2b4>
 80003da:	4626      	mov	r6, r4
 80003dc:	1a1c      	subs	r4, r3, r0
 80003de:	fa1f f38e 	uxth.w	r3, lr
 80003e2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003e6:	fb08 4410 	mls	r4, r8, r0, r4
 80003ea:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003ee:	fb00 f707 	mul.w	r7, r0, r7
 80003f2:	429f      	cmp	r7, r3
 80003f4:	d908      	bls.n	8000408 <__udivmoddi4+0x148>
 80003f6:	eb1c 0303 	adds.w	r3, ip, r3
 80003fa:	f100 34ff 	add.w	r4, r0, #4294967295
 80003fe:	d202      	bcs.n	8000406 <__udivmoddi4+0x146>
 8000400:	429f      	cmp	r7, r3
 8000402:	f200 80b0 	bhi.w	8000566 <__udivmoddi4+0x2a6>
 8000406:	4620      	mov	r0, r4
 8000408:	1bdb      	subs	r3, r3, r7
 800040a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800040e:	e7a5      	b.n	800035c <__udivmoddi4+0x9c>
 8000410:	f1c1 0620 	rsb	r6, r1, #32
 8000414:	408b      	lsls	r3, r1
 8000416:	fa22 f706 	lsr.w	r7, r2, r6
 800041a:	431f      	orrs	r7, r3
 800041c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000420:	fa04 f301 	lsl.w	r3, r4, r1
 8000424:	ea43 030c 	orr.w	r3, r3, ip
 8000428:	40f4      	lsrs	r4, r6
 800042a:	fa00 f801 	lsl.w	r8, r0, r1
 800042e:	0c38      	lsrs	r0, r7, #16
 8000430:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000434:	fbb4 fef0 	udiv	lr, r4, r0
 8000438:	fa1f fc87 	uxth.w	ip, r7
 800043c:	fb00 441e 	mls	r4, r0, lr, r4
 8000440:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000444:	fb0e f90c 	mul.w	r9, lr, ip
 8000448:	45a1      	cmp	r9, r4
 800044a:	fa02 f201 	lsl.w	r2, r2, r1
 800044e:	d90a      	bls.n	8000466 <__udivmoddi4+0x1a6>
 8000450:	193c      	adds	r4, r7, r4
 8000452:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000456:	f080 8084 	bcs.w	8000562 <__udivmoddi4+0x2a2>
 800045a:	45a1      	cmp	r9, r4
 800045c:	f240 8081 	bls.w	8000562 <__udivmoddi4+0x2a2>
 8000460:	f1ae 0e02 	sub.w	lr, lr, #2
 8000464:	443c      	add	r4, r7
 8000466:	eba4 0409 	sub.w	r4, r4, r9
 800046a:	fa1f f983 	uxth.w	r9, r3
 800046e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000472:	fb00 4413 	mls	r4, r0, r3, r4
 8000476:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800047a:	fb03 fc0c 	mul.w	ip, r3, ip
 800047e:	45a4      	cmp	ip, r4
 8000480:	d907      	bls.n	8000492 <__udivmoddi4+0x1d2>
 8000482:	193c      	adds	r4, r7, r4
 8000484:	f103 30ff 	add.w	r0, r3, #4294967295
 8000488:	d267      	bcs.n	800055a <__udivmoddi4+0x29a>
 800048a:	45a4      	cmp	ip, r4
 800048c:	d965      	bls.n	800055a <__udivmoddi4+0x29a>
 800048e:	3b02      	subs	r3, #2
 8000490:	443c      	add	r4, r7
 8000492:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000496:	fba0 9302 	umull	r9, r3, r0, r2
 800049a:	eba4 040c 	sub.w	r4, r4, ip
 800049e:	429c      	cmp	r4, r3
 80004a0:	46ce      	mov	lr, r9
 80004a2:	469c      	mov	ip, r3
 80004a4:	d351      	bcc.n	800054a <__udivmoddi4+0x28a>
 80004a6:	d04e      	beq.n	8000546 <__udivmoddi4+0x286>
 80004a8:	b155      	cbz	r5, 80004c0 <__udivmoddi4+0x200>
 80004aa:	ebb8 030e 	subs.w	r3, r8, lr
 80004ae:	eb64 040c 	sbc.w	r4, r4, ip
 80004b2:	fa04 f606 	lsl.w	r6, r4, r6
 80004b6:	40cb      	lsrs	r3, r1
 80004b8:	431e      	orrs	r6, r3
 80004ba:	40cc      	lsrs	r4, r1
 80004bc:	e9c5 6400 	strd	r6, r4, [r5]
 80004c0:	2100      	movs	r1, #0
 80004c2:	e750      	b.n	8000366 <__udivmoddi4+0xa6>
 80004c4:	f1c2 0320 	rsb	r3, r2, #32
 80004c8:	fa20 f103 	lsr.w	r1, r0, r3
 80004cc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d0:	fa24 f303 	lsr.w	r3, r4, r3
 80004d4:	4094      	lsls	r4, r2
 80004d6:	430c      	orrs	r4, r1
 80004d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004dc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004e0:	fa1f f78c 	uxth.w	r7, ip
 80004e4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004e8:	fb08 3110 	mls	r1, r8, r0, r3
 80004ec:	0c23      	lsrs	r3, r4, #16
 80004ee:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004f2:	fb00 f107 	mul.w	r1, r0, r7
 80004f6:	4299      	cmp	r1, r3
 80004f8:	d908      	bls.n	800050c <__udivmoddi4+0x24c>
 80004fa:	eb1c 0303 	adds.w	r3, ip, r3
 80004fe:	f100 36ff 	add.w	r6, r0, #4294967295
 8000502:	d22c      	bcs.n	800055e <__udivmoddi4+0x29e>
 8000504:	4299      	cmp	r1, r3
 8000506:	d92a      	bls.n	800055e <__udivmoddi4+0x29e>
 8000508:	3802      	subs	r0, #2
 800050a:	4463      	add	r3, ip
 800050c:	1a5b      	subs	r3, r3, r1
 800050e:	b2a4      	uxth	r4, r4
 8000510:	fbb3 f1f8 	udiv	r1, r3, r8
 8000514:	fb08 3311 	mls	r3, r8, r1, r3
 8000518:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800051c:	fb01 f307 	mul.w	r3, r1, r7
 8000520:	42a3      	cmp	r3, r4
 8000522:	d908      	bls.n	8000536 <__udivmoddi4+0x276>
 8000524:	eb1c 0404 	adds.w	r4, ip, r4
 8000528:	f101 36ff 	add.w	r6, r1, #4294967295
 800052c:	d213      	bcs.n	8000556 <__udivmoddi4+0x296>
 800052e:	42a3      	cmp	r3, r4
 8000530:	d911      	bls.n	8000556 <__udivmoddi4+0x296>
 8000532:	3902      	subs	r1, #2
 8000534:	4464      	add	r4, ip
 8000536:	1ae4      	subs	r4, r4, r3
 8000538:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800053c:	e739      	b.n	80003b2 <__udivmoddi4+0xf2>
 800053e:	4604      	mov	r4, r0
 8000540:	e6f0      	b.n	8000324 <__udivmoddi4+0x64>
 8000542:	4608      	mov	r0, r1
 8000544:	e706      	b.n	8000354 <__udivmoddi4+0x94>
 8000546:	45c8      	cmp	r8, r9
 8000548:	d2ae      	bcs.n	80004a8 <__udivmoddi4+0x1e8>
 800054a:	ebb9 0e02 	subs.w	lr, r9, r2
 800054e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000552:	3801      	subs	r0, #1
 8000554:	e7a8      	b.n	80004a8 <__udivmoddi4+0x1e8>
 8000556:	4631      	mov	r1, r6
 8000558:	e7ed      	b.n	8000536 <__udivmoddi4+0x276>
 800055a:	4603      	mov	r3, r0
 800055c:	e799      	b.n	8000492 <__udivmoddi4+0x1d2>
 800055e:	4630      	mov	r0, r6
 8000560:	e7d4      	b.n	800050c <__udivmoddi4+0x24c>
 8000562:	46d6      	mov	lr, sl
 8000564:	e77f      	b.n	8000466 <__udivmoddi4+0x1a6>
 8000566:	4463      	add	r3, ip
 8000568:	3802      	subs	r0, #2
 800056a:	e74d      	b.n	8000408 <__udivmoddi4+0x148>
 800056c:	4606      	mov	r6, r0
 800056e:	4623      	mov	r3, r4
 8000570:	4608      	mov	r0, r1
 8000572:	e70f      	b.n	8000394 <__udivmoddi4+0xd4>
 8000574:	3e02      	subs	r6, #2
 8000576:	4463      	add	r3, ip
 8000578:	e730      	b.n	80003dc <__udivmoddi4+0x11c>
 800057a:	bf00      	nop

0800057c <__aeabi_idiv0>:
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop

08000580 <ApplicationInit>:
void LCDTouchScreenInterruptGPIOInit(void);
#endif // TOUCH_INTERRUPT_ENABLED
#endif // COMPILE_TOUCH_FUNCTIONS

void ApplicationInit(void)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	af00      	add	r7, sp, #0
	initialise_monitor_handles(); // Allows printf functionality
 8000584:	f002 fa7c 	bl	8002a80 <initialise_monitor_handles>
    LTCD__Init();
 8000588:	f000 f9e0 	bl	800094c <LTCD__Init>
    LTCD_Layer_Init(0);
 800058c:	2000      	movs	r0, #0
 800058e:	f000 f99d 	bl	80008cc <LTCD_Layer_Init>
    LCD_Clear(0,LCD_COLOR_WHITE);
 8000592:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8000596:	2000      	movs	r0, #0
 8000598:	f000 fc6e 	bl	8000e78 <LCD_Clear>

    #if COMPILE_TOUCH_FUNCTIONS == 1
	InitializeLCDTouch();
 800059c:	f000 fd44 	bl	8001028 <InitializeLCDTouch>

	// This is the orientation for the board to be direclty up where the buttons are vertically above the screen
	// Top left would be low x value, high y value. Bottom right would be low x value, low y value.
	StaticTouchData.orientation = STMPE811_Orientation_Portrait_2;
 80005a0:	4b03      	ldr	r3, [pc, #12]	@ (80005b0 <ApplicationInit+0x30>)
 80005a2:	2201      	movs	r2, #1
 80005a4:	719a      	strb	r2, [r3, #6]

	#if TOUCH_INTERRUPT_ENABLED == 1
	LCDTouchScreenInterruptGPIOInit();
 80005a6:	f000 f805 	bl	80005b4 <LCDTouchScreenInterruptGPIOInit>
	#endif // TOUCH_INTERRUPT_ENABLED

	#endif // COMPILE_TOUCH_FUNCTIONS
}
 80005aa:	bf00      	nop
 80005ac:	bd80      	pop	{r7, pc}
 80005ae:	bf00      	nop
 80005b0:	20000094 	.word	0x20000094

080005b4 <LCDTouchScreenInterruptGPIOInit>:

// TouchScreen Interrupt
#if TOUCH_INTERRUPT_ENABLED == 1

void LCDTouchScreenInterruptGPIOInit(void)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b086      	sub	sp, #24
 80005b8:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef LCDConfig = {0};
 80005ba:	1d3b      	adds	r3, r7, #4
 80005bc:	2200      	movs	r2, #0
 80005be:	601a      	str	r2, [r3, #0]
 80005c0:	605a      	str	r2, [r3, #4]
 80005c2:	609a      	str	r2, [r3, #8]
 80005c4:	60da      	str	r2, [r3, #12]
 80005c6:	611a      	str	r2, [r3, #16]
    LCDConfig.Pin = GPIO_PIN_15;
 80005c8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80005cc:	607b      	str	r3, [r7, #4]
    LCDConfig.Mode = GPIO_MODE_IT_RISING_FALLING;
 80005ce:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 80005d2:	60bb      	str	r3, [r7, #8]
    LCDConfig.Pull = GPIO_NOPULL;
 80005d4:	2300      	movs	r3, #0
 80005d6:	60fb      	str	r3, [r7, #12]
    LCDConfig.Speed = GPIO_SPEED_FREQ_HIGH;
 80005d8:	2302      	movs	r3, #2
 80005da:	613b      	str	r3, [r7, #16]
    
    // Clock enable
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80005dc:	2300      	movs	r3, #0
 80005de:	603b      	str	r3, [r7, #0]
 80005e0:	4b0d      	ldr	r3, [pc, #52]	@ (8000618 <LCDTouchScreenInterruptGPIOInit+0x64>)
 80005e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005e4:	4a0c      	ldr	r2, [pc, #48]	@ (8000618 <LCDTouchScreenInterruptGPIOInit+0x64>)
 80005e6:	f043 0301 	orr.w	r3, r3, #1
 80005ea:	6313      	str	r3, [r2, #48]	@ 0x30
 80005ec:	4b0a      	ldr	r3, [pc, #40]	@ (8000618 <LCDTouchScreenInterruptGPIOInit+0x64>)
 80005ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005f0:	f003 0301 	and.w	r3, r3, #1
 80005f4:	603b      	str	r3, [r7, #0]
 80005f6:	683b      	ldr	r3, [r7, #0]

    // GPIO Init      
    HAL_GPIO_Init(GPIOA, &LCDConfig);
 80005f8:	1d3b      	adds	r3, r7, #4
 80005fa:	4619      	mov	r1, r3
 80005fc:	4807      	ldr	r0, [pc, #28]	@ (800061c <LCDTouchScreenInterruptGPIOInit+0x68>)
 80005fe:	f002 fd43 	bl	8003088 <HAL_GPIO_Init>

    // Interrupt Configuration
    HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000602:	2028      	movs	r0, #40	@ 0x28
 8000604:	f002 fcf1 	bl	8002fea <HAL_NVIC_EnableIRQ>

	LCDTouchIRQ.Line = EXTI_LINE_15;
 8000608:	4b05      	ldr	r3, [pc, #20]	@ (8000620 <LCDTouchScreenInterruptGPIOInit+0x6c>)
 800060a:	4a06      	ldr	r2, [pc, #24]	@ (8000624 <LCDTouchScreenInterruptGPIOInit+0x70>)
 800060c:	601a      	str	r2, [r3, #0]

}
 800060e:	bf00      	nop
 8000610:	3718      	adds	r7, #24
 8000612:	46bd      	mov	sp, r7
 8000614:	bd80      	pop	{r7, pc}
 8000616:	bf00      	nop
 8000618:	40023800 	.word	0x40023800
 800061c:	40020000 	.word	0x40020000
 8000620:	2000009c 	.word	0x2000009c
 8000624:	0600000f 	.word	0x0600000f

08000628 <EXTI15_10_IRQHandler>:
#define TOUCH_DETECTED_IRQ_STATUS_BIT   (1 << 0)  // Touchscreen detected bitmask

static uint8_t statusFlag;

void EXTI15_10_IRQHandler()
{
 8000628:	b580      	push	{r7, lr}
 800062a:	b082      	sub	sp, #8
 800062c:	af00      	add	r7, sp, #0
	HAL_NVIC_DisableIRQ(EXTI15_10_IRQn); // May consider making this a universial interrupt guard
 800062e:	2028      	movs	r0, #40	@ 0x28
 8000630:	f002 fce9 	bl	8003006 <HAL_NVIC_DisableIRQ>
	bool isTouchDetected = false;
 8000634:	2300      	movs	r3, #0
 8000636:	71fb      	strb	r3, [r7, #7]

	static uint32_t count;
	count = 0;
 8000638:	4b39      	ldr	r3, [pc, #228]	@ (8000720 <EXTI15_10_IRQHandler+0xf8>)
 800063a:	2200      	movs	r2, #0
 800063c:	601a      	str	r2, [r3, #0]
	while(count == 0){
 800063e:	e006      	b.n	800064e <EXTI15_10_IRQHandler+0x26>
		count = STMPE811_Read(STMPE811_FIFO_SIZE);
 8000640:	204c      	movs	r0, #76	@ 0x4c
 8000642:	f001 ff8c 	bl	800255e <STMPE811_Read>
 8000646:	4603      	mov	r3, r0
 8000648:	461a      	mov	r2, r3
 800064a:	4b35      	ldr	r3, [pc, #212]	@ (8000720 <EXTI15_10_IRQHandler+0xf8>)
 800064c:	601a      	str	r2, [r3, #0]
	while(count == 0){
 800064e:	4b34      	ldr	r3, [pc, #208]	@ (8000720 <EXTI15_10_IRQHandler+0xf8>)
 8000650:	681b      	ldr	r3, [r3, #0]
 8000652:	2b00      	cmp	r3, #0
 8000654:	d0f4      	beq.n	8000640 <EXTI15_10_IRQHandler+0x18>
	}

	// Disable touch interrupt bit on the STMPE811
	uint8_t currentIRQEnables = ReadRegisterFromTouchModule(STMPE811_INT_EN);
 8000656:	200a      	movs	r0, #10
 8000658:	f000 fcfc 	bl	8001054 <ReadRegisterFromTouchModule>
 800065c:	4603      	mov	r3, r0
 800065e:	71bb      	strb	r3, [r7, #6]
	WriteDataToTouchModule(STMPE811_INT_EN, 0x00);
 8000660:	2100      	movs	r1, #0
 8000662:	200a      	movs	r0, #10
 8000664:	f000 fd04 	bl	8001070 <WriteDataToTouchModule>

	// Clear the interrupt bit in the STMPE811
	statusFlag = ReadRegisterFromTouchModule(STMPE811_INT_STA);
 8000668:	200b      	movs	r0, #11
 800066a:	f000 fcf3 	bl	8001054 <ReadRegisterFromTouchModule>
 800066e:	4603      	mov	r3, r0
 8000670:	461a      	mov	r2, r3
 8000672:	4b2c      	ldr	r3, [pc, #176]	@ (8000724 <EXTI15_10_IRQHandler+0xfc>)
 8000674:	701a      	strb	r2, [r3, #0]
	uint8_t clearIRQData = (statusFlag | TOUCH_DETECTED_IRQ_STATUS_BIT); // Write one to clear bit
 8000676:	4b2b      	ldr	r3, [pc, #172]	@ (8000724 <EXTI15_10_IRQHandler+0xfc>)
 8000678:	781b      	ldrb	r3, [r3, #0]
 800067a:	f043 0301 	orr.w	r3, r3, #1
 800067e:	717b      	strb	r3, [r7, #5]
	WriteDataToTouchModule(STMPE811_INT_STA, clearIRQData);
 8000680:	797b      	ldrb	r3, [r7, #5]
 8000682:	4619      	mov	r1, r3
 8000684:	200b      	movs	r0, #11
 8000686:	f000 fcf3 	bl	8001070 <WriteDataToTouchModule>
	
	uint8_t ctrlReg = ReadRegisterFromTouchModule(STMPE811_TSC_CTRL);
 800068a:	2040      	movs	r0, #64	@ 0x40
 800068c:	f000 fce2 	bl	8001054 <ReadRegisterFromTouchModule>
 8000690:	4603      	mov	r3, r0
 8000692:	713b      	strb	r3, [r7, #4]
	if (ctrlReg & 0x80)
 8000694:	f997 3004 	ldrsb.w	r3, [r7, #4]
 8000698:	2b00      	cmp	r3, #0
 800069a:	da01      	bge.n	80006a0 <EXTI15_10_IRQHandler+0x78>
	{
		isTouchDetected = true;
 800069c:	2301      	movs	r3, #1
 800069e:	71fb      	strb	r3, [r7, #7]
	}

	// Determine if it is pressed or unpressed
	if(isTouchDetected) // Touch has been detected
 80006a0:	79fb      	ldrb	r3, [r7, #7]
 80006a2:	2b00      	cmp	r3, #0
 80006a4:	d014      	beq.n	80006d0 <EXTI15_10_IRQHandler+0xa8>
	{
		printf("\nPressed");
 80006a6:	4820      	ldr	r0, [pc, #128]	@ (8000728 <EXTI15_10_IRQHandler+0x100>)
 80006a8:	f005 fe8e 	bl	80063c8 <iprintf>
		// May need to do numerous retries? 
		DetermineTouchPosition(&StaticTouchData);
 80006ac:	481f      	ldr	r0, [pc, #124]	@ (800072c <EXTI15_10_IRQHandler+0x104>)
 80006ae:	f000 fcc6 	bl	800103e <DetermineTouchPosition>
		/* Touch valid */
		printf("\nX: %03d\nY: %03d \n", StaticTouchData.x, StaticTouchData.y);
 80006b2:	4b1e      	ldr	r3, [pc, #120]	@ (800072c <EXTI15_10_IRQHandler+0x104>)
 80006b4:	881b      	ldrh	r3, [r3, #0]
 80006b6:	4619      	mov	r1, r3
 80006b8:	4b1c      	ldr	r3, [pc, #112]	@ (800072c <EXTI15_10_IRQHandler+0x104>)
 80006ba:	885b      	ldrh	r3, [r3, #2]
 80006bc:	461a      	mov	r2, r3
 80006be:	481c      	ldr	r0, [pc, #112]	@ (8000730 <EXTI15_10_IRQHandler+0x108>)
 80006c0:	f005 fe82 	bl	80063c8 <iprintf>
		LCD_Clear(0, LCD_COLOR_RED);
 80006c4:	f44f 4178 	mov.w	r1, #63488	@ 0xf800
 80006c8:	2000      	movs	r0, #0
 80006ca:	f000 fbd5 	bl	8000e78 <LCD_Clear>
 80006ce:	e007      	b.n	80006e0 <EXTI15_10_IRQHandler+0xb8>

	}else{

		/* Touch not pressed */
		printf("\nNot pressed \n");
 80006d0:	4818      	ldr	r0, [pc, #96]	@ (8000734 <EXTI15_10_IRQHandler+0x10c>)
 80006d2:	f005 fee1 	bl	8006498 <puts>
		LCD_Clear(0, LCD_COLOR_GREEN);
 80006d6:	f44f 61fc 	mov.w	r1, #2016	@ 0x7e0
 80006da:	2000      	movs	r0, #0
 80006dc:	f000 fbcc 	bl	8000e78 <LCD_Clear>
	}

	STMPE811_Write(STMPE811_FIFO_STA, 0x01);
 80006e0:	2101      	movs	r1, #1
 80006e2:	204b      	movs	r0, #75	@ 0x4b
 80006e4:	f001 ff4c 	bl	8002580 <STMPE811_Write>
	STMPE811_Write(STMPE811_FIFO_STA, 0x00);
 80006e8:	2100      	movs	r1, #0
 80006ea:	204b      	movs	r0, #75	@ 0x4b
 80006ec:	f001 ff48 	bl	8002580 <STMPE811_Write>

	// Re-enable IRQs
    WriteDataToTouchModule(STMPE811_INT_EN, currentIRQEnables);
 80006f0:	79bb      	ldrb	r3, [r7, #6]
 80006f2:	4619      	mov	r1, r3
 80006f4:	200a      	movs	r0, #10
 80006f6:	f000 fcbb 	bl	8001070 <WriteDataToTouchModule>
	HAL_EXTI_ClearPending(&LCDTouchIRQ, EXTI_TRIGGER_RISING_FALLING);
 80006fa:	2103      	movs	r1, #3
 80006fc:	480e      	ldr	r0, [pc, #56]	@ (8000738 <EXTI15_10_IRQHandler+0x110>)
 80006fe:	f002 fcab 	bl	8003058 <HAL_EXTI_ClearPending>

	HAL_NVIC_ClearPendingIRQ(EXTI15_10_IRQn);
 8000702:	2028      	movs	r0, #40	@ 0x28
 8000704:	f002 fc99 	bl	800303a <HAL_NVIC_ClearPendingIRQ>
	HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000708:	2028      	movs	r0, #40	@ 0x28
 800070a:	f002 fc6e 	bl	8002fea <HAL_NVIC_EnableIRQ>

	//Potential ERRATA? Clearing IRQ bit again due to an IRQ being triggered DURING the handling of this IRQ..
	WriteDataToTouchModule(STMPE811_INT_STA, clearIRQData);
 800070e:	797b      	ldrb	r3, [r7, #5]
 8000710:	4619      	mov	r1, r3
 8000712:	200b      	movs	r0, #11
 8000714:	f000 fcac 	bl	8001070 <WriteDataToTouchModule>

}
 8000718:	bf00      	nop
 800071a:	3708      	adds	r7, #8
 800071c:	46bd      	mov	sp, r7
 800071e:	bd80      	pop	{r7, pc}
 8000720:	200000a8 	.word	0x200000a8
 8000724:	200000a4 	.word	0x200000a4
 8000728:	0800719c 	.word	0x0800719c
 800072c:	20000094 	.word	0x20000094
 8000730:	080071a8 	.word	0x080071a8
 8000734:	080071bc 	.word	0x080071bc
 8000738:	2000009c 	.word	0x2000009c

0800073c <LCD_GPIO_Init>:
//Someone from STM said it was "often accessed" a 1-dim array, and not a 2d array. However you still access it like a 2dim array,  using fb[y*W+x] instead of fb[y][x].
uint16_t frameBuffer[LCD_PIXEL_WIDTH*LCD_PIXEL_HEIGHT] = {0};			//16bpp pixel format.


void LCD_GPIO_Init(void)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	b08c      	sub	sp, #48	@ 0x30
 8000740:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;

  /* Enable the LTDC clock */
  __HAL_RCC_LTDC_CLK_ENABLE();
 8000742:	2300      	movs	r3, #0
 8000744:	61bb      	str	r3, [r7, #24]
 8000746:	4b5a      	ldr	r3, [pc, #360]	@ (80008b0 <LCD_GPIO_Init+0x174>)
 8000748:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800074a:	4a59      	ldr	r2, [pc, #356]	@ (80008b0 <LCD_GPIO_Init+0x174>)
 800074c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8000750:	6453      	str	r3, [r2, #68]	@ 0x44
 8000752:	4b57      	ldr	r3, [pc, #348]	@ (80008b0 <LCD_GPIO_Init+0x174>)
 8000754:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000756:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800075a:	61bb      	str	r3, [r7, #24]
 800075c:	69bb      	ldr	r3, [r7, #24]

  /* Enable GPIO clock */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800075e:	2300      	movs	r3, #0
 8000760:	617b      	str	r3, [r7, #20]
 8000762:	4b53      	ldr	r3, [pc, #332]	@ (80008b0 <LCD_GPIO_Init+0x174>)
 8000764:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000766:	4a52      	ldr	r2, [pc, #328]	@ (80008b0 <LCD_GPIO_Init+0x174>)
 8000768:	f043 0301 	orr.w	r3, r3, #1
 800076c:	6313      	str	r3, [r2, #48]	@ 0x30
 800076e:	4b50      	ldr	r3, [pc, #320]	@ (80008b0 <LCD_GPIO_Init+0x174>)
 8000770:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000772:	f003 0301 	and.w	r3, r3, #1
 8000776:	617b      	str	r3, [r7, #20]
 8000778:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800077a:	2300      	movs	r3, #0
 800077c:	613b      	str	r3, [r7, #16]
 800077e:	4b4c      	ldr	r3, [pc, #304]	@ (80008b0 <LCD_GPIO_Init+0x174>)
 8000780:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000782:	4a4b      	ldr	r2, [pc, #300]	@ (80008b0 <LCD_GPIO_Init+0x174>)
 8000784:	f043 0302 	orr.w	r3, r3, #2
 8000788:	6313      	str	r3, [r2, #48]	@ 0x30
 800078a:	4b49      	ldr	r3, [pc, #292]	@ (80008b0 <LCD_GPIO_Init+0x174>)
 800078c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800078e:	f003 0302 	and.w	r3, r3, #2
 8000792:	613b      	str	r3, [r7, #16]
 8000794:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000796:	2300      	movs	r3, #0
 8000798:	60fb      	str	r3, [r7, #12]
 800079a:	4b45      	ldr	r3, [pc, #276]	@ (80008b0 <LCD_GPIO_Init+0x174>)
 800079c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800079e:	4a44      	ldr	r2, [pc, #272]	@ (80008b0 <LCD_GPIO_Init+0x174>)
 80007a0:	f043 0304 	orr.w	r3, r3, #4
 80007a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80007a6:	4b42      	ldr	r3, [pc, #264]	@ (80008b0 <LCD_GPIO_Init+0x174>)
 80007a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007aa:	f003 0304 	and.w	r3, r3, #4
 80007ae:	60fb      	str	r3, [r7, #12]
 80007b0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80007b2:	2300      	movs	r3, #0
 80007b4:	60bb      	str	r3, [r7, #8]
 80007b6:	4b3e      	ldr	r3, [pc, #248]	@ (80008b0 <LCD_GPIO_Init+0x174>)
 80007b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007ba:	4a3d      	ldr	r2, [pc, #244]	@ (80008b0 <LCD_GPIO_Init+0x174>)
 80007bc:	f043 0308 	orr.w	r3, r3, #8
 80007c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80007c2:	4b3b      	ldr	r3, [pc, #236]	@ (80008b0 <LCD_GPIO_Init+0x174>)
 80007c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007c6:	f003 0308 	and.w	r3, r3, #8
 80007ca:	60bb      	str	r3, [r7, #8]
 80007cc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80007ce:	2300      	movs	r3, #0
 80007d0:	607b      	str	r3, [r7, #4]
 80007d2:	4b37      	ldr	r3, [pc, #220]	@ (80008b0 <LCD_GPIO_Init+0x174>)
 80007d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007d6:	4a36      	ldr	r2, [pc, #216]	@ (80008b0 <LCD_GPIO_Init+0x174>)
 80007d8:	f043 0320 	orr.w	r3, r3, #32
 80007dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80007de:	4b34      	ldr	r3, [pc, #208]	@ (80008b0 <LCD_GPIO_Init+0x174>)
 80007e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007e2:	f003 0320 	and.w	r3, r3, #32
 80007e6:	607b      	str	r3, [r7, #4]
 80007e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80007ea:	2300      	movs	r3, #0
 80007ec:	603b      	str	r3, [r7, #0]
 80007ee:	4b30      	ldr	r3, [pc, #192]	@ (80008b0 <LCD_GPIO_Init+0x174>)
 80007f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007f2:	4a2f      	ldr	r2, [pc, #188]	@ (80008b0 <LCD_GPIO_Init+0x174>)
 80007f4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80007f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80007fa:	4b2d      	ldr	r3, [pc, #180]	@ (80008b0 <LCD_GPIO_Init+0x174>)
 80007fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007fe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000802:	603b      	str	r3, [r7, #0]
 8000804:	683b      	ldr	r3, [r7, #0]
   LCD_TFT CLK   <-> PG.07
   LCD_TFT DE   <->  PF.10
  */

  /* GPIOA configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_6 |
 8000806:	f641 0358 	movw	r3, #6232	@ 0x1858
 800080a:	61fb      	str	r3, [r7, #28]
                           GPIO_PIN_11 | GPIO_PIN_12;
  GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 800080c:	2302      	movs	r3, #2
 800080e:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 8000810:	2300      	movs	r3, #0
 8000812:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 8000814:	2302      	movs	r3, #2
 8000816:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStructure.Alternate= GPIO_AF14_LTDC;
 8000818:	230e      	movs	r3, #14
 800081a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 800081c:	f107 031c 	add.w	r3, r7, #28
 8000820:	4619      	mov	r1, r3
 8000822:	4824      	ldr	r0, [pc, #144]	@ (80008b4 <LCD_GPIO_Init+0x178>)
 8000824:	f002 fc30 	bl	8003088 <HAL_GPIO_Init>

 /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_8 | \
 8000828:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 800082c:	61fb      	str	r3, [r7, #28]
                           GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 800082e:	f107 031c 	add.w	r3, r7, #28
 8000832:	4619      	mov	r1, r3
 8000834:	4820      	ldr	r0, [pc, #128]	@ (80008b8 <LCD_GPIO_Init+0x17c>)
 8000836:	f002 fc27 	bl	8003088 <HAL_GPIO_Init>

 /* GPIOC configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_10;
 800083a:	f44f 6398 	mov.w	r3, #1216	@ 0x4c0
 800083e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);
 8000840:	f107 031c 	add.w	r3, r7, #28
 8000844:	4619      	mov	r1, r3
 8000846:	481d      	ldr	r0, [pc, #116]	@ (80008bc <LCD_GPIO_Init+0x180>)
 8000848:	f002 fc1e 	bl	8003088 <HAL_GPIO_Init>

 /* GPIOD configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_6;
 800084c:	2348      	movs	r3, #72	@ 0x48
 800084e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 8000850:	f107 031c 	add.w	r3, r7, #28
 8000854:	4619      	mov	r1, r3
 8000856:	481a      	ldr	r0, [pc, #104]	@ (80008c0 <LCD_GPIO_Init+0x184>)
 8000858:	f002 fc16 	bl	8003088 <HAL_GPIO_Init>

 /* GPIOF configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_10;
 800085c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000860:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);
 8000862:	f107 031c 	add.w	r3, r7, #28
 8000866:	4619      	mov	r1, r3
 8000868:	4816      	ldr	r0, [pc, #88]	@ (80008c4 <LCD_GPIO_Init+0x188>)
 800086a:	f002 fc0d 	bl	8003088 <HAL_GPIO_Init>

 /* GPIOG configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | \
 800086e:	f44f 630c 	mov.w	r3, #2240	@ 0x8c0
 8000872:	61fb      	str	r3, [r7, #28]
                           GPIO_PIN_11;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8000874:	f107 031c 	add.w	r3, r7, #28
 8000878:	4619      	mov	r1, r3
 800087a:	4813      	ldr	r0, [pc, #76]	@ (80008c8 <LCD_GPIO_Init+0x18c>)
 800087c:	f002 fc04 	bl	8003088 <HAL_GPIO_Init>

  /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1;
 8000880:	2303      	movs	r3, #3
 8000882:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Alternate= GPIO_AF9_LTDC;
 8000884:	2309      	movs	r3, #9
 8000886:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 8000888:	f107 031c 	add.w	r3, r7, #28
 800088c:	4619      	mov	r1, r3
 800088e:	480a      	ldr	r0, [pc, #40]	@ (80008b8 <LCD_GPIO_Init+0x17c>)
 8000890:	f002 fbfa 	bl	8003088 <HAL_GPIO_Init>

  /* GPIOG configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_10 | GPIO_PIN_12;
 8000894:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000898:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 800089a:	f107 031c 	add.w	r3, r7, #28
 800089e:	4619      	mov	r1, r3
 80008a0:	4809      	ldr	r0, [pc, #36]	@ (80008c8 <LCD_GPIO_Init+0x18c>)
 80008a2:	f002 fbf1 	bl	8003088 <HAL_GPIO_Init>
}
 80008a6:	bf00      	nop
 80008a8:	3730      	adds	r7, #48	@ 0x30
 80008aa:	46bd      	mov	sp, r7
 80008ac:	bd80      	pop	{r7, pc}
 80008ae:	bf00      	nop
 80008b0:	40023800 	.word	0x40023800
 80008b4:	40020000 	.word	0x40020000
 80008b8:	40020400 	.word	0x40020400
 80008bc:	40020800 	.word	0x40020800
 80008c0:	40020c00 	.word	0x40020c00
 80008c4:	40021400 	.word	0x40021400
 80008c8:	40021800 	.word	0x40021800

080008cc <LTCD_Layer_Init>:

void LTCD_Layer_Init(uint8_t LayerIndex)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	b090      	sub	sp, #64	@ 0x40
 80008d0:	af00      	add	r7, sp, #0
 80008d2:	4603      	mov	r3, r0
 80008d4:	71fb      	strb	r3, [r7, #7]
	LTDC_LayerCfgTypeDef  pLayerCfg;

	pLayerCfg.WindowX0 = 0;	//Configures the Window HORZ START Position.
 80008d6:	2300      	movs	r3, #0
 80008d8:	60fb      	str	r3, [r7, #12]
	pLayerCfg.WindowX1 = LCD_PIXEL_WIDTH;	//Configures the Window HORZ Stop Position.
 80008da:	23f0      	movs	r3, #240	@ 0xf0
 80008dc:	613b      	str	r3, [r7, #16]
	pLayerCfg.WindowY0 = 0;	//Configures the Window vertical START Position.
 80008de:	2300      	movs	r3, #0
 80008e0:	617b      	str	r3, [r7, #20]
	pLayerCfg.WindowY1 = LCD_PIXEL_HEIGHT;	//Configures the Window vertical Stop Position.
 80008e2:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 80008e6:	61bb      	str	r3, [r7, #24]
	pLayerCfg.PixelFormat = LCD_PIXEL_FORMAT_1;  //INCORRECT PIXEL FORMAT WILL GIVE WEIRD RESULTS!! IT MAY STILL WORK FOR 1/2 THE DISPLAY!!! //This is our buffers pixel format. 2 bytes for each pixel
 80008e8:	2302      	movs	r3, #2
 80008ea:	61fb      	str	r3, [r7, #28]
	pLayerCfg.Alpha = 255;
 80008ec:	23ff      	movs	r3, #255	@ 0xff
 80008ee:	623b      	str	r3, [r7, #32]
	pLayerCfg.Alpha0 = 0;
 80008f0:	2300      	movs	r3, #0
 80008f2:	627b      	str	r3, [r7, #36]	@ 0x24
	pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 80008f4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80008f8:	62bb      	str	r3, [r7, #40]	@ 0x28
	pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 80008fa:	2305      	movs	r3, #5
 80008fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
	if (LayerIndex == 0){
 80008fe:	79fb      	ldrb	r3, [r7, #7]
 8000900:	2b00      	cmp	r3, #0
 8000902:	d101      	bne.n	8000908 <LTCD_Layer_Init+0x3c>
		pLayerCfg.FBStartAdress = (uintptr_t)frameBuffer;
 8000904:	4b0f      	ldr	r3, [pc, #60]	@ (8000944 <LTCD_Layer_Init+0x78>)
 8000906:	633b      	str	r3, [r7, #48]	@ 0x30
	}
	pLayerCfg.ImageWidth = LCD_PIXEL_WIDTH;
 8000908:	23f0      	movs	r3, #240	@ 0xf0
 800090a:	637b      	str	r3, [r7, #52]	@ 0x34
	pLayerCfg.ImageHeight = LCD_PIXEL_HEIGHT;
 800090c:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 8000910:	63bb      	str	r3, [r7, #56]	@ 0x38
	pLayerCfg.Backcolor.Blue = 0;
 8000912:	2300      	movs	r3, #0
 8000914:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
	pLayerCfg.Backcolor.Green = 0;
 8000918:	2300      	movs	r3, #0
 800091a:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
	pLayerCfg.Backcolor.Red = 0;
 800091e:	2300      	movs	r3, #0
 8000920:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
	if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, LayerIndex) != HAL_OK)
 8000924:	79fa      	ldrb	r2, [r7, #7]
 8000926:	f107 030c 	add.w	r3, r7, #12
 800092a:	4619      	mov	r1, r3
 800092c:	4806      	ldr	r0, [pc, #24]	@ (8000948 <LTCD_Layer_Init+0x7c>)
 800092e:	f003 ffed 	bl	800490c <HAL_LTDC_ConfigLayer>
 8000932:	4603      	mov	r3, r0
 8000934:	2b00      	cmp	r3, #0
 8000936:	d001      	beq.n	800093c <LTCD_Layer_Init+0x70>
	{
		LCD_Error_Handler();
 8000938:	f000 fb70 	bl	800101c <LCD_Error_Handler>
	}
}
 800093c:	bf00      	nop
 800093e:	3740      	adds	r7, #64	@ 0x40
 8000940:	46bd      	mov	sp, r7
 8000942:	bd80      	pop	{r7, pc}
 8000944:	20000188 	.word	0x20000188
 8000948:	200000ac 	.word	0x200000ac

0800094c <LTCD__Init>:
{
  LCD_Clear(0,LCD_COLOR_WHITE);
}

void LTCD__Init(void)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	af00      	add	r7, sp, #0
	hltdc.Instance = LTDC;
 8000950:	4b2a      	ldr	r3, [pc, #168]	@ (80009fc <LTCD__Init+0xb0>)
 8000952:	4a2b      	ldr	r2, [pc, #172]	@ (8000a00 <LTCD__Init+0xb4>)
 8000954:	601a      	str	r2, [r3, #0]
	/* Configure horizontal synchronization width */
	hltdc.Init.HorizontalSync = ILI9341_HSYNC;
 8000956:	4b29      	ldr	r3, [pc, #164]	@ (80009fc <LTCD__Init+0xb0>)
 8000958:	2209      	movs	r2, #9
 800095a:	615a      	str	r2, [r3, #20]
	/* Configure vertical synchronization height */
	hltdc.Init.VerticalSync = ILI9341_VSYNC;
 800095c:	4b27      	ldr	r3, [pc, #156]	@ (80009fc <LTCD__Init+0xb0>)
 800095e:	2201      	movs	r2, #1
 8000960:	619a      	str	r2, [r3, #24]
	/* Configure accumulated horizontal back porch */
	hltdc.Init.AccumulatedHBP = ILI9341_HBP;
 8000962:	4b26      	ldr	r3, [pc, #152]	@ (80009fc <LTCD__Init+0xb0>)
 8000964:	221d      	movs	r2, #29
 8000966:	61da      	str	r2, [r3, #28]
	/* Configure accumulated vertical back porch */
	hltdc.Init.AccumulatedVBP = ILI9341_VBP;
 8000968:	4b24      	ldr	r3, [pc, #144]	@ (80009fc <LTCD__Init+0xb0>)
 800096a:	2203      	movs	r2, #3
 800096c:	621a      	str	r2, [r3, #32]
	/* Configure accumulated active width */
	hltdc.Init.AccumulatedActiveW = 269;
 800096e:	4b23      	ldr	r3, [pc, #140]	@ (80009fc <LTCD__Init+0xb0>)
 8000970:	f240 120d 	movw	r2, #269	@ 0x10d
 8000974:	625a      	str	r2, [r3, #36]	@ 0x24
	/* Configure accumulated active height */
	hltdc.Init.AccumulatedActiveH = 323;
 8000976:	4b21      	ldr	r3, [pc, #132]	@ (80009fc <LTCD__Init+0xb0>)
 8000978:	f240 1243 	movw	r2, #323	@ 0x143
 800097c:	629a      	str	r2, [r3, #40]	@ 0x28
	/* Configure total width */
	hltdc.Init.TotalWidth = 279;
 800097e:	4b1f      	ldr	r3, [pc, #124]	@ (80009fc <LTCD__Init+0xb0>)
 8000980:	f240 1217 	movw	r2, #279	@ 0x117
 8000984:	62da      	str	r2, [r3, #44]	@ 0x2c
	/* Configure total height */
	hltdc.Init.TotalHeigh = 327;
 8000986:	4b1d      	ldr	r3, [pc, #116]	@ (80009fc <LTCD__Init+0xb0>)
 8000988:	f240 1247 	movw	r2, #327	@ 0x147
 800098c:	631a      	str	r2, [r3, #48]	@ 0x30
	/* Configure R,G,B component values for LCD background color */
	hltdc.Init.Backcolor.Red = 0;
 800098e:	4b1b      	ldr	r3, [pc, #108]	@ (80009fc <LTCD__Init+0xb0>)
 8000990:	2200      	movs	r2, #0
 8000992:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
	hltdc.Init.Backcolor.Blue = 0;
 8000996:	4b19      	ldr	r3, [pc, #100]	@ (80009fc <LTCD__Init+0xb0>)
 8000998:	2200      	movs	r2, #0
 800099a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	hltdc.Init.Backcolor.Green = 0;
 800099e:	4b17      	ldr	r3, [pc, #92]	@ (80009fc <LTCD__Init+0xb0>)
 80009a0:	2200      	movs	r2, #0
 80009a2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
	/* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
	/* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 192 Mhz */
	/* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/4 = 48 Mhz */
	/* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_8 = 48/4 = 6Mhz */

	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 80009a6:	4b17      	ldr	r3, [pc, #92]	@ (8000a04 <LTCD__Init+0xb8>)
 80009a8:	2208      	movs	r2, #8
 80009aa:	601a      	str	r2, [r3, #0]
	PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 80009ac:	4b15      	ldr	r3, [pc, #84]	@ (8000a04 <LTCD__Init+0xb8>)
 80009ae:	22c0      	movs	r2, #192	@ 0xc0
 80009b0:	611a      	str	r2, [r3, #16]
	PeriphClkInitStruct.PLLSAI.PLLSAIR = 4;
 80009b2:	4b14      	ldr	r3, [pc, #80]	@ (8000a04 <LTCD__Init+0xb8>)
 80009b4:	2204      	movs	r2, #4
 80009b6:	619a      	str	r2, [r3, #24]
	PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 80009b8:	4b12      	ldr	r3, [pc, #72]	@ (8000a04 <LTCD__Init+0xb8>)
 80009ba:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80009be:	625a      	str	r2, [r3, #36]	@ 0x24
	HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 80009c0:	4810      	ldr	r0, [pc, #64]	@ (8000a04 <LTCD__Init+0xb8>)
 80009c2:	f004 fdfd 	bl	80055c0 <HAL_RCCEx_PeriphCLKConfig>
	/* Polarity */
	hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 80009c6:	4b0d      	ldr	r3, [pc, #52]	@ (80009fc <LTCD__Init+0xb0>)
 80009c8:	2200      	movs	r2, #0
 80009ca:	605a      	str	r2, [r3, #4]
	hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 80009cc:	4b0b      	ldr	r3, [pc, #44]	@ (80009fc <LTCD__Init+0xb0>)
 80009ce:	2200      	movs	r2, #0
 80009d0:	609a      	str	r2, [r3, #8]
	hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 80009d2:	4b0a      	ldr	r3, [pc, #40]	@ (80009fc <LTCD__Init+0xb0>)
 80009d4:	2200      	movs	r2, #0
 80009d6:	60da      	str	r2, [r3, #12]
	hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 80009d8:	4b08      	ldr	r3, [pc, #32]	@ (80009fc <LTCD__Init+0xb0>)
 80009da:	2200      	movs	r2, #0
 80009dc:	611a      	str	r2, [r3, #16]

	LCD_GPIO_Init();
 80009de:	f7ff fead 	bl	800073c <LCD_GPIO_Init>

	if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 80009e2:	4806      	ldr	r0, [pc, #24]	@ (80009fc <LTCD__Init+0xb0>)
 80009e4:	f003 fec2 	bl	800476c <HAL_LTDC_Init>
 80009e8:	4603      	mov	r3, r0
 80009ea:	2b00      	cmp	r3, #0
 80009ec:	d001      	beq.n	80009f2 <LTCD__Init+0xa6>
	 {
	   LCD_Error_Handler();
 80009ee:	f000 fb15 	bl	800101c <LCD_Error_Handler>
	 }

	ili9341_Init();
 80009f2:	f000 fb4f 	bl	8001094 <ili9341_Init>
}
 80009f6:	bf00      	nop
 80009f8:	bd80      	pop	{r7, pc}
 80009fa:	bf00      	nop
 80009fc:	200000ac 	.word	0x200000ac
 8000a00:	40016800 	.word	0x40016800
 8000a04:	20000154 	.word	0x20000154

08000a08 <LCD_Draw_Pixel>:
 * This is really the only function needed.
 * All drawing consists of is manipulating the array.
 * Adding input sanitation should probably be done.
 */
void LCD_Draw_Pixel(uint16_t x, uint16_t y, uint16_t color)
{
 8000a08:	b480      	push	{r7}
 8000a0a:	b083      	sub	sp, #12
 8000a0c:	af00      	add	r7, sp, #0
 8000a0e:	4603      	mov	r3, r0
 8000a10:	80fb      	strh	r3, [r7, #6]
 8000a12:	460b      	mov	r3, r1
 8000a14:	80bb      	strh	r3, [r7, #4]
 8000a16:	4613      	mov	r3, r2
 8000a18:	807b      	strh	r3, [r7, #2]
	frameBuffer[y*LCD_PIXEL_WIDTH+x] = color;  //You cannot do x*y to set the pixel.
 8000a1a:	88ba      	ldrh	r2, [r7, #4]
 8000a1c:	4613      	mov	r3, r2
 8000a1e:	011b      	lsls	r3, r3, #4
 8000a20:	1a9b      	subs	r3, r3, r2
 8000a22:	011b      	lsls	r3, r3, #4
 8000a24:	461a      	mov	r2, r3
 8000a26:	88fb      	ldrh	r3, [r7, #6]
 8000a28:	4413      	add	r3, r2
 8000a2a:	4905      	ldr	r1, [pc, #20]	@ (8000a40 <LCD_Draw_Pixel+0x38>)
 8000a2c:	887a      	ldrh	r2, [r7, #2]
 8000a2e:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
}
 8000a32:	bf00      	nop
 8000a34:	370c      	adds	r7, #12
 8000a36:	46bd      	mov	sp, r7
 8000a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a3c:	4770      	bx	lr
 8000a3e:	bf00      	nop
 8000a40:	20000188 	.word	0x20000188

08000a44 <LCD_Draw_Circle_Fill>:
 * These functions are simple examples. Most computer graphics like OpenGl and stm's graphics library use a state machine. Where you first call some function like SetColor(color), SetPosition(x,y), then DrawSqure(size)
 * Instead all of these are explicit where color, size, and position are passed in.
 * There is tons of ways to handle drawing. I dont think it matters too much.
 */
void LCD_Draw_Circle_Fill(uint16_t Xpos, uint16_t Ypos, uint16_t radius, uint16_t color)
{
 8000a44:	b590      	push	{r4, r7, lr}
 8000a46:	b085      	sub	sp, #20
 8000a48:	af00      	add	r7, sp, #0
 8000a4a:	4604      	mov	r4, r0
 8000a4c:	4608      	mov	r0, r1
 8000a4e:	4611      	mov	r1, r2
 8000a50:	461a      	mov	r2, r3
 8000a52:	4623      	mov	r3, r4
 8000a54:	80fb      	strh	r3, [r7, #6]
 8000a56:	4603      	mov	r3, r0
 8000a58:	80bb      	strh	r3, [r7, #4]
 8000a5a:	460b      	mov	r3, r1
 8000a5c:	807b      	strh	r3, [r7, #2]
 8000a5e:	4613      	mov	r3, r2
 8000a60:	803b      	strh	r3, [r7, #0]
    for(int16_t y=-radius; y<=radius; y++)
 8000a62:	887b      	ldrh	r3, [r7, #2]
 8000a64:	425b      	negs	r3, r3
 8000a66:	b29b      	uxth	r3, r3
 8000a68:	81fb      	strh	r3, [r7, #14]
 8000a6a:	e034      	b.n	8000ad6 <LCD_Draw_Circle_Fill+0x92>
    {
        for(int16_t x=-radius; x<=radius; x++)
 8000a6c:	887b      	ldrh	r3, [r7, #2]
 8000a6e:	425b      	negs	r3, r3
 8000a70:	b29b      	uxth	r3, r3
 8000a72:	81bb      	strh	r3, [r7, #12]
 8000a74:	e024      	b.n	8000ac0 <LCD_Draw_Circle_Fill+0x7c>
        {
            if(x*x+y*y <= radius*radius)
 8000a76:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000a7a:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8000a7e:	fb03 f202 	mul.w	r2, r3, r2
 8000a82:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000a86:	f9b7 100e 	ldrsh.w	r1, [r7, #14]
 8000a8a:	fb01 f303 	mul.w	r3, r1, r3
 8000a8e:	441a      	add	r2, r3
 8000a90:	887b      	ldrh	r3, [r7, #2]
 8000a92:	8879      	ldrh	r1, [r7, #2]
 8000a94:	fb01 f303 	mul.w	r3, r1, r3
 8000a98:	429a      	cmp	r2, r3
 8000a9a:	dc0b      	bgt.n	8000ab4 <LCD_Draw_Circle_Fill+0x70>
            {
            	LCD_Draw_Pixel(x+Xpos, y+Ypos, color);
 8000a9c:	89ba      	ldrh	r2, [r7, #12]
 8000a9e:	88fb      	ldrh	r3, [r7, #6]
 8000aa0:	4413      	add	r3, r2
 8000aa2:	b298      	uxth	r0, r3
 8000aa4:	89fa      	ldrh	r2, [r7, #14]
 8000aa6:	88bb      	ldrh	r3, [r7, #4]
 8000aa8:	4413      	add	r3, r2
 8000aaa:	b29b      	uxth	r3, r3
 8000aac:	883a      	ldrh	r2, [r7, #0]
 8000aae:	4619      	mov	r1, r3
 8000ab0:	f7ff ffaa 	bl	8000a08 <LCD_Draw_Pixel>
        for(int16_t x=-radius; x<=radius; x++)
 8000ab4:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000ab8:	b29b      	uxth	r3, r3
 8000aba:	3301      	adds	r3, #1
 8000abc:	b29b      	uxth	r3, r3
 8000abe:	81bb      	strh	r3, [r7, #12]
 8000ac0:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8000ac4:	887b      	ldrh	r3, [r7, #2]
 8000ac6:	429a      	cmp	r2, r3
 8000ac8:	ddd5      	ble.n	8000a76 <LCD_Draw_Circle_Fill+0x32>
    for(int16_t y=-radius; y<=radius; y++)
 8000aca:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000ace:	b29b      	uxth	r3, r3
 8000ad0:	3301      	adds	r3, #1
 8000ad2:	b29b      	uxth	r3, r3
 8000ad4:	81fb      	strh	r3, [r7, #14]
 8000ad6:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8000ada:	887b      	ldrh	r3, [r7, #2]
 8000adc:	429a      	cmp	r2, r3
 8000ade:	ddc5      	ble.n	8000a6c <LCD_Draw_Circle_Fill+0x28>
            }
        }
    }
}
 8000ae0:	bf00      	nop
 8000ae2:	bf00      	nop
 8000ae4:	3714      	adds	r7, #20
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	bd90      	pop	{r4, r7, pc}

08000aea <LCD_Draw_LShape1_Fill>:
void LCD_Draw_LShape1_Fill(uint16_t Xpos, uint16_t Ypos, uint16_t color)
{
 8000aea:	b580      	push	{r7, lr}
 8000aec:	b086      	sub	sp, #24
 8000aee:	af00      	add	r7, sp, #0
 8000af0:	4603      	mov	r3, r0
 8000af2:	80fb      	strh	r3, [r7, #6]
 8000af4:	460b      	mov	r3, r1
 8000af6:	80bb      	strh	r3, [r7, #4]
 8000af8:	4613      	mov	r3, r2
 8000afa:	807b      	strh	r3, [r7, #2]
	uint16_t color2 = color;
 8000afc:	887b      	ldrh	r3, [r7, #2]
 8000afe:	82bb      	strh	r3, [r7, #20]
	uint16_t length = 15;
 8000b00:	230f      	movs	r3, #15
 8000b02:	827b      	strh	r3, [r7, #18]
	int16_t x = Xpos;
 8000b04:	88fb      	ldrh	r3, [r7, #6]
 8000b06:	82fb      	strh	r3, [r7, #22]
	uint16_t width = Xpos+45;
 8000b08:	88fb      	ldrh	r3, [r7, #6]
 8000b0a:	332d      	adds	r3, #45	@ 0x2d
 8000b0c:	823b      	strh	r3, [r7, #16]
	uint16_t y = Ypos;
 8000b0e:	88bb      	ldrh	r3, [r7, #4]
 8000b10:	81fb      	strh	r3, [r7, #14]
	//uint16_t finalx = -1;
    for(; x<(width+1); x++)
 8000b12:	e00b      	b.n	8000b2c <LCD_Draw_LShape1_Fill+0x42>
     {
    		LCD_Draw_Vertical_Line(x, y, length, color2);
 8000b14:	8af8      	ldrh	r0, [r7, #22]
 8000b16:	8abb      	ldrh	r3, [r7, #20]
 8000b18:	8a7a      	ldrh	r2, [r7, #18]
 8000b1a:	89f9      	ldrh	r1, [r7, #14]
 8000b1c:	f000 f984 	bl	8000e28 <LCD_Draw_Vertical_Line>
    for(; x<(width+1); x++)
 8000b20:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000b24:	b29b      	uxth	r3, r3
 8000b26:	3301      	adds	r3, #1
 8000b28:	b29b      	uxth	r3, r3
 8000b2a:	82fb      	strh	r3, [r7, #22]
 8000b2c:	8a3a      	ldrh	r2, [r7, #16]
 8000b2e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000b32:	429a      	cmp	r2, r3
 8000b34:	daee      	bge.n	8000b14 <LCD_Draw_LShape1_Fill+0x2a>
    		//finalx = x;
     }
    int16_t xS = width - 15;
 8000b36:	8a3b      	ldrh	r3, [r7, #16]
 8000b38:	3b0f      	subs	r3, #15
 8000b3a:	b29b      	uxth	r3, r3
 8000b3c:	81bb      	strh	r3, [r7, #12]
    LCD_Draw_Box_Fill(xS, y+15, color2);
 8000b3e:	89b8      	ldrh	r0, [r7, #12]
 8000b40:	89fb      	ldrh	r3, [r7, #14]
 8000b42:	330f      	adds	r3, #15
 8000b44:	b29b      	uxth	r3, r3
 8000b46:	8aba      	ldrh	r2, [r7, #20]
 8000b48:	4619      	mov	r1, r3
 8000b4a:	f000 f8ad 	bl	8000ca8 <LCD_Draw_Box_Fill>
}
 8000b4e:	bf00      	nop
 8000b50:	3718      	adds	r7, #24
 8000b52:	46bd      	mov	sp, r7
 8000b54:	bd80      	pop	{r7, pc}

08000b56 <LCD_Draw_LShape2_Fill>:
void LCD_Draw_LShape2_Fill(uint16_t Xpos, uint16_t Ypos, uint16_t color)
{
 8000b56:	b580      	push	{r7, lr}
 8000b58:	b086      	sub	sp, #24
 8000b5a:	af00      	add	r7, sp, #0
 8000b5c:	4603      	mov	r3, r0
 8000b5e:	80fb      	strh	r3, [r7, #6]
 8000b60:	460b      	mov	r3, r1
 8000b62:	80bb      	strh	r3, [r7, #4]
 8000b64:	4613      	mov	r3, r2
 8000b66:	807b      	strh	r3, [r7, #2]
	uint16_t color2 = color;
 8000b68:	887b      	ldrh	r3, [r7, #2]
 8000b6a:	82bb      	strh	r3, [r7, #20]
	uint16_t length = 15;
 8000b6c:	230f      	movs	r3, #15
 8000b6e:	827b      	strh	r3, [r7, #18]
	int16_t x = Xpos;
 8000b70:	88fb      	ldrh	r3, [r7, #6]
 8000b72:	82fb      	strh	r3, [r7, #22]
	uint16_t width = Xpos+45;
 8000b74:	88fb      	ldrh	r3, [r7, #6]
 8000b76:	332d      	adds	r3, #45	@ 0x2d
 8000b78:	823b      	strh	r3, [r7, #16]
	uint16_t y = Ypos;
 8000b7a:	88bb      	ldrh	r3, [r7, #4]
 8000b7c:	81fb      	strh	r3, [r7, #14]
	//uint16_t finalx = -1;
    for(; x<(width+1); x++)
 8000b7e:	e00b      	b.n	8000b98 <LCD_Draw_LShape2_Fill+0x42>
     {
    		LCD_Draw_Vertical_Line(x, y, length, color2);
 8000b80:	8af8      	ldrh	r0, [r7, #22]
 8000b82:	8abb      	ldrh	r3, [r7, #20]
 8000b84:	8a7a      	ldrh	r2, [r7, #18]
 8000b86:	89f9      	ldrh	r1, [r7, #14]
 8000b88:	f000 f94e 	bl	8000e28 <LCD_Draw_Vertical_Line>
    for(; x<(width+1); x++)
 8000b8c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000b90:	b29b      	uxth	r3, r3
 8000b92:	3301      	adds	r3, #1
 8000b94:	b29b      	uxth	r3, r3
 8000b96:	82fb      	strh	r3, [r7, #22]
 8000b98:	8a3a      	ldrh	r2, [r7, #16]
 8000b9a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000b9e:	429a      	cmp	r2, r3
 8000ba0:	daee      	bge.n	8000b80 <LCD_Draw_LShape2_Fill+0x2a>
    		//finalx = x;
     }
    int16_t xS = width - 15;
 8000ba2:	8a3b      	ldrh	r3, [r7, #16]
 8000ba4:	3b0f      	subs	r3, #15
 8000ba6:	b29b      	uxth	r3, r3
 8000ba8:	81bb      	strh	r3, [r7, #12]
    LCD_Draw_Box_Fill(xS, y-15, color2);
 8000baa:	89b8      	ldrh	r0, [r7, #12]
 8000bac:	89fb      	ldrh	r3, [r7, #14]
 8000bae:	3b0f      	subs	r3, #15
 8000bb0:	b29b      	uxth	r3, r3
 8000bb2:	8aba      	ldrh	r2, [r7, #20]
 8000bb4:	4619      	mov	r1, r3
 8000bb6:	f000 f877 	bl	8000ca8 <LCD_Draw_Box_Fill>
}
 8000bba:	bf00      	nop
 8000bbc:	3718      	adds	r7, #24
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	bd80      	pop	{r7, pc}

08000bc2 <LCD_Draw_Rectangle_Fill>:
void LCD_Draw_Rectangle_Fill(uint16_t Xpos, uint16_t Ypos, uint16_t color)
{
 8000bc2:	b580      	push	{r7, lr}
 8000bc4:	b086      	sub	sp, #24
 8000bc6:	af00      	add	r7, sp, #0
 8000bc8:	4603      	mov	r3, r0
 8000bca:	80fb      	strh	r3, [r7, #6]
 8000bcc:	460b      	mov	r3, r1
 8000bce:	80bb      	strh	r3, [r7, #4]
 8000bd0:	4613      	mov	r3, r2
 8000bd2:	807b      	strh	r3, [r7, #2]
	uint16_t color2 = color;
 8000bd4:	887b      	ldrh	r3, [r7, #2]
 8000bd6:	82bb      	strh	r3, [r7, #20]
	uint16_t length = 15;
 8000bd8:	230f      	movs	r3, #15
 8000bda:	827b      	strh	r3, [r7, #18]
	int16_t x = Xpos;
 8000bdc:	88fb      	ldrh	r3, [r7, #6]
 8000bde:	82fb      	strh	r3, [r7, #22]
	uint16_t width = x+45;
 8000be0:	8afb      	ldrh	r3, [r7, #22]
 8000be2:	332d      	adds	r3, #45	@ 0x2d
 8000be4:	823b      	strh	r3, [r7, #16]
	uint16_t y = Ypos;
 8000be6:	88bb      	ldrh	r3, [r7, #4]
 8000be8:	81fb      	strh	r3, [r7, #14]
    for(; x<(width+1); x++)
 8000bea:	e00b      	b.n	8000c04 <LCD_Draw_Rectangle_Fill+0x42>
    {
       LCD_Draw_Vertical_Line(x, y, length, color2);
 8000bec:	8af8      	ldrh	r0, [r7, #22]
 8000bee:	8abb      	ldrh	r3, [r7, #20]
 8000bf0:	8a7a      	ldrh	r2, [r7, #18]
 8000bf2:	89f9      	ldrh	r1, [r7, #14]
 8000bf4:	f000 f918 	bl	8000e28 <LCD_Draw_Vertical_Line>
    for(; x<(width+1); x++)
 8000bf8:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000bfc:	b29b      	uxth	r3, r3
 8000bfe:	3301      	adds	r3, #1
 8000c00:	b29b      	uxth	r3, r3
 8000c02:	82fb      	strh	r3, [r7, #22]
 8000c04:	8a3a      	ldrh	r2, [r7, #16]
 8000c06:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000c0a:	429a      	cmp	r2, r3
 8000c0c:	daee      	bge.n	8000bec <LCD_Draw_Rectangle_Fill+0x2a>
    }

}
 8000c0e:	bf00      	nop
 8000c10:	bf00      	nop
 8000c12:	3718      	adds	r7, #24
 8000c14:	46bd      	mov	sp, r7
 8000c16:	bd80      	pop	{r7, pc}

08000c18 <LCD_Draw_BBox_Fill>:
void LCD_Draw_BBox_Fill(uint16_t Xpos, uint16_t Ypos, uint16_t color)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b086      	sub	sp, #24
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	4603      	mov	r3, r0
 8000c20:	80fb      	strh	r3, [r7, #6]
 8000c22:	460b      	mov	r3, r1
 8000c24:	80bb      	strh	r3, [r7, #4]
 8000c26:	4613      	mov	r3, r2
 8000c28:	807b      	strh	r3, [r7, #2]
	uint16_t color2 = color;
 8000c2a:	887b      	ldrh	r3, [r7, #2]
 8000c2c:	82bb      	strh	r3, [r7, #20]
	uint16_t length = 30;
 8000c2e:	231e      	movs	r3, #30
 8000c30:	827b      	strh	r3, [r7, #18]
	int16_t x = Xpos;
 8000c32:	88fb      	ldrh	r3, [r7, #6]
 8000c34:	82fb      	strh	r3, [r7, #22]
	uint16_t width = x+30;
 8000c36:	8afb      	ldrh	r3, [r7, #22]
 8000c38:	331e      	adds	r3, #30
 8000c3a:	823b      	strh	r3, [r7, #16]
	uint16_t y = Ypos;
 8000c3c:	88bb      	ldrh	r3, [r7, #4]
 8000c3e:	81fb      	strh	r3, [r7, #14]
    for(; x<(width+1); x++)
 8000c40:	e00b      	b.n	8000c5a <LCD_Draw_BBox_Fill+0x42>
        {
    		LCD_Draw_Vertical_Line(x, y, length, color2);
 8000c42:	8af8      	ldrh	r0, [r7, #22]
 8000c44:	8abb      	ldrh	r3, [r7, #20]
 8000c46:	8a7a      	ldrh	r2, [r7, #18]
 8000c48:	89f9      	ldrh	r1, [r7, #14]
 8000c4a:	f000 f8ed 	bl	8000e28 <LCD_Draw_Vertical_Line>
    for(; x<(width+1); x++)
 8000c4e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000c52:	b29b      	uxth	r3, r3
 8000c54:	3301      	adds	r3, #1
 8000c56:	b29b      	uxth	r3, r3
 8000c58:	82fb      	strh	r3, [r7, #22]
 8000c5a:	8a3a      	ldrh	r2, [r7, #16]
 8000c5c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000c60:	429a      	cmp	r2, r3
 8000c62:	daee      	bge.n	8000c42 <LCD_Draw_BBox_Fill+0x2a>
        }
}
 8000c64:	bf00      	nop
 8000c66:	bf00      	nop
 8000c68:	3718      	adds	r7, #24
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	bd80      	pop	{r7, pc}

08000c6e <LCD_Draw_TBox_Fill>:
void LCD_Draw_TBox_Fill(uint16_t Xpos, uint16_t Ypos, uint16_t color){
 8000c6e:	b580      	push	{r7, lr}
 8000c70:	b082      	sub	sp, #8
 8000c72:	af00      	add	r7, sp, #0
 8000c74:	4603      	mov	r3, r0
 8000c76:	80fb      	strh	r3, [r7, #6]
 8000c78:	460b      	mov	r3, r1
 8000c7a:	80bb      	strh	r3, [r7, #4]
 8000c7c:	4613      	mov	r3, r2
 8000c7e:	807b      	strh	r3, [r7, #2]
	LCD_Draw_Rectangle_Fill( Xpos, Ypos, color);
 8000c80:	887a      	ldrh	r2, [r7, #2]
 8000c82:	88b9      	ldrh	r1, [r7, #4]
 8000c84:	88fb      	ldrh	r3, [r7, #6]
 8000c86:	4618      	mov	r0, r3
 8000c88:	f7ff ff9b 	bl	8000bc2 <LCD_Draw_Rectangle_Fill>
	LCD_Draw_Box_Fill(Xpos + 15, Ypos+15, color);
 8000c8c:	88fb      	ldrh	r3, [r7, #6]
 8000c8e:	330f      	adds	r3, #15
 8000c90:	b298      	uxth	r0, r3
 8000c92:	88bb      	ldrh	r3, [r7, #4]
 8000c94:	330f      	adds	r3, #15
 8000c96:	b29b      	uxth	r3, r3
 8000c98:	887a      	ldrh	r2, [r7, #2]
 8000c9a:	4619      	mov	r1, r3
 8000c9c:	f000 f804 	bl	8000ca8 <LCD_Draw_Box_Fill>
}
 8000ca0:	bf00      	nop
 8000ca2:	3708      	adds	r7, #8
 8000ca4:	46bd      	mov	sp, r7
 8000ca6:	bd80      	pop	{r7, pc}

08000ca8 <LCD_Draw_Box_Fill>:
void LCD_Draw_Box_Fill(uint16_t Xpos, uint16_t Ypos, uint16_t color)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b086      	sub	sp, #24
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	4603      	mov	r3, r0
 8000cb0:	80fb      	strh	r3, [r7, #6]
 8000cb2:	460b      	mov	r3, r1
 8000cb4:	80bb      	strh	r3, [r7, #4]
 8000cb6:	4613      	mov	r3, r2
 8000cb8:	807b      	strh	r3, [r7, #2]
	uint16_t color2 = color;
 8000cba:	887b      	ldrh	r3, [r7, #2]
 8000cbc:	82bb      	strh	r3, [r7, #20]
	uint16_t length = 15;
 8000cbe:	230f      	movs	r3, #15
 8000cc0:	827b      	strh	r3, [r7, #18]
	int16_t x = Xpos;
 8000cc2:	88fb      	ldrh	r3, [r7, #6]
 8000cc4:	82fb      	strh	r3, [r7, #22]
	uint16_t width = x+15;
 8000cc6:	8afb      	ldrh	r3, [r7, #22]
 8000cc8:	330f      	adds	r3, #15
 8000cca:	823b      	strh	r3, [r7, #16]
	uint16_t y = Ypos;
 8000ccc:	88bb      	ldrh	r3, [r7, #4]
 8000cce:	81fb      	strh	r3, [r7, #14]
    for(; x<(width+1); x++)
 8000cd0:	e00b      	b.n	8000cea <LCD_Draw_Box_Fill+0x42>
        {
    		LCD_Draw_Vertical_Line(x, y, length, color2);
 8000cd2:	8af8      	ldrh	r0, [r7, #22]
 8000cd4:	8abb      	ldrh	r3, [r7, #20]
 8000cd6:	8a7a      	ldrh	r2, [r7, #18]
 8000cd8:	89f9      	ldrh	r1, [r7, #14]
 8000cda:	f000 f8a5 	bl	8000e28 <LCD_Draw_Vertical_Line>
    for(; x<(width+1); x++)
 8000cde:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000ce2:	b29b      	uxth	r3, r3
 8000ce4:	3301      	adds	r3, #1
 8000ce6:	b29b      	uxth	r3, r3
 8000ce8:	82fb      	strh	r3, [r7, #22]
 8000cea:	8a3a      	ldrh	r2, [r7, #16]
 8000cec:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000cf0:	429a      	cmp	r2, r3
 8000cf2:	daee      	bge.n	8000cd2 <LCD_Draw_Box_Fill+0x2a>
        }
}
 8000cf4:	bf00      	nop
 8000cf6:	bf00      	nop
 8000cf8:	3718      	adds	r7, #24
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	bd80      	pop	{r7, pc}

08000cfe <LCD_Draw_ZShape_Fill>:
void LCD_Draw_ZShape_Fill(uint16_t Xpos, uint16_t Ypos, uint16_t color)
{
 8000cfe:	b580      	push	{r7, lr}
 8000d00:	b086      	sub	sp, #24
 8000d02:	af00      	add	r7, sp, #0
 8000d04:	4603      	mov	r3, r0
 8000d06:	80fb      	strh	r3, [r7, #6]
 8000d08:	460b      	mov	r3, r1
 8000d0a:	80bb      	strh	r3, [r7, #4]
 8000d0c:	4613      	mov	r3, r2
 8000d0e:	807b      	strh	r3, [r7, #2]
	uint16_t color2 = color;
 8000d10:	887b      	ldrh	r3, [r7, #2]
 8000d12:	82bb      	strh	r3, [r7, #20]
	uint16_t length = 15;
 8000d14:	230f      	movs	r3, #15
 8000d16:	827b      	strh	r3, [r7, #18]
	int16_t x = Xpos;
 8000d18:	88fb      	ldrh	r3, [r7, #6]
 8000d1a:	82fb      	strh	r3, [r7, #22]
	uint16_t width = x+30;
 8000d1c:	8afb      	ldrh	r3, [r7, #22]
 8000d1e:	331e      	adds	r3, #30
 8000d20:	823b      	strh	r3, [r7, #16]
	uint16_t y = Ypos;
 8000d22:	88bb      	ldrh	r3, [r7, #4]
 8000d24:	81fb      	strh	r3, [r7, #14]
	for(; x<(width+1); x++)
 8000d26:	e015      	b.n	8000d54 <LCD_Draw_ZShape_Fill+0x56>
	{
	    LCD_Draw_Vertical_Line(x, y, length, color2);
 8000d28:	8af8      	ldrh	r0, [r7, #22]
 8000d2a:	8abb      	ldrh	r3, [r7, #20]
 8000d2c:	8a7a      	ldrh	r2, [r7, #18]
 8000d2e:	89f9      	ldrh	r1, [r7, #14]
 8000d30:	f000 f87a 	bl	8000e28 <LCD_Draw_Vertical_Line>
	    LCD_Draw_Vertical_Line(x+15, y+15, length, color2);
 8000d34:	8afb      	ldrh	r3, [r7, #22]
 8000d36:	330f      	adds	r3, #15
 8000d38:	b298      	uxth	r0, r3
 8000d3a:	89fb      	ldrh	r3, [r7, #14]
 8000d3c:	330f      	adds	r3, #15
 8000d3e:	b299      	uxth	r1, r3
 8000d40:	8abb      	ldrh	r3, [r7, #20]
 8000d42:	8a7a      	ldrh	r2, [r7, #18]
 8000d44:	f000 f870 	bl	8000e28 <LCD_Draw_Vertical_Line>
	for(; x<(width+1); x++)
 8000d48:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000d4c:	b29b      	uxth	r3, r3
 8000d4e:	3301      	adds	r3, #1
 8000d50:	b29b      	uxth	r3, r3
 8000d52:	82fb      	strh	r3, [r7, #22]
 8000d54:	8a3a      	ldrh	r2, [r7, #16]
 8000d56:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000d5a:	429a      	cmp	r2, r3
 8000d5c:	dae4      	bge.n	8000d28 <LCD_Draw_ZShape_Fill+0x2a>
	}
}
 8000d5e:	bf00      	nop
 8000d60:	bf00      	nop
 8000d62:	3718      	adds	r7, #24
 8000d64:	46bd      	mov	sp, r7
 8000d66:	bd80      	pop	{r7, pc}

08000d68 <LCD_Draw_SShape_Fill>:
void LCD_Draw_SShape_Fill(uint16_t Xpos, uint16_t Ypos, uint16_t color)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	b086      	sub	sp, #24
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	4603      	mov	r3, r0
 8000d70:	80fb      	strh	r3, [r7, #6]
 8000d72:	460b      	mov	r3, r1
 8000d74:	80bb      	strh	r3, [r7, #4]
 8000d76:	4613      	mov	r3, r2
 8000d78:	807b      	strh	r3, [r7, #2]
	uint16_t color2 = color;
 8000d7a:	887b      	ldrh	r3, [r7, #2]
 8000d7c:	82bb      	strh	r3, [r7, #20]
	uint16_t length = 15;
 8000d7e:	230f      	movs	r3, #15
 8000d80:	827b      	strh	r3, [r7, #18]
	int16_t x = Xpos;
 8000d82:	88fb      	ldrh	r3, [r7, #6]
 8000d84:	82fb      	strh	r3, [r7, #22]
	uint16_t width = x+30;
 8000d86:	8afb      	ldrh	r3, [r7, #22]
 8000d88:	331e      	adds	r3, #30
 8000d8a:	823b      	strh	r3, [r7, #16]
	uint16_t y = Ypos;
 8000d8c:	88bb      	ldrh	r3, [r7, #4]
 8000d8e:	81fb      	strh	r3, [r7, #14]
	for(; x<(width+1); x++)
 8000d90:	e015      	b.n	8000dbe <LCD_Draw_SShape_Fill+0x56>
	{
	    LCD_Draw_Vertical_Line(x, y, length, color2);
 8000d92:	8af8      	ldrh	r0, [r7, #22]
 8000d94:	8abb      	ldrh	r3, [r7, #20]
 8000d96:	8a7a      	ldrh	r2, [r7, #18]
 8000d98:	89f9      	ldrh	r1, [r7, #14]
 8000d9a:	f000 f845 	bl	8000e28 <LCD_Draw_Vertical_Line>
	    LCD_Draw_Vertical_Line(x-15, y+15, length, color2);
 8000d9e:	8afb      	ldrh	r3, [r7, #22]
 8000da0:	3b0f      	subs	r3, #15
 8000da2:	b298      	uxth	r0, r3
 8000da4:	89fb      	ldrh	r3, [r7, #14]
 8000da6:	330f      	adds	r3, #15
 8000da8:	b299      	uxth	r1, r3
 8000daa:	8abb      	ldrh	r3, [r7, #20]
 8000dac:	8a7a      	ldrh	r2, [r7, #18]
 8000dae:	f000 f83b 	bl	8000e28 <LCD_Draw_Vertical_Line>
	for(; x<(width+1); x++)
 8000db2:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000db6:	b29b      	uxth	r3, r3
 8000db8:	3301      	adds	r3, #1
 8000dba:	b29b      	uxth	r3, r3
 8000dbc:	82fb      	strh	r3, [r7, #22]
 8000dbe:	8a3a      	ldrh	r2, [r7, #16]
 8000dc0:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000dc4:	429a      	cmp	r2, r3
 8000dc6:	dae4      	bge.n	8000d92 <LCD_Draw_SShape_Fill+0x2a>
	}
}
 8000dc8:	bf00      	nop
 8000dca:	bf00      	nop
 8000dcc:	3718      	adds	r7, #24
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	bd80      	pop	{r7, pc}

08000dd2 <LCD_Draw_Platform_Fill>:
void LCD_Draw_Platform_Fill(uint16_t Xpos, uint16_t Ypos, uint16_t color)
{
 8000dd2:	b580      	push	{r7, lr}
 8000dd4:	b086      	sub	sp, #24
 8000dd6:	af00      	add	r7, sp, #0
 8000dd8:	4603      	mov	r3, r0
 8000dda:	80fb      	strh	r3, [r7, #6]
 8000ddc:	460b      	mov	r3, r1
 8000dde:	80bb      	strh	r3, [r7, #4]
 8000de0:	4613      	mov	r3, r2
 8000de2:	807b      	strh	r3, [r7, #2]
	uint16_t color2 = color;
 8000de4:	887b      	ldrh	r3, [r7, #2]
 8000de6:	82bb      	strh	r3, [r7, #20]
		uint16_t length = 20;
 8000de8:	2314      	movs	r3, #20
 8000dea:	827b      	strh	r3, [r7, #18]
		int16_t x = Xpos;
 8000dec:	88fb      	ldrh	r3, [r7, #6]
 8000dee:	82fb      	strh	r3, [r7, #22]
		uint16_t width = x+240;
 8000df0:	8afb      	ldrh	r3, [r7, #22]
 8000df2:	33f0      	adds	r3, #240	@ 0xf0
 8000df4:	823b      	strh	r3, [r7, #16]
		uint16_t y = Ypos;
 8000df6:	88bb      	ldrh	r3, [r7, #4]
 8000df8:	81fb      	strh	r3, [r7, #14]
	    for(; x<(width+1); x++)
 8000dfa:	e00b      	b.n	8000e14 <LCD_Draw_Platform_Fill+0x42>
	    {
	       LCD_Draw_Vertical_Line(x, y, length, color2);
 8000dfc:	8af8      	ldrh	r0, [r7, #22]
 8000dfe:	8abb      	ldrh	r3, [r7, #20]
 8000e00:	8a7a      	ldrh	r2, [r7, #18]
 8000e02:	89f9      	ldrh	r1, [r7, #14]
 8000e04:	f000 f810 	bl	8000e28 <LCD_Draw_Vertical_Line>
	    for(; x<(width+1); x++)
 8000e08:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000e0c:	b29b      	uxth	r3, r3
 8000e0e:	3301      	adds	r3, #1
 8000e10:	b29b      	uxth	r3, r3
 8000e12:	82fb      	strh	r3, [r7, #22]
 8000e14:	8a3a      	ldrh	r2, [r7, #16]
 8000e16:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000e1a:	429a      	cmp	r2, r3
 8000e1c:	daee      	bge.n	8000dfc <LCD_Draw_Platform_Fill+0x2a>
	    }
}
 8000e1e:	bf00      	nop
 8000e20:	bf00      	nop
 8000e22:	3718      	adds	r7, #24
 8000e24:	46bd      	mov	sp, r7
 8000e26:	bd80      	pop	{r7, pc}

08000e28 <LCD_Draw_Vertical_Line>:
void LCD_Draw_Vertical_Line(uint16_t x, uint16_t y, uint16_t len, uint16_t color)
{
 8000e28:	b590      	push	{r4, r7, lr}
 8000e2a:	b085      	sub	sp, #20
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	4604      	mov	r4, r0
 8000e30:	4608      	mov	r0, r1
 8000e32:	4611      	mov	r1, r2
 8000e34:	461a      	mov	r2, r3
 8000e36:	4623      	mov	r3, r4
 8000e38:	80fb      	strh	r3, [r7, #6]
 8000e3a:	4603      	mov	r3, r0
 8000e3c:	80bb      	strh	r3, [r7, #4]
 8000e3e:	460b      	mov	r3, r1
 8000e40:	807b      	strh	r3, [r7, #2]
 8000e42:	4613      	mov	r3, r2
 8000e44:	803b      	strh	r3, [r7, #0]
  for (uint16_t i = 0; i < len; i++)
 8000e46:	2300      	movs	r3, #0
 8000e48:	81fb      	strh	r3, [r7, #14]
 8000e4a:	e00b      	b.n	8000e64 <LCD_Draw_Vertical_Line+0x3c>
  {
	  LCD_Draw_Pixel(x, i+y, color);
 8000e4c:	89fa      	ldrh	r2, [r7, #14]
 8000e4e:	88bb      	ldrh	r3, [r7, #4]
 8000e50:	4413      	add	r3, r2
 8000e52:	b299      	uxth	r1, r3
 8000e54:	883a      	ldrh	r2, [r7, #0]
 8000e56:	88fb      	ldrh	r3, [r7, #6]
 8000e58:	4618      	mov	r0, r3
 8000e5a:	f7ff fdd5 	bl	8000a08 <LCD_Draw_Pixel>
  for (uint16_t i = 0; i < len; i++)
 8000e5e:	89fb      	ldrh	r3, [r7, #14]
 8000e60:	3301      	adds	r3, #1
 8000e62:	81fb      	strh	r3, [r7, #14]
 8000e64:	89fa      	ldrh	r2, [r7, #14]
 8000e66:	887b      	ldrh	r3, [r7, #2]
 8000e68:	429a      	cmp	r2, r3
 8000e6a:	d3ef      	bcc.n	8000e4c <LCD_Draw_Vertical_Line+0x24>
  }
}
 8000e6c:	bf00      	nop
 8000e6e:	bf00      	nop
 8000e70:	3714      	adds	r7, #20
 8000e72:	46bd      	mov	sp, r7
 8000e74:	bd90      	pop	{r4, r7, pc}
	...

08000e78 <LCD_Clear>:

void LCD_Clear(uint8_t LayerIndex, uint16_t Color)
{
 8000e78:	b480      	push	{r7}
 8000e7a:	b085      	sub	sp, #20
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	4603      	mov	r3, r0
 8000e80:	460a      	mov	r2, r1
 8000e82:	71fb      	strb	r3, [r7, #7]
 8000e84:	4613      	mov	r3, r2
 8000e86:	80bb      	strh	r3, [r7, #4]
	if (LayerIndex == 0){
 8000e88:	79fb      	ldrb	r3, [r7, #7]
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d10e      	bne.n	8000eac <LCD_Clear+0x34>
		for (uint32_t i = 0; i < LCD_PIXEL_WIDTH * LCD_PIXEL_HEIGHT; i++){
 8000e8e:	2300      	movs	r3, #0
 8000e90:	60fb      	str	r3, [r7, #12]
 8000e92:	e007      	b.n	8000ea4 <LCD_Clear+0x2c>
			frameBuffer[i] = Color;
 8000e94:	4908      	ldr	r1, [pc, #32]	@ (8000eb8 <LCD_Clear+0x40>)
 8000e96:	68fb      	ldr	r3, [r7, #12]
 8000e98:	88ba      	ldrh	r2, [r7, #4]
 8000e9a:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		for (uint32_t i = 0; i < LCD_PIXEL_WIDTH * LCD_PIXEL_HEIGHT; i++){
 8000e9e:	68fb      	ldr	r3, [r7, #12]
 8000ea0:	3301      	adds	r3, #1
 8000ea2:	60fb      	str	r3, [r7, #12]
 8000ea4:	68fb      	ldr	r3, [r7, #12]
 8000ea6:	f5b3 3f96 	cmp.w	r3, #76800	@ 0x12c00
 8000eaa:	d3f3      	bcc.n	8000e94 <LCD_Clear+0x1c>
		}
	}
  // TODO: Add more Layers if needed
}
 8000eac:	bf00      	nop
 8000eae:	3714      	adds	r7, #20
 8000eb0:	46bd      	mov	sp, r7
 8000eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb6:	4770      	bx	lr
 8000eb8:	20000188 	.word	0x20000188

08000ebc <LCD_SetTextColor>:

//This was taken and adapted from stm32's mcu code
void LCD_SetTextColor(uint16_t Color)
{
 8000ebc:	b480      	push	{r7}
 8000ebe:	b083      	sub	sp, #12
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	80fb      	strh	r3, [r7, #6]
  CurrentTextColor = Color;
 8000ec6:	4a04      	ldr	r2, [pc, #16]	@ (8000ed8 <LCD_SetTextColor+0x1c>)
 8000ec8:	88fb      	ldrh	r3, [r7, #6]
 8000eca:	8013      	strh	r3, [r2, #0]
}
 8000ecc:	bf00      	nop
 8000ece:	370c      	adds	r7, #12
 8000ed0:	46bd      	mov	sp, r7
 8000ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed6:	4770      	bx	lr
 8000ed8:	20000000 	.word	0x20000000

08000edc <LCD_SetFont>:

//This was taken and adapted from stm32's mcu code
void LCD_SetFont(FONT_t *fonts)
{
 8000edc:	b480      	push	{r7}
 8000ede:	b083      	sub	sp, #12
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	6078      	str	r0, [r7, #4]
  LCD_Currentfonts = fonts;
 8000ee4:	4a04      	ldr	r2, [pc, #16]	@ (8000ef8 <LCD_SetFont+0x1c>)
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	6013      	str	r3, [r2, #0]
}
 8000eea:	bf00      	nop
 8000eec:	370c      	adds	r7, #12
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef4:	4770      	bx	lr
 8000ef6:	bf00      	nop
 8000ef8:	20000184 	.word	0x20000184

08000efc <LCD_Draw_Char>:

//This was taken and adapted from stm32's mcu code
void LCD_Draw_Char(uint16_t Xpos, uint16_t Ypos, const uint16_t *c)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b084      	sub	sp, #16
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	4603      	mov	r3, r0
 8000f04:	603a      	str	r2, [r7, #0]
 8000f06:	80fb      	strh	r3, [r7, #6]
 8000f08:	460b      	mov	r3, r1
 8000f0a:	80bb      	strh	r3, [r7, #4]
  uint32_t index = 0, counter = 0;
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	60fb      	str	r3, [r7, #12]
 8000f10:	2300      	movs	r3, #0
 8000f12:	60bb      	str	r3, [r7, #8]
  for(index = 0; index < LCD_Currentfonts->Height; index++)
 8000f14:	2300      	movs	r3, #0
 8000f16:	60fb      	str	r3, [r7, #12]
 8000f18:	e04c      	b.n	8000fb4 <LCD_Draw_Char+0xb8>
  {
    for(counter = 0; counter < LCD_Currentfonts->Width; counter++)
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	60bb      	str	r3, [r7, #8]
 8000f1e:	e03f      	b.n	8000fa0 <LCD_Draw_Char+0xa4>
    {
      if((((c[index] & ((0x80 << ((LCD_Currentfonts->Width / 12 ) * 8 ) ) >> counter)) == 0x00) && (LCD_Currentfonts->Width <= 12)) || (((c[index] & (0x1 << counter)) == 0x00)&&(LCD_Currentfonts->Width > 12 )))
 8000f20:	68fb      	ldr	r3, [r7, #12]
 8000f22:	005b      	lsls	r3, r3, #1
 8000f24:	683a      	ldr	r2, [r7, #0]
 8000f26:	4413      	add	r3, r2
 8000f28:	881b      	ldrh	r3, [r3, #0]
 8000f2a:	4619      	mov	r1, r3
 8000f2c:	4b27      	ldr	r3, [pc, #156]	@ (8000fcc <LCD_Draw_Char+0xd0>)
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	889b      	ldrh	r3, [r3, #4]
 8000f32:	4a27      	ldr	r2, [pc, #156]	@ (8000fd0 <LCD_Draw_Char+0xd4>)
 8000f34:	fba2 2303 	umull	r2, r3, r2, r3
 8000f38:	08db      	lsrs	r3, r3, #3
 8000f3a:	b29b      	uxth	r3, r3
 8000f3c:	00db      	lsls	r3, r3, #3
 8000f3e:	2280      	movs	r2, #128	@ 0x80
 8000f40:	409a      	lsls	r2, r3
 8000f42:	68bb      	ldr	r3, [r7, #8]
 8000f44:	fa42 f303 	asr.w	r3, r2, r3
 8000f48:	400b      	ands	r3, r1
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d104      	bne.n	8000f58 <LCD_Draw_Char+0x5c>
 8000f4e:	4b1f      	ldr	r3, [pc, #124]	@ (8000fcc <LCD_Draw_Char+0xd0>)
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	889b      	ldrh	r3, [r3, #4]
 8000f54:	2b0c      	cmp	r3, #12
 8000f56:	d920      	bls.n	8000f9a <LCD_Draw_Char+0x9e>
 8000f58:	68fb      	ldr	r3, [r7, #12]
 8000f5a:	005b      	lsls	r3, r3, #1
 8000f5c:	683a      	ldr	r2, [r7, #0]
 8000f5e:	4413      	add	r3, r2
 8000f60:	881b      	ldrh	r3, [r3, #0]
 8000f62:	461a      	mov	r2, r3
 8000f64:	68bb      	ldr	r3, [r7, #8]
 8000f66:	fa42 f303 	asr.w	r3, r2, r3
 8000f6a:	f003 0301 	and.w	r3, r3, #1
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d104      	bne.n	8000f7c <LCD_Draw_Char+0x80>
 8000f72:	4b16      	ldr	r3, [pc, #88]	@ (8000fcc <LCD_Draw_Char+0xd0>)
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	889b      	ldrh	r3, [r3, #4]
 8000f78:	2b0c      	cmp	r3, #12
 8000f7a:	d80e      	bhi.n	8000f9a <LCD_Draw_Char+0x9e>
      {
         //Background If want to overrite text under then add a set color here
      }
      else
      {
    	  LCD_Draw_Pixel(counter + Xpos,index + Ypos,CurrentTextColor);
 8000f7c:	68bb      	ldr	r3, [r7, #8]
 8000f7e:	b29a      	uxth	r2, r3
 8000f80:	88fb      	ldrh	r3, [r7, #6]
 8000f82:	4413      	add	r3, r2
 8000f84:	b298      	uxth	r0, r3
 8000f86:	68fb      	ldr	r3, [r7, #12]
 8000f88:	b29a      	uxth	r2, r3
 8000f8a:	88bb      	ldrh	r3, [r7, #4]
 8000f8c:	4413      	add	r3, r2
 8000f8e:	b29b      	uxth	r3, r3
 8000f90:	4a10      	ldr	r2, [pc, #64]	@ (8000fd4 <LCD_Draw_Char+0xd8>)
 8000f92:	8812      	ldrh	r2, [r2, #0]
 8000f94:	4619      	mov	r1, r3
 8000f96:	f7ff fd37 	bl	8000a08 <LCD_Draw_Pixel>
    for(counter = 0; counter < LCD_Currentfonts->Width; counter++)
 8000f9a:	68bb      	ldr	r3, [r7, #8]
 8000f9c:	3301      	adds	r3, #1
 8000f9e:	60bb      	str	r3, [r7, #8]
 8000fa0:	4b0a      	ldr	r3, [pc, #40]	@ (8000fcc <LCD_Draw_Char+0xd0>)
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	889b      	ldrh	r3, [r3, #4]
 8000fa6:	461a      	mov	r2, r3
 8000fa8:	68bb      	ldr	r3, [r7, #8]
 8000faa:	4293      	cmp	r3, r2
 8000fac:	d3b8      	bcc.n	8000f20 <LCD_Draw_Char+0x24>
  for(index = 0; index < LCD_Currentfonts->Height; index++)
 8000fae:	68fb      	ldr	r3, [r7, #12]
 8000fb0:	3301      	adds	r3, #1
 8000fb2:	60fb      	str	r3, [r7, #12]
 8000fb4:	4b05      	ldr	r3, [pc, #20]	@ (8000fcc <LCD_Draw_Char+0xd0>)
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	88db      	ldrh	r3, [r3, #6]
 8000fba:	461a      	mov	r2, r3
 8000fbc:	68fb      	ldr	r3, [r7, #12]
 8000fbe:	4293      	cmp	r3, r2
 8000fc0:	d3ab      	bcc.n	8000f1a <LCD_Draw_Char+0x1e>
      }
    }
  }
}
 8000fc2:	bf00      	nop
 8000fc4:	bf00      	nop
 8000fc6:	3710      	adds	r7, #16
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	bd80      	pop	{r7, pc}
 8000fcc:	20000184 	.word	0x20000184
 8000fd0:	aaaaaaab 	.word	0xaaaaaaab
 8000fd4:	20000000 	.word	0x20000000

08000fd8 <LCD_DisplayChar>:

//This was taken and adapted from stm32's mcu code
void LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b082      	sub	sp, #8
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	4603      	mov	r3, r0
 8000fe0:	80fb      	strh	r3, [r7, #6]
 8000fe2:	460b      	mov	r3, r1
 8000fe4:	80bb      	strh	r3, [r7, #4]
 8000fe6:	4613      	mov	r3, r2
 8000fe8:	70fb      	strb	r3, [r7, #3]
  Ascii -= 32;
 8000fea:	78fb      	ldrb	r3, [r7, #3]
 8000fec:	3b20      	subs	r3, #32
 8000fee:	70fb      	strb	r3, [r7, #3]
  LCD_Draw_Char(Xpos, Ypos, &LCD_Currentfonts->table[Ascii * LCD_Currentfonts->Height]);
 8000ff0:	4b09      	ldr	r3, [pc, #36]	@ (8001018 <LCD_DisplayChar+0x40>)
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	681a      	ldr	r2, [r3, #0]
 8000ff6:	78fb      	ldrb	r3, [r7, #3]
 8000ff8:	4907      	ldr	r1, [pc, #28]	@ (8001018 <LCD_DisplayChar+0x40>)
 8000ffa:	6809      	ldr	r1, [r1, #0]
 8000ffc:	88c9      	ldrh	r1, [r1, #6]
 8000ffe:	fb01 f303 	mul.w	r3, r1, r3
 8001002:	005b      	lsls	r3, r3, #1
 8001004:	441a      	add	r2, r3
 8001006:	88b9      	ldrh	r1, [r7, #4]
 8001008:	88fb      	ldrh	r3, [r7, #6]
 800100a:	4618      	mov	r0, r3
 800100c:	f7ff ff76 	bl	8000efc <LCD_Draw_Char>
}
 8001010:	bf00      	nop
 8001012:	3708      	adds	r7, #8
 8001014:	46bd      	mov	sp, r7
 8001016:	bd80      	pop	{r7, pc}
 8001018:	20000184 	.word	0x20000184

0800101c <LCD_Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void LCD_Error_Handler(void)
{
 800101c:	b480      	push	{r7}
 800101e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001020:	b672      	cpsid	i
}
 8001022:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001024:	bf00      	nop
 8001026:	e7fd      	b.n	8001024 <LCD_Error_Handler+0x8>

08001028 <InitializeLCDTouch>:
// Touch Functionality   //

#if COMPILE_TOUCH_FUNCTIONS == 1

void InitializeLCDTouch(void)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	af00      	add	r7, sp, #0
  if(STMPE811_Init() != STMPE811_State_Ok)
 800102c:	f001 f9d0 	bl	80023d0 <STMPE811_Init>
 8001030:	4603      	mov	r3, r0
 8001032:	2b02      	cmp	r3, #2
 8001034:	d001      	beq.n	800103a <InitializeLCDTouch+0x12>
  {
	 for(;;); // Hang code due to error in initialzation
 8001036:	bf00      	nop
 8001038:	e7fd      	b.n	8001036 <InitializeLCDTouch+0xe>
  }
}
 800103a:	bf00      	nop
 800103c:	bd80      	pop	{r7, pc}

0800103e <DetermineTouchPosition>:
{
	return STMPE811_ReadTouch(touchStruct);
}

void DetermineTouchPosition(STMPE811_TouchData * touchStruct)
{
 800103e:	b580      	push	{r7, lr}
 8001040:	b082      	sub	sp, #8
 8001042:	af00      	add	r7, sp, #0
 8001044:	6078      	str	r0, [r7, #4]
	STMPE811_DetermineTouchPosition(touchStruct);
 8001046:	6878      	ldr	r0, [r7, #4]
 8001048:	f001 faac 	bl	80025a4 <STMPE811_DetermineTouchPosition>
}
 800104c:	bf00      	nop
 800104e:	3708      	adds	r7, #8
 8001050:	46bd      	mov	sp, r7
 8001052:	bd80      	pop	{r7, pc}

08001054 <ReadRegisterFromTouchModule>:

uint8_t ReadRegisterFromTouchModule(uint8_t RegToRead)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	b082      	sub	sp, #8
 8001058:	af00      	add	r7, sp, #0
 800105a:	4603      	mov	r3, r0
 800105c:	71fb      	strb	r3, [r7, #7]
	return STMPE811_Read(RegToRead);
 800105e:	79fb      	ldrb	r3, [r7, #7]
 8001060:	4618      	mov	r0, r3
 8001062:	f001 fa7c 	bl	800255e <STMPE811_Read>
 8001066:	4603      	mov	r3, r0
}
 8001068:	4618      	mov	r0, r3
 800106a:	3708      	adds	r7, #8
 800106c:	46bd      	mov	sp, r7
 800106e:	bd80      	pop	{r7, pc}

08001070 <WriteDataToTouchModule>:

void WriteDataToTouchModule(uint8_t RegToWrite, uint8_t writeData)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b082      	sub	sp, #8
 8001074:	af00      	add	r7, sp, #0
 8001076:	4603      	mov	r3, r0
 8001078:	460a      	mov	r2, r1
 800107a:	71fb      	strb	r3, [r7, #7]
 800107c:	4613      	mov	r3, r2
 800107e:	71bb      	strb	r3, [r7, #6]
	STMPE811_Write(RegToWrite, writeData);
 8001080:	79ba      	ldrb	r2, [r7, #6]
 8001082:	79fb      	ldrb	r3, [r7, #7]
 8001084:	4611      	mov	r1, r2
 8001086:	4618      	mov	r0, r3
 8001088:	f001 fa7a 	bl	8002580 <STMPE811_Write>
}
 800108c:	bf00      	nop
 800108e:	3708      	adds	r7, #8
 8001090:	46bd      	mov	sp, r7
 8001092:	bd80      	pop	{r7, pc}

08001094 <ili9341_Init>:
  * @brief  Power on the LCD.
  * @param  None
  * @retval None
  */
void ili9341_Init(void)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	af00      	add	r7, sp, #0
  /* Initialize ILI9341 low level bus layer ----------------------------------*/
  LCD_IO_Init();
 8001098:	f000 f9fe 	bl	8001498 <LCD_IO_Init>

  /* Configure LCD */
  ili9341_Write_Reg(0xCA);
 800109c:	20ca      	movs	r0, #202	@ 0xca
 800109e:	f000 f943 	bl	8001328 <ili9341_Write_Reg>
  ili9341_Send_Data(0xC3);				//param 1
 80010a2:	20c3      	movs	r0, #195	@ 0xc3
 80010a4:	f000 f94d 	bl	8001342 <ili9341_Send_Data>
  ili9341_Send_Data(0x08);				//param 2
 80010a8:	2008      	movs	r0, #8
 80010aa:	f000 f94a 	bl	8001342 <ili9341_Send_Data>
  ili9341_Send_Data(0x50);				//param 3
 80010ae:	2050      	movs	r0, #80	@ 0x50
 80010b0:	f000 f947 	bl	8001342 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWERB); //CF
 80010b4:	20cf      	movs	r0, #207	@ 0xcf
 80010b6:	f000 f937 	bl	8001328 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);				//param 1
 80010ba:	2000      	movs	r0, #0
 80010bc:	f000 f941 	bl	8001342 <ili9341_Send_Data>
  ili9341_Send_Data(0xC1);				//param 2
 80010c0:	20c1      	movs	r0, #193	@ 0xc1
 80010c2:	f000 f93e 	bl	8001342 <ili9341_Send_Data>
  ili9341_Send_Data(0x30);				//param 3
 80010c6:	2030      	movs	r0, #48	@ 0x30
 80010c8:	f000 f93b 	bl	8001342 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWER_SEQ); //ED
 80010cc:	20ed      	movs	r0, #237	@ 0xed
 80010ce:	f000 f92b 	bl	8001328 <ili9341_Write_Reg>
  ili9341_Send_Data(0x64);
 80010d2:	2064      	movs	r0, #100	@ 0x64
 80010d4:	f000 f935 	bl	8001342 <ili9341_Send_Data>
  ili9341_Send_Data(0x03);
 80010d8:	2003      	movs	r0, #3
 80010da:	f000 f932 	bl	8001342 <ili9341_Send_Data>
  ili9341_Send_Data(0x12);
 80010de:	2012      	movs	r0, #18
 80010e0:	f000 f92f 	bl	8001342 <ili9341_Send_Data>
  ili9341_Send_Data(0x81);
 80010e4:	2081      	movs	r0, #129	@ 0x81
 80010e6:	f000 f92c 	bl	8001342 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DTCA);
 80010ea:	20e8      	movs	r0, #232	@ 0xe8
 80010ec:	f000 f91c 	bl	8001328 <ili9341_Write_Reg>
  ili9341_Send_Data(0x85);
 80010f0:	2085      	movs	r0, #133	@ 0x85
 80010f2:	f000 f926 	bl	8001342 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 80010f6:	2000      	movs	r0, #0
 80010f8:	f000 f923 	bl	8001342 <ili9341_Send_Data>
  ili9341_Send_Data(0x78);
 80010fc:	2078      	movs	r0, #120	@ 0x78
 80010fe:	f000 f920 	bl	8001342 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWERA);
 8001102:	20cb      	movs	r0, #203	@ 0xcb
 8001104:	f000 f910 	bl	8001328 <ili9341_Write_Reg>
  ili9341_Send_Data(0x39);
 8001108:	2039      	movs	r0, #57	@ 0x39
 800110a:	f000 f91a 	bl	8001342 <ili9341_Send_Data>
  ili9341_Send_Data(0x2C);
 800110e:	202c      	movs	r0, #44	@ 0x2c
 8001110:	f000 f917 	bl	8001342 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8001114:	2000      	movs	r0, #0
 8001116:	f000 f914 	bl	8001342 <ili9341_Send_Data>
  ili9341_Send_Data(0x34);
 800111a:	2034      	movs	r0, #52	@ 0x34
 800111c:	f000 f911 	bl	8001342 <ili9341_Send_Data>
  ili9341_Send_Data(0x02);
 8001120:	2002      	movs	r0, #2
 8001122:	f000 f90e 	bl	8001342 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_PRC);
 8001126:	20f7      	movs	r0, #247	@ 0xf7
 8001128:	f000 f8fe 	bl	8001328 <ili9341_Write_Reg>
  ili9341_Send_Data(0x20);
 800112c:	2020      	movs	r0, #32
 800112e:	f000 f908 	bl	8001342 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DTCB);
 8001132:	20ea      	movs	r0, #234	@ 0xea
 8001134:	f000 f8f8 	bl	8001328 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8001138:	2000      	movs	r0, #0
 800113a:	f000 f902 	bl	8001342 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 800113e:	2000      	movs	r0, #0
 8001140:	f000 f8ff 	bl	8001342 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_FRMCTR1);
 8001144:	20b1      	movs	r0, #177	@ 0xb1
 8001146:	f000 f8ef 	bl	8001328 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 800114a:	2000      	movs	r0, #0
 800114c:	f000 f8f9 	bl	8001342 <ili9341_Send_Data>
  ili9341_Send_Data(0x1B);
 8001150:	201b      	movs	r0, #27
 8001152:	f000 f8f6 	bl	8001342 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DFC);
 8001156:	20b6      	movs	r0, #182	@ 0xb6
 8001158:	f000 f8e6 	bl	8001328 <ili9341_Write_Reg>
  ili9341_Send_Data(0x0A);
 800115c:	200a      	movs	r0, #10
 800115e:	f000 f8f0 	bl	8001342 <ili9341_Send_Data>
  ili9341_Send_Data(0xA2);
 8001162:	20a2      	movs	r0, #162	@ 0xa2
 8001164:	f000 f8ed 	bl	8001342 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWER1);
 8001168:	20c0      	movs	r0, #192	@ 0xc0
 800116a:	f000 f8dd 	bl	8001328 <ili9341_Write_Reg>
  ili9341_Send_Data(0x10);
 800116e:	2010      	movs	r0, #16
 8001170:	f000 f8e7 	bl	8001342 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWER2);
 8001174:	20c1      	movs	r0, #193	@ 0xc1
 8001176:	f000 f8d7 	bl	8001328 <ili9341_Write_Reg>
  ili9341_Send_Data(0x10);
 800117a:	2010      	movs	r0, #16
 800117c:	f000 f8e1 	bl	8001342 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_VCOM1);
 8001180:	20c5      	movs	r0, #197	@ 0xc5
 8001182:	f000 f8d1 	bl	8001328 <ili9341_Write_Reg>
  ili9341_Send_Data(0x45);
 8001186:	2045      	movs	r0, #69	@ 0x45
 8001188:	f000 f8db 	bl	8001342 <ili9341_Send_Data>
  ili9341_Send_Data(0x15);
 800118c:	2015      	movs	r0, #21
 800118e:	f000 f8d8 	bl	8001342 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_VCOM2);
 8001192:	20c7      	movs	r0, #199	@ 0xc7
 8001194:	f000 f8c8 	bl	8001328 <ili9341_Write_Reg>
  ili9341_Send_Data(0x90);
 8001198:	2090      	movs	r0, #144	@ 0x90
 800119a:	f000 f8d2 	bl	8001342 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_MAC);
 800119e:	2036      	movs	r0, #54	@ 0x36
 80011a0:	f000 f8c2 	bl	8001328 <ili9341_Write_Reg>
  ili9341_Send_Data(0xC8);
 80011a4:	20c8      	movs	r0, #200	@ 0xc8
 80011a6:	f000 f8cc 	bl	8001342 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_3GAMMA_EN);
 80011aa:	20f2      	movs	r0, #242	@ 0xf2
 80011ac:	f000 f8bc 	bl	8001328 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 80011b0:	2000      	movs	r0, #0
 80011b2:	f000 f8c6 	bl	8001342 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_RGB_INTERFACE);
 80011b6:	20b0      	movs	r0, #176	@ 0xb0
 80011b8:	f000 f8b6 	bl	8001328 <ili9341_Write_Reg>
  ili9341_Send_Data(0xC2);
 80011bc:	20c2      	movs	r0, #194	@ 0xc2
 80011be:	f000 f8c0 	bl	8001342 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DFC);
 80011c2:	20b6      	movs	r0, #182	@ 0xb6
 80011c4:	f000 f8b0 	bl	8001328 <ili9341_Write_Reg>
  ili9341_Send_Data(0x0A);
 80011c8:	200a      	movs	r0, #10
 80011ca:	f000 f8ba 	bl	8001342 <ili9341_Send_Data>
  ili9341_Send_Data(0xA7);
 80011ce:	20a7      	movs	r0, #167	@ 0xa7
 80011d0:	f000 f8b7 	bl	8001342 <ili9341_Send_Data>
  ili9341_Send_Data(0x27);
 80011d4:	2027      	movs	r0, #39	@ 0x27
 80011d6:	f000 f8b4 	bl	8001342 <ili9341_Send_Data>
  ili9341_Send_Data(0x04);
 80011da:	2004      	movs	r0, #4
 80011dc:	f000 f8b1 	bl	8001342 <ili9341_Send_Data>

  /* Colomn address set */
  ili9341_Write_Reg(LCD_COLUMN_ADDR);
 80011e0:	202a      	movs	r0, #42	@ 0x2a
 80011e2:	f000 f8a1 	bl	8001328 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 80011e6:	2000      	movs	r0, #0
 80011e8:	f000 f8ab 	bl	8001342 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 80011ec:	2000      	movs	r0, #0
 80011ee:	f000 f8a8 	bl	8001342 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 80011f2:	2000      	movs	r0, #0
 80011f4:	f000 f8a5 	bl	8001342 <ili9341_Send_Data>
  ili9341_Send_Data(0xEF);
 80011f8:	20ef      	movs	r0, #239	@ 0xef
 80011fa:	f000 f8a2 	bl	8001342 <ili9341_Send_Data>

  /* Page address set */
  ili9341_Write_Reg(LCD_PAGE_ADDR);
 80011fe:	202b      	movs	r0, #43	@ 0x2b
 8001200:	f000 f892 	bl	8001328 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8001204:	2000      	movs	r0, #0
 8001206:	f000 f89c 	bl	8001342 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 800120a:	2000      	movs	r0, #0
 800120c:	f000 f899 	bl	8001342 <ili9341_Send_Data>
  ili9341_Send_Data(0x01);
 8001210:	2001      	movs	r0, #1
 8001212:	f000 f896 	bl	8001342 <ili9341_Send_Data>
  ili9341_Send_Data(0x3F);
 8001216:	203f      	movs	r0, #63	@ 0x3f
 8001218:	f000 f893 	bl	8001342 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_INTERFACE);
 800121c:	20f6      	movs	r0, #246	@ 0xf6
 800121e:	f000 f883 	bl	8001328 <ili9341_Write_Reg>
  ili9341_Send_Data(0x01);
 8001222:	2001      	movs	r0, #1
 8001224:	f000 f88d 	bl	8001342 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8001228:	2000      	movs	r0, #0
 800122a:	f000 f88a 	bl	8001342 <ili9341_Send_Data>
  ili9341_Send_Data(0x06);
 800122e:	2006      	movs	r0, #6
 8001230:	f000 f887 	bl	8001342 <ili9341_Send_Data>

  ili9341_Write_Reg(LCD_GRAM);
 8001234:	202c      	movs	r0, #44	@ 0x2c
 8001236:	f000 f877 	bl	8001328 <ili9341_Write_Reg>
  LCD_Delay(200);
 800123a:	20c8      	movs	r0, #200	@ 0xc8
 800123c:	f000 f9e8 	bl	8001610 <LCD_Delay>

  ili9341_Write_Reg(LCD_GAMMA);
 8001240:	2026      	movs	r0, #38	@ 0x26
 8001242:	f000 f871 	bl	8001328 <ili9341_Write_Reg>
  ili9341_Send_Data(0x01);
 8001246:	2001      	movs	r0, #1
 8001248:	f000 f87b 	bl	8001342 <ili9341_Send_Data>

  ili9341_Write_Reg(LCD_PGAMMA);
 800124c:	20e0      	movs	r0, #224	@ 0xe0
 800124e:	f000 f86b 	bl	8001328 <ili9341_Write_Reg>
  ili9341_Send_Data(0x0F);
 8001252:	200f      	movs	r0, #15
 8001254:	f000 f875 	bl	8001342 <ili9341_Send_Data>
  ili9341_Send_Data(0x29);
 8001258:	2029      	movs	r0, #41	@ 0x29
 800125a:	f000 f872 	bl	8001342 <ili9341_Send_Data>
  ili9341_Send_Data(0x24);
 800125e:	2024      	movs	r0, #36	@ 0x24
 8001260:	f000 f86f 	bl	8001342 <ili9341_Send_Data>
  ili9341_Send_Data(0x0C);
 8001264:	200c      	movs	r0, #12
 8001266:	f000 f86c 	bl	8001342 <ili9341_Send_Data>
  ili9341_Send_Data(0x0E);
 800126a:	200e      	movs	r0, #14
 800126c:	f000 f869 	bl	8001342 <ili9341_Send_Data>
  ili9341_Send_Data(0x09);
 8001270:	2009      	movs	r0, #9
 8001272:	f000 f866 	bl	8001342 <ili9341_Send_Data>
  ili9341_Send_Data(0x4E);
 8001276:	204e      	movs	r0, #78	@ 0x4e
 8001278:	f000 f863 	bl	8001342 <ili9341_Send_Data>
  ili9341_Send_Data(0x78);
 800127c:	2078      	movs	r0, #120	@ 0x78
 800127e:	f000 f860 	bl	8001342 <ili9341_Send_Data>
  ili9341_Send_Data(0x3C);
 8001282:	203c      	movs	r0, #60	@ 0x3c
 8001284:	f000 f85d 	bl	8001342 <ili9341_Send_Data>
  ili9341_Send_Data(0x09);
 8001288:	2009      	movs	r0, #9
 800128a:	f000 f85a 	bl	8001342 <ili9341_Send_Data>
  ili9341_Send_Data(0x13);
 800128e:	2013      	movs	r0, #19
 8001290:	f000 f857 	bl	8001342 <ili9341_Send_Data>
  ili9341_Send_Data(0x05);
 8001294:	2005      	movs	r0, #5
 8001296:	f000 f854 	bl	8001342 <ili9341_Send_Data>
  ili9341_Send_Data(0x17);
 800129a:	2017      	movs	r0, #23
 800129c:	f000 f851 	bl	8001342 <ili9341_Send_Data>
  ili9341_Send_Data(0x11);
 80012a0:	2011      	movs	r0, #17
 80012a2:	f000 f84e 	bl	8001342 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 80012a6:	2000      	movs	r0, #0
 80012a8:	f000 f84b 	bl	8001342 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_NGAMMA);
 80012ac:	20e1      	movs	r0, #225	@ 0xe1
 80012ae:	f000 f83b 	bl	8001328 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 80012b2:	2000      	movs	r0, #0
 80012b4:	f000 f845 	bl	8001342 <ili9341_Send_Data>
  ili9341_Send_Data(0x16);
 80012b8:	2016      	movs	r0, #22
 80012ba:	f000 f842 	bl	8001342 <ili9341_Send_Data>
  ili9341_Send_Data(0x1B);
 80012be:	201b      	movs	r0, #27
 80012c0:	f000 f83f 	bl	8001342 <ili9341_Send_Data>
  ili9341_Send_Data(0x04);
 80012c4:	2004      	movs	r0, #4
 80012c6:	f000 f83c 	bl	8001342 <ili9341_Send_Data>
  ili9341_Send_Data(0x11);
 80012ca:	2011      	movs	r0, #17
 80012cc:	f000 f839 	bl	8001342 <ili9341_Send_Data>
  ili9341_Send_Data(0x07);
 80012d0:	2007      	movs	r0, #7
 80012d2:	f000 f836 	bl	8001342 <ili9341_Send_Data>
  ili9341_Send_Data(0x31);
 80012d6:	2031      	movs	r0, #49	@ 0x31
 80012d8:	f000 f833 	bl	8001342 <ili9341_Send_Data>
  ili9341_Send_Data(0x33);
 80012dc:	2033      	movs	r0, #51	@ 0x33
 80012de:	f000 f830 	bl	8001342 <ili9341_Send_Data>
  ili9341_Send_Data(0x42);
 80012e2:	2042      	movs	r0, #66	@ 0x42
 80012e4:	f000 f82d 	bl	8001342 <ili9341_Send_Data>
  ili9341_Send_Data(0x05);
 80012e8:	2005      	movs	r0, #5
 80012ea:	f000 f82a 	bl	8001342 <ili9341_Send_Data>
  ili9341_Send_Data(0x0C);
 80012ee:	200c      	movs	r0, #12
 80012f0:	f000 f827 	bl	8001342 <ili9341_Send_Data>
  ili9341_Send_Data(0x0A);
 80012f4:	200a      	movs	r0, #10
 80012f6:	f000 f824 	bl	8001342 <ili9341_Send_Data>
  ili9341_Send_Data(0x28);
 80012fa:	2028      	movs	r0, #40	@ 0x28
 80012fc:	f000 f821 	bl	8001342 <ili9341_Send_Data>
  ili9341_Send_Data(0x2F);
 8001300:	202f      	movs	r0, #47	@ 0x2f
 8001302:	f000 f81e 	bl	8001342 <ili9341_Send_Data>
  ili9341_Send_Data(0x0F);
 8001306:	200f      	movs	r0, #15
 8001308:	f000 f81b 	bl	8001342 <ili9341_Send_Data>

  ili9341_Write_Reg(LCD_SLEEP_OUT);
 800130c:	2011      	movs	r0, #17
 800130e:	f000 f80b 	bl	8001328 <ili9341_Write_Reg>
  LCD_Delay(200);
 8001312:	20c8      	movs	r0, #200	@ 0xc8
 8001314:	f000 f97c 	bl	8001610 <LCD_Delay>
  ili9341_Write_Reg(LCD_DISPLAY_ON);
 8001318:	2029      	movs	r0, #41	@ 0x29
 800131a:	f000 f805 	bl	8001328 <ili9341_Write_Reg>
  /* GRAM start writing */
  ili9341_Write_Reg(LCD_GRAM);
 800131e:	202c      	movs	r0, #44	@ 0x2c
 8001320:	f000 f802 	bl	8001328 <ili9341_Write_Reg>
}
 8001324:	bf00      	nop
 8001326:	bd80      	pop	{r7, pc}

08001328 <ili9341_Write_Reg>:
  * @brief  Writes  to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_Write_Reg(uint8_t LCD_Reg)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	b082      	sub	sp, #8
 800132c:	af00      	add	r7, sp, #0
 800132e:	4603      	mov	r3, r0
 8001330:	71fb      	strb	r3, [r7, #7]
  LCD_IO_WriteReg(LCD_Reg);
 8001332:	79fb      	ldrb	r3, [r7, #7]
 8001334:	4618      	mov	r0, r3
 8001336:	f000 f949 	bl	80015cc <LCD_IO_WriteReg>
}
 800133a:	bf00      	nop
 800133c:	3708      	adds	r7, #8
 800133e:	46bd      	mov	sp, r7
 8001340:	bd80      	pop	{r7, pc}

08001342 <ili9341_Send_Data>:
  * @brief  Writes data to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_Send_Data(uint16_t RegValue)
{
 8001342:	b580      	push	{r7, lr}
 8001344:	b082      	sub	sp, #8
 8001346:	af00      	add	r7, sp, #0
 8001348:	4603      	mov	r3, r0
 800134a:	80fb      	strh	r3, [r7, #6]
  LCD_IO_WriteData(RegValue);
 800134c:	88fb      	ldrh	r3, [r7, #6]
 800134e:	4618      	mov	r0, r3
 8001350:	f000 f91a 	bl	8001588 <LCD_IO_WriteData>
}
 8001354:	bf00      	nop
 8001356:	3708      	adds	r7, #8
 8001358:	46bd      	mov	sp, r7
 800135a:	bd80      	pop	{r7, pc}

0800135c <SPI_Init>:

/**
  * @brief  SPI Bus initialization
  */
static void SPI_Init(void)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	af00      	add	r7, sp, #0
  if(HAL_SPI_GetState(&SpiHandle) == HAL_SPI_STATE_RESET)
 8001360:	4819      	ldr	r0, [pc, #100]	@ (80013c8 <SPI_Init+0x6c>)
 8001362:	f004 fd0c 	bl	8005d7e <HAL_SPI_GetState>
 8001366:	4603      	mov	r3, r0
 8001368:	2b00      	cmp	r3, #0
 800136a:	d12b      	bne.n	80013c4 <SPI_Init+0x68>
  {
    /* SPI configuration -----------------------------------------------------*/
    SpiHandle.Instance = DISCOVERY_SPI;
 800136c:	4b16      	ldr	r3, [pc, #88]	@ (80013c8 <SPI_Init+0x6c>)
 800136e:	4a17      	ldr	r2, [pc, #92]	@ (80013cc <SPI_Init+0x70>)
 8001370:	601a      	str	r2, [r3, #0]
       to verify these constraints:
       - ILI9341 LCD SPI interface max baudrate is 10MHz for write and 6.66MHz for read
       - l3gd20 SPI interface max baudrate is 10MHz for write/read
       - PCLK2 frequency is set to 90 MHz
    */
    SpiHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001372:	4b15      	ldr	r3, [pc, #84]	@ (80013c8 <SPI_Init+0x6c>)
 8001374:	2218      	movs	r2, #24
 8001376:	61da      	str	r2, [r3, #28]

    /* On STM32F429I-Discovery, LCD ID cannot be read then keep a common configuration */
    /* for LCD and GYRO (SPI_DIRECTION_2LINES) */
    /* Note: To read a register a LCD, SPI_DIRECTION_1LINE should be set */
    SpiHandle.Init.Direction      = SPI_DIRECTION_2LINES;
 8001378:	4b13      	ldr	r3, [pc, #76]	@ (80013c8 <SPI_Init+0x6c>)
 800137a:	2200      	movs	r2, #0
 800137c:	609a      	str	r2, [r3, #8]
    SpiHandle.Init.CLKPhase       = SPI_PHASE_1EDGE;
 800137e:	4b12      	ldr	r3, [pc, #72]	@ (80013c8 <SPI_Init+0x6c>)
 8001380:	2200      	movs	r2, #0
 8001382:	615a      	str	r2, [r3, #20]
    SpiHandle.Init.CLKPolarity    = SPI_POLARITY_LOW;
 8001384:	4b10      	ldr	r3, [pc, #64]	@ (80013c8 <SPI_Init+0x6c>)
 8001386:	2200      	movs	r2, #0
 8001388:	611a      	str	r2, [r3, #16]
    SpiHandle.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
 800138a:	4b0f      	ldr	r3, [pc, #60]	@ (80013c8 <SPI_Init+0x6c>)
 800138c:	2200      	movs	r2, #0
 800138e:	629a      	str	r2, [r3, #40]	@ 0x28
    SpiHandle.Init.CRCPolynomial  = 7;
 8001390:	4b0d      	ldr	r3, [pc, #52]	@ (80013c8 <SPI_Init+0x6c>)
 8001392:	2207      	movs	r2, #7
 8001394:	62da      	str	r2, [r3, #44]	@ 0x2c
    SpiHandle.Init.DataSize       = SPI_DATASIZE_8BIT;
 8001396:	4b0c      	ldr	r3, [pc, #48]	@ (80013c8 <SPI_Init+0x6c>)
 8001398:	2200      	movs	r2, #0
 800139a:	60da      	str	r2, [r3, #12]
    SpiHandle.Init.FirstBit       = SPI_FIRSTBIT_MSB;
 800139c:	4b0a      	ldr	r3, [pc, #40]	@ (80013c8 <SPI_Init+0x6c>)
 800139e:	2200      	movs	r2, #0
 80013a0:	621a      	str	r2, [r3, #32]
    SpiHandle.Init.NSS            = SPI_NSS_SOFT;
 80013a2:	4b09      	ldr	r3, [pc, #36]	@ (80013c8 <SPI_Init+0x6c>)
 80013a4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80013a8:	619a      	str	r2, [r3, #24]
    SpiHandle.Init.TIMode         = SPI_TIMODE_DISABLED;
 80013aa:	4b07      	ldr	r3, [pc, #28]	@ (80013c8 <SPI_Init+0x6c>)
 80013ac:	2200      	movs	r2, #0
 80013ae:	625a      	str	r2, [r3, #36]	@ 0x24
    SpiHandle.Init.Mode           = SPI_MODE_MASTER;
 80013b0:	4b05      	ldr	r3, [pc, #20]	@ (80013c8 <SPI_Init+0x6c>)
 80013b2:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80013b6:	605a      	str	r2, [r3, #4]

    SPI_MspInit(&SpiHandle);
 80013b8:	4803      	ldr	r0, [pc, #12]	@ (80013c8 <SPI_Init+0x6c>)
 80013ba:	f000 f833 	bl	8001424 <SPI_MspInit>
    HAL_SPI_Init(&SpiHandle);
 80013be:	4802      	ldr	r0, [pc, #8]	@ (80013c8 <SPI_Init+0x6c>)
 80013c0:	f004 fae8 	bl	8005994 <HAL_SPI_Init>
  }
}
 80013c4:	bf00      	nop
 80013c6:	bd80      	pop	{r7, pc}
 80013c8:	20025988 	.word	0x20025988
 80013cc:	40015000 	.word	0x40015000

080013d0 <SPI_Write>:
/**
  * @brief  Writes a byte to device.
  * @param  Value: value to be written
  */
static void SPI_Write(uint16_t Value)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b084      	sub	sp, #16
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	4603      	mov	r3, r0
 80013d8:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 80013da:	2300      	movs	r3, #0
 80013dc:	73fb      	strb	r3, [r7, #15]

  status = HAL_SPI_Transmit(&SpiHandle, (uint8_t*) &Value, 1, SpiTimeout);
 80013de:	4b09      	ldr	r3, [pc, #36]	@ (8001404 <SPI_Write+0x34>)
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	1db9      	adds	r1, r7, #6
 80013e4:	2201      	movs	r2, #1
 80013e6:	4808      	ldr	r0, [pc, #32]	@ (8001408 <SPI_Write+0x38>)
 80013e8:	f004 fb85 	bl	8005af6 <HAL_SPI_Transmit>
 80013ec:	4603      	mov	r3, r0
 80013ee:	73fb      	strb	r3, [r7, #15]

  /* Check the communication status */
  if(status != HAL_OK)
 80013f0:	7bfb      	ldrb	r3, [r7, #15]
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d001      	beq.n	80013fa <SPI_Write+0x2a>
  {
    /* Re-Initialize the BUS */
    SPI_Error();
 80013f6:	f000 f809 	bl	800140c <SPI_Error>
  }
}
 80013fa:	bf00      	nop
 80013fc:	3710      	adds	r7, #16
 80013fe:	46bd      	mov	sp, r7
 8001400:	bd80      	pop	{r7, pc}
 8001402:	bf00      	nop
 8001404:	2000000c 	.word	0x2000000c
 8001408:	20025988 	.word	0x20025988

0800140c <SPI_Error>:

/**
  * @brief  SPI error treatment function.
  */
static void SPI_Error(void)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	af00      	add	r7, sp, #0
  /* De-initialize the SPI communication BUS */
  HAL_SPI_DeInit(&SpiHandle);
 8001410:	4803      	ldr	r0, [pc, #12]	@ (8001420 <SPI_Error+0x14>)
 8001412:	f004 fb48 	bl	8005aa6 <HAL_SPI_DeInit>

  /* Re- Initialize the SPI communication BUS */
  SPI_Init();
 8001416:	f7ff ffa1 	bl	800135c <SPI_Init>
}
 800141a:	bf00      	nop
 800141c:	bd80      	pop	{r7, pc}
 800141e:	bf00      	nop
 8001420:	20025988 	.word	0x20025988

08001424 <SPI_MspInit>:
/**
  * @brief  SPI MSP Init.
  * @param  hspi: SPI handle
  */
static void SPI_MspInit(SPI_HandleTypeDef *hspi)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	b08a      	sub	sp, #40	@ 0x28
 8001428:	af00      	add	r7, sp, #0
 800142a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef   GPIO_InitStructure;

  /* Enable SPI clock */
  DISCOVERY_SPI_CLK_ENABLE();
 800142c:	2300      	movs	r3, #0
 800142e:	613b      	str	r3, [r7, #16]
 8001430:	4b17      	ldr	r3, [pc, #92]	@ (8001490 <SPI_MspInit+0x6c>)
 8001432:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001434:	4a16      	ldr	r2, [pc, #88]	@ (8001490 <SPI_MspInit+0x6c>)
 8001436:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800143a:	6453      	str	r3, [r2, #68]	@ 0x44
 800143c:	4b14      	ldr	r3, [pc, #80]	@ (8001490 <SPI_MspInit+0x6c>)
 800143e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001440:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001444:	613b      	str	r3, [r7, #16]
 8001446:	693b      	ldr	r3, [r7, #16]

  /* Enable DISCOVERY_SPI GPIO clock */
  DISCOVERY_SPI_GPIO_CLK_ENABLE();
 8001448:	2300      	movs	r3, #0
 800144a:	60fb      	str	r3, [r7, #12]
 800144c:	4b10      	ldr	r3, [pc, #64]	@ (8001490 <SPI_MspInit+0x6c>)
 800144e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001450:	4a0f      	ldr	r2, [pc, #60]	@ (8001490 <SPI_MspInit+0x6c>)
 8001452:	f043 0320 	orr.w	r3, r3, #32
 8001456:	6313      	str	r3, [r2, #48]	@ 0x30
 8001458:	4b0d      	ldr	r3, [pc, #52]	@ (8001490 <SPI_MspInit+0x6c>)
 800145a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800145c:	f003 0320 	and.w	r3, r3, #32
 8001460:	60fb      	str	r3, [r7, #12]
 8001462:	68fb      	ldr	r3, [r7, #12]

  /* configure SPI SCK, MOSI and MISO */
  GPIO_InitStructure.Pin    = (DISCOVERY_SPI_SCK_PIN | DISCOVERY_SPI_MOSI_PIN | DISCOVERY_SPI_MISO_PIN);
 8001464:	f44f 7360 	mov.w	r3, #896	@ 0x380
 8001468:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Mode   = GPIO_MODE_AF_PP;
 800146a:	2302      	movs	r3, #2
 800146c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull   = GPIO_PULLDOWN;
 800146e:	2302      	movs	r3, #2
 8001470:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed  = GPIO_SPEED_MEDIUM;
 8001472:	2301      	movs	r3, #1
 8001474:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Alternate = DISCOVERY_SPI_AF;
 8001476:	2305      	movs	r3, #5
 8001478:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(DISCOVERY_SPI_GPIO_PORT, &GPIO_InitStructure);
 800147a:	f107 0314 	add.w	r3, r7, #20
 800147e:	4619      	mov	r1, r3
 8001480:	4804      	ldr	r0, [pc, #16]	@ (8001494 <SPI_MspInit+0x70>)
 8001482:	f001 fe01 	bl	8003088 <HAL_GPIO_Init>
}
 8001486:	bf00      	nop
 8001488:	3728      	adds	r7, #40	@ 0x28
 800148a:	46bd      	mov	sp, r7
 800148c:	bd80      	pop	{r7, pc}
 800148e:	bf00      	nop
 8001490:	40023800 	.word	0x40023800
 8001494:	40021400 	.word	0x40021400

08001498 <LCD_IO_Init>:

/**
  * @brief  Configures the LCD_SPI interface.
  */
void LCD_IO_Init(void)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	b088      	sub	sp, #32
 800149c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;

  if(Is_LCD_IO_Initialized == 0)
 800149e:	4b36      	ldr	r3, [pc, #216]	@ (8001578 <LCD_IO_Init+0xe0>)
 80014a0:	781b      	ldrb	r3, [r3, #0]
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d164      	bne.n	8001570 <LCD_IO_Init+0xd8>
  {
    Is_LCD_IO_Initialized = 1;
 80014a6:	4b34      	ldr	r3, [pc, #208]	@ (8001578 <LCD_IO_Init+0xe0>)
 80014a8:	2201      	movs	r2, #1
 80014aa:	701a      	strb	r2, [r3, #0]

    /* Configure in Output Push-Pull mode */
    LCD_WRX_GPIO_CLK_ENABLE();
 80014ac:	2300      	movs	r3, #0
 80014ae:	60bb      	str	r3, [r7, #8]
 80014b0:	4b32      	ldr	r3, [pc, #200]	@ (800157c <LCD_IO_Init+0xe4>)
 80014b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014b4:	4a31      	ldr	r2, [pc, #196]	@ (800157c <LCD_IO_Init+0xe4>)
 80014b6:	f043 0308 	orr.w	r3, r3, #8
 80014ba:	6313      	str	r3, [r2, #48]	@ 0x30
 80014bc:	4b2f      	ldr	r3, [pc, #188]	@ (800157c <LCD_IO_Init+0xe4>)
 80014be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014c0:	f003 0308 	and.w	r3, r3, #8
 80014c4:	60bb      	str	r3, [r7, #8]
 80014c6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStructure.Pin     = LCD_WRX_PIN;
 80014c8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80014cc:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 80014ce:	2301      	movs	r3, #1
 80014d0:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 80014d2:	2300      	movs	r3, #0
 80014d4:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 80014d6:	2302      	movs	r3, #2
 80014d8:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_WRX_GPIO_PORT, &GPIO_InitStructure);
 80014da:	f107 030c 	add.w	r3, r7, #12
 80014de:	4619      	mov	r1, r3
 80014e0:	4827      	ldr	r0, [pc, #156]	@ (8001580 <LCD_IO_Init+0xe8>)
 80014e2:	f001 fdd1 	bl	8003088 <HAL_GPIO_Init>

    LCD_RDX_GPIO_CLK_ENABLE();
 80014e6:	2300      	movs	r3, #0
 80014e8:	607b      	str	r3, [r7, #4]
 80014ea:	4b24      	ldr	r3, [pc, #144]	@ (800157c <LCD_IO_Init+0xe4>)
 80014ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014ee:	4a23      	ldr	r2, [pc, #140]	@ (800157c <LCD_IO_Init+0xe4>)
 80014f0:	f043 0308 	orr.w	r3, r3, #8
 80014f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80014f6:	4b21      	ldr	r3, [pc, #132]	@ (800157c <LCD_IO_Init+0xe4>)
 80014f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014fa:	f003 0308 	and.w	r3, r3, #8
 80014fe:	607b      	str	r3, [r7, #4]
 8001500:	687b      	ldr	r3, [r7, #4]
    GPIO_InitStructure.Pin     = LCD_RDX_PIN;
 8001502:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001506:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8001508:	2301      	movs	r3, #1
 800150a:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 800150c:	2300      	movs	r3, #0
 800150e:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8001510:	2302      	movs	r3, #2
 8001512:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_RDX_GPIO_PORT, &GPIO_InitStructure);
 8001514:	f107 030c 	add.w	r3, r7, #12
 8001518:	4619      	mov	r1, r3
 800151a:	4819      	ldr	r0, [pc, #100]	@ (8001580 <LCD_IO_Init+0xe8>)
 800151c:	f001 fdb4 	bl	8003088 <HAL_GPIO_Init>

    /* Configure the LCD Control pins ----------------------------------------*/
    LCD_NCS_GPIO_CLK_ENABLE();
 8001520:	2300      	movs	r3, #0
 8001522:	603b      	str	r3, [r7, #0]
 8001524:	4b15      	ldr	r3, [pc, #84]	@ (800157c <LCD_IO_Init+0xe4>)
 8001526:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001528:	4a14      	ldr	r2, [pc, #80]	@ (800157c <LCD_IO_Init+0xe4>)
 800152a:	f043 0304 	orr.w	r3, r3, #4
 800152e:	6313      	str	r3, [r2, #48]	@ 0x30
 8001530:	4b12      	ldr	r3, [pc, #72]	@ (800157c <LCD_IO_Init+0xe4>)
 8001532:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001534:	f003 0304 	and.w	r3, r3, #4
 8001538:	603b      	str	r3, [r7, #0]
 800153a:	683b      	ldr	r3, [r7, #0]

    /* Configure NCS in Output Push-Pull mode */
    GPIO_InitStructure.Pin     = LCD_NCS_PIN;
 800153c:	2304      	movs	r3, #4
 800153e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8001540:	2301      	movs	r3, #1
 8001542:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8001544:	2300      	movs	r3, #0
 8001546:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8001548:	2302      	movs	r3, #2
 800154a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_NCS_GPIO_PORT, &GPIO_InitStructure);
 800154c:	f107 030c 	add.w	r3, r7, #12
 8001550:	4619      	mov	r1, r3
 8001552:	480c      	ldr	r0, [pc, #48]	@ (8001584 <LCD_IO_Init+0xec>)
 8001554:	f001 fd98 	bl	8003088 <HAL_GPIO_Init>

    /* Set or Reset the control line */
    LCD_CS_LOW();
 8001558:	2200      	movs	r2, #0
 800155a:	2104      	movs	r1, #4
 800155c:	4809      	ldr	r0, [pc, #36]	@ (8001584 <LCD_IO_Init+0xec>)
 800155e:	f002 f84b 	bl	80035f8 <HAL_GPIO_WritePin>
    LCD_CS_HIGH();
 8001562:	2201      	movs	r2, #1
 8001564:	2104      	movs	r1, #4
 8001566:	4807      	ldr	r0, [pc, #28]	@ (8001584 <LCD_IO_Init+0xec>)
 8001568:	f002 f846 	bl	80035f8 <HAL_GPIO_WritePin>

    SPI_Init();
 800156c:	f7ff fef6 	bl	800135c <SPI_Init>
  }
}
 8001570:	bf00      	nop
 8001572:	3720      	adds	r7, #32
 8001574:	46bd      	mov	sp, r7
 8001576:	bd80      	pop	{r7, pc}
 8001578:	200259e0 	.word	0x200259e0
 800157c:	40023800 	.word	0x40023800
 8001580:	40020c00 	.word	0x40020c00
 8001584:	40020800 	.word	0x40020800

08001588 <LCD_IO_WriteData>:

/**
  * @brief  Writes register value.
  */
void LCD_IO_WriteData(uint16_t RegValue)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	b082      	sub	sp, #8
 800158c:	af00      	add	r7, sp, #0
 800158e:	4603      	mov	r3, r0
 8001590:	80fb      	strh	r3, [r7, #6]
  /* Set WRX to send data */
  LCD_WRX_HIGH();
 8001592:	2201      	movs	r2, #1
 8001594:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001598:	480a      	ldr	r0, [pc, #40]	@ (80015c4 <LCD_IO_WriteData+0x3c>)
 800159a:	f002 f82d 	bl	80035f8 <HAL_GPIO_WritePin>

  /* Reset LCD control line(/CS) and Send data */
  LCD_CS_LOW();
 800159e:	2200      	movs	r2, #0
 80015a0:	2104      	movs	r1, #4
 80015a2:	4809      	ldr	r0, [pc, #36]	@ (80015c8 <LCD_IO_WriteData+0x40>)
 80015a4:	f002 f828 	bl	80035f8 <HAL_GPIO_WritePin>
  SPI_Write(RegValue);
 80015a8:	88fb      	ldrh	r3, [r7, #6]
 80015aa:	4618      	mov	r0, r3
 80015ac:	f7ff ff10 	bl	80013d0 <SPI_Write>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 80015b0:	2201      	movs	r2, #1
 80015b2:	2104      	movs	r1, #4
 80015b4:	4804      	ldr	r0, [pc, #16]	@ (80015c8 <LCD_IO_WriteData+0x40>)
 80015b6:	f002 f81f 	bl	80035f8 <HAL_GPIO_WritePin>
}
 80015ba:	bf00      	nop
 80015bc:	3708      	adds	r7, #8
 80015be:	46bd      	mov	sp, r7
 80015c0:	bd80      	pop	{r7, pc}
 80015c2:	bf00      	nop
 80015c4:	40020c00 	.word	0x40020c00
 80015c8:	40020800 	.word	0x40020800

080015cc <LCD_IO_WriteReg>:

/**
  * @brief  Writes register address.
  */
void LCD_IO_WriteReg(uint8_t Reg)
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	b082      	sub	sp, #8
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	4603      	mov	r3, r0
 80015d4:	71fb      	strb	r3, [r7, #7]
  /* Reset WRX to send command */
  LCD_WRX_LOW();
 80015d6:	2200      	movs	r2, #0
 80015d8:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80015dc:	480a      	ldr	r0, [pc, #40]	@ (8001608 <LCD_IO_WriteReg+0x3c>)
 80015de:	f002 f80b 	bl	80035f8 <HAL_GPIO_WritePin>

  /* Reset LCD control line(/CS) and Send command */
  LCD_CS_LOW();
 80015e2:	2200      	movs	r2, #0
 80015e4:	2104      	movs	r1, #4
 80015e6:	4809      	ldr	r0, [pc, #36]	@ (800160c <LCD_IO_WriteReg+0x40>)
 80015e8:	f002 f806 	bl	80035f8 <HAL_GPIO_WritePin>
  SPI_Write(Reg);
 80015ec:	79fb      	ldrb	r3, [r7, #7]
 80015ee:	b29b      	uxth	r3, r3
 80015f0:	4618      	mov	r0, r3
 80015f2:	f7ff feed 	bl	80013d0 <SPI_Write>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 80015f6:	2201      	movs	r2, #1
 80015f8:	2104      	movs	r1, #4
 80015fa:	4804      	ldr	r0, [pc, #16]	@ (800160c <LCD_IO_WriteReg+0x40>)
 80015fc:	f001 fffc 	bl	80035f8 <HAL_GPIO_WritePin>
}
 8001600:	bf00      	nop
 8001602:	3708      	adds	r7, #8
 8001604:	46bd      	mov	sp, r7
 8001606:	bd80      	pop	{r7, pc}
 8001608:	40020c00 	.word	0x40020c00
 800160c:	40020800 	.word	0x40020800

08001610 <LCD_Delay>:
/**
  * @brief  Wait for loop in ms.
  * @param  Delay in ms.
  */
void LCD_Delay(uint32_t Delay)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	b082      	sub	sp, #8
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8001618:	6878      	ldr	r0, [r7, #4]
 800161a:	f001 fb89 	bl	8002d30 <HAL_Delay>
}
 800161e:	bf00      	nop
 8001620:	3708      	adds	r7, #8
 8001622:	46bd      	mov	sp, r7
 8001624:	bd80      	pop	{r7, pc}
	...

08001628 <startScreen>:

/**
  * @brief  The application entry point.
  * @retval int
  */
void startScreen(void){
 8001628:	b580      	push	{r7, lr}
 800162a:	af00      	add	r7, sp, #0
	  LCD_SetTextColor(LCD_COLOR_BLACK);
 800162c:	2000      	movs	r0, #0
 800162e:	f7ff fc45 	bl	8000ebc <LCD_SetTextColor>
	  LCD_SetFont(&Font16x24);
 8001632:	4832      	ldr	r0, [pc, #200]	@ (80016fc <startScreen+0xd4>)
 8001634:	f7ff fc52 	bl	8000edc <LCD_SetFont>
	  LCD_DisplayChar(40, 50, 'S');
 8001638:	2253      	movs	r2, #83	@ 0x53
 800163a:	2132      	movs	r1, #50	@ 0x32
 800163c:	2028      	movs	r0, #40	@ 0x28
 800163e:	f7ff fccb 	bl	8000fd8 <LCD_DisplayChar>
	  LCD_SetTextColor(LCD_COLOR_BLACK);
 8001642:	2000      	movs	r0, #0
 8001644:	f7ff fc3a 	bl	8000ebc <LCD_SetTextColor>
	  LCD_SetFont(&Font16x24);
 8001648:	482c      	ldr	r0, [pc, #176]	@ (80016fc <startScreen+0xd4>)
 800164a:	f7ff fc47 	bl	8000edc <LCD_SetFont>
	  LCD_DisplayChar(60, 50, 'T');
 800164e:	2254      	movs	r2, #84	@ 0x54
 8001650:	2132      	movs	r1, #50	@ 0x32
 8001652:	203c      	movs	r0, #60	@ 0x3c
 8001654:	f7ff fcc0 	bl	8000fd8 <LCD_DisplayChar>
	  LCD_SetTextColor(LCD_COLOR_BLACK);
 8001658:	2000      	movs	r0, #0
 800165a:	f7ff fc2f 	bl	8000ebc <LCD_SetTextColor>
	  LCD_SetFont(&Font16x24);
 800165e:	4827      	ldr	r0, [pc, #156]	@ (80016fc <startScreen+0xd4>)
 8001660:	f7ff fc3c 	bl	8000edc <LCD_SetFont>
	  LCD_DisplayChar(80, 50, 'A');
 8001664:	2241      	movs	r2, #65	@ 0x41
 8001666:	2132      	movs	r1, #50	@ 0x32
 8001668:	2050      	movs	r0, #80	@ 0x50
 800166a:	f7ff fcb5 	bl	8000fd8 <LCD_DisplayChar>
	  LCD_SetTextColor(LCD_COLOR_BLACK);
 800166e:	2000      	movs	r0, #0
 8001670:	f7ff fc24 	bl	8000ebc <LCD_SetTextColor>
	  LCD_SetFont(&Font16x24);
 8001674:	4821      	ldr	r0, [pc, #132]	@ (80016fc <startScreen+0xd4>)
 8001676:	f7ff fc31 	bl	8000edc <LCD_SetFont>
	  LCD_DisplayChar(100, 50, 'R');
 800167a:	2252      	movs	r2, #82	@ 0x52
 800167c:	2132      	movs	r1, #50	@ 0x32
 800167e:	2064      	movs	r0, #100	@ 0x64
 8001680:	f7ff fcaa 	bl	8000fd8 <LCD_DisplayChar>
	  LCD_SetTextColor(LCD_COLOR_BLACK);
 8001684:	2000      	movs	r0, #0
 8001686:	f7ff fc19 	bl	8000ebc <LCD_SetTextColor>
	  LCD_SetFont(&Font16x24);
 800168a:	481c      	ldr	r0, [pc, #112]	@ (80016fc <startScreen+0xd4>)
 800168c:	f7ff fc26 	bl	8000edc <LCD_SetFont>
	  LCD_DisplayChar(120, 50, 'T');
 8001690:	2254      	movs	r2, #84	@ 0x54
 8001692:	2132      	movs	r1, #50	@ 0x32
 8001694:	2078      	movs	r0, #120	@ 0x78
 8001696:	f7ff fc9f 	bl	8000fd8 <LCD_DisplayChar>
	  LCD_Draw_Rectangle_Fill(95, 50, LCD_COLOR_BLACK);
 800169a:	2200      	movs	r2, #0
 800169c:	2132      	movs	r1, #50	@ 0x32
 800169e:	205f      	movs	r0, #95	@ 0x5f
 80016a0:	f7ff fa8f 	bl	8000bc2 <LCD_Draw_Rectangle_Fill>
	  LCD_Draw_BBox_Fill(50, 240, LCD_COLOR_GREEN);
 80016a4:	f44f 62fc 	mov.w	r2, #2016	@ 0x7e0
 80016a8:	21f0      	movs	r1, #240	@ 0xf0
 80016aa:	2032      	movs	r0, #50	@ 0x32
 80016ac:	f7ff fab4 	bl	8000c18 <LCD_Draw_BBox_Fill>
	  LCD_Draw_LShape1_Fill(70, 75, LCD_COLOR_MAGENTA);
 80016b0:	f64f 021f 	movw	r2, #63519	@ 0xf81f
 80016b4:	214b      	movs	r1, #75	@ 0x4b
 80016b6:	2046      	movs	r0, #70	@ 0x46
 80016b8:	f7ff fa17 	bl	8000aea <LCD_Draw_LShape1_Fill>
	  LCD_Draw_LShape2_Fill(150, 100, LCD_COLOR_CYAN);
 80016bc:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 80016c0:	2164      	movs	r1, #100	@ 0x64
 80016c2:	2096      	movs	r0, #150	@ 0x96
 80016c4:	f7ff fa47 	bl	8000b56 <LCD_Draw_LShape2_Fill>
	  LCD_Draw_TBox_Fill(45, 10,  LCD_COLOR_RED);
 80016c8:	f44f 4278 	mov.w	r2, #63488	@ 0xf800
 80016cc:	210a      	movs	r1, #10
 80016ce:	202d      	movs	r0, #45	@ 0x2d
 80016d0:	f7ff facd 	bl	8000c6e <LCD_Draw_TBox_Fill>
	  LCD_Draw_ZShape_Fill(190, 175, LCD_COLOR_GREY);
 80016d4:	f24f 72de 	movw	r2, #63454	@ 0xf7de
 80016d8:	21af      	movs	r1, #175	@ 0xaf
 80016da:	20be      	movs	r0, #190	@ 0xbe
 80016dc:	f7ff fb0f 	bl	8000cfe <LCD_Draw_ZShape_Fill>
	  LCD_Draw_SShape_Fill(200, 100, LCD_COLOR_BLUE2);
 80016e0:	f240 521f 	movw	r2, #1311	@ 0x51f
 80016e4:	2164      	movs	r1, #100	@ 0x64
 80016e6:	20c8      	movs	r0, #200	@ 0xc8
 80016e8:	f7ff fb3e 	bl	8000d68 <LCD_Draw_SShape_Fill>
	  LCD_Draw_Platform_Fill(0, 300, LCD_COLOR_BLACK);
 80016ec:	2200      	movs	r2, #0
 80016ee:	f44f 7196 	mov.w	r1, #300	@ 0x12c
 80016f2:	2000      	movs	r0, #0
 80016f4:	f7ff fb6d 	bl	8000dd2 <LCD_Draw_Platform_Fill>
}
 80016f8:	bf00      	nop
 80016fa:	bd80      	pop	{r7, pc}
 80016fc:	20000004 	.word	0x20000004

08001700 <main>:
int main(void)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	b082      	sub	sp, #8
 8001704:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001706:	f001 faa1 	bl	8002c4c <HAL_Init>

  /* Configure the system clock */
  //SystemClock_Config();
  // The default system configuration function is "suspect" so we need to make our own clock configuration
   // Note - You, the developer, MAY have to play with some of this coniguration as you progress in your project
   SystemClockOverride();
 800170a:	f000 fb69 	bl	8001de0 <SystemClockOverride>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800170e:	f000 f9b9 	bl	8001a84 <MX_GPIO_Init>
  MX_I2C3_Init();
 8001712:	f000 f845 	bl	80017a0 <MX_I2C3_Init>
  MX_LTDC_Init();
 8001716:	f000 f883 	bl	8001820 <MX_LTDC_Init>
  MX_RNG_Init();
 800171a:	f000 f933 	bl	8001984 <MX_RNG_Init>
  MX_SPI5_Init();
 800171e:	f000 f945 	bl	80019ac <MX_SPI5_Init>
  MX_TIM7_Init();
 8001722:	f000 f979 	bl	8001a18 <MX_TIM7_Init>
  /* USER CODE BEGIN 2 */
  ApplicationInit(); // Initializes the LCD functionality
 8001726:	f7fe ff2b 	bl	8000580 <ApplicationInit>
  startScreen();
 800172a:	f7ff ff7d 	bl	8001628 <startScreen>

  HAL_Delay(8000);
 800172e:	f44f 50fa 	mov.w	r0, #8000	@ 0x1f40
 8001732:	f001 fafd 	bl	8002d30 <HAL_Delay>
  uint16_t y;
  for(y =0; y<100; y++){
 8001736:	2300      	movs	r3, #0
 8001738:	80fb      	strh	r3, [r7, #6]
 800173a:	e012      	b.n	8001762 <main+0x62>
  	  LCD_Clear(0,LCD_COLOR_BLUE);
 800173c:	211f      	movs	r1, #31
 800173e:	2000      	movs	r0, #0
 8001740:	f7ff fb9a 	bl	8000e78 <LCD_Clear>
  	  LCD_Draw_Circle_Fill(50, (150 + y), 10, LCD_COLOR_GREEN);
 8001744:	88fb      	ldrh	r3, [r7, #6]
 8001746:	3396      	adds	r3, #150	@ 0x96
 8001748:	b299      	uxth	r1, r3
 800174a:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 800174e:	220a      	movs	r2, #10
 8001750:	2032      	movs	r0, #50	@ 0x32
 8001752:	f7ff f977 	bl	8000a44 <LCD_Draw_Circle_Fill>

  	  HAL_Delay(70);
 8001756:	2046      	movs	r0, #70	@ 0x46
 8001758:	f001 faea 	bl	8002d30 <HAL_Delay>
  for(y =0; y<100; y++){
 800175c:	88fb      	ldrh	r3, [r7, #6]
 800175e:	3301      	adds	r3, #1
 8001760:	80fb      	strh	r3, [r7, #6]
 8001762:	88fb      	ldrh	r3, [r7, #6]
 8001764:	2b63      	cmp	r3, #99	@ 0x63
 8001766:	d9e9      	bls.n	800173c <main+0x3c>
  }
	  LCD_Clear(0,LCD_COLOR_BLUE);
 8001768:	211f      	movs	r1, #31
 800176a:	2000      	movs	r0, #0
 800176c:	f7ff fb84 	bl	8000e78 <LCD_Clear>
	  LCD_Draw_Circle_Fill(50, 75, 5, LCD_COLOR_MAGENTA);
 8001770:	f64f 031f 	movw	r3, #63519	@ 0xf81f
 8001774:	2205      	movs	r2, #5
 8001776:	214b      	movs	r1, #75	@ 0x4b
 8001778:	2032      	movs	r0, #50	@ 0x32
 800177a:	f7ff f963 	bl	8000a44 <LCD_Draw_Circle_Fill>
	  HAL_Delay(500);
 800177e:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001782:	f001 fad5 	bl	8002d30 <HAL_Delay>
	  LCD_Clear(0,LCD_COLOR_BLUE);
 8001786:	211f      	movs	r1, #31
 8001788:	2000      	movs	r0, #0
 800178a:	f7ff fb75 	bl	8000e78 <LCD_Clear>
	  HAL_Delay(500);
 800178e:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001792:	f001 facd 	bl	8002d30 <HAL_Delay>

  HAL_Delay(200);
 8001796:	20c8      	movs	r0, #200	@ 0xc8
 8001798:	f001 faca 	bl	8002d30 <HAL_Delay>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800179c:	bf00      	nop
 800179e:	e7fd      	b.n	800179c <main+0x9c>

080017a0 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 80017a4:	4b1b      	ldr	r3, [pc, #108]	@ (8001814 <MX_I2C3_Init+0x74>)
 80017a6:	4a1c      	ldr	r2, [pc, #112]	@ (8001818 <MX_I2C3_Init+0x78>)
 80017a8:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 80017aa:	4b1a      	ldr	r3, [pc, #104]	@ (8001814 <MX_I2C3_Init+0x74>)
 80017ac:	4a1b      	ldr	r2, [pc, #108]	@ (800181c <MX_I2C3_Init+0x7c>)
 80017ae:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80017b0:	4b18      	ldr	r3, [pc, #96]	@ (8001814 <MX_I2C3_Init+0x74>)
 80017b2:	2200      	movs	r2, #0
 80017b4:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 80017b6:	4b17      	ldr	r3, [pc, #92]	@ (8001814 <MX_I2C3_Init+0x74>)
 80017b8:	2200      	movs	r2, #0
 80017ba:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80017bc:	4b15      	ldr	r3, [pc, #84]	@ (8001814 <MX_I2C3_Init+0x74>)
 80017be:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80017c2:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80017c4:	4b13      	ldr	r3, [pc, #76]	@ (8001814 <MX_I2C3_Init+0x74>)
 80017c6:	2200      	movs	r2, #0
 80017c8:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 80017ca:	4b12      	ldr	r3, [pc, #72]	@ (8001814 <MX_I2C3_Init+0x74>)
 80017cc:	2200      	movs	r2, #0
 80017ce:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80017d0:	4b10      	ldr	r3, [pc, #64]	@ (8001814 <MX_I2C3_Init+0x74>)
 80017d2:	2200      	movs	r2, #0
 80017d4:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80017d6:	4b0f      	ldr	r3, [pc, #60]	@ (8001814 <MX_I2C3_Init+0x74>)
 80017d8:	2200      	movs	r2, #0
 80017da:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80017dc:	480d      	ldr	r0, [pc, #52]	@ (8001814 <MX_I2C3_Init+0x74>)
 80017de:	f001 ff25 	bl	800362c <HAL_I2C_Init>
 80017e2:	4603      	mov	r3, r0
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d001      	beq.n	80017ec <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 80017e8:	f000 fb3a 	bl	8001e60 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80017ec:	2100      	movs	r1, #0
 80017ee:	4809      	ldr	r0, [pc, #36]	@ (8001814 <MX_I2C3_Init+0x74>)
 80017f0:	f002 ff40 	bl	8004674 <HAL_I2CEx_ConfigAnalogFilter>
 80017f4:	4603      	mov	r3, r0
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d001      	beq.n	80017fe <MX_I2C3_Init+0x5e>
  {
    Error_Handler();
 80017fa:	f000 fb31 	bl	8001e60 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 80017fe:	2100      	movs	r1, #0
 8001800:	4804      	ldr	r0, [pc, #16]	@ (8001814 <MX_I2C3_Init+0x74>)
 8001802:	f002 ff73 	bl	80046ec <HAL_I2CEx_ConfigDigitalFilter>
 8001806:	4603      	mov	r3, r0
 8001808:	2b00      	cmp	r3, #0
 800180a:	d001      	beq.n	8001810 <MX_I2C3_Init+0x70>
  {
    Error_Handler();
 800180c:	f000 fb28 	bl	8001e60 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8001810:	bf00      	nop
 8001812:	bd80      	pop	{r7, pc}
 8001814:	200259e4 	.word	0x200259e4
 8001818:	40005c00 	.word	0x40005c00
 800181c:	000186a0 	.word	0x000186a0

08001820 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	b09a      	sub	sp, #104	@ 0x68
 8001824:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8001826:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800182a:	2234      	movs	r2, #52	@ 0x34
 800182c:	2100      	movs	r1, #0
 800182e:	4618      	mov	r0, r3
 8001830:	f004 ff12 	bl	8006658 <memset>
  LTDC_LayerCfgTypeDef pLayerCfg1 = {0};
 8001834:	463b      	mov	r3, r7
 8001836:	2234      	movs	r2, #52	@ 0x34
 8001838:	2100      	movs	r1, #0
 800183a:	4618      	mov	r0, r3
 800183c:	f004 ff0c 	bl	8006658 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 8001840:	4b4e      	ldr	r3, [pc, #312]	@ (800197c <MX_LTDC_Init+0x15c>)
 8001842:	4a4f      	ldr	r2, [pc, #316]	@ (8001980 <MX_LTDC_Init+0x160>)
 8001844:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8001846:	4b4d      	ldr	r3, [pc, #308]	@ (800197c <MX_LTDC_Init+0x15c>)
 8001848:	2200      	movs	r2, #0
 800184a:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 800184c:	4b4b      	ldr	r3, [pc, #300]	@ (800197c <MX_LTDC_Init+0x15c>)
 800184e:	2200      	movs	r2, #0
 8001850:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8001852:	4b4a      	ldr	r3, [pc, #296]	@ (800197c <MX_LTDC_Init+0x15c>)
 8001854:	2200      	movs	r2, #0
 8001856:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8001858:	4b48      	ldr	r3, [pc, #288]	@ (800197c <MX_LTDC_Init+0x15c>)
 800185a:	2200      	movs	r2, #0
 800185c:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 7;
 800185e:	4b47      	ldr	r3, [pc, #284]	@ (800197c <MX_LTDC_Init+0x15c>)
 8001860:	2207      	movs	r2, #7
 8001862:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 3;
 8001864:	4b45      	ldr	r3, [pc, #276]	@ (800197c <MX_LTDC_Init+0x15c>)
 8001866:	2203      	movs	r2, #3
 8001868:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 14;
 800186a:	4b44      	ldr	r3, [pc, #272]	@ (800197c <MX_LTDC_Init+0x15c>)
 800186c:	220e      	movs	r2, #14
 800186e:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 5;
 8001870:	4b42      	ldr	r3, [pc, #264]	@ (800197c <MX_LTDC_Init+0x15c>)
 8001872:	2205      	movs	r2, #5
 8001874:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 654;
 8001876:	4b41      	ldr	r3, [pc, #260]	@ (800197c <MX_LTDC_Init+0x15c>)
 8001878:	f240 228e 	movw	r2, #654	@ 0x28e
 800187c:	625a      	str	r2, [r3, #36]	@ 0x24
  hltdc.Init.AccumulatedActiveH = 485;
 800187e:	4b3f      	ldr	r3, [pc, #252]	@ (800197c <MX_LTDC_Init+0x15c>)
 8001880:	f240 12e5 	movw	r2, #485	@ 0x1e5
 8001884:	629a      	str	r2, [r3, #40]	@ 0x28
  hltdc.Init.TotalWidth = 660;
 8001886:	4b3d      	ldr	r3, [pc, #244]	@ (800197c <MX_LTDC_Init+0x15c>)
 8001888:	f44f 7225 	mov.w	r2, #660	@ 0x294
 800188c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc.Init.TotalHeigh = 487;
 800188e:	4b3b      	ldr	r3, [pc, #236]	@ (800197c <MX_LTDC_Init+0x15c>)
 8001890:	f240 12e7 	movw	r2, #487	@ 0x1e7
 8001894:	631a      	str	r2, [r3, #48]	@ 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8001896:	4b39      	ldr	r3, [pc, #228]	@ (800197c <MX_LTDC_Init+0x15c>)
 8001898:	2200      	movs	r2, #0
 800189a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hltdc.Init.Backcolor.Green = 0;
 800189e:	4b37      	ldr	r3, [pc, #220]	@ (800197c <MX_LTDC_Init+0x15c>)
 80018a0:	2200      	movs	r2, #0
 80018a2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  hltdc.Init.Backcolor.Red = 0;
 80018a6:	4b35      	ldr	r3, [pc, #212]	@ (800197c <MX_LTDC_Init+0x15c>)
 80018a8:	2200      	movs	r2, #0
 80018aa:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 80018ae:	4833      	ldr	r0, [pc, #204]	@ (800197c <MX_LTDC_Init+0x15c>)
 80018b0:	f002 ff5c 	bl	800476c <HAL_LTDC_Init>
 80018b4:	4603      	mov	r3, r0
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d001      	beq.n	80018be <MX_LTDC_Init+0x9e>
  {
    Error_Handler();
 80018ba:	f000 fad1 	bl	8001e60 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 80018be:	2300      	movs	r3, #0
 80018c0:	637b      	str	r3, [r7, #52]	@ 0x34
  pLayerCfg.WindowX1 = 0;
 80018c2:	2300      	movs	r3, #0
 80018c4:	63bb      	str	r3, [r7, #56]	@ 0x38
  pLayerCfg.WindowY0 = 0;
 80018c6:	2300      	movs	r3, #0
 80018c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  pLayerCfg.WindowY1 = 0;
 80018ca:	2300      	movs	r3, #0
 80018cc:	643b      	str	r3, [r7, #64]	@ 0x40
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 80018ce:	2300      	movs	r3, #0
 80018d0:	647b      	str	r3, [r7, #68]	@ 0x44
  pLayerCfg.Alpha = 0;
 80018d2:	2300      	movs	r3, #0
 80018d4:	64bb      	str	r3, [r7, #72]	@ 0x48
  pLayerCfg.Alpha0 = 0;
 80018d6:	2300      	movs	r3, #0
 80018d8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 80018da:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80018de:	653b      	str	r3, [r7, #80]	@ 0x50
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 80018e0:	2305      	movs	r3, #5
 80018e2:	657b      	str	r3, [r7, #84]	@ 0x54
  pLayerCfg.FBStartAdress = 0;
 80018e4:	2300      	movs	r3, #0
 80018e6:	65bb      	str	r3, [r7, #88]	@ 0x58
  pLayerCfg.ImageWidth = 0;
 80018e8:	2300      	movs	r3, #0
 80018ea:	65fb      	str	r3, [r7, #92]	@ 0x5c
  pLayerCfg.ImageHeight = 0;
 80018ec:	2300      	movs	r3, #0
 80018ee:	663b      	str	r3, [r7, #96]	@ 0x60
  pLayerCfg.Backcolor.Blue = 0;
 80018f0:	2300      	movs	r3, #0
 80018f2:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
  pLayerCfg.Backcolor.Green = 0;
 80018f6:	2300      	movs	r3, #0
 80018f8:	f887 3065 	strb.w	r3, [r7, #101]	@ 0x65
  pLayerCfg.Backcolor.Red = 0;
 80018fc:	2300      	movs	r3, #0
 80018fe:	f887 3066 	strb.w	r3, [r7, #102]	@ 0x66
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8001902:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001906:	2200      	movs	r2, #0
 8001908:	4619      	mov	r1, r3
 800190a:	481c      	ldr	r0, [pc, #112]	@ (800197c <MX_LTDC_Init+0x15c>)
 800190c:	f002 fffe 	bl	800490c <HAL_LTDC_ConfigLayer>
 8001910:	4603      	mov	r3, r0
 8001912:	2b00      	cmp	r3, #0
 8001914:	d001      	beq.n	800191a <MX_LTDC_Init+0xfa>
  {
    Error_Handler();
 8001916:	f000 faa3 	bl	8001e60 <Error_Handler>
  }
  pLayerCfg1.WindowX0 = 0;
 800191a:	2300      	movs	r3, #0
 800191c:	603b      	str	r3, [r7, #0]
  pLayerCfg1.WindowX1 = 0;
 800191e:	2300      	movs	r3, #0
 8001920:	607b      	str	r3, [r7, #4]
  pLayerCfg1.WindowY0 = 0;
 8001922:	2300      	movs	r3, #0
 8001924:	60bb      	str	r3, [r7, #8]
  pLayerCfg1.WindowY1 = 0;
 8001926:	2300      	movs	r3, #0
 8001928:	60fb      	str	r3, [r7, #12]
  pLayerCfg1.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 800192a:	2300      	movs	r3, #0
 800192c:	613b      	str	r3, [r7, #16]
  pLayerCfg1.Alpha = 0;
 800192e:	2300      	movs	r3, #0
 8001930:	617b      	str	r3, [r7, #20]
  pLayerCfg1.Alpha0 = 0;
 8001932:	2300      	movs	r3, #0
 8001934:	61bb      	str	r3, [r7, #24]
  pLayerCfg1.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8001936:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800193a:	61fb      	str	r3, [r7, #28]
  pLayerCfg1.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 800193c:	2305      	movs	r3, #5
 800193e:	623b      	str	r3, [r7, #32]
  pLayerCfg1.FBStartAdress = 0;
 8001940:	2300      	movs	r3, #0
 8001942:	627b      	str	r3, [r7, #36]	@ 0x24
  pLayerCfg1.ImageWidth = 0;
 8001944:	2300      	movs	r3, #0
 8001946:	62bb      	str	r3, [r7, #40]	@ 0x28
  pLayerCfg1.ImageHeight = 0;
 8001948:	2300      	movs	r3, #0
 800194a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  pLayerCfg1.Backcolor.Blue = 0;
 800194c:	2300      	movs	r3, #0
 800194e:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  pLayerCfg1.Backcolor.Green = 0;
 8001952:	2300      	movs	r3, #0
 8001954:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31
  pLayerCfg1.Backcolor.Red = 0;
 8001958:	2300      	movs	r3, #0
 800195a:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg1, 1) != HAL_OK)
 800195e:	463b      	mov	r3, r7
 8001960:	2201      	movs	r2, #1
 8001962:	4619      	mov	r1, r3
 8001964:	4805      	ldr	r0, [pc, #20]	@ (800197c <MX_LTDC_Init+0x15c>)
 8001966:	f002 ffd1 	bl	800490c <HAL_LTDC_ConfigLayer>
 800196a:	4603      	mov	r3, r0
 800196c:	2b00      	cmp	r3, #0
 800196e:	d001      	beq.n	8001974 <MX_LTDC_Init+0x154>
  {
    Error_Handler();
 8001970:	f000 fa76 	bl	8001e60 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8001974:	bf00      	nop
 8001976:	3768      	adds	r7, #104	@ 0x68
 8001978:	46bd      	mov	sp, r7
 800197a:	bd80      	pop	{r7, pc}
 800197c:	20025a38 	.word	0x20025a38
 8001980:	40016800 	.word	0x40016800

08001984 <MX_RNG_Init>:
  * @brief RNG Initialization Function
  * @param None
  * @retval None
  */
static void MX_RNG_Init(void)
{
 8001984:	b580      	push	{r7, lr}
 8001986:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 8001988:	4b06      	ldr	r3, [pc, #24]	@ (80019a4 <MX_RNG_Init+0x20>)
 800198a:	4a07      	ldr	r2, [pc, #28]	@ (80019a8 <MX_RNG_Init+0x24>)
 800198c:	601a      	str	r2, [r3, #0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 800198e:	4805      	ldr	r0, [pc, #20]	@ (80019a4 <MX_RNG_Init+0x20>)
 8001990:	f003 ffd6 	bl	8005940 <HAL_RNG_Init>
 8001994:	4603      	mov	r3, r0
 8001996:	2b00      	cmp	r3, #0
 8001998:	d001      	beq.n	800199e <MX_RNG_Init+0x1a>
  {
    Error_Handler();
 800199a:	f000 fa61 	bl	8001e60 <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 800199e:	bf00      	nop
 80019a0:	bd80      	pop	{r7, pc}
 80019a2:	bf00      	nop
 80019a4:	20025ae0 	.word	0x20025ae0
 80019a8:	50060800 	.word	0x50060800

080019ac <MX_SPI5_Init>:
  * @brief SPI5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI5_Init(void)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  /* SPI5 parameter configuration*/
  hspi5.Instance = SPI5;
 80019b0:	4b17      	ldr	r3, [pc, #92]	@ (8001a10 <MX_SPI5_Init+0x64>)
 80019b2:	4a18      	ldr	r2, [pc, #96]	@ (8001a14 <MX_SPI5_Init+0x68>)
 80019b4:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 80019b6:	4b16      	ldr	r3, [pc, #88]	@ (8001a10 <MX_SPI5_Init+0x64>)
 80019b8:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80019bc:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 80019be:	4b14      	ldr	r3, [pc, #80]	@ (8001a10 <MX_SPI5_Init+0x64>)
 80019c0:	2200      	movs	r2, #0
 80019c2:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 80019c4:	4b12      	ldr	r3, [pc, #72]	@ (8001a10 <MX_SPI5_Init+0x64>)
 80019c6:	2200      	movs	r2, #0
 80019c8:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 80019ca:	4b11      	ldr	r3, [pc, #68]	@ (8001a10 <MX_SPI5_Init+0x64>)
 80019cc:	2200      	movs	r2, #0
 80019ce:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 80019d0:	4b0f      	ldr	r3, [pc, #60]	@ (8001a10 <MX_SPI5_Init+0x64>)
 80019d2:	2200      	movs	r2, #0
 80019d4:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 80019d6:	4b0e      	ldr	r3, [pc, #56]	@ (8001a10 <MX_SPI5_Init+0x64>)
 80019d8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80019dc:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80019de:	4b0c      	ldr	r3, [pc, #48]	@ (8001a10 <MX_SPI5_Init+0x64>)
 80019e0:	2200      	movs	r2, #0
 80019e2:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80019e4:	4b0a      	ldr	r3, [pc, #40]	@ (8001a10 <MX_SPI5_Init+0x64>)
 80019e6:	2200      	movs	r2, #0
 80019e8:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 80019ea:	4b09      	ldr	r3, [pc, #36]	@ (8001a10 <MX_SPI5_Init+0x64>)
 80019ec:	2200      	movs	r2, #0
 80019ee:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80019f0:	4b07      	ldr	r3, [pc, #28]	@ (8001a10 <MX_SPI5_Init+0x64>)
 80019f2:	2200      	movs	r2, #0
 80019f4:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi5.Init.CRCPolynomial = 10;
 80019f6:	4b06      	ldr	r3, [pc, #24]	@ (8001a10 <MX_SPI5_Init+0x64>)
 80019f8:	220a      	movs	r2, #10
 80019fa:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 80019fc:	4804      	ldr	r0, [pc, #16]	@ (8001a10 <MX_SPI5_Init+0x64>)
 80019fe:	f003 ffc9 	bl	8005994 <HAL_SPI_Init>
 8001a02:	4603      	mov	r3, r0
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d001      	beq.n	8001a0c <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 8001a08:	f000 fa2a 	bl	8001e60 <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 8001a0c:	bf00      	nop
 8001a0e:	bd80      	pop	{r7, pc}
 8001a10:	20025af0 	.word	0x20025af0
 8001a14:	40015000 	.word	0x40015000

08001a18 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	b082      	sub	sp, #8
 8001a1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a1e:	463b      	mov	r3, r7
 8001a20:	2200      	movs	r2, #0
 8001a22:	601a      	str	r2, [r3, #0]
 8001a24:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8001a26:	4b15      	ldr	r3, [pc, #84]	@ (8001a7c <MX_TIM7_Init+0x64>)
 8001a28:	4a15      	ldr	r2, [pc, #84]	@ (8001a80 <MX_TIM7_Init+0x68>)
 8001a2a:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 0;
 8001a2c:	4b13      	ldr	r3, [pc, #76]	@ (8001a7c <MX_TIM7_Init+0x64>)
 8001a2e:	2200      	movs	r2, #0
 8001a30:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a32:	4b12      	ldr	r3, [pc, #72]	@ (8001a7c <MX_TIM7_Init+0x64>)
 8001a34:	2200      	movs	r2, #0
 8001a36:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 65535;
 8001a38:	4b10      	ldr	r3, [pc, #64]	@ (8001a7c <MX_TIM7_Init+0x64>)
 8001a3a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001a3e:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a40:	4b0e      	ldr	r3, [pc, #56]	@ (8001a7c <MX_TIM7_Init+0x64>)
 8001a42:	2200      	movs	r2, #0
 8001a44:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8001a46:	480d      	ldr	r0, [pc, #52]	@ (8001a7c <MX_TIM7_Init+0x64>)
 8001a48:	f004 fa84 	bl	8005f54 <HAL_TIM_Base_Init>
 8001a4c:	4603      	mov	r3, r0
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d001      	beq.n	8001a56 <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 8001a52:	f000 fa05 	bl	8001e60 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a56:	2300      	movs	r3, #0
 8001a58:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8001a5e:	463b      	mov	r3, r7
 8001a60:	4619      	mov	r1, r3
 8001a62:	4806      	ldr	r0, [pc, #24]	@ (8001a7c <MX_TIM7_Init+0x64>)
 8001a64:	f004 fb72 	bl	800614c <HAL_TIMEx_MasterConfigSynchronization>
 8001a68:	4603      	mov	r3, r0
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d001      	beq.n	8001a72 <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 8001a6e:	f000 f9f7 	bl	8001e60 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8001a72:	bf00      	nop
 8001a74:	3708      	adds	r7, #8
 8001a76:	46bd      	mov	sp, r7
 8001a78:	bd80      	pop	{r7, pc}
 8001a7a:	bf00      	nop
 8001a7c:	20025b48 	.word	0x20025b48
 8001a80:	40001400 	.word	0x40001400

08001a84 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	b08e      	sub	sp, #56	@ 0x38
 8001a88:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a8a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001a8e:	2200      	movs	r2, #0
 8001a90:	601a      	str	r2, [r3, #0]
 8001a92:	605a      	str	r2, [r3, #4]
 8001a94:	609a      	str	r2, [r3, #8]
 8001a96:	60da      	str	r2, [r3, #12]
 8001a98:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	623b      	str	r3, [r7, #32]
 8001a9e:	4bb2      	ldr	r3, [pc, #712]	@ (8001d68 <MX_GPIO_Init+0x2e4>)
 8001aa0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001aa2:	4ab1      	ldr	r2, [pc, #708]	@ (8001d68 <MX_GPIO_Init+0x2e4>)
 8001aa4:	f043 0304 	orr.w	r3, r3, #4
 8001aa8:	6313      	str	r3, [r2, #48]	@ 0x30
 8001aaa:	4baf      	ldr	r3, [pc, #700]	@ (8001d68 <MX_GPIO_Init+0x2e4>)
 8001aac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001aae:	f003 0304 	and.w	r3, r3, #4
 8001ab2:	623b      	str	r3, [r7, #32]
 8001ab4:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	61fb      	str	r3, [r7, #28]
 8001aba:	4bab      	ldr	r3, [pc, #684]	@ (8001d68 <MX_GPIO_Init+0x2e4>)
 8001abc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001abe:	4aaa      	ldr	r2, [pc, #680]	@ (8001d68 <MX_GPIO_Init+0x2e4>)
 8001ac0:	f043 0320 	orr.w	r3, r3, #32
 8001ac4:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ac6:	4ba8      	ldr	r3, [pc, #672]	@ (8001d68 <MX_GPIO_Init+0x2e4>)
 8001ac8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001aca:	f003 0320 	and.w	r3, r3, #32
 8001ace:	61fb      	str	r3, [r7, #28]
 8001ad0:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	61bb      	str	r3, [r7, #24]
 8001ad6:	4ba4      	ldr	r3, [pc, #656]	@ (8001d68 <MX_GPIO_Init+0x2e4>)
 8001ad8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ada:	4aa3      	ldr	r2, [pc, #652]	@ (8001d68 <MX_GPIO_Init+0x2e4>)
 8001adc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001ae0:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ae2:	4ba1      	ldr	r3, [pc, #644]	@ (8001d68 <MX_GPIO_Init+0x2e4>)
 8001ae4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ae6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001aea:	61bb      	str	r3, [r7, #24]
 8001aec:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001aee:	2300      	movs	r3, #0
 8001af0:	617b      	str	r3, [r7, #20]
 8001af2:	4b9d      	ldr	r3, [pc, #628]	@ (8001d68 <MX_GPIO_Init+0x2e4>)
 8001af4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001af6:	4a9c      	ldr	r2, [pc, #624]	@ (8001d68 <MX_GPIO_Init+0x2e4>)
 8001af8:	f043 0301 	orr.w	r3, r3, #1
 8001afc:	6313      	str	r3, [r2, #48]	@ 0x30
 8001afe:	4b9a      	ldr	r3, [pc, #616]	@ (8001d68 <MX_GPIO_Init+0x2e4>)
 8001b00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b02:	f003 0301 	and.w	r3, r3, #1
 8001b06:	617b      	str	r3, [r7, #20]
 8001b08:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	613b      	str	r3, [r7, #16]
 8001b0e:	4b96      	ldr	r3, [pc, #600]	@ (8001d68 <MX_GPIO_Init+0x2e4>)
 8001b10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b12:	4a95      	ldr	r2, [pc, #596]	@ (8001d68 <MX_GPIO_Init+0x2e4>)
 8001b14:	f043 0302 	orr.w	r3, r3, #2
 8001b18:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b1a:	4b93      	ldr	r3, [pc, #588]	@ (8001d68 <MX_GPIO_Init+0x2e4>)
 8001b1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b1e:	f003 0302 	and.w	r3, r3, #2
 8001b22:	613b      	str	r3, [r7, #16]
 8001b24:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001b26:	2300      	movs	r3, #0
 8001b28:	60fb      	str	r3, [r7, #12]
 8001b2a:	4b8f      	ldr	r3, [pc, #572]	@ (8001d68 <MX_GPIO_Init+0x2e4>)
 8001b2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b2e:	4a8e      	ldr	r2, [pc, #568]	@ (8001d68 <MX_GPIO_Init+0x2e4>)
 8001b30:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001b34:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b36:	4b8c      	ldr	r3, [pc, #560]	@ (8001d68 <MX_GPIO_Init+0x2e4>)
 8001b38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b3a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001b3e:	60fb      	str	r3, [r7, #12]
 8001b40:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001b42:	2300      	movs	r3, #0
 8001b44:	60bb      	str	r3, [r7, #8]
 8001b46:	4b88      	ldr	r3, [pc, #544]	@ (8001d68 <MX_GPIO_Init+0x2e4>)
 8001b48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b4a:	4a87      	ldr	r2, [pc, #540]	@ (8001d68 <MX_GPIO_Init+0x2e4>)
 8001b4c:	f043 0310 	orr.w	r3, r3, #16
 8001b50:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b52:	4b85      	ldr	r3, [pc, #532]	@ (8001d68 <MX_GPIO_Init+0x2e4>)
 8001b54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b56:	f003 0310 	and.w	r3, r3, #16
 8001b5a:	60bb      	str	r3, [r7, #8]
 8001b5c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001b5e:	2300      	movs	r3, #0
 8001b60:	607b      	str	r3, [r7, #4]
 8001b62:	4b81      	ldr	r3, [pc, #516]	@ (8001d68 <MX_GPIO_Init+0x2e4>)
 8001b64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b66:	4a80      	ldr	r2, [pc, #512]	@ (8001d68 <MX_GPIO_Init+0x2e4>)
 8001b68:	f043 0308 	orr.w	r3, r3, #8
 8001b6c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b6e:	4b7e      	ldr	r3, [pc, #504]	@ (8001d68 <MX_GPIO_Init+0x2e4>)
 8001b70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b72:	f003 0308 	and.w	r3, r3, #8
 8001b76:	607b      	str	r3, [r7, #4]
 8001b78:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin, GPIO_PIN_RESET);
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	2116      	movs	r1, #22
 8001b7e:	487b      	ldr	r0, [pc, #492]	@ (8001d6c <MX_GPIO_Init+0x2e8>)
 8001b80:	f001 fd3a 	bl	80035f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ACP_RST_GPIO_Port, ACP_RST_Pin, GPIO_PIN_RESET);
 8001b84:	2200      	movs	r2, #0
 8001b86:	2180      	movs	r1, #128	@ 0x80
 8001b88:	4879      	ldr	r0, [pc, #484]	@ (8001d70 <MX_GPIO_Init+0x2ec>)
 8001b8a:	f001 fd35 	bl	80035f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, RDX_Pin|WRX_DCX_Pin, GPIO_PIN_RESET);
 8001b8e:	2200      	movs	r2, #0
 8001b90:	f44f 5140 	mov.w	r1, #12288	@ 0x3000
 8001b94:	4877      	ldr	r0, [pc, #476]	@ (8001d74 <MX_GPIO_Init+0x2f0>)
 8001b96:	f001 fd2f 	bl	80035f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LD3_Pin|LD4_Pin, GPIO_PIN_RESET);
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	f44f 41c0 	mov.w	r1, #24576	@ 0x6000
 8001ba0:	4875      	ldr	r0, [pc, #468]	@ (8001d78 <MX_GPIO_Init+0x2f4>)
 8001ba2:	f001 fd29 	bl	80035f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : A0_Pin A1_Pin A2_Pin A3_Pin
                           A4_Pin A5_Pin SDNRAS_Pin A6_Pin
                           A7_Pin A8_Pin A9_Pin */
  GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin|A3_Pin
 8001ba6:	f64f 033f 	movw	r3, #63551	@ 0xf83f
 8001baa:	627b      	str	r3, [r7, #36]	@ 0x24
                          |A4_Pin|A5_Pin|SDNRAS_Pin|A6_Pin
                          |A7_Pin|A8_Pin|A9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bac:	2302      	movs	r3, #2
 8001bae:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bb0:	2300      	movs	r3, #0
 8001bb2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bb4:	2303      	movs	r3, #3
 8001bb6:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001bb8:	230c      	movs	r3, #12
 8001bba:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001bbc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001bc0:	4619      	mov	r1, r3
 8001bc2:	486e      	ldr	r0, [pc, #440]	@ (8001d7c <MX_GPIO_Init+0x2f8>)
 8001bc4:	f001 fa60 	bl	8003088 <HAL_GPIO_Init>

  /*Configure GPIO pin : SDNWE_Pin */
  GPIO_InitStruct.Pin = SDNWE_Pin;
 8001bc8:	2301      	movs	r3, #1
 8001bca:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bcc:	2302      	movs	r3, #2
 8001bce:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bd0:	2300      	movs	r3, #0
 8001bd2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bd4:	2303      	movs	r3, #3
 8001bd6:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001bd8:	230c      	movs	r3, #12
 8001bda:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(SDNWE_GPIO_Port, &GPIO_InitStruct);
 8001bdc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001be0:	4619      	mov	r1, r3
 8001be2:	4862      	ldr	r0, [pc, #392]	@ (8001d6c <MX_GPIO_Init+0x2e8>)
 8001be4:	f001 fa50 	bl	8003088 <HAL_GPIO_Init>

  /*Configure GPIO pins : NCS_MEMS_SPI_Pin CSX_Pin OTG_FS_PSO_Pin */
  GPIO_InitStruct.Pin = NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin;
 8001be8:	2316      	movs	r3, #22
 8001bea:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001bec:	2301      	movs	r3, #1
 8001bee:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bf0:	2300      	movs	r3, #0
 8001bf2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bf4:	2300      	movs	r3, #0
 8001bf6:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001bf8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001bfc:	4619      	mov	r1, r3
 8001bfe:	485b      	ldr	r0, [pc, #364]	@ (8001d6c <MX_GPIO_Init+0x2e8>)
 8001c00:	f001 fa42 	bl	8003088 <HAL_GPIO_Init>

  /*Configure GPIO pins : B1_Pin MEMS_INT1_Pin MEMS_INT2_Pin TP_INT1_Pin */
  GPIO_InitStruct.Pin = B1_Pin|MEMS_INT1_Pin|MEMS_INT2_Pin|TP_INT1_Pin;
 8001c04:	f248 0307 	movw	r3, #32775	@ 0x8007
 8001c08:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001c0a:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8001c0e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c10:	2300      	movs	r3, #0
 8001c12:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c14:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001c18:	4619      	mov	r1, r3
 8001c1a:	4855      	ldr	r0, [pc, #340]	@ (8001d70 <MX_GPIO_Init+0x2ec>)
 8001c1c:	f001 fa34 	bl	8003088 <HAL_GPIO_Init>

  /*Configure GPIO pin : ACP_RST_Pin */
  GPIO_InitStruct.Pin = ACP_RST_Pin;
 8001c20:	2380      	movs	r3, #128	@ 0x80
 8001c22:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c24:	2301      	movs	r3, #1
 8001c26:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c28:	2300      	movs	r3, #0
 8001c2a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c2c:	2300      	movs	r3, #0
 8001c2e:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(ACP_RST_GPIO_Port, &GPIO_InitStruct);
 8001c30:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001c34:	4619      	mov	r1, r3
 8001c36:	484e      	ldr	r0, [pc, #312]	@ (8001d70 <MX_GPIO_Init+0x2ec>)
 8001c38:	f001 fa26 	bl	8003088 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OC_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OC_Pin;
 8001c3c:	2320      	movs	r3, #32
 8001c3e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001c40:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8001c44:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c46:	2300      	movs	r3, #0
 8001c48:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(OTG_FS_OC_GPIO_Port, &GPIO_InitStruct);
 8001c4a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001c4e:	4619      	mov	r1, r3
 8001c50:	4846      	ldr	r0, [pc, #280]	@ (8001d6c <MX_GPIO_Init+0x2e8>)
 8001c52:	f001 fa19 	bl	8003088 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8001c56:	2304      	movs	r3, #4
 8001c58:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c5a:	2300      	movs	r3, #0
 8001c5c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c5e:	2300      	movs	r3, #0
 8001c60:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8001c62:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001c66:	4619      	mov	r1, r3
 8001c68:	4845      	ldr	r0, [pc, #276]	@ (8001d80 <MX_GPIO_Init+0x2fc>)
 8001c6a:	f001 fa0d 	bl	8003088 <HAL_GPIO_Init>

  /*Configure GPIO pins : A10_Pin A11_Pin BA0_Pin BA1_Pin
                           SDCLK_Pin SDNCAS_Pin */
  GPIO_InitStruct.Pin = A10_Pin|A11_Pin|BA0_Pin|BA1_Pin
 8001c6e:	f248 1333 	movw	r3, #33075	@ 0x8133
 8001c72:	627b      	str	r3, [r7, #36]	@ 0x24
                          |SDCLK_Pin|SDNCAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c74:	2302      	movs	r3, #2
 8001c76:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c78:	2300      	movs	r3, #0
 8001c7a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c7c:	2303      	movs	r3, #3
 8001c7e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001c80:	230c      	movs	r3, #12
 8001c82:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001c84:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001c88:	4619      	mov	r1, r3
 8001c8a:	483b      	ldr	r0, [pc, #236]	@ (8001d78 <MX_GPIO_Init+0x2f4>)
 8001c8c:	f001 f9fc 	bl	8003088 <HAL_GPIO_Init>

  /*Configure GPIO pins : D4_Pin D5_Pin D6_Pin D7_Pin
                           D8_Pin D9_Pin D10_Pin D11_Pin
                           D12_Pin NBL0_Pin NBL1_Pin */
  GPIO_InitStruct.Pin = D4_Pin|D5_Pin|D6_Pin|D7_Pin
 8001c90:	f64f 7383 	movw	r3, #65411	@ 0xff83
 8001c94:	627b      	str	r3, [r7, #36]	@ 0x24
                          |D8_Pin|D9_Pin|D10_Pin|D11_Pin
                          |D12_Pin|NBL0_Pin|NBL1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c96:	2302      	movs	r3, #2
 8001c98:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c9e:	2303      	movs	r3, #3
 8001ca0:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001ca2:	230c      	movs	r3, #12
 8001ca4:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001ca6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001caa:	4619      	mov	r1, r3
 8001cac:	4835      	ldr	r0, [pc, #212]	@ (8001d84 <MX_GPIO_Init+0x300>)
 8001cae:	f001 f9eb 	bl	8003088 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_HS_ID_Pin OTG_HS_DM_Pin OTG_HS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_HS_ID_Pin|OTG_HS_DM_Pin|OTG_HS_DP_Pin;
 8001cb2:	f44f 4350 	mov.w	r3, #53248	@ 0xd000
 8001cb6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cb8:	2302      	movs	r3, #2
 8001cba:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cbc:	2300      	movs	r3, #0
 8001cbe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cc0:	2300      	movs	r3, #0
 8001cc2:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 8001cc4:	230c      	movs	r3, #12
 8001cc6:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001cc8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001ccc:	4619      	mov	r1, r3
 8001cce:	482c      	ldr	r0, [pc, #176]	@ (8001d80 <MX_GPIO_Init+0x2fc>)
 8001cd0:	f001 f9da 	bl	8003088 <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_HS_Pin */
  GPIO_InitStruct.Pin = VBUS_HS_Pin;
 8001cd4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001cd8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001cda:	2300      	movs	r3, #0
 8001cdc:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cde:	2300      	movs	r3, #0
 8001ce0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(VBUS_HS_GPIO_Port, &GPIO_InitStruct);
 8001ce2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001ce6:	4619      	mov	r1, r3
 8001ce8:	4825      	ldr	r0, [pc, #148]	@ (8001d80 <MX_GPIO_Init+0x2fc>)
 8001cea:	f001 f9cd 	bl	8003088 <HAL_GPIO_Init>

  /*Configure GPIO pins : D13_Pin D14_Pin D15_Pin D0_Pin
                           D1_Pin D2_Pin D3_Pin */
  GPIO_InitStruct.Pin = D13_Pin|D14_Pin|D15_Pin|D0_Pin
 8001cee:	f24c 7303 	movw	r3, #50947	@ 0xc703
 8001cf2:	627b      	str	r3, [r7, #36]	@ 0x24
                          |D1_Pin|D2_Pin|D3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cf4:	2302      	movs	r3, #2
 8001cf6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cf8:	2300      	movs	r3, #0
 8001cfa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cfc:	2303      	movs	r3, #3
 8001cfe:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001d00:	230c      	movs	r3, #12
 8001d02:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001d04:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001d08:	4619      	mov	r1, r3
 8001d0a:	481a      	ldr	r0, [pc, #104]	@ (8001d74 <MX_GPIO_Init+0x2f0>)
 8001d0c:	f001 f9bc 	bl	8003088 <HAL_GPIO_Init>

  /*Configure GPIO pin : TE_Pin */
  GPIO_InitStruct.Pin = TE_Pin;
 8001d10:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001d14:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001d16:	2300      	movs	r3, #0
 8001d18:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(TE_GPIO_Port, &GPIO_InitStruct);
 8001d1e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001d22:	4619      	mov	r1, r3
 8001d24:	4813      	ldr	r0, [pc, #76]	@ (8001d74 <MX_GPIO_Init+0x2f0>)
 8001d26:	f001 f9af 	bl	8003088 <HAL_GPIO_Init>

  /*Configure GPIO pins : RDX_Pin WRX_DCX_Pin */
  GPIO_InitStruct.Pin = RDX_Pin|WRX_DCX_Pin;
 8001d2a:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8001d2e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d30:	2301      	movs	r3, #1
 8001d32:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d34:	2300      	movs	r3, #0
 8001d36:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d38:	2300      	movs	r3, #0
 8001d3a:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001d3c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001d40:	4619      	mov	r1, r3
 8001d42:	480c      	ldr	r0, [pc, #48]	@ (8001d74 <MX_GPIO_Init+0x2f0>)
 8001d44:	f001 f9a0 	bl	8003088 <HAL_GPIO_Init>

  /*Configure GPIO pins : STLINK_RX_Pin STLINK_TX_Pin */
  GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8001d48:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8001d4c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d4e:	2302      	movs	r3, #2
 8001d50:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d52:	2300      	movs	r3, #0
 8001d54:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d56:	2303      	movs	r3, #3
 8001d58:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001d5a:	2307      	movs	r3, #7
 8001d5c:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d5e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001d62:	4619      	mov	r1, r3
 8001d64:	e010      	b.n	8001d88 <MX_GPIO_Init+0x304>
 8001d66:	bf00      	nop
 8001d68:	40023800 	.word	0x40023800
 8001d6c:	40020800 	.word	0x40020800
 8001d70:	40020000 	.word	0x40020000
 8001d74:	40020c00 	.word	0x40020c00
 8001d78:	40021800 	.word	0x40021800
 8001d7c:	40021400 	.word	0x40021400
 8001d80:	40020400 	.word	0x40020400
 8001d84:	40021000 	.word	0x40021000
 8001d88:	4812      	ldr	r0, [pc, #72]	@ (8001dd4 <MX_GPIO_Init+0x350>)
 8001d8a:	f001 f97d 	bl	8003088 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD4_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD4_Pin;
 8001d8e:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 8001d92:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d94:	2301      	movs	r3, #1
 8001d96:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d98:	2300      	movs	r3, #0
 8001d9a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d9c:	2300      	movs	r3, #0
 8001d9e:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001da0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001da4:	4619      	mov	r1, r3
 8001da6:	480c      	ldr	r0, [pc, #48]	@ (8001dd8 <MX_GPIO_Init+0x354>)
 8001da8:	f001 f96e 	bl	8003088 <HAL_GPIO_Init>

  /*Configure GPIO pins : SDCKE1_Pin SDNE1_Pin */
  GPIO_InitStruct.Pin = SDCKE1_Pin|SDNE1_Pin;
 8001dac:	2360      	movs	r3, #96	@ 0x60
 8001dae:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001db0:	2302      	movs	r3, #2
 8001db2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001db4:	2300      	movs	r3, #0
 8001db6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001db8:	2303      	movs	r3, #3
 8001dba:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001dbc:	230c      	movs	r3, #12
 8001dbe:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001dc0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001dc4:	4619      	mov	r1, r3
 8001dc6:	4805      	ldr	r0, [pc, #20]	@ (8001ddc <MX_GPIO_Init+0x358>)
 8001dc8:	f001 f95e 	bl	8003088 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001dcc:	bf00      	nop
 8001dce:	3738      	adds	r7, #56	@ 0x38
 8001dd0:	46bd      	mov	sp, r7
 8001dd2:	bd80      	pop	{r7, pc}
 8001dd4:	40020000 	.word	0x40020000
 8001dd8:	40021800 	.word	0x40021800
 8001ddc:	40020400 	.word	0x40020400

08001de0 <SystemClockOverride>:
    Error_Handler();
  }
}

void SystemClockOverride(void)
{
 8001de0:	b580      	push	{r7, lr}
 8001de2:	b092      	sub	sp, #72	@ 0x48
 8001de4:	af00      	add	r7, sp, #0
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_OscInitTypeDef RCC_OscInitStruct;

  __HAL_RCC_PWR_CLK_ENABLE();
 8001de6:	2300      	movs	r3, #0
 8001de8:	603b      	str	r3, [r7, #0]
 8001dea:	4b1c      	ldr	r3, [pc, #112]	@ (8001e5c <SystemClockOverride+0x7c>)
 8001dec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dee:	4a1b      	ldr	r2, [pc, #108]	@ (8001e5c <SystemClockOverride+0x7c>)
 8001df0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001df4:	6413      	str	r3, [r2, #64]	@ 0x40
 8001df6:	4b19      	ldr	r3, [pc, #100]	@ (8001e5c <SystemClockOverride+0x7c>)
 8001df8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dfa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001dfe:	603b      	str	r3, [r7, #0]
 8001e00:	683b      	ldr	r3, [r7, #0]

  // __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1); // not needed, power scaling consumption for when not running at max freq.

  /* Enable HSE Osc and activate PLL with HSE source */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001e02:	2301      	movs	r3, #1
 8001e04:	607b      	str	r3, [r7, #4]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001e06:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001e0a:	60bb      	str	r3, [r7, #8]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001e0c:	2302      	movs	r3, #2
 8001e0e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001e10:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001e14:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001e16:	2308      	movs	r3, #8
 8001e18:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001e1a:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8001e1e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001e20:	2302      	movs	r3, #2
 8001e22:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001e24:	2307      	movs	r3, #7
 8001e26:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_RCC_OscConfig(&RCC_OscInitStruct);
 8001e28:	1d3b      	adds	r3, r7, #4
 8001e2a:	4618      	mov	r0, r3
 8001e2c:	f002 ff44 	bl	8004cb8 <HAL_RCC_OscConfig>

  /* Select PLL as system clock source and configure the HCLK, PCLK1 and PCLK2 clocks dividers */
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 8001e30:	230f      	movs	r3, #15
 8001e32:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001e34:	2302      	movs	r3, #2
 8001e36:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001e38:	2300      	movs	r3, #0
 8001e3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001e3c:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001e40:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001e42:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001e46:	647b      	str	r3, [r7, #68]	@ 0x44
  HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5);
 8001e48:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001e4c:	2105      	movs	r1, #5
 8001e4e:	4618      	mov	r0, r3
 8001e50:	f003 f9aa 	bl	80051a8 <HAL_RCC_ClockConfig>
}
 8001e54:	bf00      	nop
 8001e56:	3748      	adds	r7, #72	@ 0x48
 8001e58:	46bd      	mov	sp, r7
 8001e5a:	bd80      	pop	{r7, pc}
 8001e5c:	40023800 	.word	0x40023800

08001e60 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001e60:	b480      	push	{r7}
 8001e62:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001e64:	b672      	cpsid	i
}
 8001e66:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001e68:	bf00      	nop
 8001e6a:	e7fd      	b.n	8001e68 <Error_Handler+0x8>

08001e6c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	b082      	sub	sp, #8
 8001e70:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e72:	2300      	movs	r3, #0
 8001e74:	607b      	str	r3, [r7, #4]
 8001e76:	4b10      	ldr	r3, [pc, #64]	@ (8001eb8 <HAL_MspInit+0x4c>)
 8001e78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e7a:	4a0f      	ldr	r2, [pc, #60]	@ (8001eb8 <HAL_MspInit+0x4c>)
 8001e7c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001e80:	6453      	str	r3, [r2, #68]	@ 0x44
 8001e82:	4b0d      	ldr	r3, [pc, #52]	@ (8001eb8 <HAL_MspInit+0x4c>)
 8001e84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e86:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001e8a:	607b      	str	r3, [r7, #4]
 8001e8c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e8e:	2300      	movs	r3, #0
 8001e90:	603b      	str	r3, [r7, #0]
 8001e92:	4b09      	ldr	r3, [pc, #36]	@ (8001eb8 <HAL_MspInit+0x4c>)
 8001e94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e96:	4a08      	ldr	r2, [pc, #32]	@ (8001eb8 <HAL_MspInit+0x4c>)
 8001e98:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001e9c:	6413      	str	r3, [r2, #64]	@ 0x40
 8001e9e:	4b06      	ldr	r3, [pc, #24]	@ (8001eb8 <HAL_MspInit+0x4c>)
 8001ea0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ea2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ea6:	603b      	str	r3, [r7, #0]
 8001ea8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001eaa:	2007      	movs	r0, #7
 8001eac:	f001 f876 	bl	8002f9c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001eb0:	bf00      	nop
 8001eb2:	3708      	adds	r7, #8
 8001eb4:	46bd      	mov	sp, r7
 8001eb6:	bd80      	pop	{r7, pc}
 8001eb8:	40023800 	.word	0x40023800

08001ebc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	b08a      	sub	sp, #40	@ 0x28
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ec4:	f107 0314 	add.w	r3, r7, #20
 8001ec8:	2200      	movs	r2, #0
 8001eca:	601a      	str	r2, [r3, #0]
 8001ecc:	605a      	str	r2, [r3, #4]
 8001ece:	609a      	str	r2, [r3, #8]
 8001ed0:	60da      	str	r2, [r3, #12]
 8001ed2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	4a29      	ldr	r2, [pc, #164]	@ (8001f80 <HAL_I2C_MspInit+0xc4>)
 8001eda:	4293      	cmp	r3, r2
 8001edc:	d14b      	bne.n	8001f76 <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ede:	2300      	movs	r3, #0
 8001ee0:	613b      	str	r3, [r7, #16]
 8001ee2:	4b28      	ldr	r3, [pc, #160]	@ (8001f84 <HAL_I2C_MspInit+0xc8>)
 8001ee4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ee6:	4a27      	ldr	r2, [pc, #156]	@ (8001f84 <HAL_I2C_MspInit+0xc8>)
 8001ee8:	f043 0304 	orr.w	r3, r3, #4
 8001eec:	6313      	str	r3, [r2, #48]	@ 0x30
 8001eee:	4b25      	ldr	r3, [pc, #148]	@ (8001f84 <HAL_I2C_MspInit+0xc8>)
 8001ef0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ef2:	f003 0304 	and.w	r3, r3, #4
 8001ef6:	613b      	str	r3, [r7, #16]
 8001ef8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001efa:	2300      	movs	r3, #0
 8001efc:	60fb      	str	r3, [r7, #12]
 8001efe:	4b21      	ldr	r3, [pc, #132]	@ (8001f84 <HAL_I2C_MspInit+0xc8>)
 8001f00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f02:	4a20      	ldr	r2, [pc, #128]	@ (8001f84 <HAL_I2C_MspInit+0xc8>)
 8001f04:	f043 0301 	orr.w	r3, r3, #1
 8001f08:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f0a:	4b1e      	ldr	r3, [pc, #120]	@ (8001f84 <HAL_I2C_MspInit+0xc8>)
 8001f0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f0e:	f003 0301 	and.w	r3, r3, #1
 8001f12:	60fb      	str	r3, [r7, #12]
 8001f14:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 8001f16:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001f1a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001f1c:	2312      	movs	r3, #18
 8001f1e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f20:	2300      	movs	r3, #0
 8001f22:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f24:	2300      	movs	r3, #0
 8001f26:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001f28:	2304      	movs	r3, #4
 8001f2a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 8001f2c:	f107 0314 	add.w	r3, r7, #20
 8001f30:	4619      	mov	r1, r3
 8001f32:	4815      	ldr	r0, [pc, #84]	@ (8001f88 <HAL_I2C_MspInit+0xcc>)
 8001f34:	f001 f8a8 	bl	8003088 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 8001f38:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001f3c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001f3e:	2312      	movs	r3, #18
 8001f40:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f42:	2300      	movs	r3, #0
 8001f44:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f46:	2300      	movs	r3, #0
 8001f48:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001f4a:	2304      	movs	r3, #4
 8001f4c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 8001f4e:	f107 0314 	add.w	r3, r7, #20
 8001f52:	4619      	mov	r1, r3
 8001f54:	480d      	ldr	r0, [pc, #52]	@ (8001f8c <HAL_I2C_MspInit+0xd0>)
 8001f56:	f001 f897 	bl	8003088 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	60bb      	str	r3, [r7, #8]
 8001f5e:	4b09      	ldr	r3, [pc, #36]	@ (8001f84 <HAL_I2C_MspInit+0xc8>)
 8001f60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f62:	4a08      	ldr	r2, [pc, #32]	@ (8001f84 <HAL_I2C_MspInit+0xc8>)
 8001f64:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001f68:	6413      	str	r3, [r2, #64]	@ 0x40
 8001f6a:	4b06      	ldr	r3, [pc, #24]	@ (8001f84 <HAL_I2C_MspInit+0xc8>)
 8001f6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f6e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001f72:	60bb      	str	r3, [r7, #8]
 8001f74:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C3_MspInit 1 */

  }

}
 8001f76:	bf00      	nop
 8001f78:	3728      	adds	r7, #40	@ 0x28
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	bd80      	pop	{r7, pc}
 8001f7e:	bf00      	nop
 8001f80:	40005c00 	.word	0x40005c00
 8001f84:	40023800 	.word	0x40023800
 8001f88:	40020800 	.word	0x40020800
 8001f8c:	40020000 	.word	0x40020000

08001f90 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8001f90:	b580      	push	{r7, lr}
 8001f92:	b09a      	sub	sp, #104	@ 0x68
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f98:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	601a      	str	r2, [r3, #0]
 8001fa0:	605a      	str	r2, [r3, #4]
 8001fa2:	609a      	str	r2, [r3, #8]
 8001fa4:	60da      	str	r2, [r3, #12]
 8001fa6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001fa8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001fac:	2230      	movs	r2, #48	@ 0x30
 8001fae:	2100      	movs	r1, #0
 8001fb0:	4618      	mov	r0, r3
 8001fb2:	f004 fb51 	bl	8006658 <memset>
  if(hltdc->Instance==LTDC)
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	4a81      	ldr	r2, [pc, #516]	@ (80021c0 <HAL_LTDC_MspInit+0x230>)
 8001fbc:	4293      	cmp	r3, r2
 8001fbe:	f040 80fa 	bne.w	80021b6 <HAL_LTDC_MspInit+0x226>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8001fc2:	2308      	movs	r3, #8
 8001fc4:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 50;
 8001fc6:	2332      	movs	r3, #50	@ 0x32
 8001fc8:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 8001fca:	2302      	movs	r3, #2
 8001fcc:	63fb      	str	r3, [r7, #60]	@ 0x3c
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 8001fce:	2300      	movs	r3, #0
 8001fd0:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001fd2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001fd6:	4618      	mov	r0, r3
 8001fd8:	f003 faf2 	bl	80055c0 <HAL_RCCEx_PeriphCLKConfig>
 8001fdc:	4603      	mov	r3, r0
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d001      	beq.n	8001fe6 <HAL_LTDC_MspInit+0x56>
    {
      Error_Handler();
 8001fe2:	f7ff ff3d 	bl	8001e60 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	623b      	str	r3, [r7, #32]
 8001fea:	4b76      	ldr	r3, [pc, #472]	@ (80021c4 <HAL_LTDC_MspInit+0x234>)
 8001fec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001fee:	4a75      	ldr	r2, [pc, #468]	@ (80021c4 <HAL_LTDC_MspInit+0x234>)
 8001ff0:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8001ff4:	6453      	str	r3, [r2, #68]	@ 0x44
 8001ff6:	4b73      	ldr	r3, [pc, #460]	@ (80021c4 <HAL_LTDC_MspInit+0x234>)
 8001ff8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ffa:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001ffe:	623b      	str	r3, [r7, #32]
 8002000:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002002:	2300      	movs	r3, #0
 8002004:	61fb      	str	r3, [r7, #28]
 8002006:	4b6f      	ldr	r3, [pc, #444]	@ (80021c4 <HAL_LTDC_MspInit+0x234>)
 8002008:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800200a:	4a6e      	ldr	r2, [pc, #440]	@ (80021c4 <HAL_LTDC_MspInit+0x234>)
 800200c:	f043 0320 	orr.w	r3, r3, #32
 8002010:	6313      	str	r3, [r2, #48]	@ 0x30
 8002012:	4b6c      	ldr	r3, [pc, #432]	@ (80021c4 <HAL_LTDC_MspInit+0x234>)
 8002014:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002016:	f003 0320 	and.w	r3, r3, #32
 800201a:	61fb      	str	r3, [r7, #28]
 800201c:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800201e:	2300      	movs	r3, #0
 8002020:	61bb      	str	r3, [r7, #24]
 8002022:	4b68      	ldr	r3, [pc, #416]	@ (80021c4 <HAL_LTDC_MspInit+0x234>)
 8002024:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002026:	4a67      	ldr	r2, [pc, #412]	@ (80021c4 <HAL_LTDC_MspInit+0x234>)
 8002028:	f043 0301 	orr.w	r3, r3, #1
 800202c:	6313      	str	r3, [r2, #48]	@ 0x30
 800202e:	4b65      	ldr	r3, [pc, #404]	@ (80021c4 <HAL_LTDC_MspInit+0x234>)
 8002030:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002032:	f003 0301 	and.w	r3, r3, #1
 8002036:	61bb      	str	r3, [r7, #24]
 8002038:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800203a:	2300      	movs	r3, #0
 800203c:	617b      	str	r3, [r7, #20]
 800203e:	4b61      	ldr	r3, [pc, #388]	@ (80021c4 <HAL_LTDC_MspInit+0x234>)
 8002040:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002042:	4a60      	ldr	r2, [pc, #384]	@ (80021c4 <HAL_LTDC_MspInit+0x234>)
 8002044:	f043 0302 	orr.w	r3, r3, #2
 8002048:	6313      	str	r3, [r2, #48]	@ 0x30
 800204a:	4b5e      	ldr	r3, [pc, #376]	@ (80021c4 <HAL_LTDC_MspInit+0x234>)
 800204c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800204e:	f003 0302 	and.w	r3, r3, #2
 8002052:	617b      	str	r3, [r7, #20]
 8002054:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8002056:	2300      	movs	r3, #0
 8002058:	613b      	str	r3, [r7, #16]
 800205a:	4b5a      	ldr	r3, [pc, #360]	@ (80021c4 <HAL_LTDC_MspInit+0x234>)
 800205c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800205e:	4a59      	ldr	r2, [pc, #356]	@ (80021c4 <HAL_LTDC_MspInit+0x234>)
 8002060:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002064:	6313      	str	r3, [r2, #48]	@ 0x30
 8002066:	4b57      	ldr	r3, [pc, #348]	@ (80021c4 <HAL_LTDC_MspInit+0x234>)
 8002068:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800206a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800206e:	613b      	str	r3, [r7, #16]
 8002070:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002072:	2300      	movs	r3, #0
 8002074:	60fb      	str	r3, [r7, #12]
 8002076:	4b53      	ldr	r3, [pc, #332]	@ (80021c4 <HAL_LTDC_MspInit+0x234>)
 8002078:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800207a:	4a52      	ldr	r2, [pc, #328]	@ (80021c4 <HAL_LTDC_MspInit+0x234>)
 800207c:	f043 0304 	orr.w	r3, r3, #4
 8002080:	6313      	str	r3, [r2, #48]	@ 0x30
 8002082:	4b50      	ldr	r3, [pc, #320]	@ (80021c4 <HAL_LTDC_MspInit+0x234>)
 8002084:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002086:	f003 0304 	and.w	r3, r3, #4
 800208a:	60fb      	str	r3, [r7, #12]
 800208c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800208e:	2300      	movs	r3, #0
 8002090:	60bb      	str	r3, [r7, #8]
 8002092:	4b4c      	ldr	r3, [pc, #304]	@ (80021c4 <HAL_LTDC_MspInit+0x234>)
 8002094:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002096:	4a4b      	ldr	r2, [pc, #300]	@ (80021c4 <HAL_LTDC_MspInit+0x234>)
 8002098:	f043 0308 	orr.w	r3, r3, #8
 800209c:	6313      	str	r3, [r2, #48]	@ 0x30
 800209e:	4b49      	ldr	r3, [pc, #292]	@ (80021c4 <HAL_LTDC_MspInit+0x234>)
 80020a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020a2:	f003 0308 	and.w	r3, r3, #8
 80020a6:	60bb      	str	r3, [r7, #8]
 80020a8:	68bb      	ldr	r3, [r7, #8]
    PG11     ------> LTDC_B3
    PG12     ------> LTDC_B4
    PB8     ------> LTDC_B6
    PB9     ------> LTDC_B7
    */
    GPIO_InitStruct.Pin = ENABLE_Pin;
 80020aa:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80020ae:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020b0:	2302      	movs	r3, #2
 80020b2:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020b4:	2300      	movs	r3, #0
 80020b6:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020b8:	2300      	movs	r3, #0
 80020ba:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80020bc:	230e      	movs	r3, #14
 80020be:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 80020c0:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80020c4:	4619      	mov	r1, r3
 80020c6:	4840      	ldr	r0, [pc, #256]	@ (80021c8 <HAL_LTDC_MspInit+0x238>)
 80020c8:	f000 ffde 	bl	8003088 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = B5_Pin|VSYNC_Pin|G2_Pin|R4_Pin
 80020cc:	f641 0358 	movw	r3, #6232	@ 0x1858
 80020d0:	657b      	str	r3, [r7, #84]	@ 0x54
                          |R5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020d2:	2302      	movs	r3, #2
 80020d4:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020d6:	2300      	movs	r3, #0
 80020d8:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020da:	2300      	movs	r3, #0
 80020dc:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80020de:	230e      	movs	r3, #14
 80020e0:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020e2:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80020e6:	4619      	mov	r1, r3
 80020e8:	4838      	ldr	r0, [pc, #224]	@ (80021cc <HAL_LTDC_MspInit+0x23c>)
 80020ea:	f000 ffcd 	bl	8003088 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R3_Pin|R6_Pin;
 80020ee:	2303      	movs	r3, #3
 80020f0:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020f2:	2302      	movs	r3, #2
 80020f4:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020f6:	2300      	movs	r3, #0
 80020f8:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020fa:	2300      	movs	r3, #0
 80020fc:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 80020fe:	2309      	movs	r3, #9
 8002100:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002102:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002106:	4619      	mov	r1, r3
 8002108:	4831      	ldr	r0, [pc, #196]	@ (80021d0 <HAL_LTDC_MspInit+0x240>)
 800210a:	f000 ffbd 	bl	8003088 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G4_Pin|G5_Pin|B6_Pin|B7_Pin;
 800210e:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 8002112:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002114:	2302      	movs	r3, #2
 8002116:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002118:	2300      	movs	r3, #0
 800211a:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800211c:	2300      	movs	r3, #0
 800211e:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002120:	230e      	movs	r3, #14
 8002122:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002124:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002128:	4619      	mov	r1, r3
 800212a:	4829      	ldr	r0, [pc, #164]	@ (80021d0 <HAL_LTDC_MspInit+0x240>)
 800212c:	f000 ffac 	bl	8003088 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R7_Pin|DOTCLK_Pin|B3_Pin;
 8002130:	f44f 630c 	mov.w	r3, #2240	@ 0x8c0
 8002134:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002136:	2302      	movs	r3, #2
 8002138:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800213a:	2300      	movs	r3, #0
 800213c:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800213e:	2300      	movs	r3, #0
 8002140:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002142:	230e      	movs	r3, #14
 8002144:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002146:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800214a:	4619      	mov	r1, r3
 800214c:	4821      	ldr	r0, [pc, #132]	@ (80021d4 <HAL_LTDC_MspInit+0x244>)
 800214e:	f000 ff9b 	bl	8003088 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = HSYNC_Pin|G6_Pin|R2_Pin;
 8002152:	f44f 6398 	mov.w	r3, #1216	@ 0x4c0
 8002156:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002158:	2302      	movs	r3, #2
 800215a:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800215c:	2300      	movs	r3, #0
 800215e:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002160:	2300      	movs	r3, #0
 8002162:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002164:	230e      	movs	r3, #14
 8002166:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002168:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800216c:	4619      	mov	r1, r3
 800216e:	481a      	ldr	r0, [pc, #104]	@ (80021d8 <HAL_LTDC_MspInit+0x248>)
 8002170:	f000 ff8a 	bl	8003088 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G7_Pin|B2_Pin;
 8002174:	2348      	movs	r3, #72	@ 0x48
 8002176:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002178:	2302      	movs	r3, #2
 800217a:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800217c:	2300      	movs	r3, #0
 800217e:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002180:	2300      	movs	r3, #0
 8002182:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002184:	230e      	movs	r3, #14
 8002186:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002188:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800218c:	4619      	mov	r1, r3
 800218e:	4813      	ldr	r0, [pc, #76]	@ (80021dc <HAL_LTDC_MspInit+0x24c>)
 8002190:	f000 ff7a 	bl	8003088 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G3_Pin|B4_Pin;
 8002194:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8002198:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800219a:	2302      	movs	r3, #2
 800219c:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800219e:	2300      	movs	r3, #0
 80021a0:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021a2:	2300      	movs	r3, #0
 80021a4:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 80021a6:	2309      	movs	r3, #9
 80021a8:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80021aa:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80021ae:	4619      	mov	r1, r3
 80021b0:	4808      	ldr	r0, [pc, #32]	@ (80021d4 <HAL_LTDC_MspInit+0x244>)
 80021b2:	f000 ff69 	bl	8003088 <HAL_GPIO_Init>

  /* USER CODE END LTDC_MspInit 1 */

  }

}
 80021b6:	bf00      	nop
 80021b8:	3768      	adds	r7, #104	@ 0x68
 80021ba:	46bd      	mov	sp, r7
 80021bc:	bd80      	pop	{r7, pc}
 80021be:	bf00      	nop
 80021c0:	40016800 	.word	0x40016800
 80021c4:	40023800 	.word	0x40023800
 80021c8:	40021400 	.word	0x40021400
 80021cc:	40020000 	.word	0x40020000
 80021d0:	40020400 	.word	0x40020400
 80021d4:	40021800 	.word	0x40021800
 80021d8:	40020800 	.word	0x40020800
 80021dc:	40020c00 	.word	0x40020c00

080021e0 <HAL_RNG_MspInit>:
* This function configures the hardware resources used in this example
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 80021e0:	b480      	push	{r7}
 80021e2:	b085      	sub	sp, #20
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	6078      	str	r0, [r7, #4]
  if(hrng->Instance==RNG)
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	4a0b      	ldr	r2, [pc, #44]	@ (800221c <HAL_RNG_MspInit+0x3c>)
 80021ee:	4293      	cmp	r3, r2
 80021f0:	d10d      	bne.n	800220e <HAL_RNG_MspInit+0x2e>
  {
  /* USER CODE BEGIN RNG_MspInit 0 */

  /* USER CODE END RNG_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 80021f2:	2300      	movs	r3, #0
 80021f4:	60fb      	str	r3, [r7, #12]
 80021f6:	4b0a      	ldr	r3, [pc, #40]	@ (8002220 <HAL_RNG_MspInit+0x40>)
 80021f8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80021fa:	4a09      	ldr	r2, [pc, #36]	@ (8002220 <HAL_RNG_MspInit+0x40>)
 80021fc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002200:	6353      	str	r3, [r2, #52]	@ 0x34
 8002202:	4b07      	ldr	r3, [pc, #28]	@ (8002220 <HAL_RNG_MspInit+0x40>)
 8002204:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002206:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800220a:	60fb      	str	r3, [r7, #12]
 800220c:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END RNG_MspInit 1 */

  }

}
 800220e:	bf00      	nop
 8002210:	3714      	adds	r7, #20
 8002212:	46bd      	mov	sp, r7
 8002214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002218:	4770      	bx	lr
 800221a:	bf00      	nop
 800221c:	50060800 	.word	0x50060800
 8002220:	40023800 	.word	0x40023800

08002224 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002224:	b580      	push	{r7, lr}
 8002226:	b08a      	sub	sp, #40	@ 0x28
 8002228:	af00      	add	r7, sp, #0
 800222a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800222c:	f107 0314 	add.w	r3, r7, #20
 8002230:	2200      	movs	r2, #0
 8002232:	601a      	str	r2, [r3, #0]
 8002234:	605a      	str	r2, [r3, #4]
 8002236:	609a      	str	r2, [r3, #8]
 8002238:	60da      	str	r2, [r3, #12]
 800223a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI5)
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	4a19      	ldr	r2, [pc, #100]	@ (80022a8 <HAL_SPI_MspInit+0x84>)
 8002242:	4293      	cmp	r3, r2
 8002244:	d12c      	bne.n	80022a0 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 8002246:	2300      	movs	r3, #0
 8002248:	613b      	str	r3, [r7, #16]
 800224a:	4b18      	ldr	r3, [pc, #96]	@ (80022ac <HAL_SPI_MspInit+0x88>)
 800224c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800224e:	4a17      	ldr	r2, [pc, #92]	@ (80022ac <HAL_SPI_MspInit+0x88>)
 8002250:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002254:	6453      	str	r3, [r2, #68]	@ 0x44
 8002256:	4b15      	ldr	r3, [pc, #84]	@ (80022ac <HAL_SPI_MspInit+0x88>)
 8002258:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800225a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800225e:	613b      	str	r3, [r7, #16]
 8002260:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002262:	2300      	movs	r3, #0
 8002264:	60fb      	str	r3, [r7, #12]
 8002266:	4b11      	ldr	r3, [pc, #68]	@ (80022ac <HAL_SPI_MspInit+0x88>)
 8002268:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800226a:	4a10      	ldr	r2, [pc, #64]	@ (80022ac <HAL_SPI_MspInit+0x88>)
 800226c:	f043 0320 	orr.w	r3, r3, #32
 8002270:	6313      	str	r3, [r2, #48]	@ 0x30
 8002272:	4b0e      	ldr	r3, [pc, #56]	@ (80022ac <HAL_SPI_MspInit+0x88>)
 8002274:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002276:	f003 0320 	and.w	r3, r3, #32
 800227a:	60fb      	str	r3, [r7, #12]
 800227c:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin;
 800227e:	f44f 7360 	mov.w	r3, #896	@ 0x380
 8002282:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002284:	2302      	movs	r3, #2
 8002286:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002288:	2300      	movs	r3, #0
 800228a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800228c:	2300      	movs	r3, #0
 800228e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8002290:	2305      	movs	r3, #5
 8002292:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002294:	f107 0314 	add.w	r3, r7, #20
 8002298:	4619      	mov	r1, r3
 800229a:	4805      	ldr	r0, [pc, #20]	@ (80022b0 <HAL_SPI_MspInit+0x8c>)
 800229c:	f000 fef4 	bl	8003088 <HAL_GPIO_Init>

  /* USER CODE END SPI5_MspInit 1 */

  }

}
 80022a0:	bf00      	nop
 80022a2:	3728      	adds	r7, #40	@ 0x28
 80022a4:	46bd      	mov	sp, r7
 80022a6:	bd80      	pop	{r7, pc}
 80022a8:	40015000 	.word	0x40015000
 80022ac:	40023800 	.word	0x40023800
 80022b0:	40021400 	.word	0x40021400

080022b4 <HAL_SPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspDeInit(SPI_HandleTypeDef* hspi)
{
 80022b4:	b580      	push	{r7, lr}
 80022b6:	b082      	sub	sp, #8
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	6078      	str	r0, [r7, #4]
  if(hspi->Instance==SPI5)
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	4a08      	ldr	r2, [pc, #32]	@ (80022e4 <HAL_SPI_MspDeInit+0x30>)
 80022c2:	4293      	cmp	r3, r2
 80022c4:	d10a      	bne.n	80022dc <HAL_SPI_MspDeInit+0x28>
  {
  /* USER CODE BEGIN SPI5_MspDeInit 0 */

  /* USER CODE END SPI5_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI5_CLK_DISABLE();
 80022c6:	4b08      	ldr	r3, [pc, #32]	@ (80022e8 <HAL_SPI_MspDeInit+0x34>)
 80022c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022ca:	4a07      	ldr	r2, [pc, #28]	@ (80022e8 <HAL_SPI_MspDeInit+0x34>)
 80022cc:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80022d0:	6453      	str	r3, [r2, #68]	@ 0x44
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    HAL_GPIO_DeInit(GPIOF, SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin);
 80022d2:	f44f 7160 	mov.w	r1, #896	@ 0x380
 80022d6:	4805      	ldr	r0, [pc, #20]	@ (80022ec <HAL_SPI_MspDeInit+0x38>)
 80022d8:	f001 f882 	bl	80033e0 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN SPI5_MspDeInit 1 */

  /* USER CODE END SPI5_MspDeInit 1 */
  }

}
 80022dc:	bf00      	nop
 80022de:	3708      	adds	r7, #8
 80022e0:	46bd      	mov	sp, r7
 80022e2:	bd80      	pop	{r7, pc}
 80022e4:	40015000 	.word	0x40015000
 80022e8:	40023800 	.word	0x40023800
 80022ec:	40021400 	.word	0x40021400

080022f0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80022f0:	b480      	push	{r7}
 80022f2:	b085      	sub	sp, #20
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM7)
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	4a0b      	ldr	r2, [pc, #44]	@ (800232c <HAL_TIM_Base_MspInit+0x3c>)
 80022fe:	4293      	cmp	r3, r2
 8002300:	d10d      	bne.n	800231e <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 8002302:	2300      	movs	r3, #0
 8002304:	60fb      	str	r3, [r7, #12]
 8002306:	4b0a      	ldr	r3, [pc, #40]	@ (8002330 <HAL_TIM_Base_MspInit+0x40>)
 8002308:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800230a:	4a09      	ldr	r2, [pc, #36]	@ (8002330 <HAL_TIM_Base_MspInit+0x40>)
 800230c:	f043 0320 	orr.w	r3, r3, #32
 8002310:	6413      	str	r3, [r2, #64]	@ 0x40
 8002312:	4b07      	ldr	r3, [pc, #28]	@ (8002330 <HAL_TIM_Base_MspInit+0x40>)
 8002314:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002316:	f003 0320 	and.w	r3, r3, #32
 800231a:	60fb      	str	r3, [r7, #12]
 800231c:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM7_MspInit 1 */

  }

}
 800231e:	bf00      	nop
 8002320:	3714      	adds	r7, #20
 8002322:	46bd      	mov	sp, r7
 8002324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002328:	4770      	bx	lr
 800232a:	bf00      	nop
 800232c:	40001400 	.word	0x40001400
 8002330:	40023800 	.word	0x40023800

08002334 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002334:	b480      	push	{r7}
 8002336:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002338:	bf00      	nop
 800233a:	e7fd      	b.n	8002338 <NMI_Handler+0x4>

0800233c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800233c:	b480      	push	{r7}
 800233e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002340:	bf00      	nop
 8002342:	e7fd      	b.n	8002340 <HardFault_Handler+0x4>

08002344 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002344:	b480      	push	{r7}
 8002346:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002348:	bf00      	nop
 800234a:	e7fd      	b.n	8002348 <MemManage_Handler+0x4>

0800234c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800234c:	b480      	push	{r7}
 800234e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002350:	bf00      	nop
 8002352:	e7fd      	b.n	8002350 <BusFault_Handler+0x4>

08002354 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002354:	b480      	push	{r7}
 8002356:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002358:	bf00      	nop
 800235a:	e7fd      	b.n	8002358 <UsageFault_Handler+0x4>

0800235c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800235c:	b480      	push	{r7}
 800235e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002360:	bf00      	nop
 8002362:	46bd      	mov	sp, r7
 8002364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002368:	4770      	bx	lr

0800236a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800236a:	b480      	push	{r7}
 800236c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800236e:	bf00      	nop
 8002370:	46bd      	mov	sp, r7
 8002372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002376:	4770      	bx	lr

08002378 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002378:	b480      	push	{r7}
 800237a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800237c:	bf00      	nop
 800237e:	46bd      	mov	sp, r7
 8002380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002384:	4770      	bx	lr

08002386 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002386:	b580      	push	{r7, lr}
 8002388:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800238a:	f000 fcb1 	bl	8002cf0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800238e:	bf00      	nop
 8002390:	bd80      	pop	{r7, pc}
	...

08002394 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002394:	b480      	push	{r7}
 8002396:	b083      	sub	sp, #12
 8002398:	af00      	add	r7, sp, #0
 800239a:	4603      	mov	r3, r0
 800239c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800239e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	db0b      	blt.n	80023be <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80023a6:	79fb      	ldrb	r3, [r7, #7]
 80023a8:	f003 021f 	and.w	r2, r3, #31
 80023ac:	4907      	ldr	r1, [pc, #28]	@ (80023cc <__NVIC_EnableIRQ+0x38>)
 80023ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023b2:	095b      	lsrs	r3, r3, #5
 80023b4:	2001      	movs	r0, #1
 80023b6:	fa00 f202 	lsl.w	r2, r0, r2
 80023ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80023be:	bf00      	nop
 80023c0:	370c      	adds	r7, #12
 80023c2:	46bd      	mov	sp, r7
 80023c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c8:	4770      	bx	lr
 80023ca:	bf00      	nop
 80023cc:	e000e100 	.word	0xe000e100

080023d0 <STMPE811_Init>:

#define DEFAULT_TESTING_TIMEOUT 250000

/* The below function was created by Tilen MAJERLE but modified by Xavion */
STMPE811_State_t STMPE811_Init(void)
{
 80023d0:	b580      	push	{r7, lr}
 80023d2:	b082      	sub	sp, #8
 80023d4:	af00      	add	r7, sp, #0

    // Initalize any other GPIO neeeded
    //stmpe811_MspInit(); // Currently we will be just using the HAL GPIO Init fuction to initialize GPIOs..

    // Initialze I2C3 ports 
    I2C3_MspInit();
 80023d6:	f000 f9dd 	bl	8002794 <I2C3_MspInit>
    /* Initialize I2C */
    I2C3_Init();
 80023da:	f000 f99d 	bl	8002718 <I2C3_Init>

    /* Reset */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL1, 0x02);
 80023de:	2202      	movs	r2, #2
 80023e0:	2103      	movs	r1, #3
 80023e2:	2082      	movs	r0, #130	@ 0x82
 80023e4:	f000 fa2a 	bl	800283c <I2C3_Write>
    HAL_Delay(5);
 80023e8:	2005      	movs	r0, #5
 80023ea:	f000 fca1 	bl	8002d30 <HAL_Delay>
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL1, 0x00);
 80023ee:	2200      	movs	r2, #0
 80023f0:	2103      	movs	r1, #3
 80023f2:	2082      	movs	r0, #130	@ 0x82
 80023f4:	f000 fa22 	bl	800283c <I2C3_Write>
    HAL_Delay(2);
 80023f8:	2002      	movs	r0, #2
 80023fa:	f000 fc99 	bl	8002d30 <HAL_Delay>

    /* Check for STMPE811 Connected */
    uint16_t dataRecieved;
    I2C3_MulitByteRead(STMPE811_ADDRESS, STMPE811_CHIP_ID, (uint8_t * )&dataRecieved, TWOBYTE); // Need to change
 80023fe:	1cba      	adds	r2, r7, #2
 8002400:	2302      	movs	r3, #2
 8002402:	2100      	movs	r1, #0
 8002404:	2082      	movs	r0, #130	@ 0x82
 8002406:	f000 fa69 	bl	80028dc <I2C3_MulitByteRead>
    // Flip bytes
    uint16_t chipID = (dataRecieved << 8);
 800240a:	887b      	ldrh	r3, [r7, #2]
 800240c:	021b      	lsls	r3, r3, #8
 800240e:	80fb      	strh	r3, [r7, #6]
    chipID |= ((dataRecieved & 0xFF00) >> 8);
 8002410:	887b      	ldrh	r3, [r7, #2]
 8002412:	0a1b      	lsrs	r3, r3, #8
 8002414:	b29a      	uxth	r2, r3
 8002416:	88fb      	ldrh	r3, [r7, #6]
 8002418:	4313      	orrs	r3, r2
 800241a:	80fb      	strh	r3, [r7, #6]

    if (chipID != STMPE811_CHIP_ID_VALUE) {
 800241c:	88fb      	ldrh	r3, [r7, #6]
 800241e:	f640 0211 	movw	r2, #2065	@ 0x811
 8002422:	4293      	cmp	r3, r2
 8002424:	d001      	beq.n	800242a <STMPE811_Init+0x5a>
    	return STMPE811_State_Error;
 8002426:	2303      	movs	r3, #3
 8002428:	e095      	b.n	8002556 <STMPE811_Init+0x186>
    }

    /* Reset */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL1, 0x02);
 800242a:	2202      	movs	r2, #2
 800242c:	2103      	movs	r1, #3
 800242e:	2082      	movs	r0, #130	@ 0x82
 8002430:	f000 fa04 	bl	800283c <I2C3_Write>
    HAL_Delay(5);
 8002434:	2005      	movs	r0, #5
 8002436:	f000 fc7b 	bl	8002d30 <HAL_Delay>
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL1, 0x00);
 800243a:	2200      	movs	r2, #0
 800243c:	2103      	movs	r1, #3
 800243e:	2082      	movs	r0, #130	@ 0x82
 8002440:	f000 f9fc 	bl	800283c <I2C3_Write>
    HAL_Delay(2);
 8002444:	2002      	movs	r0, #2
 8002446:	f000 fc73 	bl	8002d30 <HAL_Delay>

    /* Get the current register value */
    mode = STMPE811_Read(STMPE811_SYS_CTRL2);
 800244a:	2004      	movs	r0, #4
 800244c:	f000 f887 	bl	800255e <STMPE811_Read>
 8002450:	4603      	mov	r3, r0
 8002452:	717b      	strb	r3, [r7, #5]
    mode &= ~(0x01);
 8002454:	797b      	ldrb	r3, [r7, #5]
 8002456:	f023 0301 	bic.w	r3, r3, #1
 800245a:	717b      	strb	r3, [r7, #5]
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL2, mode);
 800245c:	797b      	ldrb	r3, [r7, #5]
 800245e:	461a      	mov	r2, r3
 8002460:	2104      	movs	r1, #4
 8002462:	2082      	movs	r0, #130	@ 0x82
 8002464:	f000 f9ea 	bl	800283c <I2C3_Write>
    mode = STMPE811_Read(STMPE811_SYS_CTRL2);
 8002468:	2004      	movs	r0, #4
 800246a:	f000 f878 	bl	800255e <STMPE811_Read>
 800246e:	4603      	mov	r3, r0
 8002470:	717b      	strb	r3, [r7, #5]
    mode &= ~(0x02);
 8002472:	797b      	ldrb	r3, [r7, #5]
 8002474:	f023 0302 	bic.w	r3, r3, #2
 8002478:	717b      	strb	r3, [r7, #5]
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL2, mode);
 800247a:	797b      	ldrb	r3, [r7, #5]
 800247c:	461a      	mov	r2, r3
 800247e:	2104      	movs	r1, #4
 8002480:	2082      	movs	r0, #130	@ 0x82
 8002482:	f000 f9db 	bl	800283c <I2C3_Write>

    /* Select Sample Time, bit number and ADC Reference */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_ADC_CTRL1, 0x49);
 8002486:	2249      	movs	r2, #73	@ 0x49
 8002488:	2120      	movs	r1, #32
 800248a:	2082      	movs	r0, #130	@ 0x82
 800248c:	f000 f9d6 	bl	800283c <I2C3_Write>

    /* Wait for 2 ms */
    HAL_Delay(2);
 8002490:	2002      	movs	r0, #2
 8002492:	f000 fc4d 	bl	8002d30 <HAL_Delay>

    /* Select the ADC clock speed: 3.25 MHz */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_ADC_CTRL2, 0x01);
 8002496:	2201      	movs	r2, #1
 8002498:	2121      	movs	r1, #33	@ 0x21
 800249a:	2082      	movs	r0, #130	@ 0x82
 800249c:	f000 f9ce 	bl	800283c <I2C3_Write>

    /* Select TSC pins in non default mode */
    mode = STMPE811_Read(STMPE811_GPIO_AF);
 80024a0:	2017      	movs	r0, #23
 80024a2:	f000 f85c 	bl	800255e <STMPE811_Read>
 80024a6:	4603      	mov	r3, r0
 80024a8:	717b      	strb	r3, [r7, #5]
    mode |= 0x1E;
 80024aa:	797b      	ldrb	r3, [r7, #5]
 80024ac:	f043 031e 	orr.w	r3, r3, #30
 80024b0:	717b      	strb	r3, [r7, #5]
    I2C3_Write(STMPE811_ADDRESS, STMPE811_GPIO_AF, mode);
 80024b2:	797b      	ldrb	r3, [r7, #5]
 80024b4:	461a      	mov	r2, r3
 80024b6:	2117      	movs	r1, #23
 80024b8:	2082      	movs	r0, #130	@ 0x82
 80024ba:	f000 f9bf 	bl	800283c <I2C3_Write>
    /* Configuration:
    - Touch average control    : 4 samples
    - Touch delay time         : 500 uS
    - Panel driver setting time: 500 uS
    */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_TSC_CFG, 0x9A);
 80024be:	229a      	movs	r2, #154	@ 0x9a
 80024c0:	2141      	movs	r1, #65	@ 0x41
 80024c2:	2082      	movs	r0, #130	@ 0x82
 80024c4:	f000 f9ba 	bl	800283c <I2C3_Write>

    /* Configure the Touch FIFO threshold: single point reading */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_FIFO_TH, 0x01);
 80024c8:	2201      	movs	r2, #1
 80024ca:	214a      	movs	r1, #74	@ 0x4a
 80024cc:	2082      	movs	r0, #130	@ 0x82
 80024ce:	f000 f9b5 	bl	800283c <I2C3_Write>

    /* Clear the FIFO memory content. */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_FIFO_STA, 0x01);
 80024d2:	2201      	movs	r2, #1
 80024d4:	214b      	movs	r1, #75	@ 0x4b
 80024d6:	2082      	movs	r0, #130	@ 0x82
 80024d8:	f000 f9b0 	bl	800283c <I2C3_Write>

    /* Put the FIFO back into operation mode  */
    I2C3_Write( STMPE811_ADDRESS, STMPE811_FIFO_STA, 0x00);
 80024dc:	2200      	movs	r2, #0
 80024de:	214b      	movs	r1, #75	@ 0x4b
 80024e0:	2082      	movs	r0, #130	@ 0x82
 80024e2:	f000 f9ab 	bl	800283c <I2C3_Write>

    /* Set the range and accuracy pf the pressure measurement (Z) :
    - Fractional part :7
    - Whole part      :1
    */
    I2C3_Write( STMPE811_ADDRESS, STMPE811_TSC_FRACTION_Z, 0x01);
 80024e6:	2201      	movs	r2, #1
 80024e8:	2156      	movs	r1, #86	@ 0x56
 80024ea:	2082      	movs	r0, #130	@ 0x82
 80024ec:	f000 f9a6 	bl	800283c <I2C3_Write>

    /* Set the driving capability (limit) of the device for TSC pins: 50mA */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_TSC_I_DRIVE, 0x01);
 80024f0:	2201      	movs	r2, #1
 80024f2:	2158      	movs	r1, #88	@ 0x58
 80024f4:	2082      	movs	r0, #130	@ 0x82
 80024f6:	f000 f9a1 	bl	800283c <I2C3_Write>

    /* Touch screen control configuration (enable TSC):
    - No window tracking index
    - XYZ acquisition mode
    */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_TSC_CTRL, 0x03);
 80024fa:	2203      	movs	r2, #3
 80024fc:	2140      	movs	r1, #64	@ 0x40
 80024fe:	2082      	movs	r0, #130	@ 0x82
 8002500:	f000 f99c 	bl	800283c <I2C3_Write>

    /* Clear all the status pending bits if any */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_INT_STA, 0xFF);
 8002504:	22ff      	movs	r2, #255	@ 0xff
 8002506:	210b      	movs	r1, #11
 8002508:	2082      	movs	r0, #130	@ 0x82
 800250a:	f000 f997 	bl	800283c <I2C3_Write>

    /* Enable global interrupts */
    #if COMPILE_TOUCH_INTERRUPT_SUPPORT == 1

    enableInterruptSupportForTouch();
 800250e:	f000 f8c1 	bl	8002694 <enableInterruptSupportForTouch>

    mode = STMPE811_Read(STMPE811_INT_CTRL);
 8002512:	2009      	movs	r0, #9
 8002514:	f000 f823 	bl	800255e <STMPE811_Read>
 8002518:	4603      	mov	r3, r0
 800251a:	717b      	strb	r3, [r7, #5]
    mode |= 0x01;
 800251c:	797b      	ldrb	r3, [r7, #5]
 800251e:	f043 0301 	orr.w	r3, r3, #1
 8002522:	717b      	strb	r3, [r7, #5]
    I2C3_Write(STMPE811_ADDRESS, STMPE811_INT_CTRL, mode);
 8002524:	797b      	ldrb	r3, [r7, #5]
 8002526:	461a      	mov	r2, r3
 8002528:	2109      	movs	r1, #9
 800252a:	2082      	movs	r0, #130	@ 0x82
 800252c:	f000 f986 	bl	800283c <I2C3_Write>
    
    /* Enable touch interrupt */
    mode = STMPE811_Read(STMPE811_INT_EN);
 8002530:	200a      	movs	r0, #10
 8002532:	f000 f814 	bl	800255e <STMPE811_Read>
 8002536:	4603      	mov	r3, r0
 8002538:	717b      	strb	r3, [r7, #5]
    mode |= 0x01;
 800253a:	797b      	ldrb	r3, [r7, #5]
 800253c:	f043 0301 	orr.w	r3, r3, #1
 8002540:	717b      	strb	r3, [r7, #5]
    I2C3_Write(STMPE811_ADDRESS, STMPE811_INT_EN, mode);
 8002542:	797b      	ldrb	r3, [r7, #5]
 8002544:	461a      	mov	r2, r3
 8002546:	210a      	movs	r1, #10
 8002548:	2082      	movs	r0, #130	@ 0x82
 800254a:	f000 f977 	bl	800283c <I2C3_Write>
    
    #endif // COMPILE_TOUCH_INTERRUPT_SUPPORT
    
    /* Wait for 2 ms delay */
    HAL_Delay(200);
 800254e:	20c8      	movs	r0, #200	@ 0xc8
 8002550:	f000 fbee 	bl	8002d30 <HAL_Delay>

    return STMPE811_State_Ok;
 8002554:	2302      	movs	r3, #2

}
 8002556:	4618      	mov	r0, r3
 8002558:	3708      	adds	r7, #8
 800255a:	46bd      	mov	sp, r7
 800255c:	bd80      	pop	{r7, pc}

0800255e <STMPE811_Read>:

uint8_t STMPE811_Read(uint8_t reg)
{
 800255e:	b580      	push	{r7, lr}
 8002560:	b084      	sub	sp, #16
 8002562:	af00      	add	r7, sp, #0
 8002564:	4603      	mov	r3, r0
 8002566:	71fb      	strb	r3, [r7, #7]
    // I2C Read
    uint8_t readData;
    I2C3_Read(STMPE811_ADDRESS, reg, &readData);
 8002568:	f107 020f 	add.w	r2, r7, #15
 800256c:	79fb      	ldrb	r3, [r7, #7]
 800256e:	4619      	mov	r1, r3
 8002570:	2082      	movs	r0, #130	@ 0x82
 8002572:	f000 f98d 	bl	8002890 <I2C3_Read>

    return readData;
 8002576:	7bfb      	ldrb	r3, [r7, #15]
}
 8002578:	4618      	mov	r0, r3
 800257a:	3710      	adds	r7, #16
 800257c:	46bd      	mov	sp, r7
 800257e:	bd80      	pop	{r7, pc}

08002580 <STMPE811_Write>:

void STMPE811_Write(uint8_t reg, uint8_t dataToWrite)
{
 8002580:	b580      	push	{r7, lr}
 8002582:	b082      	sub	sp, #8
 8002584:	af00      	add	r7, sp, #0
 8002586:	4603      	mov	r3, r0
 8002588:	460a      	mov	r2, r1
 800258a:	71fb      	strb	r3, [r7, #7]
 800258c:	4613      	mov	r3, r2
 800258e:	71bb      	strb	r3, [r7, #6]
    I2C3_Write(STMPE811_ADDRESS, reg, dataToWrite);
 8002590:	79ba      	ldrb	r2, [r7, #6]
 8002592:	79fb      	ldrb	r3, [r7, #7]
 8002594:	4619      	mov	r1, r3
 8002596:	2082      	movs	r0, #130	@ 0x82
 8002598:	f000 f950 	bl	800283c <I2C3_Write>
}
 800259c:	bf00      	nop
 800259e:	3708      	adds	r7, #8
 80025a0:	46bd      	mov	sp, r7
 80025a2:	bd80      	pop	{r7, pc}

080025a4 <STMPE811_DetermineTouchPosition>:

    return STMPE811_State_Released;
}

void STMPE811_DetermineTouchPosition(STMPE811_TouchData * data)
{
 80025a4:	b580      	push	{r7, lr}
 80025a6:	b082      	sub	sp, #8
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	6078      	str	r0, [r7, #4]
    //Pressed
    if (data->orientation == STMPE811_Orientation_Portrait_1) {
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	799b      	ldrb	r3, [r3, #6]
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d117      	bne.n	80025e4 <STMPE811_DetermineTouchPosition+0x40>
        data->x = 239 - TM_STMPE811_ReadX(data->x);
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	881b      	ldrh	r3, [r3, #0]
 80025b8:	4618      	mov	r0, r3
 80025ba:	f000 f9b1 	bl	8002920 <TM_STMPE811_ReadX>
 80025be:	4603      	mov	r3, r0
 80025c0:	f1c3 03ef 	rsb	r3, r3, #239	@ 0xef
 80025c4:	b29a      	uxth	r2, r3
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	801a      	strh	r2, [r3, #0]
        data->y = 319 - TM_STMPE811_ReadY(data->y);
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	885b      	ldrh	r3, [r3, #2]
 80025ce:	4618      	mov	r0, r3
 80025d0:	f000 fa04 	bl	80029dc <TM_STMPE811_ReadY>
 80025d4:	4603      	mov	r3, r0
 80025d6:	f5c3 739f 	rsb	r3, r3, #318	@ 0x13e
 80025da:	3301      	adds	r3, #1
 80025dc:	b29a      	uxth	r2, r3
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	805a      	strh	r2, [r3, #2]
 80025e2:	e048      	b.n	8002676 <STMPE811_DetermineTouchPosition+0xd2>
    } else if (data->orientation == STMPE811_Orientation_Portrait_2) {
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	799b      	ldrb	r3, [r3, #6]
 80025e8:	2b01      	cmp	r3, #1
 80025ea:	d112      	bne.n	8002612 <STMPE811_DetermineTouchPosition+0x6e>
        data->x = TM_STMPE811_ReadX(data->x);
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	881b      	ldrh	r3, [r3, #0]
 80025f0:	4618      	mov	r0, r3
 80025f2:	f000 f995 	bl	8002920 <TM_STMPE811_ReadX>
 80025f6:	4603      	mov	r3, r0
 80025f8:	461a      	mov	r2, r3
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	801a      	strh	r2, [r3, #0]
        data->y = TM_STMPE811_ReadY(data->y);
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	885b      	ldrh	r3, [r3, #2]
 8002602:	4618      	mov	r0, r3
 8002604:	f000 f9ea 	bl	80029dc <TM_STMPE811_ReadY>
 8002608:	4603      	mov	r3, r0
 800260a:	461a      	mov	r2, r3
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	805a      	strh	r2, [r3, #2]
 8002610:	e031      	b.n	8002676 <STMPE811_DetermineTouchPosition+0xd2>
    } else if (data->orientation == STMPE811_Orientation_Landscape_1) {
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	799b      	ldrb	r3, [r3, #6]
 8002616:	2b02      	cmp	r3, #2
 8002618:	d115      	bne.n	8002646 <STMPE811_DetermineTouchPosition+0xa2>
        data->y = TM_STMPE811_ReadX(data->y);
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	885b      	ldrh	r3, [r3, #2]
 800261e:	4618      	mov	r0, r3
 8002620:	f000 f97e 	bl	8002920 <TM_STMPE811_ReadX>
 8002624:	4603      	mov	r3, r0
 8002626:	461a      	mov	r2, r3
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	805a      	strh	r2, [r3, #2]
        data->x = 319 - TM_STMPE811_ReadY(data->x);
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	881b      	ldrh	r3, [r3, #0]
 8002630:	4618      	mov	r0, r3
 8002632:	f000 f9d3 	bl	80029dc <TM_STMPE811_ReadY>
 8002636:	4603      	mov	r3, r0
 8002638:	f5c3 739f 	rsb	r3, r3, #318	@ 0x13e
 800263c:	3301      	adds	r3, #1
 800263e:	b29a      	uxth	r2, r3
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	801a      	strh	r2, [r3, #0]
 8002644:	e017      	b.n	8002676 <STMPE811_DetermineTouchPosition+0xd2>
    } else if (data->orientation == STMPE811_Orientation_Landscape_2) {
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	799b      	ldrb	r3, [r3, #6]
 800264a:	2b03      	cmp	r3, #3
 800264c:	d113      	bne.n	8002676 <STMPE811_DetermineTouchPosition+0xd2>
        data->y = 239 - TM_STMPE811_ReadX(data->x);
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	881b      	ldrh	r3, [r3, #0]
 8002652:	4618      	mov	r0, r3
 8002654:	f000 f964 	bl	8002920 <TM_STMPE811_ReadX>
 8002658:	4603      	mov	r3, r0
 800265a:	f1c3 03ef 	rsb	r3, r3, #239	@ 0xef
 800265e:	b29a      	uxth	r2, r3
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	805a      	strh	r2, [r3, #2]
        data->x = TM_STMPE811_ReadY(data->x);
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	881b      	ldrh	r3, [r3, #0]
 8002668:	4618      	mov	r0, r3
 800266a:	f000 f9b7 	bl	80029dc <TM_STMPE811_ReadY>
 800266e:	4603      	mov	r3, r0
 8002670:	461a      	mov	r2, r3
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	801a      	strh	r2, [r3, #0]
    }

    //Reset Fifo
    I2C3_Write(STMPE811_ADDRESS, STMPE811_FIFO_STA, 0x01);
 8002676:	2201      	movs	r2, #1
 8002678:	214b      	movs	r1, #75	@ 0x4b
 800267a:	2082      	movs	r0, #130	@ 0x82
 800267c:	f000 f8de 	bl	800283c <I2C3_Write>
    I2C3_Write(STMPE811_ADDRESS, STMPE811_FIFO_STA, 0x00);
 8002680:	2200      	movs	r2, #0
 8002682:	214b      	movs	r1, #75	@ 0x4b
 8002684:	2082      	movs	r0, #130	@ 0x82
 8002686:	f000 f8d9 	bl	800283c <I2C3_Write>
}
 800268a:	bf00      	nop
 800268c:	3708      	adds	r7, #8
 800268e:	46bd      	mov	sp, r7
 8002690:	bd80      	pop	{r7, pc}
	...

08002694 <enableInterruptSupportForTouch>:
}

#if COMPILE_TOUCH_INTERRUPT_SUPPORT == 1

void enableInterruptSupportForTouch(void)
{
 8002694:	b580      	push	{r7, lr}
 8002696:	b086      	sub	sp, #24
 8002698:	af00      	add	r7, sp, #0
    // Initialze the GPIO and enable the interrupt
    // Interrupt is on interrupt Line PA15
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800269a:	2300      	movs	r3, #0
 800269c:	603b      	str	r3, [r7, #0]
 800269e:	4b14      	ldr	r3, [pc, #80]	@ (80026f0 <enableInterruptSupportForTouch+0x5c>)
 80026a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026a2:	4a13      	ldr	r2, [pc, #76]	@ (80026f0 <enableInterruptSupportForTouch+0x5c>)
 80026a4:	f043 0301 	orr.w	r3, r3, #1
 80026a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80026aa:	4b11      	ldr	r3, [pc, #68]	@ (80026f0 <enableInterruptSupportForTouch+0x5c>)
 80026ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026ae:	f003 0301 	and.w	r3, r3, #1
 80026b2:	603b      	str	r3, [r7, #0]
 80026b4:	683b      	ldr	r3, [r7, #0]

    GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026b6:	1d3b      	adds	r3, r7, #4
 80026b8:	2200      	movs	r2, #0
 80026ba:	601a      	str	r2, [r3, #0]
 80026bc:	605a      	str	r2, [r3, #4]
 80026be:	609a      	str	r2, [r3, #8]
 80026c0:	60da      	str	r2, [r3, #12]
 80026c2:	611a      	str	r2, [r3, #16]

    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80026c4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80026c8:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80026ca:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 80026ce:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026d0:	2300      	movs	r3, #0
 80026d2:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80026d4:	2302      	movs	r3, #2
 80026d6:	613b      	str	r3, [r7, #16]

    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026d8:	1d3b      	adds	r3, r7, #4
 80026da:	4619      	mov	r1, r3
 80026dc:	4805      	ldr	r0, [pc, #20]	@ (80026f4 <enableInterruptSupportForTouch+0x60>)
 80026de:	f000 fcd3 	bl	8003088 <HAL_GPIO_Init>

    NVIC_EnableIRQ(EXTI15_10_IRQn);
 80026e2:	2028      	movs	r0, #40	@ 0x28
 80026e4:	f7ff fe56 	bl	8002394 <__NVIC_EnableIRQ>

}
 80026e8:	bf00      	nop
 80026ea:	3718      	adds	r7, #24
 80026ec:	46bd      	mov	sp, r7
 80026ee:	bd80      	pop	{r7, pc}
 80026f0:	40023800 	.word	0x40023800
 80026f4:	40020000 	.word	0x40020000

080026f8 <verifyHAL_I2C_IS_OKAY>:

#endif 


//  ******************************** I2C Functions ********************************//
void verifyHAL_I2C_IS_OKAY(){
 80026f8:	b480      	push	{r7}
 80026fa:	af00      	add	r7, sp, #0
    if (HAL_status != HAL_OK)
 80026fc:	4b05      	ldr	r3, [pc, #20]	@ (8002714 <verifyHAL_I2C_IS_OKAY+0x1c>)
 80026fe:	781b      	ldrb	r3, [r3, #0]
 8002700:	2b00      	cmp	r3, #0
 8002702:	d001      	beq.n	8002708 <verifyHAL_I2C_IS_OKAY+0x10>
    {
        while(1);
 8002704:	bf00      	nop
 8002706:	e7fd      	b.n	8002704 <verifyHAL_I2C_IS_OKAY+0xc>
    }
}
 8002708:	bf00      	nop
 800270a:	46bd      	mov	sp, r7
 800270c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002710:	4770      	bx	lr
 8002712:	bf00      	nop
 8002714:	20025be4 	.word	0x20025be4

08002718 <I2C3_Init>:

static void I2C3_Init()
{
 8002718:	b580      	push	{r7, lr}
 800271a:	b082      	sub	sp, #8
 800271c:	af00      	add	r7, sp, #0

	__HAL_RCC_I2C3_CLK_ENABLE();
 800271e:	2300      	movs	r3, #0
 8002720:	603b      	str	r3, [r7, #0]
 8002722:	4b18      	ldr	r3, [pc, #96]	@ (8002784 <I2C3_Init+0x6c>)
 8002724:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002726:	4a17      	ldr	r2, [pc, #92]	@ (8002784 <I2C3_Init+0x6c>)
 8002728:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800272c:	6413      	str	r3, [r2, #64]	@ 0x40
 800272e:	4b15      	ldr	r3, [pc, #84]	@ (8002784 <I2C3_Init+0x6c>)
 8002730:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002732:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002736:	603b      	str	r3, [r7, #0]
 8002738:	683b      	ldr	r3, [r7, #0]
    // Configure I2C3
    hI2C3.Instance = STMPE811_I2C;
 800273a:	4b13      	ldr	r3, [pc, #76]	@ (8002788 <I2C3_Init+0x70>)
 800273c:	4a13      	ldr	r2, [pc, #76]	@ (800278c <I2C3_Init+0x74>)
 800273e:	601a      	str	r2, [r3, #0]
    hI2C3.Init.ClockSpeed = STMPE811_I2C_CLOCK;
 8002740:	4b11      	ldr	r3, [pc, #68]	@ (8002788 <I2C3_Init+0x70>)
 8002742:	4a13      	ldr	r2, [pc, #76]	@ (8002790 <I2C3_Init+0x78>)
 8002744:	605a      	str	r2, [r3, #4]
    hI2C3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002746:	4b10      	ldr	r3, [pc, #64]	@ (8002788 <I2C3_Init+0x70>)
 8002748:	2200      	movs	r2, #0
 800274a:	609a      	str	r2, [r3, #8]
    hI2C3.Init.OwnAddress1 = 0x00; // May be wrong
 800274c:	4b0e      	ldr	r3, [pc, #56]	@ (8002788 <I2C3_Init+0x70>)
 800274e:	2200      	movs	r2, #0
 8002750:	60da      	str	r2, [r3, #12]
    hI2C3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002752:	4b0d      	ldr	r3, [pc, #52]	@ (8002788 <I2C3_Init+0x70>)
 8002754:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002758:	611a      	str	r2, [r3, #16]
    hI2C3.Init.GeneralCallMode = I2C_NOSTRETCH_DISABLE;
 800275a:	4b0b      	ldr	r3, [pc, #44]	@ (8002788 <I2C3_Init+0x70>)
 800275c:	2200      	movs	r2, #0
 800275e:	61da      	str	r2, [r3, #28]
    hI2C3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002760:	4b09      	ldr	r3, [pc, #36]	@ (8002788 <I2C3_Init+0x70>)
 8002762:	2200      	movs	r2, #0
 8002764:	621a      	str	r2, [r3, #32]
    // Do we need to configutre I2C Mode? 

    // Initialize I2C3 interface
    HAL_StatusTypeDef status;
    status = HAL_I2C_Init(&hI2C3);
 8002766:	4808      	ldr	r0, [pc, #32]	@ (8002788 <I2C3_Init+0x70>)
 8002768:	f000 ff60 	bl	800362c <HAL_I2C_Init>
 800276c:	4603      	mov	r3, r0
 800276e:	71fb      	strb	r3, [r7, #7]
    if (status != HAL_OK)
 8002770:	79fb      	ldrb	r3, [r7, #7]
 8002772:	2b00      	cmp	r3, #0
 8002774:	d001      	beq.n	800277a <I2C3_Init+0x62>
    {
        for(;;); // Catch error
 8002776:	bf00      	nop
 8002778:	e7fd      	b.n	8002776 <I2C3_Init+0x5e>
    }
    return;
 800277a:	bf00      	nop
}
 800277c:	3708      	adds	r7, #8
 800277e:	46bd      	mov	sp, r7
 8002780:	bd80      	pop	{r7, pc}
 8002782:	bf00      	nop
 8002784:	40023800 	.word	0x40023800
 8002788:	20025b90 	.word	0x20025b90
 800278c:	40005c00 	.word	0x40005c00
 8002790:	000186a0 	.word	0x000186a0

08002794 <I2C3_MspInit>:

// GPIO Initializations 
static void I2C3_MspInit(void)
{
 8002794:	b580      	push	{r7, lr}
 8002796:	b088      	sub	sp, #32
 8002798:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800279a:	f107 030c 	add.w	r3, r7, #12
 800279e:	2200      	movs	r2, #0
 80027a0:	601a      	str	r2, [r3, #0]
 80027a2:	605a      	str	r2, [r3, #4]
 80027a4:	609a      	str	r2, [r3, #8]
 80027a6:	60da      	str	r2, [r3, #12]
 80027a8:	611a      	str	r2, [r3, #16]
    // Enable Clocks
    // GPIOC
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80027aa:	2300      	movs	r3, #0
 80027ac:	60bb      	str	r3, [r7, #8]
 80027ae:	4b20      	ldr	r3, [pc, #128]	@ (8002830 <I2C3_MspInit+0x9c>)
 80027b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027b2:	4a1f      	ldr	r2, [pc, #124]	@ (8002830 <I2C3_MspInit+0x9c>)
 80027b4:	f043 0304 	orr.w	r3, r3, #4
 80027b8:	6313      	str	r3, [r2, #48]	@ 0x30
 80027ba:	4b1d      	ldr	r3, [pc, #116]	@ (8002830 <I2C3_MspInit+0x9c>)
 80027bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027be:	f003 0304 	and.w	r3, r3, #4
 80027c2:	60bb      	str	r3, [r7, #8]
 80027c4:	68bb      	ldr	r3, [r7, #8]

    // GPIOA 
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80027c6:	2300      	movs	r3, #0
 80027c8:	607b      	str	r3, [r7, #4]
 80027ca:	4b19      	ldr	r3, [pc, #100]	@ (8002830 <I2C3_MspInit+0x9c>)
 80027cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027ce:	4a18      	ldr	r2, [pc, #96]	@ (8002830 <I2C3_MspInit+0x9c>)
 80027d0:	f043 0301 	orr.w	r3, r3, #1
 80027d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80027d6:	4b16      	ldr	r3, [pc, #88]	@ (8002830 <I2C3_MspInit+0x9c>)
 80027d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027da:	f003 0301 	and.w	r3, r3, #1
 80027de:	607b      	str	r3, [r7, #4]
 80027e0:	687b      	ldr	r3, [r7, #4]

    /*Configure GPIO pin : I2C3_SDA_Pin */
    GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 80027e2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80027e6:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80027e8:	2312      	movs	r3, #18
 80027ea:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027ec:	2300      	movs	r3, #0
 80027ee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027f0:	2300      	movs	r3, #0
 80027f2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80027f4:	2304      	movs	r3, #4
 80027f6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 80027f8:	f107 030c 	add.w	r3, r7, #12
 80027fc:	4619      	mov	r1, r3
 80027fe:	480d      	ldr	r0, [pc, #52]	@ (8002834 <I2C3_MspInit+0xa0>)
 8002800:	f000 fc42 	bl	8003088 <HAL_GPIO_Init>

    /*Configure GPIO pin : I2C3_SCL_Pin */
    GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 8002804:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002808:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800280a:	2312      	movs	r3, #18
 800280c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800280e:	2300      	movs	r3, #0
 8002810:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002812:	2300      	movs	r3, #0
 8002814:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002816:	2304      	movs	r3, #4
 8002818:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 800281a:	f107 030c 	add.w	r3, r7, #12
 800281e:	4619      	mov	r1, r3
 8002820:	4805      	ldr	r0, [pc, #20]	@ (8002838 <I2C3_MspInit+0xa4>)
 8002822:	f000 fc31 	bl	8003088 <HAL_GPIO_Init>
    
}
 8002826:	bf00      	nop
 8002828:	3720      	adds	r7, #32
 800282a:	46bd      	mov	sp, r7
 800282c:	bd80      	pop	{r7, pc}
 800282e:	bf00      	nop
 8002830:	40023800 	.word	0x40023800
 8002834:	40020800 	.word	0x40020800
 8002838:	40020000 	.word	0x40020000

0800283c <I2C3_Write>:

// This function should only be used for single BYTE transfers 
void I2C3_Write(uint16_t devAddr, uint8_t reg, uint8_t data)
{
 800283c:	b580      	push	{r7, lr}
 800283e:	b088      	sub	sp, #32
 8002840:	af04      	add	r7, sp, #16
 8002842:	4603      	mov	r3, r0
 8002844:	80fb      	strh	r3, [r7, #6]
 8002846:	460b      	mov	r3, r1
 8002848:	717b      	strb	r3, [r7, #5]
 800284a:	4613      	mov	r3, r2
 800284c:	713b      	strb	r3, [r7, #4]
    uint8_t dataConversion = data; // data will be a raw hex value this is mainly for debugging...
 800284e:	793b      	ldrb	r3, [r7, #4]
 8002850:	73fb      	strb	r3, [r7, #15]
    // Learning topic - Is this needed? Or can I just use &data in the function call? 
    HAL_status = HAL_I2C_Mem_Write(&hI2C3, devAddr, reg, I2C_MEMADD_SIZE_8BIT, &dataConversion, ONEBYTE, DEFAULT_TESTING_TIMEOUT);
 8002852:	797b      	ldrb	r3, [r7, #5]
 8002854:	b29a      	uxth	r2, r3
 8002856:	88f9      	ldrh	r1, [r7, #6]
 8002858:	4b0a      	ldr	r3, [pc, #40]	@ (8002884 <I2C3_Write+0x48>)
 800285a:	9302      	str	r3, [sp, #8]
 800285c:	2301      	movs	r3, #1
 800285e:	9301      	str	r3, [sp, #4]
 8002860:	f107 030f 	add.w	r3, r7, #15
 8002864:	9300      	str	r3, [sp, #0]
 8002866:	2301      	movs	r3, #1
 8002868:	4807      	ldr	r0, [pc, #28]	@ (8002888 <I2C3_Write+0x4c>)
 800286a:	f001 f823 	bl	80038b4 <HAL_I2C_Mem_Write>
 800286e:	4603      	mov	r3, r0
 8002870:	461a      	mov	r2, r3
 8002872:	4b06      	ldr	r3, [pc, #24]	@ (800288c <I2C3_Write+0x50>)
 8002874:	701a      	strb	r2, [r3, #0]
    verifyHAL_I2C_IS_OKAY();
 8002876:	f7ff ff3f 	bl	80026f8 <verifyHAL_I2C_IS_OKAY>
}
 800287a:	bf00      	nop
 800287c:	3710      	adds	r7, #16
 800287e:	46bd      	mov	sp, r7
 8002880:	bd80      	pop	{r7, pc}
 8002882:	bf00      	nop
 8002884:	0003d090 	.word	0x0003d090
 8002888:	20025b90 	.word	0x20025b90
 800288c:	20025be4 	.word	0x20025be4

08002890 <I2C3_Read>:

// This function should only be used for single BYTE transfers 
void I2C3_Read(uint8_t address, uint8_t reg, uint8_t * rxData)
{
 8002890:	b580      	push	{r7, lr}
 8002892:	b086      	sub	sp, #24
 8002894:	af04      	add	r7, sp, #16
 8002896:	4603      	mov	r3, r0
 8002898:	603a      	str	r2, [r7, #0]
 800289a:	71fb      	strb	r3, [r7, #7]
 800289c:	460b      	mov	r3, r1
 800289e:	71bb      	strb	r3, [r7, #6]
    // Need to use MEM functions
    HAL_status = HAL_I2C_Mem_Read(&hI2C3, address, reg, I2C_MEMADD_SIZE_8BIT, rxData, ONEBYTE, DEFAULT_TESTING_TIMEOUT);
 80028a0:	79fb      	ldrb	r3, [r7, #7]
 80028a2:	b299      	uxth	r1, r3
 80028a4:	79bb      	ldrb	r3, [r7, #6]
 80028a6:	b29a      	uxth	r2, r3
 80028a8:	4b09      	ldr	r3, [pc, #36]	@ (80028d0 <I2C3_Read+0x40>)
 80028aa:	9302      	str	r3, [sp, #8]
 80028ac:	2301      	movs	r3, #1
 80028ae:	9301      	str	r3, [sp, #4]
 80028b0:	683b      	ldr	r3, [r7, #0]
 80028b2:	9300      	str	r3, [sp, #0]
 80028b4:	2301      	movs	r3, #1
 80028b6:	4807      	ldr	r0, [pc, #28]	@ (80028d4 <I2C3_Read+0x44>)
 80028b8:	f001 f8f6 	bl	8003aa8 <HAL_I2C_Mem_Read>
 80028bc:	4603      	mov	r3, r0
 80028be:	461a      	mov	r2, r3
 80028c0:	4b05      	ldr	r3, [pc, #20]	@ (80028d8 <I2C3_Read+0x48>)
 80028c2:	701a      	strb	r2, [r3, #0]
    verifyHAL_I2C_IS_OKAY();
 80028c4:	f7ff ff18 	bl	80026f8 <verifyHAL_I2C_IS_OKAY>
}
 80028c8:	bf00      	nop
 80028ca:	3708      	adds	r7, #8
 80028cc:	46bd      	mov	sp, r7
 80028ce:	bd80      	pop	{r7, pc}
 80028d0:	0003d090 	.word	0x0003d090
 80028d4:	20025b90 	.word	0x20025b90
 80028d8:	20025be4 	.word	0x20025be4

080028dc <I2C3_MulitByteRead>:

// This function should be used for multiple byte reads from a reg
void I2C3_MulitByteRead(uint8_t address, uint8_t reg, uint8_t * rxData, uint16_t numOfBytes)
{
 80028dc:	b580      	push	{r7, lr}
 80028de:	b086      	sub	sp, #24
 80028e0:	af04      	add	r7, sp, #16
 80028e2:	603a      	str	r2, [r7, #0]
 80028e4:	461a      	mov	r2, r3
 80028e6:	4603      	mov	r3, r0
 80028e8:	71fb      	strb	r3, [r7, #7]
 80028ea:	460b      	mov	r3, r1
 80028ec:	71bb      	strb	r3, [r7, #6]
 80028ee:	4613      	mov	r3, r2
 80028f0:	80bb      	strh	r3, [r7, #4]
    HAL_I2C_Mem_Read(&hI2C3, address, reg, I2C_MEMADD_SIZE_8BIT, rxData, numOfBytes, DEFAULT_TESTING_TIMEOUT);
 80028f2:	79fb      	ldrb	r3, [r7, #7]
 80028f4:	b299      	uxth	r1, r3
 80028f6:	79bb      	ldrb	r3, [r7, #6]
 80028f8:	b29a      	uxth	r2, r3
 80028fa:	4b07      	ldr	r3, [pc, #28]	@ (8002918 <I2C3_MulitByteRead+0x3c>)
 80028fc:	9302      	str	r3, [sp, #8]
 80028fe:	88bb      	ldrh	r3, [r7, #4]
 8002900:	9301      	str	r3, [sp, #4]
 8002902:	683b      	ldr	r3, [r7, #0]
 8002904:	9300      	str	r3, [sp, #0]
 8002906:	2301      	movs	r3, #1
 8002908:	4804      	ldr	r0, [pc, #16]	@ (800291c <I2C3_MulitByteRead+0x40>)
 800290a:	f001 f8cd 	bl	8003aa8 <HAL_I2C_Mem_Read>
}
 800290e:	bf00      	nop
 8002910:	3708      	adds	r7, #8
 8002912:	46bd      	mov	sp, r7
 8002914:	bd80      	pop	{r7, pc}
 8002916:	bf00      	nop
 8002918:	0003d090 	.word	0x0003d090
 800291c:	20025b90 	.word	0x20025b90

08002920 <TM_STMPE811_ReadX>:

/* The below function was created by Tilen MAJERLE but modified by Xavion */
uint16_t TM_STMPE811_ReadX(uint16_t x) { // TM FUNCTION 
 8002920:	b580      	push	{r7, lr}
 8002922:	b084      	sub	sp, #16
 8002924:	af00      	add	r7, sp, #0
 8002926:	4603      	mov	r3, r0
 8002928:	80fb      	strh	r3, [r7, #6]
    uint8_t data[2];
    int16_t val, dx;
    data[1] = STMPE811_Read(STMPE811_TSC_DATA_X);
 800292a:	204d      	movs	r0, #77	@ 0x4d
 800292c:	f7ff fe17 	bl	800255e <STMPE811_Read>
 8002930:	4603      	mov	r3, r0
 8002932:	727b      	strb	r3, [r7, #9]
    data[0] = STMPE811_Read(STMPE811_TSC_DATA_X + 1);
 8002934:	204e      	movs	r0, #78	@ 0x4e
 8002936:	f7ff fe12 	bl	800255e <STMPE811_Read>
 800293a:	4603      	mov	r3, r0
 800293c:	723b      	strb	r3, [r7, #8]
    val = (data[1] << 8 | (data[0] & 0xFF));
 800293e:	7a7b      	ldrb	r3, [r7, #9]
 8002940:	021b      	lsls	r3, r3, #8
 8002942:	b21a      	sxth	r2, r3
 8002944:	7a3b      	ldrb	r3, [r7, #8]
 8002946:	b21b      	sxth	r3, r3
 8002948:	4313      	orrs	r3, r2
 800294a:	81fb      	strh	r3, [r7, #14]

    if (val <= 3000) {
 800294c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002950:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 8002954:	4293      	cmp	r3, r2
 8002956:	dc06      	bgt.n	8002966 <TM_STMPE811_ReadX+0x46>
        val = 3900 - val;
 8002958:	89fb      	ldrh	r3, [r7, #14]
 800295a:	f5c3 6373 	rsb	r3, r3, #3888	@ 0xf30
 800295e:	330c      	adds	r3, #12
 8002960:	b29b      	uxth	r3, r3
 8002962:	81fb      	strh	r3, [r7, #14]
 8002964:	e005      	b.n	8002972 <TM_STMPE811_ReadX+0x52>
    } else {
        val = 3800 - val;
 8002966:	89fb      	ldrh	r3, [r7, #14]
 8002968:	f5c3 636d 	rsb	r3, r3, #3792	@ 0xed0
 800296c:	3308      	adds	r3, #8
 800296e:	b29b      	uxth	r3, r3
 8002970:	81fb      	strh	r3, [r7, #14]
    }

    val /= 15;
 8002972:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002976:	4a18      	ldr	r2, [pc, #96]	@ (80029d8 <TM_STMPE811_ReadX+0xb8>)
 8002978:	fb82 1203 	smull	r1, r2, r2, r3
 800297c:	441a      	add	r2, r3
 800297e:	10d2      	asrs	r2, r2, #3
 8002980:	17db      	asrs	r3, r3, #31
 8002982:	1ad3      	subs	r3, r2, r3
 8002984:	81fb      	strh	r3, [r7, #14]

    if (val > 239) {
 8002986:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800298a:	2bef      	cmp	r3, #239	@ 0xef
 800298c:	dd02      	ble.n	8002994 <TM_STMPE811_ReadX+0x74>
        val = 239;
 800298e:	23ef      	movs	r3, #239	@ 0xef
 8002990:	81fb      	strh	r3, [r7, #14]
 8002992:	e005      	b.n	80029a0 <TM_STMPE811_ReadX+0x80>
    } else if (val < 0) {
 8002994:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002998:	2b00      	cmp	r3, #0
 800299a:	da01      	bge.n	80029a0 <TM_STMPE811_ReadX+0x80>
        val = 0;
 800299c:	2300      	movs	r3, #0
 800299e:	81fb      	strh	r3, [r7, #14]
    }

    dx = (val > x) ? (val - x) : (x - val);
 80029a0:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80029a4:	88fb      	ldrh	r3, [r7, #6]
 80029a6:	429a      	cmp	r2, r3
 80029a8:	dd05      	ble.n	80029b6 <TM_STMPE811_ReadX+0x96>
 80029aa:	89fa      	ldrh	r2, [r7, #14]
 80029ac:	88fb      	ldrh	r3, [r7, #6]
 80029ae:	1ad3      	subs	r3, r2, r3
 80029b0:	b29b      	uxth	r3, r3
 80029b2:	b21b      	sxth	r3, r3
 80029b4:	e004      	b.n	80029c0 <TM_STMPE811_ReadX+0xa0>
 80029b6:	89fb      	ldrh	r3, [r7, #14]
 80029b8:	88fa      	ldrh	r2, [r7, #6]
 80029ba:	1ad3      	subs	r3, r2, r3
 80029bc:	b29b      	uxth	r3, r3
 80029be:	b21b      	sxth	r3, r3
 80029c0:	81bb      	strh	r3, [r7, #12]
    if (dx > 4) {
 80029c2:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80029c6:	2b04      	cmp	r3, #4
 80029c8:	dd01      	ble.n	80029ce <TM_STMPE811_ReadX+0xae>
        return val;
 80029ca:	89fb      	ldrh	r3, [r7, #14]
 80029cc:	e000      	b.n	80029d0 <TM_STMPE811_ReadX+0xb0>
    }
    return x;
 80029ce:	88fb      	ldrh	r3, [r7, #6]
}
 80029d0:	4618      	mov	r0, r3
 80029d2:	3710      	adds	r7, #16
 80029d4:	46bd      	mov	sp, r7
 80029d6:	bd80      	pop	{r7, pc}
 80029d8:	88888889 	.word	0x88888889

080029dc <TM_STMPE811_ReadY>:

/* The below function was created by Tilen MAJERLE but modified by Xavion */
uint16_t TM_STMPE811_ReadY(uint16_t y) { // TM FUNCTION 
 80029dc:	b580      	push	{r7, lr}
 80029de:	b084      	sub	sp, #16
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	4603      	mov	r3, r0
 80029e4:	80fb      	strh	r3, [r7, #6]
    uint8_t data[2];
    int16_t val, dy;
    data[1] = STMPE811_Read(STMPE811_TSC_DATA_Y);
 80029e6:	204f      	movs	r0, #79	@ 0x4f
 80029e8:	f7ff fdb9 	bl	800255e <STMPE811_Read>
 80029ec:	4603      	mov	r3, r0
 80029ee:	727b      	strb	r3, [r7, #9]
    data[0] = STMPE811_Read(STMPE811_TSC_DATA_Y + 1);
 80029f0:	2050      	movs	r0, #80	@ 0x50
 80029f2:	f7ff fdb4 	bl	800255e <STMPE811_Read>
 80029f6:	4603      	mov	r3, r0
 80029f8:	723b      	strb	r3, [r7, #8]
    val = (data[1] << 8 | (data[0] & 0xFF));
 80029fa:	7a7b      	ldrb	r3, [r7, #9]
 80029fc:	021b      	lsls	r3, r3, #8
 80029fe:	b21a      	sxth	r2, r3
 8002a00:	7a3b      	ldrb	r3, [r7, #8]
 8002a02:	b21b      	sxth	r3, r3
 8002a04:	4313      	orrs	r3, r2
 8002a06:	81fb      	strh	r3, [r7, #14]

    val -= 360;
 8002a08:	89fb      	ldrh	r3, [r7, #14]
 8002a0a:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8002a0e:	b29b      	uxth	r3, r3
 8002a10:	81fb      	strh	r3, [r7, #14]
    val = val / 11;
 8002a12:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002a16:	4a19      	ldr	r2, [pc, #100]	@ (8002a7c <TM_STMPE811_ReadY+0xa0>)
 8002a18:	fb82 1203 	smull	r1, r2, r2, r3
 8002a1c:	1052      	asrs	r2, r2, #1
 8002a1e:	17db      	asrs	r3, r3, #31
 8002a20:	1ad3      	subs	r3, r2, r3
 8002a22:	81fb      	strh	r3, [r7, #14]

    if (val <= 0) {
 8002a24:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	dc02      	bgt.n	8002a32 <TM_STMPE811_ReadY+0x56>
        val = 0;
 8002a2c:	2300      	movs	r3, #0
 8002a2e:	81fb      	strh	r3, [r7, #14]
 8002a30:	e007      	b.n	8002a42 <TM_STMPE811_ReadY+0x66>
    } else if (val >= 320) {
 8002a32:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002a36:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8002a3a:	db02      	blt.n	8002a42 <TM_STMPE811_ReadY+0x66>
        val = 319;
 8002a3c:	f240 133f 	movw	r3, #319	@ 0x13f
 8002a40:	81fb      	strh	r3, [r7, #14]
    }

    dy = (val > y) ? (val - y) : (y - val);
 8002a42:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8002a46:	88fb      	ldrh	r3, [r7, #6]
 8002a48:	429a      	cmp	r2, r3
 8002a4a:	dd05      	ble.n	8002a58 <TM_STMPE811_ReadY+0x7c>
 8002a4c:	89fa      	ldrh	r2, [r7, #14]
 8002a4e:	88fb      	ldrh	r3, [r7, #6]
 8002a50:	1ad3      	subs	r3, r2, r3
 8002a52:	b29b      	uxth	r3, r3
 8002a54:	b21b      	sxth	r3, r3
 8002a56:	e004      	b.n	8002a62 <TM_STMPE811_ReadY+0x86>
 8002a58:	89fb      	ldrh	r3, [r7, #14]
 8002a5a:	88fa      	ldrh	r2, [r7, #6]
 8002a5c:	1ad3      	subs	r3, r2, r3
 8002a5e:	b29b      	uxth	r3, r3
 8002a60:	b21b      	sxth	r3, r3
 8002a62:	81bb      	strh	r3, [r7, #12]
    if (dy > 4) {
 8002a64:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8002a68:	2b04      	cmp	r3, #4
 8002a6a:	dd01      	ble.n	8002a70 <TM_STMPE811_ReadY+0x94>
        return val;
 8002a6c:	89fb      	ldrh	r3, [r7, #14]
 8002a6e:	e000      	b.n	8002a72 <TM_STMPE811_ReadY+0x96>
    }
    return y;
 8002a70:	88fb      	ldrh	r3, [r7, #6]
}
 8002a72:	4618      	mov	r0, r3
 8002a74:	3710      	adds	r7, #16
 8002a76:	46bd      	mov	sp, r7
 8002a78:	bd80      	pop	{r7, pc}
 8002a7a:	bf00      	nop
 8002a7c:	2e8ba2e9 	.word	0x2e8ba2e9

08002a80 <initialise_monitor_handles>:
char **environ = __env;


/* Functions */
void initialise_monitor_handles()
{
 8002a80:	b480      	push	{r7}
 8002a82:	af00      	add	r7, sp, #0
}
 8002a84:	bf00      	nop
 8002a86:	46bd      	mov	sp, r7
 8002a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a8c:	4770      	bx	lr

08002a8e <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002a8e:	b580      	push	{r7, lr}
 8002a90:	b086      	sub	sp, #24
 8002a92:	af00      	add	r7, sp, #0
 8002a94:	60f8      	str	r0, [r7, #12]
 8002a96:	60b9      	str	r1, [r7, #8]
 8002a98:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002a9a:	2300      	movs	r3, #0
 8002a9c:	617b      	str	r3, [r7, #20]
 8002a9e:	e00a      	b.n	8002ab6 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002aa0:	f3af 8000 	nop.w
 8002aa4:	4601      	mov	r1, r0
 8002aa6:	68bb      	ldr	r3, [r7, #8]
 8002aa8:	1c5a      	adds	r2, r3, #1
 8002aaa:	60ba      	str	r2, [r7, #8]
 8002aac:	b2ca      	uxtb	r2, r1
 8002aae:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002ab0:	697b      	ldr	r3, [r7, #20]
 8002ab2:	3301      	adds	r3, #1
 8002ab4:	617b      	str	r3, [r7, #20]
 8002ab6:	697a      	ldr	r2, [r7, #20]
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	429a      	cmp	r2, r3
 8002abc:	dbf0      	blt.n	8002aa0 <_read+0x12>
  }

  return len;
 8002abe:	687b      	ldr	r3, [r7, #4]
}
 8002ac0:	4618      	mov	r0, r3
 8002ac2:	3718      	adds	r7, #24
 8002ac4:	46bd      	mov	sp, r7
 8002ac6:	bd80      	pop	{r7, pc}

08002ac8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002ac8:	b580      	push	{r7, lr}
 8002aca:	b086      	sub	sp, #24
 8002acc:	af00      	add	r7, sp, #0
 8002ace:	60f8      	str	r0, [r7, #12]
 8002ad0:	60b9      	str	r1, [r7, #8]
 8002ad2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002ad4:	2300      	movs	r3, #0
 8002ad6:	617b      	str	r3, [r7, #20]
 8002ad8:	e009      	b.n	8002aee <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002ada:	68bb      	ldr	r3, [r7, #8]
 8002adc:	1c5a      	adds	r2, r3, #1
 8002ade:	60ba      	str	r2, [r7, #8]
 8002ae0:	781b      	ldrb	r3, [r3, #0]
 8002ae2:	4618      	mov	r0, r3
 8002ae4:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002ae8:	697b      	ldr	r3, [r7, #20]
 8002aea:	3301      	adds	r3, #1
 8002aec:	617b      	str	r3, [r7, #20]
 8002aee:	697a      	ldr	r2, [r7, #20]
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	429a      	cmp	r2, r3
 8002af4:	dbf1      	blt.n	8002ada <_write+0x12>
  }
  return len;
 8002af6:	687b      	ldr	r3, [r7, #4]
}
 8002af8:	4618      	mov	r0, r3
 8002afa:	3718      	adds	r7, #24
 8002afc:	46bd      	mov	sp, r7
 8002afe:	bd80      	pop	{r7, pc}

08002b00 <_close>:

int _close(int file)
{
 8002b00:	b480      	push	{r7}
 8002b02:	b083      	sub	sp, #12
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002b08:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002b0c:	4618      	mov	r0, r3
 8002b0e:	370c      	adds	r7, #12
 8002b10:	46bd      	mov	sp, r7
 8002b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b16:	4770      	bx	lr

08002b18 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002b18:	b480      	push	{r7}
 8002b1a:	b083      	sub	sp, #12
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	6078      	str	r0, [r7, #4]
 8002b20:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002b22:	683b      	ldr	r3, [r7, #0]
 8002b24:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002b28:	605a      	str	r2, [r3, #4]
  return 0;
 8002b2a:	2300      	movs	r3, #0
}
 8002b2c:	4618      	mov	r0, r3
 8002b2e:	370c      	adds	r7, #12
 8002b30:	46bd      	mov	sp, r7
 8002b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b36:	4770      	bx	lr

08002b38 <_isatty>:

int _isatty(int file)
{
 8002b38:	b480      	push	{r7}
 8002b3a:	b083      	sub	sp, #12
 8002b3c:	af00      	add	r7, sp, #0
 8002b3e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002b40:	2301      	movs	r3, #1
}
 8002b42:	4618      	mov	r0, r3
 8002b44:	370c      	adds	r7, #12
 8002b46:	46bd      	mov	sp, r7
 8002b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b4c:	4770      	bx	lr

08002b4e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002b4e:	b480      	push	{r7}
 8002b50:	b085      	sub	sp, #20
 8002b52:	af00      	add	r7, sp, #0
 8002b54:	60f8      	str	r0, [r7, #12]
 8002b56:	60b9      	str	r1, [r7, #8]
 8002b58:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002b5a:	2300      	movs	r3, #0
}
 8002b5c:	4618      	mov	r0, r3
 8002b5e:	3714      	adds	r7, #20
 8002b60:	46bd      	mov	sp, r7
 8002b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b66:	4770      	bx	lr

08002b68 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002b68:	b580      	push	{r7, lr}
 8002b6a:	b086      	sub	sp, #24
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002b70:	4a14      	ldr	r2, [pc, #80]	@ (8002bc4 <_sbrk+0x5c>)
 8002b72:	4b15      	ldr	r3, [pc, #84]	@ (8002bc8 <_sbrk+0x60>)
 8002b74:	1ad3      	subs	r3, r2, r3
 8002b76:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002b78:	697b      	ldr	r3, [r7, #20]
 8002b7a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002b7c:	4b13      	ldr	r3, [pc, #76]	@ (8002bcc <_sbrk+0x64>)
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d102      	bne.n	8002b8a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002b84:	4b11      	ldr	r3, [pc, #68]	@ (8002bcc <_sbrk+0x64>)
 8002b86:	4a12      	ldr	r2, [pc, #72]	@ (8002bd0 <_sbrk+0x68>)
 8002b88:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002b8a:	4b10      	ldr	r3, [pc, #64]	@ (8002bcc <_sbrk+0x64>)
 8002b8c:	681a      	ldr	r2, [r3, #0]
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	4413      	add	r3, r2
 8002b92:	693a      	ldr	r2, [r7, #16]
 8002b94:	429a      	cmp	r2, r3
 8002b96:	d207      	bcs.n	8002ba8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002b98:	f003 fdac 	bl	80066f4 <__errno>
 8002b9c:	4603      	mov	r3, r0
 8002b9e:	220c      	movs	r2, #12
 8002ba0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002ba2:	f04f 33ff 	mov.w	r3, #4294967295
 8002ba6:	e009      	b.n	8002bbc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002ba8:	4b08      	ldr	r3, [pc, #32]	@ (8002bcc <_sbrk+0x64>)
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002bae:	4b07      	ldr	r3, [pc, #28]	@ (8002bcc <_sbrk+0x64>)
 8002bb0:	681a      	ldr	r2, [r3, #0]
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	4413      	add	r3, r2
 8002bb6:	4a05      	ldr	r2, [pc, #20]	@ (8002bcc <_sbrk+0x64>)
 8002bb8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002bba:	68fb      	ldr	r3, [r7, #12]
}
 8002bbc:	4618      	mov	r0, r3
 8002bbe:	3718      	adds	r7, #24
 8002bc0:	46bd      	mov	sp, r7
 8002bc2:	bd80      	pop	{r7, pc}
 8002bc4:	20030000 	.word	0x20030000
 8002bc8:	00000400 	.word	0x00000400
 8002bcc:	20025be8 	.word	0x20025be8
 8002bd0:	20025d40 	.word	0x20025d40

08002bd4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002bd4:	b480      	push	{r7}
 8002bd6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002bd8:	4b06      	ldr	r3, [pc, #24]	@ (8002bf4 <SystemInit+0x20>)
 8002bda:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002bde:	4a05      	ldr	r2, [pc, #20]	@ (8002bf4 <SystemInit+0x20>)
 8002be0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002be4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002be8:	bf00      	nop
 8002bea:	46bd      	mov	sp, r7
 8002bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf0:	4770      	bx	lr
 8002bf2:	bf00      	nop
 8002bf4:	e000ed00 	.word	0xe000ed00

08002bf8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8002bf8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002c30 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002bfc:	f7ff ffea 	bl	8002bd4 <SystemInit>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002c00:	480c      	ldr	r0, [pc, #48]	@ (8002c34 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002c02:	490d      	ldr	r1, [pc, #52]	@ (8002c38 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002c04:	4a0d      	ldr	r2, [pc, #52]	@ (8002c3c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002c06:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002c08:	e002      	b.n	8002c10 <LoopCopyDataInit>

08002c0a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002c0a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002c0c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002c0e:	3304      	adds	r3, #4

08002c10 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002c10:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002c12:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002c14:	d3f9      	bcc.n	8002c0a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002c16:	4a0a      	ldr	r2, [pc, #40]	@ (8002c40 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002c18:	4c0a      	ldr	r4, [pc, #40]	@ (8002c44 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002c1a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002c1c:	e001      	b.n	8002c22 <LoopFillZerobss>

08002c1e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002c1e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002c20:	3204      	adds	r2, #4

08002c22 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002c22:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002c24:	d3fb      	bcc.n	8002c1e <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8002c26:	f003 fd6b 	bl	8006700 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002c2a:	f7fe fd69 	bl	8001700 <main>
  bx  lr    
 8002c2e:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8002c30:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8002c34:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002c38:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8002c3c:	080083f8 	.word	0x080083f8
  ldr r2, =_sbss
 8002c40:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8002c44:	20025d3c 	.word	0x20025d3c

08002c48 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002c48:	e7fe      	b.n	8002c48 <ADC_IRQHandler>
	...

08002c4c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002c4c:	b580      	push	{r7, lr}
 8002c4e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002c50:	4b0e      	ldr	r3, [pc, #56]	@ (8002c8c <HAL_Init+0x40>)
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	4a0d      	ldr	r2, [pc, #52]	@ (8002c8c <HAL_Init+0x40>)
 8002c56:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002c5a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002c5c:	4b0b      	ldr	r3, [pc, #44]	@ (8002c8c <HAL_Init+0x40>)
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	4a0a      	ldr	r2, [pc, #40]	@ (8002c8c <HAL_Init+0x40>)
 8002c62:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002c66:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002c68:	4b08      	ldr	r3, [pc, #32]	@ (8002c8c <HAL_Init+0x40>)
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	4a07      	ldr	r2, [pc, #28]	@ (8002c8c <HAL_Init+0x40>)
 8002c6e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002c72:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002c74:	2003      	movs	r0, #3
 8002c76:	f000 f991 	bl	8002f9c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002c7a:	2000      	movs	r0, #0
 8002c7c:	f000 f808 	bl	8002c90 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002c80:	f7ff f8f4 	bl	8001e6c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002c84:	2300      	movs	r3, #0
}
 8002c86:	4618      	mov	r0, r3
 8002c88:	bd80      	pop	{r7, pc}
 8002c8a:	bf00      	nop
 8002c8c:	40023c00 	.word	0x40023c00

08002c90 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002c90:	b580      	push	{r7, lr}
 8002c92:	b082      	sub	sp, #8
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002c98:	4b12      	ldr	r3, [pc, #72]	@ (8002ce4 <HAL_InitTick+0x54>)
 8002c9a:	681a      	ldr	r2, [r3, #0]
 8002c9c:	4b12      	ldr	r3, [pc, #72]	@ (8002ce8 <HAL_InitTick+0x58>)
 8002c9e:	781b      	ldrb	r3, [r3, #0]
 8002ca0:	4619      	mov	r1, r3
 8002ca2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002ca6:	fbb3 f3f1 	udiv	r3, r3, r1
 8002caa:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cae:	4618      	mov	r0, r3
 8002cb0:	f000 f9b7 	bl	8003022 <HAL_SYSTICK_Config>
 8002cb4:	4603      	mov	r3, r0
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d001      	beq.n	8002cbe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002cba:	2301      	movs	r3, #1
 8002cbc:	e00e      	b.n	8002cdc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	2b0f      	cmp	r3, #15
 8002cc2:	d80a      	bhi.n	8002cda <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002cc4:	2200      	movs	r2, #0
 8002cc6:	6879      	ldr	r1, [r7, #4]
 8002cc8:	f04f 30ff 	mov.w	r0, #4294967295
 8002ccc:	f000 f971 	bl	8002fb2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002cd0:	4a06      	ldr	r2, [pc, #24]	@ (8002cec <HAL_InitTick+0x5c>)
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002cd6:	2300      	movs	r3, #0
 8002cd8:	e000      	b.n	8002cdc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002cda:	2301      	movs	r3, #1
}
 8002cdc:	4618      	mov	r0, r3
 8002cde:	3708      	adds	r7, #8
 8002ce0:	46bd      	mov	sp, r7
 8002ce2:	bd80      	pop	{r7, pc}
 8002ce4:	20000010 	.word	0x20000010
 8002ce8:	20000018 	.word	0x20000018
 8002cec:	20000014 	.word	0x20000014

08002cf0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002cf0:	b480      	push	{r7}
 8002cf2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002cf4:	4b06      	ldr	r3, [pc, #24]	@ (8002d10 <HAL_IncTick+0x20>)
 8002cf6:	781b      	ldrb	r3, [r3, #0]
 8002cf8:	461a      	mov	r2, r3
 8002cfa:	4b06      	ldr	r3, [pc, #24]	@ (8002d14 <HAL_IncTick+0x24>)
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	4413      	add	r3, r2
 8002d00:	4a04      	ldr	r2, [pc, #16]	@ (8002d14 <HAL_IncTick+0x24>)
 8002d02:	6013      	str	r3, [r2, #0]
}
 8002d04:	bf00      	nop
 8002d06:	46bd      	mov	sp, r7
 8002d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d0c:	4770      	bx	lr
 8002d0e:	bf00      	nop
 8002d10:	20000018 	.word	0x20000018
 8002d14:	20025bec 	.word	0x20025bec

08002d18 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002d18:	b480      	push	{r7}
 8002d1a:	af00      	add	r7, sp, #0
  return uwTick;
 8002d1c:	4b03      	ldr	r3, [pc, #12]	@ (8002d2c <HAL_GetTick+0x14>)
 8002d1e:	681b      	ldr	r3, [r3, #0]
}
 8002d20:	4618      	mov	r0, r3
 8002d22:	46bd      	mov	sp, r7
 8002d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d28:	4770      	bx	lr
 8002d2a:	bf00      	nop
 8002d2c:	20025bec 	.word	0x20025bec

08002d30 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002d30:	b580      	push	{r7, lr}
 8002d32:	b084      	sub	sp, #16
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002d38:	f7ff ffee 	bl	8002d18 <HAL_GetTick>
 8002d3c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d48:	d005      	beq.n	8002d56 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002d4a:	4b0a      	ldr	r3, [pc, #40]	@ (8002d74 <HAL_Delay+0x44>)
 8002d4c:	781b      	ldrb	r3, [r3, #0]
 8002d4e:	461a      	mov	r2, r3
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	4413      	add	r3, r2
 8002d54:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002d56:	bf00      	nop
 8002d58:	f7ff ffde 	bl	8002d18 <HAL_GetTick>
 8002d5c:	4602      	mov	r2, r0
 8002d5e:	68bb      	ldr	r3, [r7, #8]
 8002d60:	1ad3      	subs	r3, r2, r3
 8002d62:	68fa      	ldr	r2, [r7, #12]
 8002d64:	429a      	cmp	r2, r3
 8002d66:	d8f7      	bhi.n	8002d58 <HAL_Delay+0x28>
  {
  }
}
 8002d68:	bf00      	nop
 8002d6a:	bf00      	nop
 8002d6c:	3710      	adds	r7, #16
 8002d6e:	46bd      	mov	sp, r7
 8002d70:	bd80      	pop	{r7, pc}
 8002d72:	bf00      	nop
 8002d74:	20000018 	.word	0x20000018

08002d78 <__NVIC_SetPriorityGrouping>:
{
 8002d78:	b480      	push	{r7}
 8002d7a:	b085      	sub	sp, #20
 8002d7c:	af00      	add	r7, sp, #0
 8002d7e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	f003 0307 	and.w	r3, r3, #7
 8002d86:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002d88:	4b0c      	ldr	r3, [pc, #48]	@ (8002dbc <__NVIC_SetPriorityGrouping+0x44>)
 8002d8a:	68db      	ldr	r3, [r3, #12]
 8002d8c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002d8e:	68ba      	ldr	r2, [r7, #8]
 8002d90:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002d94:	4013      	ands	r3, r2
 8002d96:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002d9c:	68bb      	ldr	r3, [r7, #8]
 8002d9e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002da0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002da4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002da8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002daa:	4a04      	ldr	r2, [pc, #16]	@ (8002dbc <__NVIC_SetPriorityGrouping+0x44>)
 8002dac:	68bb      	ldr	r3, [r7, #8]
 8002dae:	60d3      	str	r3, [r2, #12]
}
 8002db0:	bf00      	nop
 8002db2:	3714      	adds	r7, #20
 8002db4:	46bd      	mov	sp, r7
 8002db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dba:	4770      	bx	lr
 8002dbc:	e000ed00 	.word	0xe000ed00

08002dc0 <__NVIC_GetPriorityGrouping>:
{
 8002dc0:	b480      	push	{r7}
 8002dc2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002dc4:	4b04      	ldr	r3, [pc, #16]	@ (8002dd8 <__NVIC_GetPriorityGrouping+0x18>)
 8002dc6:	68db      	ldr	r3, [r3, #12]
 8002dc8:	0a1b      	lsrs	r3, r3, #8
 8002dca:	f003 0307 	and.w	r3, r3, #7
}
 8002dce:	4618      	mov	r0, r3
 8002dd0:	46bd      	mov	sp, r7
 8002dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd6:	4770      	bx	lr
 8002dd8:	e000ed00 	.word	0xe000ed00

08002ddc <__NVIC_EnableIRQ>:
{
 8002ddc:	b480      	push	{r7}
 8002dde:	b083      	sub	sp, #12
 8002de0:	af00      	add	r7, sp, #0
 8002de2:	4603      	mov	r3, r0
 8002de4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002de6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	db0b      	blt.n	8002e06 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002dee:	79fb      	ldrb	r3, [r7, #7]
 8002df0:	f003 021f 	and.w	r2, r3, #31
 8002df4:	4907      	ldr	r1, [pc, #28]	@ (8002e14 <__NVIC_EnableIRQ+0x38>)
 8002df6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002dfa:	095b      	lsrs	r3, r3, #5
 8002dfc:	2001      	movs	r0, #1
 8002dfe:	fa00 f202 	lsl.w	r2, r0, r2
 8002e02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002e06:	bf00      	nop
 8002e08:	370c      	adds	r7, #12
 8002e0a:	46bd      	mov	sp, r7
 8002e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e10:	4770      	bx	lr
 8002e12:	bf00      	nop
 8002e14:	e000e100 	.word	0xe000e100

08002e18 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002e18:	b480      	push	{r7}
 8002e1a:	b083      	sub	sp, #12
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	4603      	mov	r3, r0
 8002e20:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	db12      	blt.n	8002e50 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002e2a:	79fb      	ldrb	r3, [r7, #7]
 8002e2c:	f003 021f 	and.w	r2, r3, #31
 8002e30:	490a      	ldr	r1, [pc, #40]	@ (8002e5c <__NVIC_DisableIRQ+0x44>)
 8002e32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e36:	095b      	lsrs	r3, r3, #5
 8002e38:	2001      	movs	r0, #1
 8002e3a:	fa00 f202 	lsl.w	r2, r0, r2
 8002e3e:	3320      	adds	r3, #32
 8002e40:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8002e44:	f3bf 8f4f 	dsb	sy
}
 8002e48:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002e4a:	f3bf 8f6f 	isb	sy
}
 8002e4e:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8002e50:	bf00      	nop
 8002e52:	370c      	adds	r7, #12
 8002e54:	46bd      	mov	sp, r7
 8002e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e5a:	4770      	bx	lr
 8002e5c:	e000e100 	.word	0xe000e100

08002e60 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8002e60:	b480      	push	{r7}
 8002e62:	b083      	sub	sp, #12
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	4603      	mov	r3, r0
 8002e68:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	db0c      	blt.n	8002e8c <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002e72:	79fb      	ldrb	r3, [r7, #7]
 8002e74:	f003 021f 	and.w	r2, r3, #31
 8002e78:	4907      	ldr	r1, [pc, #28]	@ (8002e98 <__NVIC_ClearPendingIRQ+0x38>)
 8002e7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e7e:	095b      	lsrs	r3, r3, #5
 8002e80:	2001      	movs	r0, #1
 8002e82:	fa00 f202 	lsl.w	r2, r0, r2
 8002e86:	3360      	adds	r3, #96	@ 0x60
 8002e88:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002e8c:	bf00      	nop
 8002e8e:	370c      	adds	r7, #12
 8002e90:	46bd      	mov	sp, r7
 8002e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e96:	4770      	bx	lr
 8002e98:	e000e100 	.word	0xe000e100

08002e9c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002e9c:	b480      	push	{r7}
 8002e9e:	b083      	sub	sp, #12
 8002ea0:	af00      	add	r7, sp, #0
 8002ea2:	4603      	mov	r3, r0
 8002ea4:	6039      	str	r1, [r7, #0]
 8002ea6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ea8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	db0a      	blt.n	8002ec6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002eb0:	683b      	ldr	r3, [r7, #0]
 8002eb2:	b2da      	uxtb	r2, r3
 8002eb4:	490c      	ldr	r1, [pc, #48]	@ (8002ee8 <__NVIC_SetPriority+0x4c>)
 8002eb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002eba:	0112      	lsls	r2, r2, #4
 8002ebc:	b2d2      	uxtb	r2, r2
 8002ebe:	440b      	add	r3, r1
 8002ec0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002ec4:	e00a      	b.n	8002edc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ec6:	683b      	ldr	r3, [r7, #0]
 8002ec8:	b2da      	uxtb	r2, r3
 8002eca:	4908      	ldr	r1, [pc, #32]	@ (8002eec <__NVIC_SetPriority+0x50>)
 8002ecc:	79fb      	ldrb	r3, [r7, #7]
 8002ece:	f003 030f 	and.w	r3, r3, #15
 8002ed2:	3b04      	subs	r3, #4
 8002ed4:	0112      	lsls	r2, r2, #4
 8002ed6:	b2d2      	uxtb	r2, r2
 8002ed8:	440b      	add	r3, r1
 8002eda:	761a      	strb	r2, [r3, #24]
}
 8002edc:	bf00      	nop
 8002ede:	370c      	adds	r7, #12
 8002ee0:	46bd      	mov	sp, r7
 8002ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee6:	4770      	bx	lr
 8002ee8:	e000e100 	.word	0xe000e100
 8002eec:	e000ed00 	.word	0xe000ed00

08002ef0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002ef0:	b480      	push	{r7}
 8002ef2:	b089      	sub	sp, #36	@ 0x24
 8002ef4:	af00      	add	r7, sp, #0
 8002ef6:	60f8      	str	r0, [r7, #12]
 8002ef8:	60b9      	str	r1, [r7, #8]
 8002efa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	f003 0307 	and.w	r3, r3, #7
 8002f02:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002f04:	69fb      	ldr	r3, [r7, #28]
 8002f06:	f1c3 0307 	rsb	r3, r3, #7
 8002f0a:	2b04      	cmp	r3, #4
 8002f0c:	bf28      	it	cs
 8002f0e:	2304      	movcs	r3, #4
 8002f10:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002f12:	69fb      	ldr	r3, [r7, #28]
 8002f14:	3304      	adds	r3, #4
 8002f16:	2b06      	cmp	r3, #6
 8002f18:	d902      	bls.n	8002f20 <NVIC_EncodePriority+0x30>
 8002f1a:	69fb      	ldr	r3, [r7, #28]
 8002f1c:	3b03      	subs	r3, #3
 8002f1e:	e000      	b.n	8002f22 <NVIC_EncodePriority+0x32>
 8002f20:	2300      	movs	r3, #0
 8002f22:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f24:	f04f 32ff 	mov.w	r2, #4294967295
 8002f28:	69bb      	ldr	r3, [r7, #24]
 8002f2a:	fa02 f303 	lsl.w	r3, r2, r3
 8002f2e:	43da      	mvns	r2, r3
 8002f30:	68bb      	ldr	r3, [r7, #8]
 8002f32:	401a      	ands	r2, r3
 8002f34:	697b      	ldr	r3, [r7, #20]
 8002f36:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002f38:	f04f 31ff 	mov.w	r1, #4294967295
 8002f3c:	697b      	ldr	r3, [r7, #20]
 8002f3e:	fa01 f303 	lsl.w	r3, r1, r3
 8002f42:	43d9      	mvns	r1, r3
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f48:	4313      	orrs	r3, r2
         );
}
 8002f4a:	4618      	mov	r0, r3
 8002f4c:	3724      	adds	r7, #36	@ 0x24
 8002f4e:	46bd      	mov	sp, r7
 8002f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f54:	4770      	bx	lr
	...

08002f58 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002f58:	b580      	push	{r7, lr}
 8002f5a:	b082      	sub	sp, #8
 8002f5c:	af00      	add	r7, sp, #0
 8002f5e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	3b01      	subs	r3, #1
 8002f64:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002f68:	d301      	bcc.n	8002f6e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002f6a:	2301      	movs	r3, #1
 8002f6c:	e00f      	b.n	8002f8e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002f6e:	4a0a      	ldr	r2, [pc, #40]	@ (8002f98 <SysTick_Config+0x40>)
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	3b01      	subs	r3, #1
 8002f74:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002f76:	210f      	movs	r1, #15
 8002f78:	f04f 30ff 	mov.w	r0, #4294967295
 8002f7c:	f7ff ff8e 	bl	8002e9c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002f80:	4b05      	ldr	r3, [pc, #20]	@ (8002f98 <SysTick_Config+0x40>)
 8002f82:	2200      	movs	r2, #0
 8002f84:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002f86:	4b04      	ldr	r3, [pc, #16]	@ (8002f98 <SysTick_Config+0x40>)
 8002f88:	2207      	movs	r2, #7
 8002f8a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002f8c:	2300      	movs	r3, #0
}
 8002f8e:	4618      	mov	r0, r3
 8002f90:	3708      	adds	r7, #8
 8002f92:	46bd      	mov	sp, r7
 8002f94:	bd80      	pop	{r7, pc}
 8002f96:	bf00      	nop
 8002f98:	e000e010 	.word	0xe000e010

08002f9c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f9c:	b580      	push	{r7, lr}
 8002f9e:	b082      	sub	sp, #8
 8002fa0:	af00      	add	r7, sp, #0
 8002fa2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002fa4:	6878      	ldr	r0, [r7, #4]
 8002fa6:	f7ff fee7 	bl	8002d78 <__NVIC_SetPriorityGrouping>
}
 8002faa:	bf00      	nop
 8002fac:	3708      	adds	r7, #8
 8002fae:	46bd      	mov	sp, r7
 8002fb0:	bd80      	pop	{r7, pc}

08002fb2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002fb2:	b580      	push	{r7, lr}
 8002fb4:	b086      	sub	sp, #24
 8002fb6:	af00      	add	r7, sp, #0
 8002fb8:	4603      	mov	r3, r0
 8002fba:	60b9      	str	r1, [r7, #8]
 8002fbc:	607a      	str	r2, [r7, #4]
 8002fbe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002fc0:	2300      	movs	r3, #0
 8002fc2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002fc4:	f7ff fefc 	bl	8002dc0 <__NVIC_GetPriorityGrouping>
 8002fc8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002fca:	687a      	ldr	r2, [r7, #4]
 8002fcc:	68b9      	ldr	r1, [r7, #8]
 8002fce:	6978      	ldr	r0, [r7, #20]
 8002fd0:	f7ff ff8e 	bl	8002ef0 <NVIC_EncodePriority>
 8002fd4:	4602      	mov	r2, r0
 8002fd6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002fda:	4611      	mov	r1, r2
 8002fdc:	4618      	mov	r0, r3
 8002fde:	f7ff ff5d 	bl	8002e9c <__NVIC_SetPriority>
}
 8002fe2:	bf00      	nop
 8002fe4:	3718      	adds	r7, #24
 8002fe6:	46bd      	mov	sp, r7
 8002fe8:	bd80      	pop	{r7, pc}

08002fea <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002fea:	b580      	push	{r7, lr}
 8002fec:	b082      	sub	sp, #8
 8002fee:	af00      	add	r7, sp, #0
 8002ff0:	4603      	mov	r3, r0
 8002ff2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002ff4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ff8:	4618      	mov	r0, r3
 8002ffa:	f7ff feef 	bl	8002ddc <__NVIC_EnableIRQ>
}
 8002ffe:	bf00      	nop
 8003000:	3708      	adds	r7, #8
 8003002:	46bd      	mov	sp, r7
 8003004:	bd80      	pop	{r7, pc}

08003006 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003006:	b580      	push	{r7, lr}
 8003008:	b082      	sub	sp, #8
 800300a:	af00      	add	r7, sp, #0
 800300c:	4603      	mov	r3, r0
 800300e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8003010:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003014:	4618      	mov	r0, r3
 8003016:	f7ff feff 	bl	8002e18 <__NVIC_DisableIRQ>
}
 800301a:	bf00      	nop
 800301c:	3708      	adds	r7, #8
 800301e:	46bd      	mov	sp, r7
 8003020:	bd80      	pop	{r7, pc}

08003022 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003022:	b580      	push	{r7, lr}
 8003024:	b082      	sub	sp, #8
 8003026:	af00      	add	r7, sp, #0
 8003028:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800302a:	6878      	ldr	r0, [r7, #4]
 800302c:	f7ff ff94 	bl	8002f58 <SysTick_Config>
 8003030:	4603      	mov	r3, r0
}
 8003032:	4618      	mov	r0, r3
 8003034:	3708      	adds	r7, #8
 8003036:	46bd      	mov	sp, r7
 8003038:	bd80      	pop	{r7, pc}

0800303a <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 800303a:	b580      	push	{r7, lr}
 800303c:	b082      	sub	sp, #8
 800303e:	af00      	add	r7, sp, #0
 8003040:	4603      	mov	r3, r0
 8003042:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 8003044:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003048:	4618      	mov	r0, r3
 800304a:	f7ff ff09 	bl	8002e60 <__NVIC_ClearPendingIRQ>
}
 800304e:	bf00      	nop
 8003050:	3708      	adds	r7, #8
 8003052:	46bd      	mov	sp, r7
 8003054:	bd80      	pop	{r7, pc}
	...

08003058 <HAL_EXTI_ClearPending>:
  *           @arg @ref EXTI_TRIGGER_RISING_FALLING
  *         This parameter is kept for compatibility with other series.
  * @retval None.
  */
void HAL_EXTI_ClearPending(EXTI_HandleTypeDef *hexti, uint32_t Edge)
{
 8003058:	b480      	push	{r7}
 800305a:	b085      	sub	sp, #20
 800305c:	af00      	add	r7, sp, #0
 800305e:	6078      	str	r0, [r7, #4]
 8003060:	6039      	str	r1, [r7, #0]
  assert_param(IS_EXTI_LINE(hexti->Line));
  assert_param(IS_EXTI_CONFIG_LINE(hexti->Line));
  assert_param(IS_EXTI_PENDING_EDGE(Edge));

  /* Compute line mask */
  maskline = (1uL << (hexti->Line & EXTI_PIN_MASK));
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	f003 031f 	and.w	r3, r3, #31
 800306a:	2201      	movs	r2, #1
 800306c:	fa02 f303 	lsl.w	r3, r2, r3
 8003070:	60fb      	str	r3, [r7, #12]

  /* Clear Pending bit */
  EXTI->PR =  maskline;
 8003072:	4a04      	ldr	r2, [pc, #16]	@ (8003084 <HAL_EXTI_ClearPending+0x2c>)
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	6153      	str	r3, [r2, #20]
}
 8003078:	bf00      	nop
 800307a:	3714      	adds	r7, #20
 800307c:	46bd      	mov	sp, r7
 800307e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003082:	4770      	bx	lr
 8003084:	40013c00 	.word	0x40013c00

08003088 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003088:	b480      	push	{r7}
 800308a:	b089      	sub	sp, #36	@ 0x24
 800308c:	af00      	add	r7, sp, #0
 800308e:	6078      	str	r0, [r7, #4]
 8003090:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003092:	2300      	movs	r3, #0
 8003094:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003096:	2300      	movs	r3, #0
 8003098:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800309a:	2300      	movs	r3, #0
 800309c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800309e:	2300      	movs	r3, #0
 80030a0:	61fb      	str	r3, [r7, #28]
 80030a2:	e177      	b.n	8003394 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80030a4:	2201      	movs	r2, #1
 80030a6:	69fb      	ldr	r3, [r7, #28]
 80030a8:	fa02 f303 	lsl.w	r3, r2, r3
 80030ac:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80030ae:	683b      	ldr	r3, [r7, #0]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	697a      	ldr	r2, [r7, #20]
 80030b4:	4013      	ands	r3, r2
 80030b6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80030b8:	693a      	ldr	r2, [r7, #16]
 80030ba:	697b      	ldr	r3, [r7, #20]
 80030bc:	429a      	cmp	r2, r3
 80030be:	f040 8166 	bne.w	800338e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80030c2:	683b      	ldr	r3, [r7, #0]
 80030c4:	685b      	ldr	r3, [r3, #4]
 80030c6:	f003 0303 	and.w	r3, r3, #3
 80030ca:	2b01      	cmp	r3, #1
 80030cc:	d005      	beq.n	80030da <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80030ce:	683b      	ldr	r3, [r7, #0]
 80030d0:	685b      	ldr	r3, [r3, #4]
 80030d2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80030d6:	2b02      	cmp	r3, #2
 80030d8:	d130      	bne.n	800313c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	689b      	ldr	r3, [r3, #8]
 80030de:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80030e0:	69fb      	ldr	r3, [r7, #28]
 80030e2:	005b      	lsls	r3, r3, #1
 80030e4:	2203      	movs	r2, #3
 80030e6:	fa02 f303 	lsl.w	r3, r2, r3
 80030ea:	43db      	mvns	r3, r3
 80030ec:	69ba      	ldr	r2, [r7, #24]
 80030ee:	4013      	ands	r3, r2
 80030f0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80030f2:	683b      	ldr	r3, [r7, #0]
 80030f4:	68da      	ldr	r2, [r3, #12]
 80030f6:	69fb      	ldr	r3, [r7, #28]
 80030f8:	005b      	lsls	r3, r3, #1
 80030fa:	fa02 f303 	lsl.w	r3, r2, r3
 80030fe:	69ba      	ldr	r2, [r7, #24]
 8003100:	4313      	orrs	r3, r2
 8003102:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	69ba      	ldr	r2, [r7, #24]
 8003108:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	685b      	ldr	r3, [r3, #4]
 800310e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003110:	2201      	movs	r2, #1
 8003112:	69fb      	ldr	r3, [r7, #28]
 8003114:	fa02 f303 	lsl.w	r3, r2, r3
 8003118:	43db      	mvns	r3, r3
 800311a:	69ba      	ldr	r2, [r7, #24]
 800311c:	4013      	ands	r3, r2
 800311e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003120:	683b      	ldr	r3, [r7, #0]
 8003122:	685b      	ldr	r3, [r3, #4]
 8003124:	091b      	lsrs	r3, r3, #4
 8003126:	f003 0201 	and.w	r2, r3, #1
 800312a:	69fb      	ldr	r3, [r7, #28]
 800312c:	fa02 f303 	lsl.w	r3, r2, r3
 8003130:	69ba      	ldr	r2, [r7, #24]
 8003132:	4313      	orrs	r3, r2
 8003134:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	69ba      	ldr	r2, [r7, #24]
 800313a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800313c:	683b      	ldr	r3, [r7, #0]
 800313e:	685b      	ldr	r3, [r3, #4]
 8003140:	f003 0303 	and.w	r3, r3, #3
 8003144:	2b03      	cmp	r3, #3
 8003146:	d017      	beq.n	8003178 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	68db      	ldr	r3, [r3, #12]
 800314c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800314e:	69fb      	ldr	r3, [r7, #28]
 8003150:	005b      	lsls	r3, r3, #1
 8003152:	2203      	movs	r2, #3
 8003154:	fa02 f303 	lsl.w	r3, r2, r3
 8003158:	43db      	mvns	r3, r3
 800315a:	69ba      	ldr	r2, [r7, #24]
 800315c:	4013      	ands	r3, r2
 800315e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003160:	683b      	ldr	r3, [r7, #0]
 8003162:	689a      	ldr	r2, [r3, #8]
 8003164:	69fb      	ldr	r3, [r7, #28]
 8003166:	005b      	lsls	r3, r3, #1
 8003168:	fa02 f303 	lsl.w	r3, r2, r3
 800316c:	69ba      	ldr	r2, [r7, #24]
 800316e:	4313      	orrs	r3, r2
 8003170:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	69ba      	ldr	r2, [r7, #24]
 8003176:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003178:	683b      	ldr	r3, [r7, #0]
 800317a:	685b      	ldr	r3, [r3, #4]
 800317c:	f003 0303 	and.w	r3, r3, #3
 8003180:	2b02      	cmp	r3, #2
 8003182:	d123      	bne.n	80031cc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003184:	69fb      	ldr	r3, [r7, #28]
 8003186:	08da      	lsrs	r2, r3, #3
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	3208      	adds	r2, #8
 800318c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003190:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003192:	69fb      	ldr	r3, [r7, #28]
 8003194:	f003 0307 	and.w	r3, r3, #7
 8003198:	009b      	lsls	r3, r3, #2
 800319a:	220f      	movs	r2, #15
 800319c:	fa02 f303 	lsl.w	r3, r2, r3
 80031a0:	43db      	mvns	r3, r3
 80031a2:	69ba      	ldr	r2, [r7, #24]
 80031a4:	4013      	ands	r3, r2
 80031a6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80031a8:	683b      	ldr	r3, [r7, #0]
 80031aa:	691a      	ldr	r2, [r3, #16]
 80031ac:	69fb      	ldr	r3, [r7, #28]
 80031ae:	f003 0307 	and.w	r3, r3, #7
 80031b2:	009b      	lsls	r3, r3, #2
 80031b4:	fa02 f303 	lsl.w	r3, r2, r3
 80031b8:	69ba      	ldr	r2, [r7, #24]
 80031ba:	4313      	orrs	r3, r2
 80031bc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80031be:	69fb      	ldr	r3, [r7, #28]
 80031c0:	08da      	lsrs	r2, r3, #3
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	3208      	adds	r2, #8
 80031c6:	69b9      	ldr	r1, [r7, #24]
 80031c8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80031d2:	69fb      	ldr	r3, [r7, #28]
 80031d4:	005b      	lsls	r3, r3, #1
 80031d6:	2203      	movs	r2, #3
 80031d8:	fa02 f303 	lsl.w	r3, r2, r3
 80031dc:	43db      	mvns	r3, r3
 80031de:	69ba      	ldr	r2, [r7, #24]
 80031e0:	4013      	ands	r3, r2
 80031e2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80031e4:	683b      	ldr	r3, [r7, #0]
 80031e6:	685b      	ldr	r3, [r3, #4]
 80031e8:	f003 0203 	and.w	r2, r3, #3
 80031ec:	69fb      	ldr	r3, [r7, #28]
 80031ee:	005b      	lsls	r3, r3, #1
 80031f0:	fa02 f303 	lsl.w	r3, r2, r3
 80031f4:	69ba      	ldr	r2, [r7, #24]
 80031f6:	4313      	orrs	r3, r2
 80031f8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	69ba      	ldr	r2, [r7, #24]
 80031fe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003200:	683b      	ldr	r3, [r7, #0]
 8003202:	685b      	ldr	r3, [r3, #4]
 8003204:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003208:	2b00      	cmp	r3, #0
 800320a:	f000 80c0 	beq.w	800338e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800320e:	2300      	movs	r3, #0
 8003210:	60fb      	str	r3, [r7, #12]
 8003212:	4b66      	ldr	r3, [pc, #408]	@ (80033ac <HAL_GPIO_Init+0x324>)
 8003214:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003216:	4a65      	ldr	r2, [pc, #404]	@ (80033ac <HAL_GPIO_Init+0x324>)
 8003218:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800321c:	6453      	str	r3, [r2, #68]	@ 0x44
 800321e:	4b63      	ldr	r3, [pc, #396]	@ (80033ac <HAL_GPIO_Init+0x324>)
 8003220:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003222:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003226:	60fb      	str	r3, [r7, #12]
 8003228:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800322a:	4a61      	ldr	r2, [pc, #388]	@ (80033b0 <HAL_GPIO_Init+0x328>)
 800322c:	69fb      	ldr	r3, [r7, #28]
 800322e:	089b      	lsrs	r3, r3, #2
 8003230:	3302      	adds	r3, #2
 8003232:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003236:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003238:	69fb      	ldr	r3, [r7, #28]
 800323a:	f003 0303 	and.w	r3, r3, #3
 800323e:	009b      	lsls	r3, r3, #2
 8003240:	220f      	movs	r2, #15
 8003242:	fa02 f303 	lsl.w	r3, r2, r3
 8003246:	43db      	mvns	r3, r3
 8003248:	69ba      	ldr	r2, [r7, #24]
 800324a:	4013      	ands	r3, r2
 800324c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	4a58      	ldr	r2, [pc, #352]	@ (80033b4 <HAL_GPIO_Init+0x32c>)
 8003252:	4293      	cmp	r3, r2
 8003254:	d037      	beq.n	80032c6 <HAL_GPIO_Init+0x23e>
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	4a57      	ldr	r2, [pc, #348]	@ (80033b8 <HAL_GPIO_Init+0x330>)
 800325a:	4293      	cmp	r3, r2
 800325c:	d031      	beq.n	80032c2 <HAL_GPIO_Init+0x23a>
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	4a56      	ldr	r2, [pc, #344]	@ (80033bc <HAL_GPIO_Init+0x334>)
 8003262:	4293      	cmp	r3, r2
 8003264:	d02b      	beq.n	80032be <HAL_GPIO_Init+0x236>
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	4a55      	ldr	r2, [pc, #340]	@ (80033c0 <HAL_GPIO_Init+0x338>)
 800326a:	4293      	cmp	r3, r2
 800326c:	d025      	beq.n	80032ba <HAL_GPIO_Init+0x232>
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	4a54      	ldr	r2, [pc, #336]	@ (80033c4 <HAL_GPIO_Init+0x33c>)
 8003272:	4293      	cmp	r3, r2
 8003274:	d01f      	beq.n	80032b6 <HAL_GPIO_Init+0x22e>
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	4a53      	ldr	r2, [pc, #332]	@ (80033c8 <HAL_GPIO_Init+0x340>)
 800327a:	4293      	cmp	r3, r2
 800327c:	d019      	beq.n	80032b2 <HAL_GPIO_Init+0x22a>
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	4a52      	ldr	r2, [pc, #328]	@ (80033cc <HAL_GPIO_Init+0x344>)
 8003282:	4293      	cmp	r3, r2
 8003284:	d013      	beq.n	80032ae <HAL_GPIO_Init+0x226>
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	4a51      	ldr	r2, [pc, #324]	@ (80033d0 <HAL_GPIO_Init+0x348>)
 800328a:	4293      	cmp	r3, r2
 800328c:	d00d      	beq.n	80032aa <HAL_GPIO_Init+0x222>
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	4a50      	ldr	r2, [pc, #320]	@ (80033d4 <HAL_GPIO_Init+0x34c>)
 8003292:	4293      	cmp	r3, r2
 8003294:	d007      	beq.n	80032a6 <HAL_GPIO_Init+0x21e>
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	4a4f      	ldr	r2, [pc, #316]	@ (80033d8 <HAL_GPIO_Init+0x350>)
 800329a:	4293      	cmp	r3, r2
 800329c:	d101      	bne.n	80032a2 <HAL_GPIO_Init+0x21a>
 800329e:	2309      	movs	r3, #9
 80032a0:	e012      	b.n	80032c8 <HAL_GPIO_Init+0x240>
 80032a2:	230a      	movs	r3, #10
 80032a4:	e010      	b.n	80032c8 <HAL_GPIO_Init+0x240>
 80032a6:	2308      	movs	r3, #8
 80032a8:	e00e      	b.n	80032c8 <HAL_GPIO_Init+0x240>
 80032aa:	2307      	movs	r3, #7
 80032ac:	e00c      	b.n	80032c8 <HAL_GPIO_Init+0x240>
 80032ae:	2306      	movs	r3, #6
 80032b0:	e00a      	b.n	80032c8 <HAL_GPIO_Init+0x240>
 80032b2:	2305      	movs	r3, #5
 80032b4:	e008      	b.n	80032c8 <HAL_GPIO_Init+0x240>
 80032b6:	2304      	movs	r3, #4
 80032b8:	e006      	b.n	80032c8 <HAL_GPIO_Init+0x240>
 80032ba:	2303      	movs	r3, #3
 80032bc:	e004      	b.n	80032c8 <HAL_GPIO_Init+0x240>
 80032be:	2302      	movs	r3, #2
 80032c0:	e002      	b.n	80032c8 <HAL_GPIO_Init+0x240>
 80032c2:	2301      	movs	r3, #1
 80032c4:	e000      	b.n	80032c8 <HAL_GPIO_Init+0x240>
 80032c6:	2300      	movs	r3, #0
 80032c8:	69fa      	ldr	r2, [r7, #28]
 80032ca:	f002 0203 	and.w	r2, r2, #3
 80032ce:	0092      	lsls	r2, r2, #2
 80032d0:	4093      	lsls	r3, r2
 80032d2:	69ba      	ldr	r2, [r7, #24]
 80032d4:	4313      	orrs	r3, r2
 80032d6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80032d8:	4935      	ldr	r1, [pc, #212]	@ (80033b0 <HAL_GPIO_Init+0x328>)
 80032da:	69fb      	ldr	r3, [r7, #28]
 80032dc:	089b      	lsrs	r3, r3, #2
 80032de:	3302      	adds	r3, #2
 80032e0:	69ba      	ldr	r2, [r7, #24]
 80032e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80032e6:	4b3d      	ldr	r3, [pc, #244]	@ (80033dc <HAL_GPIO_Init+0x354>)
 80032e8:	689b      	ldr	r3, [r3, #8]
 80032ea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80032ec:	693b      	ldr	r3, [r7, #16]
 80032ee:	43db      	mvns	r3, r3
 80032f0:	69ba      	ldr	r2, [r7, #24]
 80032f2:	4013      	ands	r3, r2
 80032f4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80032f6:	683b      	ldr	r3, [r7, #0]
 80032f8:	685b      	ldr	r3, [r3, #4]
 80032fa:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d003      	beq.n	800330a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003302:	69ba      	ldr	r2, [r7, #24]
 8003304:	693b      	ldr	r3, [r7, #16]
 8003306:	4313      	orrs	r3, r2
 8003308:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800330a:	4a34      	ldr	r2, [pc, #208]	@ (80033dc <HAL_GPIO_Init+0x354>)
 800330c:	69bb      	ldr	r3, [r7, #24]
 800330e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003310:	4b32      	ldr	r3, [pc, #200]	@ (80033dc <HAL_GPIO_Init+0x354>)
 8003312:	68db      	ldr	r3, [r3, #12]
 8003314:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003316:	693b      	ldr	r3, [r7, #16]
 8003318:	43db      	mvns	r3, r3
 800331a:	69ba      	ldr	r2, [r7, #24]
 800331c:	4013      	ands	r3, r2
 800331e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003320:	683b      	ldr	r3, [r7, #0]
 8003322:	685b      	ldr	r3, [r3, #4]
 8003324:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003328:	2b00      	cmp	r3, #0
 800332a:	d003      	beq.n	8003334 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800332c:	69ba      	ldr	r2, [r7, #24]
 800332e:	693b      	ldr	r3, [r7, #16]
 8003330:	4313      	orrs	r3, r2
 8003332:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003334:	4a29      	ldr	r2, [pc, #164]	@ (80033dc <HAL_GPIO_Init+0x354>)
 8003336:	69bb      	ldr	r3, [r7, #24]
 8003338:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800333a:	4b28      	ldr	r3, [pc, #160]	@ (80033dc <HAL_GPIO_Init+0x354>)
 800333c:	685b      	ldr	r3, [r3, #4]
 800333e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003340:	693b      	ldr	r3, [r7, #16]
 8003342:	43db      	mvns	r3, r3
 8003344:	69ba      	ldr	r2, [r7, #24]
 8003346:	4013      	ands	r3, r2
 8003348:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800334a:	683b      	ldr	r3, [r7, #0]
 800334c:	685b      	ldr	r3, [r3, #4]
 800334e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003352:	2b00      	cmp	r3, #0
 8003354:	d003      	beq.n	800335e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003356:	69ba      	ldr	r2, [r7, #24]
 8003358:	693b      	ldr	r3, [r7, #16]
 800335a:	4313      	orrs	r3, r2
 800335c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800335e:	4a1f      	ldr	r2, [pc, #124]	@ (80033dc <HAL_GPIO_Init+0x354>)
 8003360:	69bb      	ldr	r3, [r7, #24]
 8003362:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003364:	4b1d      	ldr	r3, [pc, #116]	@ (80033dc <HAL_GPIO_Init+0x354>)
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800336a:	693b      	ldr	r3, [r7, #16]
 800336c:	43db      	mvns	r3, r3
 800336e:	69ba      	ldr	r2, [r7, #24]
 8003370:	4013      	ands	r3, r2
 8003372:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003374:	683b      	ldr	r3, [r7, #0]
 8003376:	685b      	ldr	r3, [r3, #4]
 8003378:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800337c:	2b00      	cmp	r3, #0
 800337e:	d003      	beq.n	8003388 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003380:	69ba      	ldr	r2, [r7, #24]
 8003382:	693b      	ldr	r3, [r7, #16]
 8003384:	4313      	orrs	r3, r2
 8003386:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003388:	4a14      	ldr	r2, [pc, #80]	@ (80033dc <HAL_GPIO_Init+0x354>)
 800338a:	69bb      	ldr	r3, [r7, #24]
 800338c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800338e:	69fb      	ldr	r3, [r7, #28]
 8003390:	3301      	adds	r3, #1
 8003392:	61fb      	str	r3, [r7, #28]
 8003394:	69fb      	ldr	r3, [r7, #28]
 8003396:	2b0f      	cmp	r3, #15
 8003398:	f67f ae84 	bls.w	80030a4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800339c:	bf00      	nop
 800339e:	bf00      	nop
 80033a0:	3724      	adds	r7, #36	@ 0x24
 80033a2:	46bd      	mov	sp, r7
 80033a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a8:	4770      	bx	lr
 80033aa:	bf00      	nop
 80033ac:	40023800 	.word	0x40023800
 80033b0:	40013800 	.word	0x40013800
 80033b4:	40020000 	.word	0x40020000
 80033b8:	40020400 	.word	0x40020400
 80033bc:	40020800 	.word	0x40020800
 80033c0:	40020c00 	.word	0x40020c00
 80033c4:	40021000 	.word	0x40021000
 80033c8:	40021400 	.word	0x40021400
 80033cc:	40021800 	.word	0x40021800
 80033d0:	40021c00 	.word	0x40021c00
 80033d4:	40022000 	.word	0x40022000
 80033d8:	40022400 	.word	0x40022400
 80033dc:	40013c00 	.word	0x40013c00

080033e0 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80033e0:	b480      	push	{r7}
 80033e2:	b087      	sub	sp, #28
 80033e4:	af00      	add	r7, sp, #0
 80033e6:	6078      	str	r0, [r7, #4]
 80033e8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80033ea:	2300      	movs	r3, #0
 80033ec:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 80033ee:	2300      	movs	r3, #0
 80033f0:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 80033f2:	2300      	movs	r3, #0
 80033f4:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80033f6:	2300      	movs	r3, #0
 80033f8:	617b      	str	r3, [r7, #20]
 80033fa:	e0d9      	b.n	80035b0 <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80033fc:	2201      	movs	r2, #1
 80033fe:	697b      	ldr	r3, [r7, #20]
 8003400:	fa02 f303 	lsl.w	r3, r2, r3
 8003404:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8003406:	683a      	ldr	r2, [r7, #0]
 8003408:	693b      	ldr	r3, [r7, #16]
 800340a:	4013      	ands	r3, r2
 800340c:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 800340e:	68fa      	ldr	r2, [r7, #12]
 8003410:	693b      	ldr	r3, [r7, #16]
 8003412:	429a      	cmp	r2, r3
 8003414:	f040 80c9 	bne.w	80035aa <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8003418:	4a6b      	ldr	r2, [pc, #428]	@ (80035c8 <HAL_GPIO_DeInit+0x1e8>)
 800341a:	697b      	ldr	r3, [r7, #20]
 800341c:	089b      	lsrs	r3, r3, #2
 800341e:	3302      	adds	r3, #2
 8003420:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003424:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8003426:	697b      	ldr	r3, [r7, #20]
 8003428:	f003 0303 	and.w	r3, r3, #3
 800342c:	009b      	lsls	r3, r3, #2
 800342e:	220f      	movs	r2, #15
 8003430:	fa02 f303 	lsl.w	r3, r2, r3
 8003434:	68ba      	ldr	r2, [r7, #8]
 8003436:	4013      	ands	r3, r2
 8003438:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	4a63      	ldr	r2, [pc, #396]	@ (80035cc <HAL_GPIO_DeInit+0x1ec>)
 800343e:	4293      	cmp	r3, r2
 8003440:	d037      	beq.n	80034b2 <HAL_GPIO_DeInit+0xd2>
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	4a62      	ldr	r2, [pc, #392]	@ (80035d0 <HAL_GPIO_DeInit+0x1f0>)
 8003446:	4293      	cmp	r3, r2
 8003448:	d031      	beq.n	80034ae <HAL_GPIO_DeInit+0xce>
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	4a61      	ldr	r2, [pc, #388]	@ (80035d4 <HAL_GPIO_DeInit+0x1f4>)
 800344e:	4293      	cmp	r3, r2
 8003450:	d02b      	beq.n	80034aa <HAL_GPIO_DeInit+0xca>
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	4a60      	ldr	r2, [pc, #384]	@ (80035d8 <HAL_GPIO_DeInit+0x1f8>)
 8003456:	4293      	cmp	r3, r2
 8003458:	d025      	beq.n	80034a6 <HAL_GPIO_DeInit+0xc6>
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	4a5f      	ldr	r2, [pc, #380]	@ (80035dc <HAL_GPIO_DeInit+0x1fc>)
 800345e:	4293      	cmp	r3, r2
 8003460:	d01f      	beq.n	80034a2 <HAL_GPIO_DeInit+0xc2>
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	4a5e      	ldr	r2, [pc, #376]	@ (80035e0 <HAL_GPIO_DeInit+0x200>)
 8003466:	4293      	cmp	r3, r2
 8003468:	d019      	beq.n	800349e <HAL_GPIO_DeInit+0xbe>
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	4a5d      	ldr	r2, [pc, #372]	@ (80035e4 <HAL_GPIO_DeInit+0x204>)
 800346e:	4293      	cmp	r3, r2
 8003470:	d013      	beq.n	800349a <HAL_GPIO_DeInit+0xba>
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	4a5c      	ldr	r2, [pc, #368]	@ (80035e8 <HAL_GPIO_DeInit+0x208>)
 8003476:	4293      	cmp	r3, r2
 8003478:	d00d      	beq.n	8003496 <HAL_GPIO_DeInit+0xb6>
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	4a5b      	ldr	r2, [pc, #364]	@ (80035ec <HAL_GPIO_DeInit+0x20c>)
 800347e:	4293      	cmp	r3, r2
 8003480:	d007      	beq.n	8003492 <HAL_GPIO_DeInit+0xb2>
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	4a5a      	ldr	r2, [pc, #360]	@ (80035f0 <HAL_GPIO_DeInit+0x210>)
 8003486:	4293      	cmp	r3, r2
 8003488:	d101      	bne.n	800348e <HAL_GPIO_DeInit+0xae>
 800348a:	2309      	movs	r3, #9
 800348c:	e012      	b.n	80034b4 <HAL_GPIO_DeInit+0xd4>
 800348e:	230a      	movs	r3, #10
 8003490:	e010      	b.n	80034b4 <HAL_GPIO_DeInit+0xd4>
 8003492:	2308      	movs	r3, #8
 8003494:	e00e      	b.n	80034b4 <HAL_GPIO_DeInit+0xd4>
 8003496:	2307      	movs	r3, #7
 8003498:	e00c      	b.n	80034b4 <HAL_GPIO_DeInit+0xd4>
 800349a:	2306      	movs	r3, #6
 800349c:	e00a      	b.n	80034b4 <HAL_GPIO_DeInit+0xd4>
 800349e:	2305      	movs	r3, #5
 80034a0:	e008      	b.n	80034b4 <HAL_GPIO_DeInit+0xd4>
 80034a2:	2304      	movs	r3, #4
 80034a4:	e006      	b.n	80034b4 <HAL_GPIO_DeInit+0xd4>
 80034a6:	2303      	movs	r3, #3
 80034a8:	e004      	b.n	80034b4 <HAL_GPIO_DeInit+0xd4>
 80034aa:	2302      	movs	r3, #2
 80034ac:	e002      	b.n	80034b4 <HAL_GPIO_DeInit+0xd4>
 80034ae:	2301      	movs	r3, #1
 80034b0:	e000      	b.n	80034b4 <HAL_GPIO_DeInit+0xd4>
 80034b2:	2300      	movs	r3, #0
 80034b4:	697a      	ldr	r2, [r7, #20]
 80034b6:	f002 0203 	and.w	r2, r2, #3
 80034ba:	0092      	lsls	r2, r2, #2
 80034bc:	4093      	lsls	r3, r2
 80034be:	68ba      	ldr	r2, [r7, #8]
 80034c0:	429a      	cmp	r2, r3
 80034c2:	d132      	bne.n	800352a <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 80034c4:	4b4b      	ldr	r3, [pc, #300]	@ (80035f4 <HAL_GPIO_DeInit+0x214>)
 80034c6:	681a      	ldr	r2, [r3, #0]
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	43db      	mvns	r3, r3
 80034cc:	4949      	ldr	r1, [pc, #292]	@ (80035f4 <HAL_GPIO_DeInit+0x214>)
 80034ce:	4013      	ands	r3, r2
 80034d0:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 80034d2:	4b48      	ldr	r3, [pc, #288]	@ (80035f4 <HAL_GPIO_DeInit+0x214>)
 80034d4:	685a      	ldr	r2, [r3, #4]
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	43db      	mvns	r3, r3
 80034da:	4946      	ldr	r1, [pc, #280]	@ (80035f4 <HAL_GPIO_DeInit+0x214>)
 80034dc:	4013      	ands	r3, r2
 80034de:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 80034e0:	4b44      	ldr	r3, [pc, #272]	@ (80035f4 <HAL_GPIO_DeInit+0x214>)
 80034e2:	68da      	ldr	r2, [r3, #12]
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	43db      	mvns	r3, r3
 80034e8:	4942      	ldr	r1, [pc, #264]	@ (80035f4 <HAL_GPIO_DeInit+0x214>)
 80034ea:	4013      	ands	r3, r2
 80034ec:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 80034ee:	4b41      	ldr	r3, [pc, #260]	@ (80035f4 <HAL_GPIO_DeInit+0x214>)
 80034f0:	689a      	ldr	r2, [r3, #8]
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	43db      	mvns	r3, r3
 80034f6:	493f      	ldr	r1, [pc, #252]	@ (80035f4 <HAL_GPIO_DeInit+0x214>)
 80034f8:	4013      	ands	r3, r2
 80034fa:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 80034fc:	697b      	ldr	r3, [r7, #20]
 80034fe:	f003 0303 	and.w	r3, r3, #3
 8003502:	009b      	lsls	r3, r3, #2
 8003504:	220f      	movs	r2, #15
 8003506:	fa02 f303 	lsl.w	r3, r2, r3
 800350a:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 800350c:	4a2e      	ldr	r2, [pc, #184]	@ (80035c8 <HAL_GPIO_DeInit+0x1e8>)
 800350e:	697b      	ldr	r3, [r7, #20]
 8003510:	089b      	lsrs	r3, r3, #2
 8003512:	3302      	adds	r3, #2
 8003514:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8003518:	68bb      	ldr	r3, [r7, #8]
 800351a:	43da      	mvns	r2, r3
 800351c:	482a      	ldr	r0, [pc, #168]	@ (80035c8 <HAL_GPIO_DeInit+0x1e8>)
 800351e:	697b      	ldr	r3, [r7, #20]
 8003520:	089b      	lsrs	r3, r3, #2
 8003522:	400a      	ands	r2, r1
 8003524:	3302      	adds	r3, #2
 8003526:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681a      	ldr	r2, [r3, #0]
 800352e:	697b      	ldr	r3, [r7, #20]
 8003530:	005b      	lsls	r3, r3, #1
 8003532:	2103      	movs	r1, #3
 8003534:	fa01 f303 	lsl.w	r3, r1, r3
 8003538:	43db      	mvns	r3, r3
 800353a:	401a      	ands	r2, r3
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003540:	697b      	ldr	r3, [r7, #20]
 8003542:	08da      	lsrs	r2, r3, #3
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	3208      	adds	r2, #8
 8003548:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800354c:	697b      	ldr	r3, [r7, #20]
 800354e:	f003 0307 	and.w	r3, r3, #7
 8003552:	009b      	lsls	r3, r3, #2
 8003554:	220f      	movs	r2, #15
 8003556:	fa02 f303 	lsl.w	r3, r2, r3
 800355a:	43db      	mvns	r3, r3
 800355c:	697a      	ldr	r2, [r7, #20]
 800355e:	08d2      	lsrs	r2, r2, #3
 8003560:	4019      	ands	r1, r3
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	3208      	adds	r2, #8
 8003566:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	68da      	ldr	r2, [r3, #12]
 800356e:	697b      	ldr	r3, [r7, #20]
 8003570:	005b      	lsls	r3, r3, #1
 8003572:	2103      	movs	r1, #3
 8003574:	fa01 f303 	lsl.w	r3, r1, r3
 8003578:	43db      	mvns	r3, r3
 800357a:	401a      	ands	r2, r3
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	685a      	ldr	r2, [r3, #4]
 8003584:	2101      	movs	r1, #1
 8003586:	697b      	ldr	r3, [r7, #20]
 8003588:	fa01 f303 	lsl.w	r3, r1, r3
 800358c:	43db      	mvns	r3, r3
 800358e:	401a      	ands	r2, r3
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	689a      	ldr	r2, [r3, #8]
 8003598:	697b      	ldr	r3, [r7, #20]
 800359a:	005b      	lsls	r3, r3, #1
 800359c:	2103      	movs	r1, #3
 800359e:	fa01 f303 	lsl.w	r3, r1, r3
 80035a2:	43db      	mvns	r3, r3
 80035a4:	401a      	ands	r2, r3
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80035aa:	697b      	ldr	r3, [r7, #20]
 80035ac:	3301      	adds	r3, #1
 80035ae:	617b      	str	r3, [r7, #20]
 80035b0:	697b      	ldr	r3, [r7, #20]
 80035b2:	2b0f      	cmp	r3, #15
 80035b4:	f67f af22 	bls.w	80033fc <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 80035b8:	bf00      	nop
 80035ba:	bf00      	nop
 80035bc:	371c      	adds	r7, #28
 80035be:	46bd      	mov	sp, r7
 80035c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c4:	4770      	bx	lr
 80035c6:	bf00      	nop
 80035c8:	40013800 	.word	0x40013800
 80035cc:	40020000 	.word	0x40020000
 80035d0:	40020400 	.word	0x40020400
 80035d4:	40020800 	.word	0x40020800
 80035d8:	40020c00 	.word	0x40020c00
 80035dc:	40021000 	.word	0x40021000
 80035e0:	40021400 	.word	0x40021400
 80035e4:	40021800 	.word	0x40021800
 80035e8:	40021c00 	.word	0x40021c00
 80035ec:	40022000 	.word	0x40022000
 80035f0:	40022400 	.word	0x40022400
 80035f4:	40013c00 	.word	0x40013c00

080035f8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80035f8:	b480      	push	{r7}
 80035fa:	b083      	sub	sp, #12
 80035fc:	af00      	add	r7, sp, #0
 80035fe:	6078      	str	r0, [r7, #4]
 8003600:	460b      	mov	r3, r1
 8003602:	807b      	strh	r3, [r7, #2]
 8003604:	4613      	mov	r3, r2
 8003606:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003608:	787b      	ldrb	r3, [r7, #1]
 800360a:	2b00      	cmp	r3, #0
 800360c:	d003      	beq.n	8003616 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800360e:	887a      	ldrh	r2, [r7, #2]
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003614:	e003      	b.n	800361e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003616:	887b      	ldrh	r3, [r7, #2]
 8003618:	041a      	lsls	r2, r3, #16
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	619a      	str	r2, [r3, #24]
}
 800361e:	bf00      	nop
 8003620:	370c      	adds	r7, #12
 8003622:	46bd      	mov	sp, r7
 8003624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003628:	4770      	bx	lr
	...

0800362c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800362c:	b580      	push	{r7, lr}
 800362e:	b084      	sub	sp, #16
 8003630:	af00      	add	r7, sp, #0
 8003632:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	2b00      	cmp	r3, #0
 8003638:	d101      	bne.n	800363e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800363a:	2301      	movs	r3, #1
 800363c:	e12b      	b.n	8003896 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003644:	b2db      	uxtb	r3, r3
 8003646:	2b00      	cmp	r3, #0
 8003648:	d106      	bne.n	8003658 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	2200      	movs	r2, #0
 800364e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003652:	6878      	ldr	r0, [r7, #4]
 8003654:	f7fe fc32 	bl	8001ebc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	2224      	movs	r2, #36	@ 0x24
 800365c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	681a      	ldr	r2, [r3, #0]
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	f022 0201 	bic.w	r2, r2, #1
 800366e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	681a      	ldr	r2, [r3, #0]
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800367e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	681a      	ldr	r2, [r3, #0]
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800368e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003690:	f001 ff82 	bl	8005598 <HAL_RCC_GetPCLK1Freq>
 8003694:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	685b      	ldr	r3, [r3, #4]
 800369a:	4a81      	ldr	r2, [pc, #516]	@ (80038a0 <HAL_I2C_Init+0x274>)
 800369c:	4293      	cmp	r3, r2
 800369e:	d807      	bhi.n	80036b0 <HAL_I2C_Init+0x84>
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	4a80      	ldr	r2, [pc, #512]	@ (80038a4 <HAL_I2C_Init+0x278>)
 80036a4:	4293      	cmp	r3, r2
 80036a6:	bf94      	ite	ls
 80036a8:	2301      	movls	r3, #1
 80036aa:	2300      	movhi	r3, #0
 80036ac:	b2db      	uxtb	r3, r3
 80036ae:	e006      	b.n	80036be <HAL_I2C_Init+0x92>
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	4a7d      	ldr	r2, [pc, #500]	@ (80038a8 <HAL_I2C_Init+0x27c>)
 80036b4:	4293      	cmp	r3, r2
 80036b6:	bf94      	ite	ls
 80036b8:	2301      	movls	r3, #1
 80036ba:	2300      	movhi	r3, #0
 80036bc:	b2db      	uxtb	r3, r3
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d001      	beq.n	80036c6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80036c2:	2301      	movs	r3, #1
 80036c4:	e0e7      	b.n	8003896 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	4a78      	ldr	r2, [pc, #480]	@ (80038ac <HAL_I2C_Init+0x280>)
 80036ca:	fba2 2303 	umull	r2, r3, r2, r3
 80036ce:	0c9b      	lsrs	r3, r3, #18
 80036d0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	685b      	ldr	r3, [r3, #4]
 80036d8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	68ba      	ldr	r2, [r7, #8]
 80036e2:	430a      	orrs	r2, r1
 80036e4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	6a1b      	ldr	r3, [r3, #32]
 80036ec:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	685b      	ldr	r3, [r3, #4]
 80036f4:	4a6a      	ldr	r2, [pc, #424]	@ (80038a0 <HAL_I2C_Init+0x274>)
 80036f6:	4293      	cmp	r3, r2
 80036f8:	d802      	bhi.n	8003700 <HAL_I2C_Init+0xd4>
 80036fa:	68bb      	ldr	r3, [r7, #8]
 80036fc:	3301      	adds	r3, #1
 80036fe:	e009      	b.n	8003714 <HAL_I2C_Init+0xe8>
 8003700:	68bb      	ldr	r3, [r7, #8]
 8003702:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8003706:	fb02 f303 	mul.w	r3, r2, r3
 800370a:	4a69      	ldr	r2, [pc, #420]	@ (80038b0 <HAL_I2C_Init+0x284>)
 800370c:	fba2 2303 	umull	r2, r3, r2, r3
 8003710:	099b      	lsrs	r3, r3, #6
 8003712:	3301      	adds	r3, #1
 8003714:	687a      	ldr	r2, [r7, #4]
 8003716:	6812      	ldr	r2, [r2, #0]
 8003718:	430b      	orrs	r3, r1
 800371a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	69db      	ldr	r3, [r3, #28]
 8003722:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8003726:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	685b      	ldr	r3, [r3, #4]
 800372e:	495c      	ldr	r1, [pc, #368]	@ (80038a0 <HAL_I2C_Init+0x274>)
 8003730:	428b      	cmp	r3, r1
 8003732:	d819      	bhi.n	8003768 <HAL_I2C_Init+0x13c>
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	1e59      	subs	r1, r3, #1
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	685b      	ldr	r3, [r3, #4]
 800373c:	005b      	lsls	r3, r3, #1
 800373e:	fbb1 f3f3 	udiv	r3, r1, r3
 8003742:	1c59      	adds	r1, r3, #1
 8003744:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8003748:	400b      	ands	r3, r1
 800374a:	2b00      	cmp	r3, #0
 800374c:	d00a      	beq.n	8003764 <HAL_I2C_Init+0x138>
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	1e59      	subs	r1, r3, #1
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	685b      	ldr	r3, [r3, #4]
 8003756:	005b      	lsls	r3, r3, #1
 8003758:	fbb1 f3f3 	udiv	r3, r1, r3
 800375c:	3301      	adds	r3, #1
 800375e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003762:	e051      	b.n	8003808 <HAL_I2C_Init+0x1dc>
 8003764:	2304      	movs	r3, #4
 8003766:	e04f      	b.n	8003808 <HAL_I2C_Init+0x1dc>
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	689b      	ldr	r3, [r3, #8]
 800376c:	2b00      	cmp	r3, #0
 800376e:	d111      	bne.n	8003794 <HAL_I2C_Init+0x168>
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	1e58      	subs	r0, r3, #1
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	6859      	ldr	r1, [r3, #4]
 8003778:	460b      	mov	r3, r1
 800377a:	005b      	lsls	r3, r3, #1
 800377c:	440b      	add	r3, r1
 800377e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003782:	3301      	adds	r3, #1
 8003784:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003788:	2b00      	cmp	r3, #0
 800378a:	bf0c      	ite	eq
 800378c:	2301      	moveq	r3, #1
 800378e:	2300      	movne	r3, #0
 8003790:	b2db      	uxtb	r3, r3
 8003792:	e012      	b.n	80037ba <HAL_I2C_Init+0x18e>
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	1e58      	subs	r0, r3, #1
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	6859      	ldr	r1, [r3, #4]
 800379c:	460b      	mov	r3, r1
 800379e:	009b      	lsls	r3, r3, #2
 80037a0:	440b      	add	r3, r1
 80037a2:	0099      	lsls	r1, r3, #2
 80037a4:	440b      	add	r3, r1
 80037a6:	fbb0 f3f3 	udiv	r3, r0, r3
 80037aa:	3301      	adds	r3, #1
 80037ac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	bf0c      	ite	eq
 80037b4:	2301      	moveq	r3, #1
 80037b6:	2300      	movne	r3, #0
 80037b8:	b2db      	uxtb	r3, r3
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d001      	beq.n	80037c2 <HAL_I2C_Init+0x196>
 80037be:	2301      	movs	r3, #1
 80037c0:	e022      	b.n	8003808 <HAL_I2C_Init+0x1dc>
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	689b      	ldr	r3, [r3, #8]
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d10e      	bne.n	80037e8 <HAL_I2C_Init+0x1bc>
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	1e58      	subs	r0, r3, #1
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	6859      	ldr	r1, [r3, #4]
 80037d2:	460b      	mov	r3, r1
 80037d4:	005b      	lsls	r3, r3, #1
 80037d6:	440b      	add	r3, r1
 80037d8:	fbb0 f3f3 	udiv	r3, r0, r3
 80037dc:	3301      	adds	r3, #1
 80037de:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80037e2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80037e6:	e00f      	b.n	8003808 <HAL_I2C_Init+0x1dc>
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	1e58      	subs	r0, r3, #1
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	6859      	ldr	r1, [r3, #4]
 80037f0:	460b      	mov	r3, r1
 80037f2:	009b      	lsls	r3, r3, #2
 80037f4:	440b      	add	r3, r1
 80037f6:	0099      	lsls	r1, r3, #2
 80037f8:	440b      	add	r3, r1
 80037fa:	fbb0 f3f3 	udiv	r3, r0, r3
 80037fe:	3301      	adds	r3, #1
 8003800:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003804:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003808:	6879      	ldr	r1, [r7, #4]
 800380a:	6809      	ldr	r1, [r1, #0]
 800380c:	4313      	orrs	r3, r2
 800380e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	69da      	ldr	r2, [r3, #28]
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	6a1b      	ldr	r3, [r3, #32]
 8003822:	431a      	orrs	r2, r3
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	430a      	orrs	r2, r1
 800382a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	689b      	ldr	r3, [r3, #8]
 8003832:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8003836:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800383a:	687a      	ldr	r2, [r7, #4]
 800383c:	6911      	ldr	r1, [r2, #16]
 800383e:	687a      	ldr	r2, [r7, #4]
 8003840:	68d2      	ldr	r2, [r2, #12]
 8003842:	4311      	orrs	r1, r2
 8003844:	687a      	ldr	r2, [r7, #4]
 8003846:	6812      	ldr	r2, [r2, #0]
 8003848:	430b      	orrs	r3, r1
 800384a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	68db      	ldr	r3, [r3, #12]
 8003852:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	695a      	ldr	r2, [r3, #20]
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	699b      	ldr	r3, [r3, #24]
 800385e:	431a      	orrs	r2, r3
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	430a      	orrs	r2, r1
 8003866:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	681a      	ldr	r2, [r3, #0]
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	f042 0201 	orr.w	r2, r2, #1
 8003876:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	2200      	movs	r2, #0
 800387c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	2220      	movs	r2, #32
 8003882:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	2200      	movs	r2, #0
 800388a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	2200      	movs	r2, #0
 8003890:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003894:	2300      	movs	r3, #0
}
 8003896:	4618      	mov	r0, r3
 8003898:	3710      	adds	r7, #16
 800389a:	46bd      	mov	sp, r7
 800389c:	bd80      	pop	{r7, pc}
 800389e:	bf00      	nop
 80038a0:	000186a0 	.word	0x000186a0
 80038a4:	001e847f 	.word	0x001e847f
 80038a8:	003d08ff 	.word	0x003d08ff
 80038ac:	431bde83 	.word	0x431bde83
 80038b0:	10624dd3 	.word	0x10624dd3

080038b4 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80038b4:	b580      	push	{r7, lr}
 80038b6:	b088      	sub	sp, #32
 80038b8:	af02      	add	r7, sp, #8
 80038ba:	60f8      	str	r0, [r7, #12]
 80038bc:	4608      	mov	r0, r1
 80038be:	4611      	mov	r1, r2
 80038c0:	461a      	mov	r2, r3
 80038c2:	4603      	mov	r3, r0
 80038c4:	817b      	strh	r3, [r7, #10]
 80038c6:	460b      	mov	r3, r1
 80038c8:	813b      	strh	r3, [r7, #8]
 80038ca:	4613      	mov	r3, r2
 80038cc:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80038ce:	f7ff fa23 	bl	8002d18 <HAL_GetTick>
 80038d2:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80038da:	b2db      	uxtb	r3, r3
 80038dc:	2b20      	cmp	r3, #32
 80038de:	f040 80d9 	bne.w	8003a94 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80038e2:	697b      	ldr	r3, [r7, #20]
 80038e4:	9300      	str	r3, [sp, #0]
 80038e6:	2319      	movs	r3, #25
 80038e8:	2201      	movs	r2, #1
 80038ea:	496d      	ldr	r1, [pc, #436]	@ (8003aa0 <HAL_I2C_Mem_Write+0x1ec>)
 80038ec:	68f8      	ldr	r0, [r7, #12]
 80038ee:	f000 fc8b 	bl	8004208 <I2C_WaitOnFlagUntilTimeout>
 80038f2:	4603      	mov	r3, r0
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d001      	beq.n	80038fc <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80038f8:	2302      	movs	r3, #2
 80038fa:	e0cc      	b.n	8003a96 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003902:	2b01      	cmp	r3, #1
 8003904:	d101      	bne.n	800390a <HAL_I2C_Mem_Write+0x56>
 8003906:	2302      	movs	r3, #2
 8003908:	e0c5      	b.n	8003a96 <HAL_I2C_Mem_Write+0x1e2>
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	2201      	movs	r2, #1
 800390e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	f003 0301 	and.w	r3, r3, #1
 800391c:	2b01      	cmp	r3, #1
 800391e:	d007      	beq.n	8003930 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	681a      	ldr	r2, [r3, #0]
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	f042 0201 	orr.w	r2, r2, #1
 800392e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	681a      	ldr	r2, [r3, #0]
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800393e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	2221      	movs	r2, #33	@ 0x21
 8003944:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	2240      	movs	r2, #64	@ 0x40
 800394c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	2200      	movs	r2, #0
 8003954:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	6a3a      	ldr	r2, [r7, #32]
 800395a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8003960:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003966:	b29a      	uxth	r2, r3
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	4a4d      	ldr	r2, [pc, #308]	@ (8003aa4 <HAL_I2C_Mem_Write+0x1f0>)
 8003970:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003972:	88f8      	ldrh	r0, [r7, #6]
 8003974:	893a      	ldrh	r2, [r7, #8]
 8003976:	8979      	ldrh	r1, [r7, #10]
 8003978:	697b      	ldr	r3, [r7, #20]
 800397a:	9301      	str	r3, [sp, #4]
 800397c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800397e:	9300      	str	r3, [sp, #0]
 8003980:	4603      	mov	r3, r0
 8003982:	68f8      	ldr	r0, [r7, #12]
 8003984:	f000 fac2 	bl	8003f0c <I2C_RequestMemoryWrite>
 8003988:	4603      	mov	r3, r0
 800398a:	2b00      	cmp	r3, #0
 800398c:	d052      	beq.n	8003a34 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800398e:	2301      	movs	r3, #1
 8003990:	e081      	b.n	8003a96 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003992:	697a      	ldr	r2, [r7, #20]
 8003994:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003996:	68f8      	ldr	r0, [r7, #12]
 8003998:	f000 fd50 	bl	800443c <I2C_WaitOnTXEFlagUntilTimeout>
 800399c:	4603      	mov	r3, r0
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d00d      	beq.n	80039be <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039a6:	2b04      	cmp	r3, #4
 80039a8:	d107      	bne.n	80039ba <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	681a      	ldr	r2, [r3, #0]
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80039b8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80039ba:	2301      	movs	r3, #1
 80039bc:	e06b      	b.n	8003a96 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039c2:	781a      	ldrb	r2, [r3, #0]
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039ce:	1c5a      	adds	r2, r3, #1
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80039d8:	3b01      	subs	r3, #1
 80039da:	b29a      	uxth	r2, r3
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80039e4:	b29b      	uxth	r3, r3
 80039e6:	3b01      	subs	r3, #1
 80039e8:	b29a      	uxth	r2, r3
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	695b      	ldr	r3, [r3, #20]
 80039f4:	f003 0304 	and.w	r3, r3, #4
 80039f8:	2b04      	cmp	r3, #4
 80039fa:	d11b      	bne.n	8003a34 <HAL_I2C_Mem_Write+0x180>
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d017      	beq.n	8003a34 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a08:	781a      	ldrb	r2, [r3, #0]
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a14:	1c5a      	adds	r2, r3, #1
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003a1e:	3b01      	subs	r3, #1
 8003a20:	b29a      	uxth	r2, r3
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a2a:	b29b      	uxth	r3, r3
 8003a2c:	3b01      	subs	r3, #1
 8003a2e:	b29a      	uxth	r2, r3
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d1aa      	bne.n	8003992 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003a3c:	697a      	ldr	r2, [r7, #20]
 8003a3e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003a40:	68f8      	ldr	r0, [r7, #12]
 8003a42:	f000 fd43 	bl	80044cc <I2C_WaitOnBTFFlagUntilTimeout>
 8003a46:	4603      	mov	r3, r0
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d00d      	beq.n	8003a68 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a50:	2b04      	cmp	r3, #4
 8003a52:	d107      	bne.n	8003a64 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	681a      	ldr	r2, [r3, #0]
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003a62:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003a64:	2301      	movs	r3, #1
 8003a66:	e016      	b.n	8003a96 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	681a      	ldr	r2, [r3, #0]
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003a76:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	2220      	movs	r2, #32
 8003a7c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	2200      	movs	r2, #0
 8003a84:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	2200      	movs	r2, #0
 8003a8c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003a90:	2300      	movs	r3, #0
 8003a92:	e000      	b.n	8003a96 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003a94:	2302      	movs	r3, #2
  }
}
 8003a96:	4618      	mov	r0, r3
 8003a98:	3718      	adds	r7, #24
 8003a9a:	46bd      	mov	sp, r7
 8003a9c:	bd80      	pop	{r7, pc}
 8003a9e:	bf00      	nop
 8003aa0:	00100002 	.word	0x00100002
 8003aa4:	ffff0000 	.word	0xffff0000

08003aa8 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003aa8:	b580      	push	{r7, lr}
 8003aaa:	b08c      	sub	sp, #48	@ 0x30
 8003aac:	af02      	add	r7, sp, #8
 8003aae:	60f8      	str	r0, [r7, #12]
 8003ab0:	4608      	mov	r0, r1
 8003ab2:	4611      	mov	r1, r2
 8003ab4:	461a      	mov	r2, r3
 8003ab6:	4603      	mov	r3, r0
 8003ab8:	817b      	strh	r3, [r7, #10]
 8003aba:	460b      	mov	r3, r1
 8003abc:	813b      	strh	r3, [r7, #8]
 8003abe:	4613      	mov	r3, r2
 8003ac0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003ac2:	f7ff f929 	bl	8002d18 <HAL_GetTick>
 8003ac6:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003ace:	b2db      	uxtb	r3, r3
 8003ad0:	2b20      	cmp	r3, #32
 8003ad2:	f040 8214 	bne.w	8003efe <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003ad6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ad8:	9300      	str	r3, [sp, #0]
 8003ada:	2319      	movs	r3, #25
 8003adc:	2201      	movs	r2, #1
 8003ade:	497b      	ldr	r1, [pc, #492]	@ (8003ccc <HAL_I2C_Mem_Read+0x224>)
 8003ae0:	68f8      	ldr	r0, [r7, #12]
 8003ae2:	f000 fb91 	bl	8004208 <I2C_WaitOnFlagUntilTimeout>
 8003ae6:	4603      	mov	r3, r0
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d001      	beq.n	8003af0 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8003aec:	2302      	movs	r3, #2
 8003aee:	e207      	b.n	8003f00 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003af6:	2b01      	cmp	r3, #1
 8003af8:	d101      	bne.n	8003afe <HAL_I2C_Mem_Read+0x56>
 8003afa:	2302      	movs	r3, #2
 8003afc:	e200      	b.n	8003f00 <HAL_I2C_Mem_Read+0x458>
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	2201      	movs	r2, #1
 8003b02:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	f003 0301 	and.w	r3, r3, #1
 8003b10:	2b01      	cmp	r3, #1
 8003b12:	d007      	beq.n	8003b24 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	681a      	ldr	r2, [r3, #0]
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	f042 0201 	orr.w	r2, r2, #1
 8003b22:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	681a      	ldr	r2, [r3, #0]
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003b32:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	2222      	movs	r2, #34	@ 0x22
 8003b38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	2240      	movs	r2, #64	@ 0x40
 8003b40:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	2200      	movs	r2, #0
 8003b48:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003b4e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8003b54:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b5a:	b29a      	uxth	r2, r3
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	4a5b      	ldr	r2, [pc, #364]	@ (8003cd0 <HAL_I2C_Mem_Read+0x228>)
 8003b64:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003b66:	88f8      	ldrh	r0, [r7, #6]
 8003b68:	893a      	ldrh	r2, [r7, #8]
 8003b6a:	8979      	ldrh	r1, [r7, #10]
 8003b6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b6e:	9301      	str	r3, [sp, #4]
 8003b70:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003b72:	9300      	str	r3, [sp, #0]
 8003b74:	4603      	mov	r3, r0
 8003b76:	68f8      	ldr	r0, [r7, #12]
 8003b78:	f000 fa5e 	bl	8004038 <I2C_RequestMemoryRead>
 8003b7c:	4603      	mov	r3, r0
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d001      	beq.n	8003b86 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8003b82:	2301      	movs	r3, #1
 8003b84:	e1bc      	b.n	8003f00 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d113      	bne.n	8003bb6 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003b8e:	2300      	movs	r3, #0
 8003b90:	623b      	str	r3, [r7, #32]
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	695b      	ldr	r3, [r3, #20]
 8003b98:	623b      	str	r3, [r7, #32]
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	699b      	ldr	r3, [r3, #24]
 8003ba0:	623b      	str	r3, [r7, #32]
 8003ba2:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	681a      	ldr	r2, [r3, #0]
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003bb2:	601a      	str	r2, [r3, #0]
 8003bb4:	e190      	b.n	8003ed8 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003bba:	2b01      	cmp	r3, #1
 8003bbc:	d11b      	bne.n	8003bf6 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	681a      	ldr	r2, [r3, #0]
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003bcc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003bce:	2300      	movs	r3, #0
 8003bd0:	61fb      	str	r3, [r7, #28]
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	695b      	ldr	r3, [r3, #20]
 8003bd8:	61fb      	str	r3, [r7, #28]
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	699b      	ldr	r3, [r3, #24]
 8003be0:	61fb      	str	r3, [r7, #28]
 8003be2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	681a      	ldr	r2, [r3, #0]
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003bf2:	601a      	str	r2, [r3, #0]
 8003bf4:	e170      	b.n	8003ed8 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003bfa:	2b02      	cmp	r3, #2
 8003bfc:	d11b      	bne.n	8003c36 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	681a      	ldr	r2, [r3, #0]
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003c0c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	681a      	ldr	r2, [r3, #0]
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003c1c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003c1e:	2300      	movs	r3, #0
 8003c20:	61bb      	str	r3, [r7, #24]
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	695b      	ldr	r3, [r3, #20]
 8003c28:	61bb      	str	r3, [r7, #24]
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	699b      	ldr	r3, [r3, #24]
 8003c30:	61bb      	str	r3, [r7, #24]
 8003c32:	69bb      	ldr	r3, [r7, #24]
 8003c34:	e150      	b.n	8003ed8 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003c36:	2300      	movs	r3, #0
 8003c38:	617b      	str	r3, [r7, #20]
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	695b      	ldr	r3, [r3, #20]
 8003c40:	617b      	str	r3, [r7, #20]
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	699b      	ldr	r3, [r3, #24]
 8003c48:	617b      	str	r3, [r7, #20]
 8003c4a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003c4c:	e144      	b.n	8003ed8 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003c52:	2b03      	cmp	r3, #3
 8003c54:	f200 80f1 	bhi.w	8003e3a <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003c5c:	2b01      	cmp	r3, #1
 8003c5e:	d123      	bne.n	8003ca8 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003c60:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003c62:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8003c64:	68f8      	ldr	r0, [r7, #12]
 8003c66:	f000 fc79 	bl	800455c <I2C_WaitOnRXNEFlagUntilTimeout>
 8003c6a:	4603      	mov	r3, r0
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d001      	beq.n	8003c74 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8003c70:	2301      	movs	r3, #1
 8003c72:	e145      	b.n	8003f00 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	691a      	ldr	r2, [r3, #16]
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c7e:	b2d2      	uxtb	r2, r2
 8003c80:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c86:	1c5a      	adds	r2, r3, #1
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003c90:	3b01      	subs	r3, #1
 8003c92:	b29a      	uxth	r2, r3
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c9c:	b29b      	uxth	r3, r3
 8003c9e:	3b01      	subs	r3, #1
 8003ca0:	b29a      	uxth	r2, r3
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003ca6:	e117      	b.n	8003ed8 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003cac:	2b02      	cmp	r3, #2
 8003cae:	d14e      	bne.n	8003d4e <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003cb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cb2:	9300      	str	r3, [sp, #0]
 8003cb4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003cb6:	2200      	movs	r2, #0
 8003cb8:	4906      	ldr	r1, [pc, #24]	@ (8003cd4 <HAL_I2C_Mem_Read+0x22c>)
 8003cba:	68f8      	ldr	r0, [r7, #12]
 8003cbc:	f000 faa4 	bl	8004208 <I2C_WaitOnFlagUntilTimeout>
 8003cc0:	4603      	mov	r3, r0
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d008      	beq.n	8003cd8 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8003cc6:	2301      	movs	r3, #1
 8003cc8:	e11a      	b.n	8003f00 <HAL_I2C_Mem_Read+0x458>
 8003cca:	bf00      	nop
 8003ccc:	00100002 	.word	0x00100002
 8003cd0:	ffff0000 	.word	0xffff0000
 8003cd4:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	681a      	ldr	r2, [r3, #0]
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003ce6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	691a      	ldr	r2, [r3, #16]
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cf2:	b2d2      	uxtb	r2, r2
 8003cf4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cfa:	1c5a      	adds	r2, r3, #1
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d04:	3b01      	subs	r3, #1
 8003d06:	b29a      	uxth	r2, r3
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d10:	b29b      	uxth	r3, r3
 8003d12:	3b01      	subs	r3, #1
 8003d14:	b29a      	uxth	r2, r3
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	691a      	ldr	r2, [r3, #16]
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d24:	b2d2      	uxtb	r2, r2
 8003d26:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d2c:	1c5a      	adds	r2, r3, #1
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d36:	3b01      	subs	r3, #1
 8003d38:	b29a      	uxth	r2, r3
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d42:	b29b      	uxth	r3, r3
 8003d44:	3b01      	subs	r3, #1
 8003d46:	b29a      	uxth	r2, r3
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003d4c:	e0c4      	b.n	8003ed8 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003d4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d50:	9300      	str	r3, [sp, #0]
 8003d52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003d54:	2200      	movs	r2, #0
 8003d56:	496c      	ldr	r1, [pc, #432]	@ (8003f08 <HAL_I2C_Mem_Read+0x460>)
 8003d58:	68f8      	ldr	r0, [r7, #12]
 8003d5a:	f000 fa55 	bl	8004208 <I2C_WaitOnFlagUntilTimeout>
 8003d5e:	4603      	mov	r3, r0
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d001      	beq.n	8003d68 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8003d64:	2301      	movs	r3, #1
 8003d66:	e0cb      	b.n	8003f00 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	681a      	ldr	r2, [r3, #0]
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003d76:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	691a      	ldr	r2, [r3, #16]
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d82:	b2d2      	uxtb	r2, r2
 8003d84:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d8a:	1c5a      	adds	r2, r3, #1
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d94:	3b01      	subs	r3, #1
 8003d96:	b29a      	uxth	r2, r3
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003da0:	b29b      	uxth	r3, r3
 8003da2:	3b01      	subs	r3, #1
 8003da4:	b29a      	uxth	r2, r3
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003daa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003dac:	9300      	str	r3, [sp, #0]
 8003dae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003db0:	2200      	movs	r2, #0
 8003db2:	4955      	ldr	r1, [pc, #340]	@ (8003f08 <HAL_I2C_Mem_Read+0x460>)
 8003db4:	68f8      	ldr	r0, [r7, #12]
 8003db6:	f000 fa27 	bl	8004208 <I2C_WaitOnFlagUntilTimeout>
 8003dba:	4603      	mov	r3, r0
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d001      	beq.n	8003dc4 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8003dc0:	2301      	movs	r3, #1
 8003dc2:	e09d      	b.n	8003f00 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	681a      	ldr	r2, [r3, #0]
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003dd2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	691a      	ldr	r2, [r3, #16]
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003dde:	b2d2      	uxtb	r2, r2
 8003de0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003de6:	1c5a      	adds	r2, r3, #1
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003df0:	3b01      	subs	r3, #1
 8003df2:	b29a      	uxth	r2, r3
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003dfc:	b29b      	uxth	r3, r3
 8003dfe:	3b01      	subs	r3, #1
 8003e00:	b29a      	uxth	r2, r3
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	691a      	ldr	r2, [r3, #16]
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e10:	b2d2      	uxtb	r2, r2
 8003e12:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e18:	1c5a      	adds	r2, r3, #1
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003e22:	3b01      	subs	r3, #1
 8003e24:	b29a      	uxth	r2, r3
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e2e:	b29b      	uxth	r3, r3
 8003e30:	3b01      	subs	r3, #1
 8003e32:	b29a      	uxth	r2, r3
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003e38:	e04e      	b.n	8003ed8 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003e3a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003e3c:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8003e3e:	68f8      	ldr	r0, [r7, #12]
 8003e40:	f000 fb8c 	bl	800455c <I2C_WaitOnRXNEFlagUntilTimeout>
 8003e44:	4603      	mov	r3, r0
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d001      	beq.n	8003e4e <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8003e4a:	2301      	movs	r3, #1
 8003e4c:	e058      	b.n	8003f00 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	691a      	ldr	r2, [r3, #16]
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e58:	b2d2      	uxtb	r2, r2
 8003e5a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e60:	1c5a      	adds	r2, r3, #1
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003e6a:	3b01      	subs	r3, #1
 8003e6c:	b29a      	uxth	r2, r3
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e76:	b29b      	uxth	r3, r3
 8003e78:	3b01      	subs	r3, #1
 8003e7a:	b29a      	uxth	r2, r3
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	695b      	ldr	r3, [r3, #20]
 8003e86:	f003 0304 	and.w	r3, r3, #4
 8003e8a:	2b04      	cmp	r3, #4
 8003e8c:	d124      	bne.n	8003ed8 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003e92:	2b03      	cmp	r3, #3
 8003e94:	d107      	bne.n	8003ea6 <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	681a      	ldr	r2, [r3, #0]
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003ea4:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	691a      	ldr	r2, [r3, #16]
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003eb0:	b2d2      	uxtb	r2, r2
 8003eb2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003eb8:	1c5a      	adds	r2, r3, #1
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003ec2:	3b01      	subs	r3, #1
 8003ec4:	b29a      	uxth	r2, r3
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ece:	b29b      	uxth	r3, r3
 8003ed0:	3b01      	subs	r3, #1
 8003ed2:	b29a      	uxth	r2, r3
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	f47f aeb6 	bne.w	8003c4e <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	2220      	movs	r2, #32
 8003ee6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	2200      	movs	r2, #0
 8003eee:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	2200      	movs	r2, #0
 8003ef6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003efa:	2300      	movs	r3, #0
 8003efc:	e000      	b.n	8003f00 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8003efe:	2302      	movs	r3, #2
  }
}
 8003f00:	4618      	mov	r0, r3
 8003f02:	3728      	adds	r7, #40	@ 0x28
 8003f04:	46bd      	mov	sp, r7
 8003f06:	bd80      	pop	{r7, pc}
 8003f08:	00010004 	.word	0x00010004

08003f0c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003f0c:	b580      	push	{r7, lr}
 8003f0e:	b088      	sub	sp, #32
 8003f10:	af02      	add	r7, sp, #8
 8003f12:	60f8      	str	r0, [r7, #12]
 8003f14:	4608      	mov	r0, r1
 8003f16:	4611      	mov	r1, r2
 8003f18:	461a      	mov	r2, r3
 8003f1a:	4603      	mov	r3, r0
 8003f1c:	817b      	strh	r3, [r7, #10]
 8003f1e:	460b      	mov	r3, r1
 8003f20:	813b      	strh	r3, [r7, #8]
 8003f22:	4613      	mov	r3, r2
 8003f24:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	681a      	ldr	r2, [r3, #0]
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003f34:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003f36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f38:	9300      	str	r3, [sp, #0]
 8003f3a:	6a3b      	ldr	r3, [r7, #32]
 8003f3c:	2200      	movs	r2, #0
 8003f3e:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003f42:	68f8      	ldr	r0, [r7, #12]
 8003f44:	f000 f960 	bl	8004208 <I2C_WaitOnFlagUntilTimeout>
 8003f48:	4603      	mov	r3, r0
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d00d      	beq.n	8003f6a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f58:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003f5c:	d103      	bne.n	8003f66 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003f64:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003f66:	2303      	movs	r3, #3
 8003f68:	e05f      	b.n	800402a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003f6a:	897b      	ldrh	r3, [r7, #10]
 8003f6c:	b2db      	uxtb	r3, r3
 8003f6e:	461a      	mov	r2, r3
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003f78:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003f7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f7c:	6a3a      	ldr	r2, [r7, #32]
 8003f7e:	492d      	ldr	r1, [pc, #180]	@ (8004034 <I2C_RequestMemoryWrite+0x128>)
 8003f80:	68f8      	ldr	r0, [r7, #12]
 8003f82:	f000 f9bb 	bl	80042fc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003f86:	4603      	mov	r3, r0
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d001      	beq.n	8003f90 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8003f8c:	2301      	movs	r3, #1
 8003f8e:	e04c      	b.n	800402a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003f90:	2300      	movs	r3, #0
 8003f92:	617b      	str	r3, [r7, #20]
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	695b      	ldr	r3, [r3, #20]
 8003f9a:	617b      	str	r3, [r7, #20]
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	699b      	ldr	r3, [r3, #24]
 8003fa2:	617b      	str	r3, [r7, #20]
 8003fa4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003fa6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003fa8:	6a39      	ldr	r1, [r7, #32]
 8003faa:	68f8      	ldr	r0, [r7, #12]
 8003fac:	f000 fa46 	bl	800443c <I2C_WaitOnTXEFlagUntilTimeout>
 8003fb0:	4603      	mov	r3, r0
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d00d      	beq.n	8003fd2 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fba:	2b04      	cmp	r3, #4
 8003fbc:	d107      	bne.n	8003fce <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	681a      	ldr	r2, [r3, #0]
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003fcc:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003fce:	2301      	movs	r3, #1
 8003fd0:	e02b      	b.n	800402a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003fd2:	88fb      	ldrh	r3, [r7, #6]
 8003fd4:	2b01      	cmp	r3, #1
 8003fd6:	d105      	bne.n	8003fe4 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003fd8:	893b      	ldrh	r3, [r7, #8]
 8003fda:	b2da      	uxtb	r2, r3
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	611a      	str	r2, [r3, #16]
 8003fe2:	e021      	b.n	8004028 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003fe4:	893b      	ldrh	r3, [r7, #8]
 8003fe6:	0a1b      	lsrs	r3, r3, #8
 8003fe8:	b29b      	uxth	r3, r3
 8003fea:	b2da      	uxtb	r2, r3
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003ff2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003ff4:	6a39      	ldr	r1, [r7, #32]
 8003ff6:	68f8      	ldr	r0, [r7, #12]
 8003ff8:	f000 fa20 	bl	800443c <I2C_WaitOnTXEFlagUntilTimeout>
 8003ffc:	4603      	mov	r3, r0
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d00d      	beq.n	800401e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004006:	2b04      	cmp	r3, #4
 8004008:	d107      	bne.n	800401a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	681a      	ldr	r2, [r3, #0]
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004018:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800401a:	2301      	movs	r3, #1
 800401c:	e005      	b.n	800402a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800401e:	893b      	ldrh	r3, [r7, #8]
 8004020:	b2da      	uxtb	r2, r3
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8004028:	2300      	movs	r3, #0
}
 800402a:	4618      	mov	r0, r3
 800402c:	3718      	adds	r7, #24
 800402e:	46bd      	mov	sp, r7
 8004030:	bd80      	pop	{r7, pc}
 8004032:	bf00      	nop
 8004034:	00010002 	.word	0x00010002

08004038 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004038:	b580      	push	{r7, lr}
 800403a:	b088      	sub	sp, #32
 800403c:	af02      	add	r7, sp, #8
 800403e:	60f8      	str	r0, [r7, #12]
 8004040:	4608      	mov	r0, r1
 8004042:	4611      	mov	r1, r2
 8004044:	461a      	mov	r2, r3
 8004046:	4603      	mov	r3, r0
 8004048:	817b      	strh	r3, [r7, #10]
 800404a:	460b      	mov	r3, r1
 800404c:	813b      	strh	r3, [r7, #8]
 800404e:	4613      	mov	r3, r2
 8004050:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	681a      	ldr	r2, [r3, #0]
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004060:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	681a      	ldr	r2, [r3, #0]
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004070:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004072:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004074:	9300      	str	r3, [sp, #0]
 8004076:	6a3b      	ldr	r3, [r7, #32]
 8004078:	2200      	movs	r2, #0
 800407a:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800407e:	68f8      	ldr	r0, [r7, #12]
 8004080:	f000 f8c2 	bl	8004208 <I2C_WaitOnFlagUntilTimeout>
 8004084:	4603      	mov	r3, r0
 8004086:	2b00      	cmp	r3, #0
 8004088:	d00d      	beq.n	80040a6 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004094:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004098:	d103      	bne.n	80040a2 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80040a0:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80040a2:	2303      	movs	r3, #3
 80040a4:	e0aa      	b.n	80041fc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80040a6:	897b      	ldrh	r3, [r7, #10]
 80040a8:	b2db      	uxtb	r3, r3
 80040aa:	461a      	mov	r2, r3
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80040b4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80040b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040b8:	6a3a      	ldr	r2, [r7, #32]
 80040ba:	4952      	ldr	r1, [pc, #328]	@ (8004204 <I2C_RequestMemoryRead+0x1cc>)
 80040bc:	68f8      	ldr	r0, [r7, #12]
 80040be:	f000 f91d 	bl	80042fc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80040c2:	4603      	mov	r3, r0
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d001      	beq.n	80040cc <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80040c8:	2301      	movs	r3, #1
 80040ca:	e097      	b.n	80041fc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80040cc:	2300      	movs	r3, #0
 80040ce:	617b      	str	r3, [r7, #20]
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	695b      	ldr	r3, [r3, #20]
 80040d6:	617b      	str	r3, [r7, #20]
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	699b      	ldr	r3, [r3, #24]
 80040de:	617b      	str	r3, [r7, #20]
 80040e0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80040e2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80040e4:	6a39      	ldr	r1, [r7, #32]
 80040e6:	68f8      	ldr	r0, [r7, #12]
 80040e8:	f000 f9a8 	bl	800443c <I2C_WaitOnTXEFlagUntilTimeout>
 80040ec:	4603      	mov	r3, r0
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d00d      	beq.n	800410e <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040f6:	2b04      	cmp	r3, #4
 80040f8:	d107      	bne.n	800410a <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	681a      	ldr	r2, [r3, #0]
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004108:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800410a:	2301      	movs	r3, #1
 800410c:	e076      	b.n	80041fc <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800410e:	88fb      	ldrh	r3, [r7, #6]
 8004110:	2b01      	cmp	r3, #1
 8004112:	d105      	bne.n	8004120 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004114:	893b      	ldrh	r3, [r7, #8]
 8004116:	b2da      	uxtb	r2, r3
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	611a      	str	r2, [r3, #16]
 800411e:	e021      	b.n	8004164 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004120:	893b      	ldrh	r3, [r7, #8]
 8004122:	0a1b      	lsrs	r3, r3, #8
 8004124:	b29b      	uxth	r3, r3
 8004126:	b2da      	uxtb	r2, r3
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800412e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004130:	6a39      	ldr	r1, [r7, #32]
 8004132:	68f8      	ldr	r0, [r7, #12]
 8004134:	f000 f982 	bl	800443c <I2C_WaitOnTXEFlagUntilTimeout>
 8004138:	4603      	mov	r3, r0
 800413a:	2b00      	cmp	r3, #0
 800413c:	d00d      	beq.n	800415a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004142:	2b04      	cmp	r3, #4
 8004144:	d107      	bne.n	8004156 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	681a      	ldr	r2, [r3, #0]
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004154:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004156:	2301      	movs	r3, #1
 8004158:	e050      	b.n	80041fc <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800415a:	893b      	ldrh	r3, [r7, #8]
 800415c:	b2da      	uxtb	r2, r3
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004164:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004166:	6a39      	ldr	r1, [r7, #32]
 8004168:	68f8      	ldr	r0, [r7, #12]
 800416a:	f000 f967 	bl	800443c <I2C_WaitOnTXEFlagUntilTimeout>
 800416e:	4603      	mov	r3, r0
 8004170:	2b00      	cmp	r3, #0
 8004172:	d00d      	beq.n	8004190 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004178:	2b04      	cmp	r3, #4
 800417a:	d107      	bne.n	800418c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	681a      	ldr	r2, [r3, #0]
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800418a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800418c:	2301      	movs	r3, #1
 800418e:	e035      	b.n	80041fc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	681a      	ldr	r2, [r3, #0]
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800419e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80041a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041a2:	9300      	str	r3, [sp, #0]
 80041a4:	6a3b      	ldr	r3, [r7, #32]
 80041a6:	2200      	movs	r2, #0
 80041a8:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80041ac:	68f8      	ldr	r0, [r7, #12]
 80041ae:	f000 f82b 	bl	8004208 <I2C_WaitOnFlagUntilTimeout>
 80041b2:	4603      	mov	r3, r0
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d00d      	beq.n	80041d4 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80041c2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80041c6:	d103      	bne.n	80041d0 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80041ce:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80041d0:	2303      	movs	r3, #3
 80041d2:	e013      	b.n	80041fc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80041d4:	897b      	ldrh	r3, [r7, #10]
 80041d6:	b2db      	uxtb	r3, r3
 80041d8:	f043 0301 	orr.w	r3, r3, #1
 80041dc:	b2da      	uxtb	r2, r3
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80041e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041e6:	6a3a      	ldr	r2, [r7, #32]
 80041e8:	4906      	ldr	r1, [pc, #24]	@ (8004204 <I2C_RequestMemoryRead+0x1cc>)
 80041ea:	68f8      	ldr	r0, [r7, #12]
 80041ec:	f000 f886 	bl	80042fc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80041f0:	4603      	mov	r3, r0
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d001      	beq.n	80041fa <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80041f6:	2301      	movs	r3, #1
 80041f8:	e000      	b.n	80041fc <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80041fa:	2300      	movs	r3, #0
}
 80041fc:	4618      	mov	r0, r3
 80041fe:	3718      	adds	r7, #24
 8004200:	46bd      	mov	sp, r7
 8004202:	bd80      	pop	{r7, pc}
 8004204:	00010002 	.word	0x00010002

08004208 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004208:	b580      	push	{r7, lr}
 800420a:	b084      	sub	sp, #16
 800420c:	af00      	add	r7, sp, #0
 800420e:	60f8      	str	r0, [r7, #12]
 8004210:	60b9      	str	r1, [r7, #8]
 8004212:	603b      	str	r3, [r7, #0]
 8004214:	4613      	mov	r3, r2
 8004216:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004218:	e048      	b.n	80042ac <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800421a:	683b      	ldr	r3, [r7, #0]
 800421c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004220:	d044      	beq.n	80042ac <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004222:	f7fe fd79 	bl	8002d18 <HAL_GetTick>
 8004226:	4602      	mov	r2, r0
 8004228:	69bb      	ldr	r3, [r7, #24]
 800422a:	1ad3      	subs	r3, r2, r3
 800422c:	683a      	ldr	r2, [r7, #0]
 800422e:	429a      	cmp	r2, r3
 8004230:	d302      	bcc.n	8004238 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004232:	683b      	ldr	r3, [r7, #0]
 8004234:	2b00      	cmp	r3, #0
 8004236:	d139      	bne.n	80042ac <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004238:	68bb      	ldr	r3, [r7, #8]
 800423a:	0c1b      	lsrs	r3, r3, #16
 800423c:	b2db      	uxtb	r3, r3
 800423e:	2b01      	cmp	r3, #1
 8004240:	d10d      	bne.n	800425e <I2C_WaitOnFlagUntilTimeout+0x56>
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	695b      	ldr	r3, [r3, #20]
 8004248:	43da      	mvns	r2, r3
 800424a:	68bb      	ldr	r3, [r7, #8]
 800424c:	4013      	ands	r3, r2
 800424e:	b29b      	uxth	r3, r3
 8004250:	2b00      	cmp	r3, #0
 8004252:	bf0c      	ite	eq
 8004254:	2301      	moveq	r3, #1
 8004256:	2300      	movne	r3, #0
 8004258:	b2db      	uxtb	r3, r3
 800425a:	461a      	mov	r2, r3
 800425c:	e00c      	b.n	8004278 <I2C_WaitOnFlagUntilTimeout+0x70>
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	699b      	ldr	r3, [r3, #24]
 8004264:	43da      	mvns	r2, r3
 8004266:	68bb      	ldr	r3, [r7, #8]
 8004268:	4013      	ands	r3, r2
 800426a:	b29b      	uxth	r3, r3
 800426c:	2b00      	cmp	r3, #0
 800426e:	bf0c      	ite	eq
 8004270:	2301      	moveq	r3, #1
 8004272:	2300      	movne	r3, #0
 8004274:	b2db      	uxtb	r3, r3
 8004276:	461a      	mov	r2, r3
 8004278:	79fb      	ldrb	r3, [r7, #7]
 800427a:	429a      	cmp	r2, r3
 800427c:	d116      	bne.n	80042ac <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	2200      	movs	r2, #0
 8004282:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	2220      	movs	r2, #32
 8004288:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	2200      	movs	r2, #0
 8004290:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004298:	f043 0220 	orr.w	r2, r3, #32
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	2200      	movs	r2, #0
 80042a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80042a8:	2301      	movs	r3, #1
 80042aa:	e023      	b.n	80042f4 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80042ac:	68bb      	ldr	r3, [r7, #8]
 80042ae:	0c1b      	lsrs	r3, r3, #16
 80042b0:	b2db      	uxtb	r3, r3
 80042b2:	2b01      	cmp	r3, #1
 80042b4:	d10d      	bne.n	80042d2 <I2C_WaitOnFlagUntilTimeout+0xca>
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	695b      	ldr	r3, [r3, #20]
 80042bc:	43da      	mvns	r2, r3
 80042be:	68bb      	ldr	r3, [r7, #8]
 80042c0:	4013      	ands	r3, r2
 80042c2:	b29b      	uxth	r3, r3
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	bf0c      	ite	eq
 80042c8:	2301      	moveq	r3, #1
 80042ca:	2300      	movne	r3, #0
 80042cc:	b2db      	uxtb	r3, r3
 80042ce:	461a      	mov	r2, r3
 80042d0:	e00c      	b.n	80042ec <I2C_WaitOnFlagUntilTimeout+0xe4>
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	699b      	ldr	r3, [r3, #24]
 80042d8:	43da      	mvns	r2, r3
 80042da:	68bb      	ldr	r3, [r7, #8]
 80042dc:	4013      	ands	r3, r2
 80042de:	b29b      	uxth	r3, r3
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	bf0c      	ite	eq
 80042e4:	2301      	moveq	r3, #1
 80042e6:	2300      	movne	r3, #0
 80042e8:	b2db      	uxtb	r3, r3
 80042ea:	461a      	mov	r2, r3
 80042ec:	79fb      	ldrb	r3, [r7, #7]
 80042ee:	429a      	cmp	r2, r3
 80042f0:	d093      	beq.n	800421a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80042f2:	2300      	movs	r3, #0
}
 80042f4:	4618      	mov	r0, r3
 80042f6:	3710      	adds	r7, #16
 80042f8:	46bd      	mov	sp, r7
 80042fa:	bd80      	pop	{r7, pc}

080042fc <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80042fc:	b580      	push	{r7, lr}
 80042fe:	b084      	sub	sp, #16
 8004300:	af00      	add	r7, sp, #0
 8004302:	60f8      	str	r0, [r7, #12]
 8004304:	60b9      	str	r1, [r7, #8]
 8004306:	607a      	str	r2, [r7, #4]
 8004308:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800430a:	e071      	b.n	80043f0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	695b      	ldr	r3, [r3, #20]
 8004312:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004316:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800431a:	d123      	bne.n	8004364 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	681a      	ldr	r2, [r3, #0]
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800432a:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004334:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	2200      	movs	r2, #0
 800433a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	2220      	movs	r2, #32
 8004340:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	2200      	movs	r2, #0
 8004348:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004350:	f043 0204 	orr.w	r2, r3, #4
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	2200      	movs	r2, #0
 800435c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004360:	2301      	movs	r3, #1
 8004362:	e067      	b.n	8004434 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	f1b3 3fff 	cmp.w	r3, #4294967295
 800436a:	d041      	beq.n	80043f0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800436c:	f7fe fcd4 	bl	8002d18 <HAL_GetTick>
 8004370:	4602      	mov	r2, r0
 8004372:	683b      	ldr	r3, [r7, #0]
 8004374:	1ad3      	subs	r3, r2, r3
 8004376:	687a      	ldr	r2, [r7, #4]
 8004378:	429a      	cmp	r2, r3
 800437a:	d302      	bcc.n	8004382 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	2b00      	cmp	r3, #0
 8004380:	d136      	bne.n	80043f0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8004382:	68bb      	ldr	r3, [r7, #8]
 8004384:	0c1b      	lsrs	r3, r3, #16
 8004386:	b2db      	uxtb	r3, r3
 8004388:	2b01      	cmp	r3, #1
 800438a:	d10c      	bne.n	80043a6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	695b      	ldr	r3, [r3, #20]
 8004392:	43da      	mvns	r2, r3
 8004394:	68bb      	ldr	r3, [r7, #8]
 8004396:	4013      	ands	r3, r2
 8004398:	b29b      	uxth	r3, r3
 800439a:	2b00      	cmp	r3, #0
 800439c:	bf14      	ite	ne
 800439e:	2301      	movne	r3, #1
 80043a0:	2300      	moveq	r3, #0
 80043a2:	b2db      	uxtb	r3, r3
 80043a4:	e00b      	b.n	80043be <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	699b      	ldr	r3, [r3, #24]
 80043ac:	43da      	mvns	r2, r3
 80043ae:	68bb      	ldr	r3, [r7, #8]
 80043b0:	4013      	ands	r3, r2
 80043b2:	b29b      	uxth	r3, r3
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	bf14      	ite	ne
 80043b8:	2301      	movne	r3, #1
 80043ba:	2300      	moveq	r3, #0
 80043bc:	b2db      	uxtb	r3, r3
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d016      	beq.n	80043f0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	2200      	movs	r2, #0
 80043c6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	2220      	movs	r2, #32
 80043cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	2200      	movs	r2, #0
 80043d4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043dc:	f043 0220 	orr.w	r2, r3, #32
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	2200      	movs	r2, #0
 80043e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80043ec:	2301      	movs	r3, #1
 80043ee:	e021      	b.n	8004434 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80043f0:	68bb      	ldr	r3, [r7, #8]
 80043f2:	0c1b      	lsrs	r3, r3, #16
 80043f4:	b2db      	uxtb	r3, r3
 80043f6:	2b01      	cmp	r3, #1
 80043f8:	d10c      	bne.n	8004414 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	695b      	ldr	r3, [r3, #20]
 8004400:	43da      	mvns	r2, r3
 8004402:	68bb      	ldr	r3, [r7, #8]
 8004404:	4013      	ands	r3, r2
 8004406:	b29b      	uxth	r3, r3
 8004408:	2b00      	cmp	r3, #0
 800440a:	bf14      	ite	ne
 800440c:	2301      	movne	r3, #1
 800440e:	2300      	moveq	r3, #0
 8004410:	b2db      	uxtb	r3, r3
 8004412:	e00b      	b.n	800442c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	699b      	ldr	r3, [r3, #24]
 800441a:	43da      	mvns	r2, r3
 800441c:	68bb      	ldr	r3, [r7, #8]
 800441e:	4013      	ands	r3, r2
 8004420:	b29b      	uxth	r3, r3
 8004422:	2b00      	cmp	r3, #0
 8004424:	bf14      	ite	ne
 8004426:	2301      	movne	r3, #1
 8004428:	2300      	moveq	r3, #0
 800442a:	b2db      	uxtb	r3, r3
 800442c:	2b00      	cmp	r3, #0
 800442e:	f47f af6d 	bne.w	800430c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8004432:	2300      	movs	r3, #0
}
 8004434:	4618      	mov	r0, r3
 8004436:	3710      	adds	r7, #16
 8004438:	46bd      	mov	sp, r7
 800443a:	bd80      	pop	{r7, pc}

0800443c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800443c:	b580      	push	{r7, lr}
 800443e:	b084      	sub	sp, #16
 8004440:	af00      	add	r7, sp, #0
 8004442:	60f8      	str	r0, [r7, #12]
 8004444:	60b9      	str	r1, [r7, #8]
 8004446:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004448:	e034      	b.n	80044b4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800444a:	68f8      	ldr	r0, [r7, #12]
 800444c:	f000 f8e3 	bl	8004616 <I2C_IsAcknowledgeFailed>
 8004450:	4603      	mov	r3, r0
 8004452:	2b00      	cmp	r3, #0
 8004454:	d001      	beq.n	800445a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004456:	2301      	movs	r3, #1
 8004458:	e034      	b.n	80044c4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800445a:	68bb      	ldr	r3, [r7, #8]
 800445c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004460:	d028      	beq.n	80044b4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004462:	f7fe fc59 	bl	8002d18 <HAL_GetTick>
 8004466:	4602      	mov	r2, r0
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	1ad3      	subs	r3, r2, r3
 800446c:	68ba      	ldr	r2, [r7, #8]
 800446e:	429a      	cmp	r2, r3
 8004470:	d302      	bcc.n	8004478 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004472:	68bb      	ldr	r3, [r7, #8]
 8004474:	2b00      	cmp	r3, #0
 8004476:	d11d      	bne.n	80044b4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	695b      	ldr	r3, [r3, #20]
 800447e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004482:	2b80      	cmp	r3, #128	@ 0x80
 8004484:	d016      	beq.n	80044b4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	2200      	movs	r2, #0
 800448a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	2220      	movs	r2, #32
 8004490:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	2200      	movs	r2, #0
 8004498:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044a0:	f043 0220 	orr.w	r2, r3, #32
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	2200      	movs	r2, #0
 80044ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80044b0:	2301      	movs	r3, #1
 80044b2:	e007      	b.n	80044c4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	695b      	ldr	r3, [r3, #20]
 80044ba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80044be:	2b80      	cmp	r3, #128	@ 0x80
 80044c0:	d1c3      	bne.n	800444a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80044c2:	2300      	movs	r3, #0
}
 80044c4:	4618      	mov	r0, r3
 80044c6:	3710      	adds	r7, #16
 80044c8:	46bd      	mov	sp, r7
 80044ca:	bd80      	pop	{r7, pc}

080044cc <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80044cc:	b580      	push	{r7, lr}
 80044ce:	b084      	sub	sp, #16
 80044d0:	af00      	add	r7, sp, #0
 80044d2:	60f8      	str	r0, [r7, #12]
 80044d4:	60b9      	str	r1, [r7, #8]
 80044d6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80044d8:	e034      	b.n	8004544 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80044da:	68f8      	ldr	r0, [r7, #12]
 80044dc:	f000 f89b 	bl	8004616 <I2C_IsAcknowledgeFailed>
 80044e0:	4603      	mov	r3, r0
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d001      	beq.n	80044ea <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80044e6:	2301      	movs	r3, #1
 80044e8:	e034      	b.n	8004554 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80044ea:	68bb      	ldr	r3, [r7, #8]
 80044ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044f0:	d028      	beq.n	8004544 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80044f2:	f7fe fc11 	bl	8002d18 <HAL_GetTick>
 80044f6:	4602      	mov	r2, r0
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	1ad3      	subs	r3, r2, r3
 80044fc:	68ba      	ldr	r2, [r7, #8]
 80044fe:	429a      	cmp	r2, r3
 8004500:	d302      	bcc.n	8004508 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004502:	68bb      	ldr	r3, [r7, #8]
 8004504:	2b00      	cmp	r3, #0
 8004506:	d11d      	bne.n	8004544 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	695b      	ldr	r3, [r3, #20]
 800450e:	f003 0304 	and.w	r3, r3, #4
 8004512:	2b04      	cmp	r3, #4
 8004514:	d016      	beq.n	8004544 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	2200      	movs	r2, #0
 800451a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	2220      	movs	r2, #32
 8004520:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	2200      	movs	r2, #0
 8004528:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004530:	f043 0220 	orr.w	r2, r3, #32
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	2200      	movs	r2, #0
 800453c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004540:	2301      	movs	r3, #1
 8004542:	e007      	b.n	8004554 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	695b      	ldr	r3, [r3, #20]
 800454a:	f003 0304 	and.w	r3, r3, #4
 800454e:	2b04      	cmp	r3, #4
 8004550:	d1c3      	bne.n	80044da <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004552:	2300      	movs	r3, #0
}
 8004554:	4618      	mov	r0, r3
 8004556:	3710      	adds	r7, #16
 8004558:	46bd      	mov	sp, r7
 800455a:	bd80      	pop	{r7, pc}

0800455c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800455c:	b580      	push	{r7, lr}
 800455e:	b084      	sub	sp, #16
 8004560:	af00      	add	r7, sp, #0
 8004562:	60f8      	str	r0, [r7, #12]
 8004564:	60b9      	str	r1, [r7, #8]
 8004566:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004568:	e049      	b.n	80045fe <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	695b      	ldr	r3, [r3, #20]
 8004570:	f003 0310 	and.w	r3, r3, #16
 8004574:	2b10      	cmp	r3, #16
 8004576:	d119      	bne.n	80045ac <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	f06f 0210 	mvn.w	r2, #16
 8004580:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	2200      	movs	r2, #0
 8004586:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	2220      	movs	r2, #32
 800458c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	2200      	movs	r2, #0
 8004594:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	2200      	movs	r2, #0
 80045a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80045a8:	2301      	movs	r3, #1
 80045aa:	e030      	b.n	800460e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80045ac:	f7fe fbb4 	bl	8002d18 <HAL_GetTick>
 80045b0:	4602      	mov	r2, r0
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	1ad3      	subs	r3, r2, r3
 80045b6:	68ba      	ldr	r2, [r7, #8]
 80045b8:	429a      	cmp	r2, r3
 80045ba:	d302      	bcc.n	80045c2 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80045bc:	68bb      	ldr	r3, [r7, #8]
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d11d      	bne.n	80045fe <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	695b      	ldr	r3, [r3, #20]
 80045c8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80045cc:	2b40      	cmp	r3, #64	@ 0x40
 80045ce:	d016      	beq.n	80045fe <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	2200      	movs	r2, #0
 80045d4:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	2220      	movs	r2, #32
 80045da:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	2200      	movs	r2, #0
 80045e2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045ea:	f043 0220 	orr.w	r2, r3, #32
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	2200      	movs	r2, #0
 80045f6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80045fa:	2301      	movs	r3, #1
 80045fc:	e007      	b.n	800460e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	695b      	ldr	r3, [r3, #20]
 8004604:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004608:	2b40      	cmp	r3, #64	@ 0x40
 800460a:	d1ae      	bne.n	800456a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800460c:	2300      	movs	r3, #0
}
 800460e:	4618      	mov	r0, r3
 8004610:	3710      	adds	r7, #16
 8004612:	46bd      	mov	sp, r7
 8004614:	bd80      	pop	{r7, pc}

08004616 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004616:	b480      	push	{r7}
 8004618:	b083      	sub	sp, #12
 800461a:	af00      	add	r7, sp, #0
 800461c:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	695b      	ldr	r3, [r3, #20]
 8004624:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004628:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800462c:	d11b      	bne.n	8004666 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004636:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	2200      	movs	r2, #0
 800463c:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	2220      	movs	r2, #32
 8004642:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	2200      	movs	r2, #0
 800464a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004652:	f043 0204 	orr.w	r2, r3, #4
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	2200      	movs	r2, #0
 800465e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8004662:	2301      	movs	r3, #1
 8004664:	e000      	b.n	8004668 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004666:	2300      	movs	r3, #0
}
 8004668:	4618      	mov	r0, r3
 800466a:	370c      	adds	r7, #12
 800466c:	46bd      	mov	sp, r7
 800466e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004672:	4770      	bx	lr

08004674 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004674:	b480      	push	{r7}
 8004676:	b083      	sub	sp, #12
 8004678:	af00      	add	r7, sp, #0
 800467a:	6078      	str	r0, [r7, #4]
 800467c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004684:	b2db      	uxtb	r3, r3
 8004686:	2b20      	cmp	r3, #32
 8004688:	d129      	bne.n	80046de <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	2224      	movs	r2, #36	@ 0x24
 800468e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	681a      	ldr	r2, [r3, #0]
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	f022 0201 	bic.w	r2, r2, #1
 80046a0:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	f022 0210 	bic.w	r2, r2, #16
 80046b0:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	683a      	ldr	r2, [r7, #0]
 80046be:	430a      	orrs	r2, r1
 80046c0:	625a      	str	r2, [r3, #36]	@ 0x24

    __HAL_I2C_ENABLE(hi2c);
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	681a      	ldr	r2, [r3, #0]
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	f042 0201 	orr.w	r2, r2, #1
 80046d0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	2220      	movs	r2, #32
 80046d6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 80046da:	2300      	movs	r3, #0
 80046dc:	e000      	b.n	80046e0 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 80046de:	2302      	movs	r3, #2
  }
}
 80046e0:	4618      	mov	r0, r3
 80046e2:	370c      	adds	r7, #12
 80046e4:	46bd      	mov	sp, r7
 80046e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ea:	4770      	bx	lr

080046ec <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80046ec:	b480      	push	{r7}
 80046ee:	b085      	sub	sp, #20
 80046f0:	af00      	add	r7, sp, #0
 80046f2:	6078      	str	r0, [r7, #4]
 80046f4:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 80046f6:	2300      	movs	r3, #0
 80046f8:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004700:	b2db      	uxtb	r3, r3
 8004702:	2b20      	cmp	r3, #32
 8004704:	d12a      	bne.n	800475c <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	2224      	movs	r2, #36	@ 0x24
 800470a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	681a      	ldr	r2, [r3, #0]
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	f022 0201 	bic.w	r2, r2, #1
 800471c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004724:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8004726:	89fb      	ldrh	r3, [r7, #14]
 8004728:	f023 030f 	bic.w	r3, r3, #15
 800472c:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 800472e:	683b      	ldr	r3, [r7, #0]
 8004730:	b29a      	uxth	r2, r3
 8004732:	89fb      	ldrh	r3, [r7, #14]
 8004734:	4313      	orrs	r3, r2
 8004736:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	89fa      	ldrh	r2, [r7, #14]
 800473e:	625a      	str	r2, [r3, #36]	@ 0x24

    __HAL_I2C_ENABLE(hi2c);
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	681a      	ldr	r2, [r3, #0]
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	f042 0201 	orr.w	r2, r2, #1
 800474e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	2220      	movs	r2, #32
 8004754:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 8004758:	2300      	movs	r3, #0
 800475a:	e000      	b.n	800475e <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 800475c:	2302      	movs	r3, #2
  }
}
 800475e:	4618      	mov	r0, r3
 8004760:	3714      	adds	r7, #20
 8004762:	46bd      	mov	sp, r7
 8004764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004768:	4770      	bx	lr
	...

0800476c <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 800476c:	b580      	push	{r7, lr}
 800476e:	b084      	sub	sp, #16
 8004770:	af00      	add	r7, sp, #0
 8004772:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	2b00      	cmp	r3, #0
 8004778:	d101      	bne.n	800477e <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 800477a:	2301      	movs	r3, #1
 800477c:	e0bf      	b.n	80048fe <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 8004784:	b2db      	uxtb	r3, r3
 8004786:	2b00      	cmp	r3, #0
 8004788:	d106      	bne.n	8004798 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	2200      	movs	r2, #0
 800478e:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8004792:	6878      	ldr	r0, [r7, #4]
 8004794:	f7fd fbfc 	bl	8001f90 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	2202      	movs	r2, #2
 800479c:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	699a      	ldr	r2, [r3, #24]
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	f022 4270 	bic.w	r2, r2, #4026531840	@ 0xf0000000
 80047ae:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	6999      	ldr	r1, [r3, #24]
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	685a      	ldr	r2, [r3, #4]
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	689b      	ldr	r3, [r3, #8]
 80047be:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80047c4:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	691b      	ldr	r3, [r3, #16]
 80047ca:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	430a      	orrs	r2, r1
 80047d2:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	6899      	ldr	r1, [r3, #8]
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681a      	ldr	r2, [r3, #0]
 80047de:	4b4a      	ldr	r3, [pc, #296]	@ (8004908 <HAL_LTDC_Init+0x19c>)
 80047e0:	400b      	ands	r3, r1
 80047e2:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	695b      	ldr	r3, [r3, #20]
 80047e8:	041b      	lsls	r3, r3, #16
 80047ea:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	6899      	ldr	r1, [r3, #8]
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	699a      	ldr	r2, [r3, #24]
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	431a      	orrs	r2, r3
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	430a      	orrs	r2, r1
 8004800:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	68d9      	ldr	r1, [r3, #12]
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681a      	ldr	r2, [r3, #0]
 800480c:	4b3e      	ldr	r3, [pc, #248]	@ (8004908 <HAL_LTDC_Init+0x19c>)
 800480e:	400b      	ands	r3, r1
 8004810:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	69db      	ldr	r3, [r3, #28]
 8004816:	041b      	lsls	r3, r3, #16
 8004818:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	68d9      	ldr	r1, [r3, #12]
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	6a1a      	ldr	r2, [r3, #32]
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	431a      	orrs	r2, r3
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	430a      	orrs	r2, r1
 800482e:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	6919      	ldr	r1, [r3, #16]
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681a      	ldr	r2, [r3, #0]
 800483a:	4b33      	ldr	r3, [pc, #204]	@ (8004908 <HAL_LTDC_Init+0x19c>)
 800483c:	400b      	ands	r3, r1
 800483e:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004844:	041b      	lsls	r3, r3, #16
 8004846:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	6919      	ldr	r1, [r3, #16]
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	431a      	orrs	r2, r3
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	430a      	orrs	r2, r1
 800485c:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	6959      	ldr	r1, [r3, #20]
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681a      	ldr	r2, [r3, #0]
 8004868:	4b27      	ldr	r3, [pc, #156]	@ (8004908 <HAL_LTDC_Init+0x19c>)
 800486a:	400b      	ands	r3, r1
 800486c:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004872:	041b      	lsls	r3, r3, #16
 8004874:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	6959      	ldr	r1, [r3, #20]
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	431a      	orrs	r2, r3
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	430a      	orrs	r2, r1
 800488a:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004892:	021b      	lsls	r3, r3, #8
 8004894:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 800489c:	041b      	lsls	r3, r3, #16
 800489e:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	f002 427f 	and.w	r2, r2, #4278190080	@ 0xff000000
 80048ae:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80048b6:	68ba      	ldr	r2, [r7, #8]
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	4313      	orrs	r3, r2
 80048bc:	687a      	ldr	r2, [r7, #4]
 80048be:	f892 2034 	ldrb.w	r2, [r2, #52]	@ 0x34
 80048c2:	431a      	orrs	r2, r3
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	430a      	orrs	r2, r1
 80048ca:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	f042 0206 	orr.w	r2, r2, #6
 80048da:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	699a      	ldr	r2, [r3, #24]
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	f042 0201 	orr.w	r2, r2, #1
 80048ea:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	2200      	movs	r2, #0
 80048f0:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	2201      	movs	r2, #1
 80048f8:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  return HAL_OK;
 80048fc:	2300      	movs	r3, #0
}
 80048fe:	4618      	mov	r0, r3
 8004900:	3710      	adds	r7, #16
 8004902:	46bd      	mov	sp, r7
 8004904:	bd80      	pop	{r7, pc}
 8004906:	bf00      	nop
 8004908:	f000f800 	.word	0xf000f800

0800490c <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 800490c:	b5b0      	push	{r4, r5, r7, lr}
 800490e:	b084      	sub	sp, #16
 8004910:	af00      	add	r7, sp, #0
 8004912:	60f8      	str	r0, [r7, #12]
 8004914:	60b9      	str	r1, [r7, #8]
 8004916:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 800491e:	2b01      	cmp	r3, #1
 8004920:	d101      	bne.n	8004926 <HAL_LTDC_ConfigLayer+0x1a>
 8004922:	2302      	movs	r3, #2
 8004924:	e02c      	b.n	8004980 <HAL_LTDC_ConfigLayer+0x74>
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	2201      	movs	r2, #1
 800492a:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	2202      	movs	r2, #2
 8004932:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8004936:	68fa      	ldr	r2, [r7, #12]
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	2134      	movs	r1, #52	@ 0x34
 800493c:	fb01 f303 	mul.w	r3, r1, r3
 8004940:	4413      	add	r3, r2
 8004942:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 8004946:	68bb      	ldr	r3, [r7, #8]
 8004948:	4614      	mov	r4, r2
 800494a:	461d      	mov	r5, r3
 800494c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800494e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004950:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004952:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004954:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004956:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004958:	682b      	ldr	r3, [r5, #0]
 800495a:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 800495c:	687a      	ldr	r2, [r7, #4]
 800495e:	68b9      	ldr	r1, [r7, #8]
 8004960:	68f8      	ldr	r0, [r7, #12]
 8004962:	f000 f811 	bl	8004988 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	2201      	movs	r2, #1
 800496c:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	2201      	movs	r2, #1
 8004972:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	2200      	movs	r2, #0
 800497a:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  return HAL_OK;
 800497e:	2300      	movs	r3, #0
}
 8004980:	4618      	mov	r0, r3
 8004982:	3710      	adds	r7, #16
 8004984:	46bd      	mov	sp, r7
 8004986:	bdb0      	pop	{r4, r5, r7, pc}

08004988 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8004988:	b480      	push	{r7}
 800498a:	b089      	sub	sp, #36	@ 0x24
 800498c:	af00      	add	r7, sp, #0
 800498e:	60f8      	str	r0, [r7, #12]
 8004990:	60b9      	str	r1, [r7, #8]
 8004992:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8004994:	68bb      	ldr	r3, [r7, #8]
 8004996:	685a      	ldr	r2, [r3, #4]
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	68db      	ldr	r3, [r3, #12]
 800499e:	0c1b      	lsrs	r3, r3, #16
 80049a0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80049a4:	4413      	add	r3, r2
 80049a6:	041b      	lsls	r3, r3, #16
 80049a8:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	461a      	mov	r2, r3
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	01db      	lsls	r3, r3, #7
 80049b4:	4413      	add	r3, r2
 80049b6:	3384      	adds	r3, #132	@ 0x84
 80049b8:	685b      	ldr	r3, [r3, #4]
 80049ba:	68fa      	ldr	r2, [r7, #12]
 80049bc:	6812      	ldr	r2, [r2, #0]
 80049be:	4611      	mov	r1, r2
 80049c0:	687a      	ldr	r2, [r7, #4]
 80049c2:	01d2      	lsls	r2, r2, #7
 80049c4:	440a      	add	r2, r1
 80049c6:	3284      	adds	r2, #132	@ 0x84
 80049c8:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 80049cc:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80049ce:	68bb      	ldr	r3, [r7, #8]
 80049d0:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	68db      	ldr	r3, [r3, #12]
 80049d8:	0c1b      	lsrs	r3, r3, #16
 80049da:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80049de:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80049e0:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	4619      	mov	r1, r3
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	01db      	lsls	r3, r3, #7
 80049ec:	440b      	add	r3, r1
 80049ee:	3384      	adds	r3, #132	@ 0x84
 80049f0:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80049f2:	69fb      	ldr	r3, [r7, #28]
 80049f4:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80049f6:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 80049f8:	68bb      	ldr	r3, [r7, #8]
 80049fa:	68da      	ldr	r2, [r3, #12]
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	68db      	ldr	r3, [r3, #12]
 8004a02:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004a06:	4413      	add	r3, r2
 8004a08:	041b      	lsls	r3, r3, #16
 8004a0a:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	461a      	mov	r2, r3
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	01db      	lsls	r3, r3, #7
 8004a16:	4413      	add	r3, r2
 8004a18:	3384      	adds	r3, #132	@ 0x84
 8004a1a:	689b      	ldr	r3, [r3, #8]
 8004a1c:	68fa      	ldr	r2, [r7, #12]
 8004a1e:	6812      	ldr	r2, [r2, #0]
 8004a20:	4611      	mov	r1, r2
 8004a22:	687a      	ldr	r2, [r7, #4]
 8004a24:	01d2      	lsls	r2, r2, #7
 8004a26:	440a      	add	r2, r1
 8004a28:	3284      	adds	r2, #132	@ 0x84
 8004a2a:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 8004a2e:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8004a30:	68bb      	ldr	r3, [r7, #8]
 8004a32:	689a      	ldr	r2, [r3, #8]
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	68db      	ldr	r3, [r3, #12]
 8004a3a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004a3e:	4413      	add	r3, r2
 8004a40:	1c5a      	adds	r2, r3, #1
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	4619      	mov	r1, r3
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	01db      	lsls	r3, r3, #7
 8004a4c:	440b      	add	r3, r1
 8004a4e:	3384      	adds	r3, #132	@ 0x84
 8004a50:	4619      	mov	r1, r3
 8004a52:	69fb      	ldr	r3, [r7, #28]
 8004a54:	4313      	orrs	r3, r2
 8004a56:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	461a      	mov	r2, r3
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	01db      	lsls	r3, r3, #7
 8004a62:	4413      	add	r3, r2
 8004a64:	3384      	adds	r3, #132	@ 0x84
 8004a66:	691b      	ldr	r3, [r3, #16]
 8004a68:	68fa      	ldr	r2, [r7, #12]
 8004a6a:	6812      	ldr	r2, [r2, #0]
 8004a6c:	4611      	mov	r1, r2
 8004a6e:	687a      	ldr	r2, [r7, #4]
 8004a70:	01d2      	lsls	r2, r2, #7
 8004a72:	440a      	add	r2, r1
 8004a74:	3284      	adds	r2, #132	@ 0x84
 8004a76:	f023 0307 	bic.w	r3, r3, #7
 8004a7a:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	461a      	mov	r2, r3
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	01db      	lsls	r3, r3, #7
 8004a86:	4413      	add	r3, r2
 8004a88:	3384      	adds	r3, #132	@ 0x84
 8004a8a:	461a      	mov	r2, r3
 8004a8c:	68bb      	ldr	r3, [r7, #8]
 8004a8e:	691b      	ldr	r3, [r3, #16]
 8004a90:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8004a92:	68bb      	ldr	r3, [r7, #8]
 8004a94:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8004a98:	021b      	lsls	r3, r3, #8
 8004a9a:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8004a9c:	68bb      	ldr	r3, [r7, #8]
 8004a9e:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8004aa2:	041b      	lsls	r3, r3, #16
 8004aa4:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8004aa6:	68bb      	ldr	r3, [r7, #8]
 8004aa8:	699b      	ldr	r3, [r3, #24]
 8004aaa:	061b      	lsls	r3, r3, #24
 8004aac:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	461a      	mov	r2, r3
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	01db      	lsls	r3, r3, #7
 8004ab8:	4413      	add	r3, r2
 8004aba:	3384      	adds	r3, #132	@ 0x84
 8004abc:	699b      	ldr	r3, [r3, #24]
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	461a      	mov	r2, r3
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	01db      	lsls	r3, r3, #7
 8004ac8:	4413      	add	r3, r2
 8004aca:	3384      	adds	r3, #132	@ 0x84
 8004acc:	461a      	mov	r2, r3
 8004ace:	2300      	movs	r3, #0
 8004ad0:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8004ad2:	68bb      	ldr	r3, [r7, #8]
 8004ad4:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8004ad8:	461a      	mov	r2, r3
 8004ada:	69fb      	ldr	r3, [r7, #28]
 8004adc:	431a      	orrs	r2, r3
 8004ade:	69bb      	ldr	r3, [r7, #24]
 8004ae0:	431a      	orrs	r2, r3
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	4619      	mov	r1, r3
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	01db      	lsls	r3, r3, #7
 8004aec:	440b      	add	r3, r1
 8004aee:	3384      	adds	r3, #132	@ 0x84
 8004af0:	4619      	mov	r1, r3
 8004af2:	697b      	ldr	r3, [r7, #20]
 8004af4:	4313      	orrs	r3, r2
 8004af6:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	461a      	mov	r2, r3
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	01db      	lsls	r3, r3, #7
 8004b02:	4413      	add	r3, r2
 8004b04:	3384      	adds	r3, #132	@ 0x84
 8004b06:	695b      	ldr	r3, [r3, #20]
 8004b08:	68fa      	ldr	r2, [r7, #12]
 8004b0a:	6812      	ldr	r2, [r2, #0]
 8004b0c:	4611      	mov	r1, r2
 8004b0e:	687a      	ldr	r2, [r7, #4]
 8004b10:	01d2      	lsls	r2, r2, #7
 8004b12:	440a      	add	r2, r1
 8004b14:	3284      	adds	r2, #132	@ 0x84
 8004b16:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8004b1a:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	461a      	mov	r2, r3
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	01db      	lsls	r3, r3, #7
 8004b26:	4413      	add	r3, r2
 8004b28:	3384      	adds	r3, #132	@ 0x84
 8004b2a:	461a      	mov	r2, r3
 8004b2c:	68bb      	ldr	r3, [r7, #8]
 8004b2e:	695b      	ldr	r3, [r3, #20]
 8004b30:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	461a      	mov	r2, r3
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	01db      	lsls	r3, r3, #7
 8004b3c:	4413      	add	r3, r2
 8004b3e:	3384      	adds	r3, #132	@ 0x84
 8004b40:	69db      	ldr	r3, [r3, #28]
 8004b42:	68fa      	ldr	r2, [r7, #12]
 8004b44:	6812      	ldr	r2, [r2, #0]
 8004b46:	4611      	mov	r1, r2
 8004b48:	687a      	ldr	r2, [r7, #4]
 8004b4a:	01d2      	lsls	r2, r2, #7
 8004b4c:	440a      	add	r2, r1
 8004b4e:	3284      	adds	r2, #132	@ 0x84
 8004b50:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8004b54:	f023 0307 	bic.w	r3, r3, #7
 8004b58:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8004b5a:	68bb      	ldr	r3, [r7, #8]
 8004b5c:	69da      	ldr	r2, [r3, #28]
 8004b5e:	68bb      	ldr	r3, [r7, #8]
 8004b60:	6a1b      	ldr	r3, [r3, #32]
 8004b62:	68f9      	ldr	r1, [r7, #12]
 8004b64:	6809      	ldr	r1, [r1, #0]
 8004b66:	4608      	mov	r0, r1
 8004b68:	6879      	ldr	r1, [r7, #4]
 8004b6a:	01c9      	lsls	r1, r1, #7
 8004b6c:	4401      	add	r1, r0
 8004b6e:	3184      	adds	r1, #132	@ 0x84
 8004b70:	4313      	orrs	r3, r2
 8004b72:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	461a      	mov	r2, r3
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	01db      	lsls	r3, r3, #7
 8004b7e:	4413      	add	r3, r2
 8004b80:	3384      	adds	r3, #132	@ 0x84
 8004b82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	461a      	mov	r2, r3
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	01db      	lsls	r3, r3, #7
 8004b8e:	4413      	add	r3, r2
 8004b90:	3384      	adds	r3, #132	@ 0x84
 8004b92:	461a      	mov	r2, r3
 8004b94:	2300      	movs	r3, #0
 8004b96:	6293      	str	r3, [r2, #40]	@ 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	461a      	mov	r2, r3
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	01db      	lsls	r3, r3, #7
 8004ba2:	4413      	add	r3, r2
 8004ba4:	3384      	adds	r3, #132	@ 0x84
 8004ba6:	461a      	mov	r2, r3
 8004ba8:	68bb      	ldr	r3, [r7, #8]
 8004baa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004bac:	6293      	str	r3, [r2, #40]	@ 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8004bae:	68bb      	ldr	r3, [r7, #8]
 8004bb0:	691b      	ldr	r3, [r3, #16]
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d102      	bne.n	8004bbc <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 8004bb6:	2304      	movs	r3, #4
 8004bb8:	61fb      	str	r3, [r7, #28]
 8004bba:	e01b      	b.n	8004bf4 <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8004bbc:	68bb      	ldr	r3, [r7, #8]
 8004bbe:	691b      	ldr	r3, [r3, #16]
 8004bc0:	2b01      	cmp	r3, #1
 8004bc2:	d102      	bne.n	8004bca <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 8004bc4:	2303      	movs	r3, #3
 8004bc6:	61fb      	str	r3, [r7, #28]
 8004bc8:	e014      	b.n	8004bf4 <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8004bca:	68bb      	ldr	r3, [r7, #8]
 8004bcc:	691b      	ldr	r3, [r3, #16]
 8004bce:	2b04      	cmp	r3, #4
 8004bd0:	d00b      	beq.n	8004bea <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8004bd2:	68bb      	ldr	r3, [r7, #8]
 8004bd4:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8004bd6:	2b02      	cmp	r3, #2
 8004bd8:	d007      	beq.n	8004bea <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8004bda:	68bb      	ldr	r3, [r7, #8]
 8004bdc:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8004bde:	2b03      	cmp	r3, #3
 8004be0:	d003      	beq.n	8004bea <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8004be2:	68bb      	ldr	r3, [r7, #8]
 8004be4:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8004be6:	2b07      	cmp	r3, #7
 8004be8:	d102      	bne.n	8004bf0 <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 8004bea:	2302      	movs	r3, #2
 8004bec:	61fb      	str	r3, [r7, #28]
 8004bee:	e001      	b.n	8004bf4 <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 8004bf0:	2301      	movs	r3, #1
 8004bf2:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	461a      	mov	r2, r3
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	01db      	lsls	r3, r3, #7
 8004bfe:	4413      	add	r3, r2
 8004c00:	3384      	adds	r3, #132	@ 0x84
 8004c02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c04:	68fa      	ldr	r2, [r7, #12]
 8004c06:	6812      	ldr	r2, [r2, #0]
 8004c08:	4611      	mov	r1, r2
 8004c0a:	687a      	ldr	r2, [r7, #4]
 8004c0c:	01d2      	lsls	r2, r2, #7
 8004c0e:	440a      	add	r2, r1
 8004c10:	3284      	adds	r2, #132	@ 0x84
 8004c12:	f003 23e0 	and.w	r3, r3, #3758153728	@ 0xe000e000
 8004c16:	62d3      	str	r3, [r2, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8004c18:	68bb      	ldr	r3, [r7, #8]
 8004c1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c1c:	69fa      	ldr	r2, [r7, #28]
 8004c1e:	fb02 f303 	mul.w	r3, r2, r3
 8004c22:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8004c24:	68bb      	ldr	r3, [r7, #8]
 8004c26:	6859      	ldr	r1, [r3, #4]
 8004c28:	68bb      	ldr	r3, [r7, #8]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	1acb      	subs	r3, r1, r3
 8004c2e:	69f9      	ldr	r1, [r7, #28]
 8004c30:	fb01 f303 	mul.w	r3, r1, r3
 8004c34:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8004c36:	68f9      	ldr	r1, [r7, #12]
 8004c38:	6809      	ldr	r1, [r1, #0]
 8004c3a:	4608      	mov	r0, r1
 8004c3c:	6879      	ldr	r1, [r7, #4]
 8004c3e:	01c9      	lsls	r1, r1, #7
 8004c40:	4401      	add	r1, r0
 8004c42:	3184      	adds	r1, #132	@ 0x84
 8004c44:	4313      	orrs	r3, r2
 8004c46:	62cb      	str	r3, [r1, #44]	@ 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	461a      	mov	r2, r3
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	01db      	lsls	r3, r3, #7
 8004c52:	4413      	add	r3, r2
 8004c54:	3384      	adds	r3, #132	@ 0x84
 8004c56:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c58:	68fa      	ldr	r2, [r7, #12]
 8004c5a:	6812      	ldr	r2, [r2, #0]
 8004c5c:	4611      	mov	r1, r2
 8004c5e:	687a      	ldr	r2, [r7, #4]
 8004c60:	01d2      	lsls	r2, r2, #7
 8004c62:	440a      	add	r2, r1
 8004c64:	3284      	adds	r2, #132	@ 0x84
 8004c66:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8004c6a:	f023 0307 	bic.w	r3, r3, #7
 8004c6e:	6313      	str	r3, [r2, #48]	@ 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	461a      	mov	r2, r3
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	01db      	lsls	r3, r3, #7
 8004c7a:	4413      	add	r3, r2
 8004c7c:	3384      	adds	r3, #132	@ 0x84
 8004c7e:	461a      	mov	r2, r3
 8004c80:	68bb      	ldr	r3, [r7, #8]
 8004c82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c84:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	461a      	mov	r2, r3
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	01db      	lsls	r3, r3, #7
 8004c90:	4413      	add	r3, r2
 8004c92:	3384      	adds	r3, #132	@ 0x84
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	68fa      	ldr	r2, [r7, #12]
 8004c98:	6812      	ldr	r2, [r2, #0]
 8004c9a:	4611      	mov	r1, r2
 8004c9c:	687a      	ldr	r2, [r7, #4]
 8004c9e:	01d2      	lsls	r2, r2, #7
 8004ca0:	440a      	add	r2, r1
 8004ca2:	3284      	adds	r2, #132	@ 0x84
 8004ca4:	f043 0301 	orr.w	r3, r3, #1
 8004ca8:	6013      	str	r3, [r2, #0]
}
 8004caa:	bf00      	nop
 8004cac:	3724      	adds	r7, #36	@ 0x24
 8004cae:	46bd      	mov	sp, r7
 8004cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb4:	4770      	bx	lr
	...

08004cb8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004cb8:	b580      	push	{r7, lr}
 8004cba:	b086      	sub	sp, #24
 8004cbc:	af00      	add	r7, sp, #0
 8004cbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d101      	bne.n	8004cca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004cc6:	2301      	movs	r3, #1
 8004cc8:	e267      	b.n	800519a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	f003 0301 	and.w	r3, r3, #1
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d075      	beq.n	8004dc2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8004cd6:	4b88      	ldr	r3, [pc, #544]	@ (8004ef8 <HAL_RCC_OscConfig+0x240>)
 8004cd8:	689b      	ldr	r3, [r3, #8]
 8004cda:	f003 030c 	and.w	r3, r3, #12
 8004cde:	2b04      	cmp	r3, #4
 8004ce0:	d00c      	beq.n	8004cfc <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004ce2:	4b85      	ldr	r3, [pc, #532]	@ (8004ef8 <HAL_RCC_OscConfig+0x240>)
 8004ce4:	689b      	ldr	r3, [r3, #8]
 8004ce6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8004cea:	2b08      	cmp	r3, #8
 8004cec:	d112      	bne.n	8004d14 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004cee:	4b82      	ldr	r3, [pc, #520]	@ (8004ef8 <HAL_RCC_OscConfig+0x240>)
 8004cf0:	685b      	ldr	r3, [r3, #4]
 8004cf2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004cf6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004cfa:	d10b      	bne.n	8004d14 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004cfc:	4b7e      	ldr	r3, [pc, #504]	@ (8004ef8 <HAL_RCC_OscConfig+0x240>)
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d05b      	beq.n	8004dc0 <HAL_RCC_OscConfig+0x108>
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	685b      	ldr	r3, [r3, #4]
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d157      	bne.n	8004dc0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004d10:	2301      	movs	r3, #1
 8004d12:	e242      	b.n	800519a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	685b      	ldr	r3, [r3, #4]
 8004d18:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004d1c:	d106      	bne.n	8004d2c <HAL_RCC_OscConfig+0x74>
 8004d1e:	4b76      	ldr	r3, [pc, #472]	@ (8004ef8 <HAL_RCC_OscConfig+0x240>)
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	4a75      	ldr	r2, [pc, #468]	@ (8004ef8 <HAL_RCC_OscConfig+0x240>)
 8004d24:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004d28:	6013      	str	r3, [r2, #0]
 8004d2a:	e01d      	b.n	8004d68 <HAL_RCC_OscConfig+0xb0>
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	685b      	ldr	r3, [r3, #4]
 8004d30:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004d34:	d10c      	bne.n	8004d50 <HAL_RCC_OscConfig+0x98>
 8004d36:	4b70      	ldr	r3, [pc, #448]	@ (8004ef8 <HAL_RCC_OscConfig+0x240>)
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	4a6f      	ldr	r2, [pc, #444]	@ (8004ef8 <HAL_RCC_OscConfig+0x240>)
 8004d3c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004d40:	6013      	str	r3, [r2, #0]
 8004d42:	4b6d      	ldr	r3, [pc, #436]	@ (8004ef8 <HAL_RCC_OscConfig+0x240>)
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	4a6c      	ldr	r2, [pc, #432]	@ (8004ef8 <HAL_RCC_OscConfig+0x240>)
 8004d48:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004d4c:	6013      	str	r3, [r2, #0]
 8004d4e:	e00b      	b.n	8004d68 <HAL_RCC_OscConfig+0xb0>
 8004d50:	4b69      	ldr	r3, [pc, #420]	@ (8004ef8 <HAL_RCC_OscConfig+0x240>)
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	4a68      	ldr	r2, [pc, #416]	@ (8004ef8 <HAL_RCC_OscConfig+0x240>)
 8004d56:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004d5a:	6013      	str	r3, [r2, #0]
 8004d5c:	4b66      	ldr	r3, [pc, #408]	@ (8004ef8 <HAL_RCC_OscConfig+0x240>)
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	4a65      	ldr	r2, [pc, #404]	@ (8004ef8 <HAL_RCC_OscConfig+0x240>)
 8004d62:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004d66:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	685b      	ldr	r3, [r3, #4]
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d013      	beq.n	8004d98 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d70:	f7fd ffd2 	bl	8002d18 <HAL_GetTick>
 8004d74:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004d76:	e008      	b.n	8004d8a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004d78:	f7fd ffce 	bl	8002d18 <HAL_GetTick>
 8004d7c:	4602      	mov	r2, r0
 8004d7e:	693b      	ldr	r3, [r7, #16]
 8004d80:	1ad3      	subs	r3, r2, r3
 8004d82:	2b64      	cmp	r3, #100	@ 0x64
 8004d84:	d901      	bls.n	8004d8a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004d86:	2303      	movs	r3, #3
 8004d88:	e207      	b.n	800519a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004d8a:	4b5b      	ldr	r3, [pc, #364]	@ (8004ef8 <HAL_RCC_OscConfig+0x240>)
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d0f0      	beq.n	8004d78 <HAL_RCC_OscConfig+0xc0>
 8004d96:	e014      	b.n	8004dc2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d98:	f7fd ffbe 	bl	8002d18 <HAL_GetTick>
 8004d9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004d9e:	e008      	b.n	8004db2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004da0:	f7fd ffba 	bl	8002d18 <HAL_GetTick>
 8004da4:	4602      	mov	r2, r0
 8004da6:	693b      	ldr	r3, [r7, #16]
 8004da8:	1ad3      	subs	r3, r2, r3
 8004daa:	2b64      	cmp	r3, #100	@ 0x64
 8004dac:	d901      	bls.n	8004db2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004dae:	2303      	movs	r3, #3
 8004db0:	e1f3      	b.n	800519a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004db2:	4b51      	ldr	r3, [pc, #324]	@ (8004ef8 <HAL_RCC_OscConfig+0x240>)
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d1f0      	bne.n	8004da0 <HAL_RCC_OscConfig+0xe8>
 8004dbe:	e000      	b.n	8004dc2 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004dc0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	f003 0302 	and.w	r3, r3, #2
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d063      	beq.n	8004e96 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8004dce:	4b4a      	ldr	r3, [pc, #296]	@ (8004ef8 <HAL_RCC_OscConfig+0x240>)
 8004dd0:	689b      	ldr	r3, [r3, #8]
 8004dd2:	f003 030c 	and.w	r3, r3, #12
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d00b      	beq.n	8004df2 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004dda:	4b47      	ldr	r3, [pc, #284]	@ (8004ef8 <HAL_RCC_OscConfig+0x240>)
 8004ddc:	689b      	ldr	r3, [r3, #8]
 8004dde:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8004de2:	2b08      	cmp	r3, #8
 8004de4:	d11c      	bne.n	8004e20 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004de6:	4b44      	ldr	r3, [pc, #272]	@ (8004ef8 <HAL_RCC_OscConfig+0x240>)
 8004de8:	685b      	ldr	r3, [r3, #4]
 8004dea:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d116      	bne.n	8004e20 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004df2:	4b41      	ldr	r3, [pc, #260]	@ (8004ef8 <HAL_RCC_OscConfig+0x240>)
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	f003 0302 	and.w	r3, r3, #2
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d005      	beq.n	8004e0a <HAL_RCC_OscConfig+0x152>
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	68db      	ldr	r3, [r3, #12]
 8004e02:	2b01      	cmp	r3, #1
 8004e04:	d001      	beq.n	8004e0a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004e06:	2301      	movs	r3, #1
 8004e08:	e1c7      	b.n	800519a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004e0a:	4b3b      	ldr	r3, [pc, #236]	@ (8004ef8 <HAL_RCC_OscConfig+0x240>)
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	691b      	ldr	r3, [r3, #16]
 8004e16:	00db      	lsls	r3, r3, #3
 8004e18:	4937      	ldr	r1, [pc, #220]	@ (8004ef8 <HAL_RCC_OscConfig+0x240>)
 8004e1a:	4313      	orrs	r3, r2
 8004e1c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004e1e:	e03a      	b.n	8004e96 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	68db      	ldr	r3, [r3, #12]
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d020      	beq.n	8004e6a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004e28:	4b34      	ldr	r3, [pc, #208]	@ (8004efc <HAL_RCC_OscConfig+0x244>)
 8004e2a:	2201      	movs	r2, #1
 8004e2c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e2e:	f7fd ff73 	bl	8002d18 <HAL_GetTick>
 8004e32:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004e34:	e008      	b.n	8004e48 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004e36:	f7fd ff6f 	bl	8002d18 <HAL_GetTick>
 8004e3a:	4602      	mov	r2, r0
 8004e3c:	693b      	ldr	r3, [r7, #16]
 8004e3e:	1ad3      	subs	r3, r2, r3
 8004e40:	2b02      	cmp	r3, #2
 8004e42:	d901      	bls.n	8004e48 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004e44:	2303      	movs	r3, #3
 8004e46:	e1a8      	b.n	800519a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004e48:	4b2b      	ldr	r3, [pc, #172]	@ (8004ef8 <HAL_RCC_OscConfig+0x240>)
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	f003 0302 	and.w	r3, r3, #2
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d0f0      	beq.n	8004e36 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004e54:	4b28      	ldr	r3, [pc, #160]	@ (8004ef8 <HAL_RCC_OscConfig+0x240>)
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	691b      	ldr	r3, [r3, #16]
 8004e60:	00db      	lsls	r3, r3, #3
 8004e62:	4925      	ldr	r1, [pc, #148]	@ (8004ef8 <HAL_RCC_OscConfig+0x240>)
 8004e64:	4313      	orrs	r3, r2
 8004e66:	600b      	str	r3, [r1, #0]
 8004e68:	e015      	b.n	8004e96 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004e6a:	4b24      	ldr	r3, [pc, #144]	@ (8004efc <HAL_RCC_OscConfig+0x244>)
 8004e6c:	2200      	movs	r2, #0
 8004e6e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e70:	f7fd ff52 	bl	8002d18 <HAL_GetTick>
 8004e74:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004e76:	e008      	b.n	8004e8a <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004e78:	f7fd ff4e 	bl	8002d18 <HAL_GetTick>
 8004e7c:	4602      	mov	r2, r0
 8004e7e:	693b      	ldr	r3, [r7, #16]
 8004e80:	1ad3      	subs	r3, r2, r3
 8004e82:	2b02      	cmp	r3, #2
 8004e84:	d901      	bls.n	8004e8a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004e86:	2303      	movs	r3, #3
 8004e88:	e187      	b.n	800519a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004e8a:	4b1b      	ldr	r3, [pc, #108]	@ (8004ef8 <HAL_RCC_OscConfig+0x240>)
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	f003 0302 	and.w	r3, r3, #2
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d1f0      	bne.n	8004e78 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	f003 0308 	and.w	r3, r3, #8
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d036      	beq.n	8004f10 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	695b      	ldr	r3, [r3, #20]
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d016      	beq.n	8004ed8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004eaa:	4b15      	ldr	r3, [pc, #84]	@ (8004f00 <HAL_RCC_OscConfig+0x248>)
 8004eac:	2201      	movs	r2, #1
 8004eae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004eb0:	f7fd ff32 	bl	8002d18 <HAL_GetTick>
 8004eb4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004eb6:	e008      	b.n	8004eca <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004eb8:	f7fd ff2e 	bl	8002d18 <HAL_GetTick>
 8004ebc:	4602      	mov	r2, r0
 8004ebe:	693b      	ldr	r3, [r7, #16]
 8004ec0:	1ad3      	subs	r3, r2, r3
 8004ec2:	2b02      	cmp	r3, #2
 8004ec4:	d901      	bls.n	8004eca <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004ec6:	2303      	movs	r3, #3
 8004ec8:	e167      	b.n	800519a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004eca:	4b0b      	ldr	r3, [pc, #44]	@ (8004ef8 <HAL_RCC_OscConfig+0x240>)
 8004ecc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004ece:	f003 0302 	and.w	r3, r3, #2
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d0f0      	beq.n	8004eb8 <HAL_RCC_OscConfig+0x200>
 8004ed6:	e01b      	b.n	8004f10 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004ed8:	4b09      	ldr	r3, [pc, #36]	@ (8004f00 <HAL_RCC_OscConfig+0x248>)
 8004eda:	2200      	movs	r2, #0
 8004edc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004ede:	f7fd ff1b 	bl	8002d18 <HAL_GetTick>
 8004ee2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004ee4:	e00e      	b.n	8004f04 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004ee6:	f7fd ff17 	bl	8002d18 <HAL_GetTick>
 8004eea:	4602      	mov	r2, r0
 8004eec:	693b      	ldr	r3, [r7, #16]
 8004eee:	1ad3      	subs	r3, r2, r3
 8004ef0:	2b02      	cmp	r3, #2
 8004ef2:	d907      	bls.n	8004f04 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004ef4:	2303      	movs	r3, #3
 8004ef6:	e150      	b.n	800519a <HAL_RCC_OscConfig+0x4e2>
 8004ef8:	40023800 	.word	0x40023800
 8004efc:	42470000 	.word	0x42470000
 8004f00:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004f04:	4b88      	ldr	r3, [pc, #544]	@ (8005128 <HAL_RCC_OscConfig+0x470>)
 8004f06:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004f08:	f003 0302 	and.w	r3, r3, #2
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d1ea      	bne.n	8004ee6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	f003 0304 	and.w	r3, r3, #4
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	f000 8097 	beq.w	800504c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004f1e:	2300      	movs	r3, #0
 8004f20:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004f22:	4b81      	ldr	r3, [pc, #516]	@ (8005128 <HAL_RCC_OscConfig+0x470>)
 8004f24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f26:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d10f      	bne.n	8004f4e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004f2e:	2300      	movs	r3, #0
 8004f30:	60bb      	str	r3, [r7, #8]
 8004f32:	4b7d      	ldr	r3, [pc, #500]	@ (8005128 <HAL_RCC_OscConfig+0x470>)
 8004f34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f36:	4a7c      	ldr	r2, [pc, #496]	@ (8005128 <HAL_RCC_OscConfig+0x470>)
 8004f38:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004f3c:	6413      	str	r3, [r2, #64]	@ 0x40
 8004f3e:	4b7a      	ldr	r3, [pc, #488]	@ (8005128 <HAL_RCC_OscConfig+0x470>)
 8004f40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f42:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004f46:	60bb      	str	r3, [r7, #8]
 8004f48:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004f4a:	2301      	movs	r3, #1
 8004f4c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004f4e:	4b77      	ldr	r3, [pc, #476]	@ (800512c <HAL_RCC_OscConfig+0x474>)
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d118      	bne.n	8004f8c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004f5a:	4b74      	ldr	r3, [pc, #464]	@ (800512c <HAL_RCC_OscConfig+0x474>)
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	4a73      	ldr	r2, [pc, #460]	@ (800512c <HAL_RCC_OscConfig+0x474>)
 8004f60:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004f64:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004f66:	f7fd fed7 	bl	8002d18 <HAL_GetTick>
 8004f6a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004f6c:	e008      	b.n	8004f80 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004f6e:	f7fd fed3 	bl	8002d18 <HAL_GetTick>
 8004f72:	4602      	mov	r2, r0
 8004f74:	693b      	ldr	r3, [r7, #16]
 8004f76:	1ad3      	subs	r3, r2, r3
 8004f78:	2b02      	cmp	r3, #2
 8004f7a:	d901      	bls.n	8004f80 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004f7c:	2303      	movs	r3, #3
 8004f7e:	e10c      	b.n	800519a <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004f80:	4b6a      	ldr	r3, [pc, #424]	@ (800512c <HAL_RCC_OscConfig+0x474>)
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d0f0      	beq.n	8004f6e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	689b      	ldr	r3, [r3, #8]
 8004f90:	2b01      	cmp	r3, #1
 8004f92:	d106      	bne.n	8004fa2 <HAL_RCC_OscConfig+0x2ea>
 8004f94:	4b64      	ldr	r3, [pc, #400]	@ (8005128 <HAL_RCC_OscConfig+0x470>)
 8004f96:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f98:	4a63      	ldr	r2, [pc, #396]	@ (8005128 <HAL_RCC_OscConfig+0x470>)
 8004f9a:	f043 0301 	orr.w	r3, r3, #1
 8004f9e:	6713      	str	r3, [r2, #112]	@ 0x70
 8004fa0:	e01c      	b.n	8004fdc <HAL_RCC_OscConfig+0x324>
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	689b      	ldr	r3, [r3, #8]
 8004fa6:	2b05      	cmp	r3, #5
 8004fa8:	d10c      	bne.n	8004fc4 <HAL_RCC_OscConfig+0x30c>
 8004faa:	4b5f      	ldr	r3, [pc, #380]	@ (8005128 <HAL_RCC_OscConfig+0x470>)
 8004fac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004fae:	4a5e      	ldr	r2, [pc, #376]	@ (8005128 <HAL_RCC_OscConfig+0x470>)
 8004fb0:	f043 0304 	orr.w	r3, r3, #4
 8004fb4:	6713      	str	r3, [r2, #112]	@ 0x70
 8004fb6:	4b5c      	ldr	r3, [pc, #368]	@ (8005128 <HAL_RCC_OscConfig+0x470>)
 8004fb8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004fba:	4a5b      	ldr	r2, [pc, #364]	@ (8005128 <HAL_RCC_OscConfig+0x470>)
 8004fbc:	f043 0301 	orr.w	r3, r3, #1
 8004fc0:	6713      	str	r3, [r2, #112]	@ 0x70
 8004fc2:	e00b      	b.n	8004fdc <HAL_RCC_OscConfig+0x324>
 8004fc4:	4b58      	ldr	r3, [pc, #352]	@ (8005128 <HAL_RCC_OscConfig+0x470>)
 8004fc6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004fc8:	4a57      	ldr	r2, [pc, #348]	@ (8005128 <HAL_RCC_OscConfig+0x470>)
 8004fca:	f023 0301 	bic.w	r3, r3, #1
 8004fce:	6713      	str	r3, [r2, #112]	@ 0x70
 8004fd0:	4b55      	ldr	r3, [pc, #340]	@ (8005128 <HAL_RCC_OscConfig+0x470>)
 8004fd2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004fd4:	4a54      	ldr	r2, [pc, #336]	@ (8005128 <HAL_RCC_OscConfig+0x470>)
 8004fd6:	f023 0304 	bic.w	r3, r3, #4
 8004fda:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	689b      	ldr	r3, [r3, #8]
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d015      	beq.n	8005010 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004fe4:	f7fd fe98 	bl	8002d18 <HAL_GetTick>
 8004fe8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004fea:	e00a      	b.n	8005002 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004fec:	f7fd fe94 	bl	8002d18 <HAL_GetTick>
 8004ff0:	4602      	mov	r2, r0
 8004ff2:	693b      	ldr	r3, [r7, #16]
 8004ff4:	1ad3      	subs	r3, r2, r3
 8004ff6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004ffa:	4293      	cmp	r3, r2
 8004ffc:	d901      	bls.n	8005002 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004ffe:	2303      	movs	r3, #3
 8005000:	e0cb      	b.n	800519a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005002:	4b49      	ldr	r3, [pc, #292]	@ (8005128 <HAL_RCC_OscConfig+0x470>)
 8005004:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005006:	f003 0302 	and.w	r3, r3, #2
 800500a:	2b00      	cmp	r3, #0
 800500c:	d0ee      	beq.n	8004fec <HAL_RCC_OscConfig+0x334>
 800500e:	e014      	b.n	800503a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005010:	f7fd fe82 	bl	8002d18 <HAL_GetTick>
 8005014:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005016:	e00a      	b.n	800502e <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005018:	f7fd fe7e 	bl	8002d18 <HAL_GetTick>
 800501c:	4602      	mov	r2, r0
 800501e:	693b      	ldr	r3, [r7, #16]
 8005020:	1ad3      	subs	r3, r2, r3
 8005022:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005026:	4293      	cmp	r3, r2
 8005028:	d901      	bls.n	800502e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800502a:	2303      	movs	r3, #3
 800502c:	e0b5      	b.n	800519a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800502e:	4b3e      	ldr	r3, [pc, #248]	@ (8005128 <HAL_RCC_OscConfig+0x470>)
 8005030:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005032:	f003 0302 	and.w	r3, r3, #2
 8005036:	2b00      	cmp	r3, #0
 8005038:	d1ee      	bne.n	8005018 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800503a:	7dfb      	ldrb	r3, [r7, #23]
 800503c:	2b01      	cmp	r3, #1
 800503e:	d105      	bne.n	800504c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005040:	4b39      	ldr	r3, [pc, #228]	@ (8005128 <HAL_RCC_OscConfig+0x470>)
 8005042:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005044:	4a38      	ldr	r2, [pc, #224]	@ (8005128 <HAL_RCC_OscConfig+0x470>)
 8005046:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800504a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	699b      	ldr	r3, [r3, #24]
 8005050:	2b00      	cmp	r3, #0
 8005052:	f000 80a1 	beq.w	8005198 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005056:	4b34      	ldr	r3, [pc, #208]	@ (8005128 <HAL_RCC_OscConfig+0x470>)
 8005058:	689b      	ldr	r3, [r3, #8]
 800505a:	f003 030c 	and.w	r3, r3, #12
 800505e:	2b08      	cmp	r3, #8
 8005060:	d05c      	beq.n	800511c <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	699b      	ldr	r3, [r3, #24]
 8005066:	2b02      	cmp	r3, #2
 8005068:	d141      	bne.n	80050ee <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800506a:	4b31      	ldr	r3, [pc, #196]	@ (8005130 <HAL_RCC_OscConfig+0x478>)
 800506c:	2200      	movs	r2, #0
 800506e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005070:	f7fd fe52 	bl	8002d18 <HAL_GetTick>
 8005074:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005076:	e008      	b.n	800508a <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005078:	f7fd fe4e 	bl	8002d18 <HAL_GetTick>
 800507c:	4602      	mov	r2, r0
 800507e:	693b      	ldr	r3, [r7, #16]
 8005080:	1ad3      	subs	r3, r2, r3
 8005082:	2b02      	cmp	r3, #2
 8005084:	d901      	bls.n	800508a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8005086:	2303      	movs	r3, #3
 8005088:	e087      	b.n	800519a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800508a:	4b27      	ldr	r3, [pc, #156]	@ (8005128 <HAL_RCC_OscConfig+0x470>)
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005092:	2b00      	cmp	r3, #0
 8005094:	d1f0      	bne.n	8005078 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	69da      	ldr	r2, [r3, #28]
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	6a1b      	ldr	r3, [r3, #32]
 800509e:	431a      	orrs	r2, r3
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050a4:	019b      	lsls	r3, r3, #6
 80050a6:	431a      	orrs	r2, r3
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80050ac:	085b      	lsrs	r3, r3, #1
 80050ae:	3b01      	subs	r3, #1
 80050b0:	041b      	lsls	r3, r3, #16
 80050b2:	431a      	orrs	r2, r3
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050b8:	061b      	lsls	r3, r3, #24
 80050ba:	491b      	ldr	r1, [pc, #108]	@ (8005128 <HAL_RCC_OscConfig+0x470>)
 80050bc:	4313      	orrs	r3, r2
 80050be:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80050c0:	4b1b      	ldr	r3, [pc, #108]	@ (8005130 <HAL_RCC_OscConfig+0x478>)
 80050c2:	2201      	movs	r2, #1
 80050c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80050c6:	f7fd fe27 	bl	8002d18 <HAL_GetTick>
 80050ca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80050cc:	e008      	b.n	80050e0 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80050ce:	f7fd fe23 	bl	8002d18 <HAL_GetTick>
 80050d2:	4602      	mov	r2, r0
 80050d4:	693b      	ldr	r3, [r7, #16]
 80050d6:	1ad3      	subs	r3, r2, r3
 80050d8:	2b02      	cmp	r3, #2
 80050da:	d901      	bls.n	80050e0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80050dc:	2303      	movs	r3, #3
 80050de:	e05c      	b.n	800519a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80050e0:	4b11      	ldr	r3, [pc, #68]	@ (8005128 <HAL_RCC_OscConfig+0x470>)
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d0f0      	beq.n	80050ce <HAL_RCC_OscConfig+0x416>
 80050ec:	e054      	b.n	8005198 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80050ee:	4b10      	ldr	r3, [pc, #64]	@ (8005130 <HAL_RCC_OscConfig+0x478>)
 80050f0:	2200      	movs	r2, #0
 80050f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80050f4:	f7fd fe10 	bl	8002d18 <HAL_GetTick>
 80050f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80050fa:	e008      	b.n	800510e <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80050fc:	f7fd fe0c 	bl	8002d18 <HAL_GetTick>
 8005100:	4602      	mov	r2, r0
 8005102:	693b      	ldr	r3, [r7, #16]
 8005104:	1ad3      	subs	r3, r2, r3
 8005106:	2b02      	cmp	r3, #2
 8005108:	d901      	bls.n	800510e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800510a:	2303      	movs	r3, #3
 800510c:	e045      	b.n	800519a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800510e:	4b06      	ldr	r3, [pc, #24]	@ (8005128 <HAL_RCC_OscConfig+0x470>)
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005116:	2b00      	cmp	r3, #0
 8005118:	d1f0      	bne.n	80050fc <HAL_RCC_OscConfig+0x444>
 800511a:	e03d      	b.n	8005198 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	699b      	ldr	r3, [r3, #24]
 8005120:	2b01      	cmp	r3, #1
 8005122:	d107      	bne.n	8005134 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005124:	2301      	movs	r3, #1
 8005126:	e038      	b.n	800519a <HAL_RCC_OscConfig+0x4e2>
 8005128:	40023800 	.word	0x40023800
 800512c:	40007000 	.word	0x40007000
 8005130:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005134:	4b1b      	ldr	r3, [pc, #108]	@ (80051a4 <HAL_RCC_OscConfig+0x4ec>)
 8005136:	685b      	ldr	r3, [r3, #4]
 8005138:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	699b      	ldr	r3, [r3, #24]
 800513e:	2b01      	cmp	r3, #1
 8005140:	d028      	beq.n	8005194 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800514c:	429a      	cmp	r2, r3
 800514e:	d121      	bne.n	8005194 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800515a:	429a      	cmp	r2, r3
 800515c:	d11a      	bne.n	8005194 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800515e:	68fa      	ldr	r2, [r7, #12]
 8005160:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8005164:	4013      	ands	r3, r2
 8005166:	687a      	ldr	r2, [r7, #4]
 8005168:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800516a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800516c:	4293      	cmp	r3, r2
 800516e:	d111      	bne.n	8005194 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800517a:	085b      	lsrs	r3, r3, #1
 800517c:	3b01      	subs	r3, #1
 800517e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005180:	429a      	cmp	r2, r3
 8005182:	d107      	bne.n	8005194 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800518e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005190:	429a      	cmp	r2, r3
 8005192:	d001      	beq.n	8005198 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8005194:	2301      	movs	r3, #1
 8005196:	e000      	b.n	800519a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005198:	2300      	movs	r3, #0
}
 800519a:	4618      	mov	r0, r3
 800519c:	3718      	adds	r7, #24
 800519e:	46bd      	mov	sp, r7
 80051a0:	bd80      	pop	{r7, pc}
 80051a2:	bf00      	nop
 80051a4:	40023800 	.word	0x40023800

080051a8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80051a8:	b580      	push	{r7, lr}
 80051aa:	b084      	sub	sp, #16
 80051ac:	af00      	add	r7, sp, #0
 80051ae:	6078      	str	r0, [r7, #4]
 80051b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d101      	bne.n	80051bc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80051b8:	2301      	movs	r3, #1
 80051ba:	e0cc      	b.n	8005356 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80051bc:	4b68      	ldr	r3, [pc, #416]	@ (8005360 <HAL_RCC_ClockConfig+0x1b8>)
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	f003 030f 	and.w	r3, r3, #15
 80051c4:	683a      	ldr	r2, [r7, #0]
 80051c6:	429a      	cmp	r2, r3
 80051c8:	d90c      	bls.n	80051e4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80051ca:	4b65      	ldr	r3, [pc, #404]	@ (8005360 <HAL_RCC_ClockConfig+0x1b8>)
 80051cc:	683a      	ldr	r2, [r7, #0]
 80051ce:	b2d2      	uxtb	r2, r2
 80051d0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80051d2:	4b63      	ldr	r3, [pc, #396]	@ (8005360 <HAL_RCC_ClockConfig+0x1b8>)
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	f003 030f 	and.w	r3, r3, #15
 80051da:	683a      	ldr	r2, [r7, #0]
 80051dc:	429a      	cmp	r2, r3
 80051de:	d001      	beq.n	80051e4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80051e0:	2301      	movs	r3, #1
 80051e2:	e0b8      	b.n	8005356 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	f003 0302 	and.w	r3, r3, #2
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d020      	beq.n	8005232 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	f003 0304 	and.w	r3, r3, #4
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d005      	beq.n	8005208 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80051fc:	4b59      	ldr	r3, [pc, #356]	@ (8005364 <HAL_RCC_ClockConfig+0x1bc>)
 80051fe:	689b      	ldr	r3, [r3, #8]
 8005200:	4a58      	ldr	r2, [pc, #352]	@ (8005364 <HAL_RCC_ClockConfig+0x1bc>)
 8005202:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8005206:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	f003 0308 	and.w	r3, r3, #8
 8005210:	2b00      	cmp	r3, #0
 8005212:	d005      	beq.n	8005220 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005214:	4b53      	ldr	r3, [pc, #332]	@ (8005364 <HAL_RCC_ClockConfig+0x1bc>)
 8005216:	689b      	ldr	r3, [r3, #8]
 8005218:	4a52      	ldr	r2, [pc, #328]	@ (8005364 <HAL_RCC_ClockConfig+0x1bc>)
 800521a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800521e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005220:	4b50      	ldr	r3, [pc, #320]	@ (8005364 <HAL_RCC_ClockConfig+0x1bc>)
 8005222:	689b      	ldr	r3, [r3, #8]
 8005224:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	689b      	ldr	r3, [r3, #8]
 800522c:	494d      	ldr	r1, [pc, #308]	@ (8005364 <HAL_RCC_ClockConfig+0x1bc>)
 800522e:	4313      	orrs	r3, r2
 8005230:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	f003 0301 	and.w	r3, r3, #1
 800523a:	2b00      	cmp	r3, #0
 800523c:	d044      	beq.n	80052c8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	685b      	ldr	r3, [r3, #4]
 8005242:	2b01      	cmp	r3, #1
 8005244:	d107      	bne.n	8005256 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005246:	4b47      	ldr	r3, [pc, #284]	@ (8005364 <HAL_RCC_ClockConfig+0x1bc>)
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800524e:	2b00      	cmp	r3, #0
 8005250:	d119      	bne.n	8005286 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005252:	2301      	movs	r3, #1
 8005254:	e07f      	b.n	8005356 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	685b      	ldr	r3, [r3, #4]
 800525a:	2b02      	cmp	r3, #2
 800525c:	d003      	beq.n	8005266 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005262:	2b03      	cmp	r3, #3
 8005264:	d107      	bne.n	8005276 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005266:	4b3f      	ldr	r3, [pc, #252]	@ (8005364 <HAL_RCC_ClockConfig+0x1bc>)
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800526e:	2b00      	cmp	r3, #0
 8005270:	d109      	bne.n	8005286 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005272:	2301      	movs	r3, #1
 8005274:	e06f      	b.n	8005356 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005276:	4b3b      	ldr	r3, [pc, #236]	@ (8005364 <HAL_RCC_ClockConfig+0x1bc>)
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	f003 0302 	and.w	r3, r3, #2
 800527e:	2b00      	cmp	r3, #0
 8005280:	d101      	bne.n	8005286 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005282:	2301      	movs	r3, #1
 8005284:	e067      	b.n	8005356 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005286:	4b37      	ldr	r3, [pc, #220]	@ (8005364 <HAL_RCC_ClockConfig+0x1bc>)
 8005288:	689b      	ldr	r3, [r3, #8]
 800528a:	f023 0203 	bic.w	r2, r3, #3
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	685b      	ldr	r3, [r3, #4]
 8005292:	4934      	ldr	r1, [pc, #208]	@ (8005364 <HAL_RCC_ClockConfig+0x1bc>)
 8005294:	4313      	orrs	r3, r2
 8005296:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005298:	f7fd fd3e 	bl	8002d18 <HAL_GetTick>
 800529c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800529e:	e00a      	b.n	80052b6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80052a0:	f7fd fd3a 	bl	8002d18 <HAL_GetTick>
 80052a4:	4602      	mov	r2, r0
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	1ad3      	subs	r3, r2, r3
 80052aa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80052ae:	4293      	cmp	r3, r2
 80052b0:	d901      	bls.n	80052b6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80052b2:	2303      	movs	r3, #3
 80052b4:	e04f      	b.n	8005356 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80052b6:	4b2b      	ldr	r3, [pc, #172]	@ (8005364 <HAL_RCC_ClockConfig+0x1bc>)
 80052b8:	689b      	ldr	r3, [r3, #8]
 80052ba:	f003 020c 	and.w	r2, r3, #12
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	685b      	ldr	r3, [r3, #4]
 80052c2:	009b      	lsls	r3, r3, #2
 80052c4:	429a      	cmp	r2, r3
 80052c6:	d1eb      	bne.n	80052a0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80052c8:	4b25      	ldr	r3, [pc, #148]	@ (8005360 <HAL_RCC_ClockConfig+0x1b8>)
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	f003 030f 	and.w	r3, r3, #15
 80052d0:	683a      	ldr	r2, [r7, #0]
 80052d2:	429a      	cmp	r2, r3
 80052d4:	d20c      	bcs.n	80052f0 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80052d6:	4b22      	ldr	r3, [pc, #136]	@ (8005360 <HAL_RCC_ClockConfig+0x1b8>)
 80052d8:	683a      	ldr	r2, [r7, #0]
 80052da:	b2d2      	uxtb	r2, r2
 80052dc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80052de:	4b20      	ldr	r3, [pc, #128]	@ (8005360 <HAL_RCC_ClockConfig+0x1b8>)
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	f003 030f 	and.w	r3, r3, #15
 80052e6:	683a      	ldr	r2, [r7, #0]
 80052e8:	429a      	cmp	r2, r3
 80052ea:	d001      	beq.n	80052f0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80052ec:	2301      	movs	r3, #1
 80052ee:	e032      	b.n	8005356 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	f003 0304 	and.w	r3, r3, #4
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d008      	beq.n	800530e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80052fc:	4b19      	ldr	r3, [pc, #100]	@ (8005364 <HAL_RCC_ClockConfig+0x1bc>)
 80052fe:	689b      	ldr	r3, [r3, #8]
 8005300:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	68db      	ldr	r3, [r3, #12]
 8005308:	4916      	ldr	r1, [pc, #88]	@ (8005364 <HAL_RCC_ClockConfig+0x1bc>)
 800530a:	4313      	orrs	r3, r2
 800530c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	f003 0308 	and.w	r3, r3, #8
 8005316:	2b00      	cmp	r3, #0
 8005318:	d009      	beq.n	800532e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800531a:	4b12      	ldr	r3, [pc, #72]	@ (8005364 <HAL_RCC_ClockConfig+0x1bc>)
 800531c:	689b      	ldr	r3, [r3, #8]
 800531e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	691b      	ldr	r3, [r3, #16]
 8005326:	00db      	lsls	r3, r3, #3
 8005328:	490e      	ldr	r1, [pc, #56]	@ (8005364 <HAL_RCC_ClockConfig+0x1bc>)
 800532a:	4313      	orrs	r3, r2
 800532c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800532e:	f000 f821 	bl	8005374 <HAL_RCC_GetSysClockFreq>
 8005332:	4602      	mov	r2, r0
 8005334:	4b0b      	ldr	r3, [pc, #44]	@ (8005364 <HAL_RCC_ClockConfig+0x1bc>)
 8005336:	689b      	ldr	r3, [r3, #8]
 8005338:	091b      	lsrs	r3, r3, #4
 800533a:	f003 030f 	and.w	r3, r3, #15
 800533e:	490a      	ldr	r1, [pc, #40]	@ (8005368 <HAL_RCC_ClockConfig+0x1c0>)
 8005340:	5ccb      	ldrb	r3, [r1, r3]
 8005342:	fa22 f303 	lsr.w	r3, r2, r3
 8005346:	4a09      	ldr	r2, [pc, #36]	@ (800536c <HAL_RCC_ClockConfig+0x1c4>)
 8005348:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800534a:	4b09      	ldr	r3, [pc, #36]	@ (8005370 <HAL_RCC_ClockConfig+0x1c8>)
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	4618      	mov	r0, r3
 8005350:	f7fd fc9e 	bl	8002c90 <HAL_InitTick>

  return HAL_OK;
 8005354:	2300      	movs	r3, #0
}
 8005356:	4618      	mov	r0, r3
 8005358:	3710      	adds	r7, #16
 800535a:	46bd      	mov	sp, r7
 800535c:	bd80      	pop	{r7, pc}
 800535e:	bf00      	nop
 8005360:	40023c00 	.word	0x40023c00
 8005364:	40023800 	.word	0x40023800
 8005368:	0800839c 	.word	0x0800839c
 800536c:	20000010 	.word	0x20000010
 8005370:	20000014 	.word	0x20000014

08005374 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005374:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005378:	b094      	sub	sp, #80	@ 0x50
 800537a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800537c:	2300      	movs	r3, #0
 800537e:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8005380:	2300      	movs	r3, #0
 8005382:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8005384:	2300      	movs	r3, #0
 8005386:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8005388:	2300      	movs	r3, #0
 800538a:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800538c:	4b79      	ldr	r3, [pc, #484]	@ (8005574 <HAL_RCC_GetSysClockFreq+0x200>)
 800538e:	689b      	ldr	r3, [r3, #8]
 8005390:	f003 030c 	and.w	r3, r3, #12
 8005394:	2b08      	cmp	r3, #8
 8005396:	d00d      	beq.n	80053b4 <HAL_RCC_GetSysClockFreq+0x40>
 8005398:	2b08      	cmp	r3, #8
 800539a:	f200 80e1 	bhi.w	8005560 <HAL_RCC_GetSysClockFreq+0x1ec>
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d002      	beq.n	80053a8 <HAL_RCC_GetSysClockFreq+0x34>
 80053a2:	2b04      	cmp	r3, #4
 80053a4:	d003      	beq.n	80053ae <HAL_RCC_GetSysClockFreq+0x3a>
 80053a6:	e0db      	b.n	8005560 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80053a8:	4b73      	ldr	r3, [pc, #460]	@ (8005578 <HAL_RCC_GetSysClockFreq+0x204>)
 80053aa:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80053ac:	e0db      	b.n	8005566 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80053ae:	4b73      	ldr	r3, [pc, #460]	@ (800557c <HAL_RCC_GetSysClockFreq+0x208>)
 80053b0:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80053b2:	e0d8      	b.n	8005566 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80053b4:	4b6f      	ldr	r3, [pc, #444]	@ (8005574 <HAL_RCC_GetSysClockFreq+0x200>)
 80053b6:	685b      	ldr	r3, [r3, #4]
 80053b8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80053bc:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80053be:	4b6d      	ldr	r3, [pc, #436]	@ (8005574 <HAL_RCC_GetSysClockFreq+0x200>)
 80053c0:	685b      	ldr	r3, [r3, #4]
 80053c2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d063      	beq.n	8005492 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80053ca:	4b6a      	ldr	r3, [pc, #424]	@ (8005574 <HAL_RCC_GetSysClockFreq+0x200>)
 80053cc:	685b      	ldr	r3, [r3, #4]
 80053ce:	099b      	lsrs	r3, r3, #6
 80053d0:	2200      	movs	r2, #0
 80053d2:	63bb      	str	r3, [r7, #56]	@ 0x38
 80053d4:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80053d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80053d8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80053dc:	633b      	str	r3, [r7, #48]	@ 0x30
 80053de:	2300      	movs	r3, #0
 80053e0:	637b      	str	r3, [r7, #52]	@ 0x34
 80053e2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80053e6:	4622      	mov	r2, r4
 80053e8:	462b      	mov	r3, r5
 80053ea:	f04f 0000 	mov.w	r0, #0
 80053ee:	f04f 0100 	mov.w	r1, #0
 80053f2:	0159      	lsls	r1, r3, #5
 80053f4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80053f8:	0150      	lsls	r0, r2, #5
 80053fa:	4602      	mov	r2, r0
 80053fc:	460b      	mov	r3, r1
 80053fe:	4621      	mov	r1, r4
 8005400:	1a51      	subs	r1, r2, r1
 8005402:	6139      	str	r1, [r7, #16]
 8005404:	4629      	mov	r1, r5
 8005406:	eb63 0301 	sbc.w	r3, r3, r1
 800540a:	617b      	str	r3, [r7, #20]
 800540c:	f04f 0200 	mov.w	r2, #0
 8005410:	f04f 0300 	mov.w	r3, #0
 8005414:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005418:	4659      	mov	r1, fp
 800541a:	018b      	lsls	r3, r1, #6
 800541c:	4651      	mov	r1, sl
 800541e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005422:	4651      	mov	r1, sl
 8005424:	018a      	lsls	r2, r1, #6
 8005426:	4651      	mov	r1, sl
 8005428:	ebb2 0801 	subs.w	r8, r2, r1
 800542c:	4659      	mov	r1, fp
 800542e:	eb63 0901 	sbc.w	r9, r3, r1
 8005432:	f04f 0200 	mov.w	r2, #0
 8005436:	f04f 0300 	mov.w	r3, #0
 800543a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800543e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005442:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005446:	4690      	mov	r8, r2
 8005448:	4699      	mov	r9, r3
 800544a:	4623      	mov	r3, r4
 800544c:	eb18 0303 	adds.w	r3, r8, r3
 8005450:	60bb      	str	r3, [r7, #8]
 8005452:	462b      	mov	r3, r5
 8005454:	eb49 0303 	adc.w	r3, r9, r3
 8005458:	60fb      	str	r3, [r7, #12]
 800545a:	f04f 0200 	mov.w	r2, #0
 800545e:	f04f 0300 	mov.w	r3, #0
 8005462:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8005466:	4629      	mov	r1, r5
 8005468:	024b      	lsls	r3, r1, #9
 800546a:	4621      	mov	r1, r4
 800546c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005470:	4621      	mov	r1, r4
 8005472:	024a      	lsls	r2, r1, #9
 8005474:	4610      	mov	r0, r2
 8005476:	4619      	mov	r1, r3
 8005478:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800547a:	2200      	movs	r2, #0
 800547c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800547e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005480:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005484:	f7fa ff04 	bl	8000290 <__aeabi_uldivmod>
 8005488:	4602      	mov	r2, r0
 800548a:	460b      	mov	r3, r1
 800548c:	4613      	mov	r3, r2
 800548e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005490:	e058      	b.n	8005544 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005492:	4b38      	ldr	r3, [pc, #224]	@ (8005574 <HAL_RCC_GetSysClockFreq+0x200>)
 8005494:	685b      	ldr	r3, [r3, #4]
 8005496:	099b      	lsrs	r3, r3, #6
 8005498:	2200      	movs	r2, #0
 800549a:	4618      	mov	r0, r3
 800549c:	4611      	mov	r1, r2
 800549e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80054a2:	623b      	str	r3, [r7, #32]
 80054a4:	2300      	movs	r3, #0
 80054a6:	627b      	str	r3, [r7, #36]	@ 0x24
 80054a8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80054ac:	4642      	mov	r2, r8
 80054ae:	464b      	mov	r3, r9
 80054b0:	f04f 0000 	mov.w	r0, #0
 80054b4:	f04f 0100 	mov.w	r1, #0
 80054b8:	0159      	lsls	r1, r3, #5
 80054ba:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80054be:	0150      	lsls	r0, r2, #5
 80054c0:	4602      	mov	r2, r0
 80054c2:	460b      	mov	r3, r1
 80054c4:	4641      	mov	r1, r8
 80054c6:	ebb2 0a01 	subs.w	sl, r2, r1
 80054ca:	4649      	mov	r1, r9
 80054cc:	eb63 0b01 	sbc.w	fp, r3, r1
 80054d0:	f04f 0200 	mov.w	r2, #0
 80054d4:	f04f 0300 	mov.w	r3, #0
 80054d8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80054dc:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80054e0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80054e4:	ebb2 040a 	subs.w	r4, r2, sl
 80054e8:	eb63 050b 	sbc.w	r5, r3, fp
 80054ec:	f04f 0200 	mov.w	r2, #0
 80054f0:	f04f 0300 	mov.w	r3, #0
 80054f4:	00eb      	lsls	r3, r5, #3
 80054f6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80054fa:	00e2      	lsls	r2, r4, #3
 80054fc:	4614      	mov	r4, r2
 80054fe:	461d      	mov	r5, r3
 8005500:	4643      	mov	r3, r8
 8005502:	18e3      	adds	r3, r4, r3
 8005504:	603b      	str	r3, [r7, #0]
 8005506:	464b      	mov	r3, r9
 8005508:	eb45 0303 	adc.w	r3, r5, r3
 800550c:	607b      	str	r3, [r7, #4]
 800550e:	f04f 0200 	mov.w	r2, #0
 8005512:	f04f 0300 	mov.w	r3, #0
 8005516:	e9d7 4500 	ldrd	r4, r5, [r7]
 800551a:	4629      	mov	r1, r5
 800551c:	028b      	lsls	r3, r1, #10
 800551e:	4621      	mov	r1, r4
 8005520:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005524:	4621      	mov	r1, r4
 8005526:	028a      	lsls	r2, r1, #10
 8005528:	4610      	mov	r0, r2
 800552a:	4619      	mov	r1, r3
 800552c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800552e:	2200      	movs	r2, #0
 8005530:	61bb      	str	r3, [r7, #24]
 8005532:	61fa      	str	r2, [r7, #28]
 8005534:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005538:	f7fa feaa 	bl	8000290 <__aeabi_uldivmod>
 800553c:	4602      	mov	r2, r0
 800553e:	460b      	mov	r3, r1
 8005540:	4613      	mov	r3, r2
 8005542:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8005544:	4b0b      	ldr	r3, [pc, #44]	@ (8005574 <HAL_RCC_GetSysClockFreq+0x200>)
 8005546:	685b      	ldr	r3, [r3, #4]
 8005548:	0c1b      	lsrs	r3, r3, #16
 800554a:	f003 0303 	and.w	r3, r3, #3
 800554e:	3301      	adds	r3, #1
 8005550:	005b      	lsls	r3, r3, #1
 8005552:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8005554:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005556:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005558:	fbb2 f3f3 	udiv	r3, r2, r3
 800555c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800555e:	e002      	b.n	8005566 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005560:	4b05      	ldr	r3, [pc, #20]	@ (8005578 <HAL_RCC_GetSysClockFreq+0x204>)
 8005562:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005564:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005566:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8005568:	4618      	mov	r0, r3
 800556a:	3750      	adds	r7, #80	@ 0x50
 800556c:	46bd      	mov	sp, r7
 800556e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005572:	bf00      	nop
 8005574:	40023800 	.word	0x40023800
 8005578:	00f42400 	.word	0x00f42400
 800557c:	007a1200 	.word	0x007a1200

08005580 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005580:	b480      	push	{r7}
 8005582:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005584:	4b03      	ldr	r3, [pc, #12]	@ (8005594 <HAL_RCC_GetHCLKFreq+0x14>)
 8005586:	681b      	ldr	r3, [r3, #0]
}
 8005588:	4618      	mov	r0, r3
 800558a:	46bd      	mov	sp, r7
 800558c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005590:	4770      	bx	lr
 8005592:	bf00      	nop
 8005594:	20000010 	.word	0x20000010

08005598 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005598:	b580      	push	{r7, lr}
 800559a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800559c:	f7ff fff0 	bl	8005580 <HAL_RCC_GetHCLKFreq>
 80055a0:	4602      	mov	r2, r0
 80055a2:	4b05      	ldr	r3, [pc, #20]	@ (80055b8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80055a4:	689b      	ldr	r3, [r3, #8]
 80055a6:	0a9b      	lsrs	r3, r3, #10
 80055a8:	f003 0307 	and.w	r3, r3, #7
 80055ac:	4903      	ldr	r1, [pc, #12]	@ (80055bc <HAL_RCC_GetPCLK1Freq+0x24>)
 80055ae:	5ccb      	ldrb	r3, [r1, r3]
 80055b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80055b4:	4618      	mov	r0, r3
 80055b6:	bd80      	pop	{r7, pc}
 80055b8:	40023800 	.word	0x40023800
 80055bc:	080083ac 	.word	0x080083ac

080055c0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80055c0:	b580      	push	{r7, lr}
 80055c2:	b086      	sub	sp, #24
 80055c4:	af00      	add	r7, sp, #0
 80055c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80055c8:	2300      	movs	r3, #0
 80055ca:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80055cc:	2300      	movs	r3, #0
 80055ce:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	f003 0301 	and.w	r3, r3, #1
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d10b      	bne.n	80055f4 <HAL_RCCEx_PeriphCLKConfig+0x34>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	f003 0302 	and.w	r3, r3, #2
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d105      	bne.n	80055f4 <HAL_RCCEx_PeriphCLKConfig+0x34>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d075      	beq.n	80056e0 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80055f4:	4b91      	ldr	r3, [pc, #580]	@ (800583c <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 80055f6:	2200      	movs	r2, #0
 80055f8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80055fa:	f7fd fb8d 	bl	8002d18 <HAL_GetTick>
 80055fe:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005600:	e008      	b.n	8005614 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005602:	f7fd fb89 	bl	8002d18 <HAL_GetTick>
 8005606:	4602      	mov	r2, r0
 8005608:	697b      	ldr	r3, [r7, #20]
 800560a:	1ad3      	subs	r3, r2, r3
 800560c:	2b02      	cmp	r3, #2
 800560e:	d901      	bls.n	8005614 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005610:	2303      	movs	r3, #3
 8005612:	e189      	b.n	8005928 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005614:	4b8a      	ldr	r3, [pc, #552]	@ (8005840 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800561c:	2b00      	cmp	r3, #0
 800561e:	d1f0      	bne.n	8005602 <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	f003 0301 	and.w	r3, r3, #1
 8005628:	2b00      	cmp	r3, #0
 800562a:	d009      	beq.n	8005640 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	685b      	ldr	r3, [r3, #4]
 8005630:	019a      	lsls	r2, r3, #6
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	689b      	ldr	r3, [r3, #8]
 8005636:	071b      	lsls	r3, r3, #28
 8005638:	4981      	ldr	r1, [pc, #516]	@ (8005840 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800563a:	4313      	orrs	r3, r2
 800563c:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	f003 0302 	and.w	r3, r3, #2
 8005648:	2b00      	cmp	r3, #0
 800564a:	d01f      	beq.n	800568c <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800564c:	4b7c      	ldr	r3, [pc, #496]	@ (8005840 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800564e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005652:	0f1b      	lsrs	r3, r3, #28
 8005654:	f003 0307 	and.w	r3, r3, #7
 8005658:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	685b      	ldr	r3, [r3, #4]
 800565e:	019a      	lsls	r2, r3, #6
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	68db      	ldr	r3, [r3, #12]
 8005664:	061b      	lsls	r3, r3, #24
 8005666:	431a      	orrs	r2, r3
 8005668:	693b      	ldr	r3, [r7, #16]
 800566a:	071b      	lsls	r3, r3, #28
 800566c:	4974      	ldr	r1, [pc, #464]	@ (8005840 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800566e:	4313      	orrs	r3, r2
 8005670:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8005674:	4b72      	ldr	r3, [pc, #456]	@ (8005840 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005676:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800567a:	f023 021f 	bic.w	r2, r3, #31
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	69db      	ldr	r3, [r3, #28]
 8005682:	3b01      	subs	r3, #1
 8005684:	496e      	ldr	r1, [pc, #440]	@ (8005840 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005686:	4313      	orrs	r3, r2
 8005688:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005694:	2b00      	cmp	r3, #0
 8005696:	d00d      	beq.n	80056b4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ,
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	685b      	ldr	r3, [r3, #4]
 800569c:	019a      	lsls	r2, r3, #6
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	68db      	ldr	r3, [r3, #12]
 80056a2:	061b      	lsls	r3, r3, #24
 80056a4:	431a      	orrs	r2, r3
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	689b      	ldr	r3, [r3, #8]
 80056aa:	071b      	lsls	r3, r3, #28
 80056ac:	4964      	ldr	r1, [pc, #400]	@ (8005840 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80056ae:	4313      	orrs	r3, r2
 80056b0:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                                     PeriphClkInit->PLLI2S.PLLI2SR);
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80056b4:	4b61      	ldr	r3, [pc, #388]	@ (800583c <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 80056b6:	2201      	movs	r2, #1
 80056b8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80056ba:	f7fd fb2d 	bl	8002d18 <HAL_GetTick>
 80056be:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80056c0:	e008      	b.n	80056d4 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80056c2:	f7fd fb29 	bl	8002d18 <HAL_GetTick>
 80056c6:	4602      	mov	r2, r0
 80056c8:	697b      	ldr	r3, [r7, #20]
 80056ca:	1ad3      	subs	r3, r2, r3
 80056cc:	2b02      	cmp	r3, #2
 80056ce:	d901      	bls.n	80056d4 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80056d0:	2303      	movs	r3, #3
 80056d2:	e129      	b.n	8005928 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80056d4:	4b5a      	ldr	r3, [pc, #360]	@ (8005840 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d0f0      	beq.n	80056c2 <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	f003 0304 	and.w	r3, r3, #4
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d105      	bne.n	80056f8 <HAL_RCCEx_PeriphCLKConfig+0x138>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	f003 0308 	and.w	r3, r3, #8
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d079      	beq.n	80057ec <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80056f8:	4b52      	ldr	r3, [pc, #328]	@ (8005844 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80056fa:	2200      	movs	r2, #0
 80056fc:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80056fe:	f7fd fb0b 	bl	8002d18 <HAL_GetTick>
 8005702:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005704:	e008      	b.n	8005718 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005706:	f7fd fb07 	bl	8002d18 <HAL_GetTick>
 800570a:	4602      	mov	r2, r0
 800570c:	697b      	ldr	r3, [r7, #20]
 800570e:	1ad3      	subs	r3, r2, r3
 8005710:	2b02      	cmp	r3, #2
 8005712:	d901      	bls.n	8005718 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005714:	2303      	movs	r3, #3
 8005716:	e107      	b.n	8005928 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005718:	4b49      	ldr	r3, [pc, #292]	@ (8005840 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005720:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005724:	d0ef      	beq.n	8005706 <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	f003 0304 	and.w	r3, r3, #4
 800572e:	2b00      	cmp	r3, #0
 8005730:	d020      	beq.n	8005774 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005732:	4b43      	ldr	r3, [pc, #268]	@ (8005840 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005734:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005738:	0f1b      	lsrs	r3, r3, #28
 800573a:	f003 0307 	and.w	r3, r3, #7
 800573e:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	691b      	ldr	r3, [r3, #16]
 8005744:	019a      	lsls	r2, r3, #6
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	695b      	ldr	r3, [r3, #20]
 800574a:	061b      	lsls	r3, r3, #24
 800574c:	431a      	orrs	r2, r3
 800574e:	693b      	ldr	r3, [r7, #16]
 8005750:	071b      	lsls	r3, r3, #28
 8005752:	493b      	ldr	r1, [pc, #236]	@ (8005840 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005754:	4313      	orrs	r3, r2
 8005756:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800575a:	4b39      	ldr	r3, [pc, #228]	@ (8005840 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800575c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005760:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	6a1b      	ldr	r3, [r3, #32]
 8005768:	3b01      	subs	r3, #1
 800576a:	021b      	lsls	r3, r3, #8
 800576c:	4934      	ldr	r1, [pc, #208]	@ (8005840 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800576e:	4313      	orrs	r3, r2
 8005770:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	f003 0308 	and.w	r3, r3, #8
 800577c:	2b00      	cmp	r3, #0
 800577e:	d01e      	beq.n	80057be <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005780:	4b2f      	ldr	r3, [pc, #188]	@ (8005840 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005782:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005786:	0e1b      	lsrs	r3, r3, #24
 8005788:	f003 030f 	and.w	r3, r3, #15
 800578c:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	691b      	ldr	r3, [r3, #16]
 8005792:	019a      	lsls	r2, r3, #6
 8005794:	693b      	ldr	r3, [r7, #16]
 8005796:	061b      	lsls	r3, r3, #24
 8005798:	431a      	orrs	r2, r3
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	699b      	ldr	r3, [r3, #24]
 800579e:	071b      	lsls	r3, r3, #28
 80057a0:	4927      	ldr	r1, [pc, #156]	@ (8005840 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80057a2:	4313      	orrs	r3, r2
 80057a4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80057a8:	4b25      	ldr	r3, [pc, #148]	@ (8005840 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80057aa:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80057ae:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057b6:	4922      	ldr	r1, [pc, #136]	@ (8005840 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80057b8:	4313      	orrs	r3, r2
 80057ba:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80057be:	4b21      	ldr	r3, [pc, #132]	@ (8005844 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80057c0:	2201      	movs	r2, #1
 80057c2:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80057c4:	f7fd faa8 	bl	8002d18 <HAL_GetTick>
 80057c8:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80057ca:	e008      	b.n	80057de <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80057cc:	f7fd faa4 	bl	8002d18 <HAL_GetTick>
 80057d0:	4602      	mov	r2, r0
 80057d2:	697b      	ldr	r3, [r7, #20]
 80057d4:	1ad3      	subs	r3, r2, r3
 80057d6:	2b02      	cmp	r3, #2
 80057d8:	d901      	bls.n	80057de <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80057da:	2303      	movs	r3, #3
 80057dc:	e0a4      	b.n	8005928 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80057de:	4b18      	ldr	r3, [pc, #96]	@ (8005840 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80057e6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80057ea:	d1ef      	bne.n	80057cc <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	f003 0320 	and.w	r3, r3, #32
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	f000 808b 	beq.w	8005910 <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80057fa:	2300      	movs	r3, #0
 80057fc:	60fb      	str	r3, [r7, #12]
 80057fe:	4b10      	ldr	r3, [pc, #64]	@ (8005840 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005800:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005802:	4a0f      	ldr	r2, [pc, #60]	@ (8005840 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005804:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005808:	6413      	str	r3, [r2, #64]	@ 0x40
 800580a:	4b0d      	ldr	r3, [pc, #52]	@ (8005840 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800580c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800580e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005812:	60fb      	str	r3, [r7, #12]
 8005814:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8005816:	4b0c      	ldr	r3, [pc, #48]	@ (8005848 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	4a0b      	ldr	r2, [pc, #44]	@ (8005848 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 800581c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005820:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005822:	f7fd fa79 	bl	8002d18 <HAL_GetTick>
 8005826:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8005828:	e010      	b.n	800584c <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800582a:	f7fd fa75 	bl	8002d18 <HAL_GetTick>
 800582e:	4602      	mov	r2, r0
 8005830:	697b      	ldr	r3, [r7, #20]
 8005832:	1ad3      	subs	r3, r2, r3
 8005834:	2b02      	cmp	r3, #2
 8005836:	d909      	bls.n	800584c <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 8005838:	2303      	movs	r3, #3
 800583a:	e075      	b.n	8005928 <HAL_RCCEx_PeriphCLKConfig+0x368>
 800583c:	42470068 	.word	0x42470068
 8005840:	40023800 	.word	0x40023800
 8005844:	42470070 	.word	0x42470070
 8005848:	40007000 	.word	0x40007000
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 800584c:	4b38      	ldr	r3, [pc, #224]	@ (8005930 <HAL_RCCEx_PeriphCLKConfig+0x370>)
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005854:	2b00      	cmp	r3, #0
 8005856:	d0e8      	beq.n	800582a <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005858:	4b36      	ldr	r3, [pc, #216]	@ (8005934 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800585a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800585c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005860:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005862:	693b      	ldr	r3, [r7, #16]
 8005864:	2b00      	cmp	r3, #0
 8005866:	d02f      	beq.n	80058c8 <HAL_RCCEx_PeriphCLKConfig+0x308>
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800586c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005870:	693a      	ldr	r2, [r7, #16]
 8005872:	429a      	cmp	r2, r3
 8005874:	d028      	beq.n	80058c8 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005876:	4b2f      	ldr	r3, [pc, #188]	@ (8005934 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005878:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800587a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800587e:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005880:	4b2d      	ldr	r3, [pc, #180]	@ (8005938 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8005882:	2201      	movs	r2, #1
 8005884:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005886:	4b2c      	ldr	r3, [pc, #176]	@ (8005938 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8005888:	2200      	movs	r2, #0
 800588a:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800588c:	4a29      	ldr	r2, [pc, #164]	@ (8005934 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800588e:	693b      	ldr	r3, [r7, #16]
 8005890:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005892:	4b28      	ldr	r3, [pc, #160]	@ (8005934 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005894:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005896:	f003 0301 	and.w	r3, r3, #1
 800589a:	2b01      	cmp	r3, #1
 800589c:	d114      	bne.n	80058c8 <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800589e:	f7fd fa3b 	bl	8002d18 <HAL_GetTick>
 80058a2:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80058a4:	e00a      	b.n	80058bc <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80058a6:	f7fd fa37 	bl	8002d18 <HAL_GetTick>
 80058aa:	4602      	mov	r2, r0
 80058ac:	697b      	ldr	r3, [r7, #20]
 80058ae:	1ad3      	subs	r3, r2, r3
 80058b0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80058b4:	4293      	cmp	r3, r2
 80058b6:	d901      	bls.n	80058bc <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 80058b8:	2303      	movs	r3, #3
 80058ba:	e035      	b.n	8005928 <HAL_RCCEx_PeriphCLKConfig+0x368>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80058bc:	4b1d      	ldr	r3, [pc, #116]	@ (8005934 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80058be:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80058c0:	f003 0302 	and.w	r3, r3, #2
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d0ee      	beq.n	80058a6 <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80058cc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80058d0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80058d4:	d10d      	bne.n	80058f2 <HAL_RCCEx_PeriphCLKConfig+0x332>
 80058d6:	4b17      	ldr	r3, [pc, #92]	@ (8005934 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80058d8:	689b      	ldr	r3, [r3, #8]
 80058da:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80058e2:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 80058e6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80058ea:	4912      	ldr	r1, [pc, #72]	@ (8005934 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80058ec:	4313      	orrs	r3, r2
 80058ee:	608b      	str	r3, [r1, #8]
 80058f0:	e005      	b.n	80058fe <HAL_RCCEx_PeriphCLKConfig+0x33e>
 80058f2:	4b10      	ldr	r3, [pc, #64]	@ (8005934 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80058f4:	689b      	ldr	r3, [r3, #8]
 80058f6:	4a0f      	ldr	r2, [pc, #60]	@ (8005934 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80058f8:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 80058fc:	6093      	str	r3, [r2, #8]
 80058fe:	4b0d      	ldr	r3, [pc, #52]	@ (8005934 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005900:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005906:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800590a:	490a      	ldr	r1, [pc, #40]	@ (8005934 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800590c:	4313      	orrs	r3, r2
 800590e:	670b      	str	r3, [r1, #112]	@ 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	f003 0310 	and.w	r3, r3, #16
 8005918:	2b00      	cmp	r3, #0
 800591a:	d004      	beq.n	8005926 <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	f893 202c 	ldrb.w	r2, [r3, #44]	@ 0x2c
 8005922:	4b06      	ldr	r3, [pc, #24]	@ (800593c <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 8005924:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 8005926:	2300      	movs	r3, #0
}
 8005928:	4618      	mov	r0, r3
 800592a:	3718      	adds	r7, #24
 800592c:	46bd      	mov	sp, r7
 800592e:	bd80      	pop	{r7, pc}
 8005930:	40007000 	.word	0x40007000
 8005934:	40023800 	.word	0x40023800
 8005938:	42470e40 	.word	0x42470e40
 800593c:	424711e0 	.word	0x424711e0

08005940 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 8005940:	b580      	push	{r7, lr}
 8005942:	b082      	sub	sp, #8
 8005944:	af00      	add	r7, sp, #0
 8005946:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	2b00      	cmp	r3, #0
 800594c:	d101      	bne.n	8005952 <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 800594e:	2301      	movs	r3, #1
 8005950:	e01c      	b.n	800598c <HAL_RNG_Init+0x4c>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	795b      	ldrb	r3, [r3, #5]
 8005956:	b2db      	uxtb	r3, r3
 8005958:	2b00      	cmp	r3, #0
 800595a:	d105      	bne.n	8005968 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	2200      	movs	r2, #0
 8005960:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 8005962:	6878      	ldr	r0, [r7, #4]
 8005964:	f7fc fc3c 	bl	80021e0 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	2202      	movs	r2, #2
 800596c:	715a      	strb	r2, [r3, #5]


  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	681a      	ldr	r2, [r3, #0]
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	f042 0204 	orr.w	r2, r2, #4
 800597c:	601a      	str	r2, [r3, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	2201      	movs	r2, #1
 8005982:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	2200      	movs	r2, #0
 8005988:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 800598a:	2300      	movs	r3, #0
}
 800598c:	4618      	mov	r0, r3
 800598e:	3708      	adds	r7, #8
 8005990:	46bd      	mov	sp, r7
 8005992:	bd80      	pop	{r7, pc}

08005994 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005994:	b580      	push	{r7, lr}
 8005996:	b082      	sub	sp, #8
 8005998:	af00      	add	r7, sp, #0
 800599a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d101      	bne.n	80059a6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80059a2:	2301      	movs	r3, #1
 80059a4:	e07b      	b.n	8005a9e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d108      	bne.n	80059c0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	685b      	ldr	r3, [r3, #4]
 80059b2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80059b6:	d009      	beq.n	80059cc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	2200      	movs	r2, #0
 80059bc:	61da      	str	r2, [r3, #28]
 80059be:	e005      	b.n	80059cc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	2200      	movs	r2, #0
 80059c4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	2200      	movs	r2, #0
 80059ca:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	2200      	movs	r2, #0
 80059d0:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80059d8:	b2db      	uxtb	r3, r3
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d106      	bne.n	80059ec <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	2200      	movs	r2, #0
 80059e2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80059e6:	6878      	ldr	r0, [r7, #4]
 80059e8:	f7fc fc1c 	bl	8002224 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	2202      	movs	r2, #2
 80059f0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	681a      	ldr	r2, [r3, #0]
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005a02:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	685b      	ldr	r3, [r3, #4]
 8005a08:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	689b      	ldr	r3, [r3, #8]
 8005a10:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8005a14:	431a      	orrs	r2, r3
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	68db      	ldr	r3, [r3, #12]
 8005a1a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005a1e:	431a      	orrs	r2, r3
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	691b      	ldr	r3, [r3, #16]
 8005a24:	f003 0302 	and.w	r3, r3, #2
 8005a28:	431a      	orrs	r2, r3
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	695b      	ldr	r3, [r3, #20]
 8005a2e:	f003 0301 	and.w	r3, r3, #1
 8005a32:	431a      	orrs	r2, r3
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	699b      	ldr	r3, [r3, #24]
 8005a38:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005a3c:	431a      	orrs	r2, r3
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	69db      	ldr	r3, [r3, #28]
 8005a42:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005a46:	431a      	orrs	r2, r3
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	6a1b      	ldr	r3, [r3, #32]
 8005a4c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005a50:	ea42 0103 	orr.w	r1, r2, r3
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a58:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	430a      	orrs	r2, r1
 8005a62:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	699b      	ldr	r3, [r3, #24]
 8005a68:	0c1b      	lsrs	r3, r3, #16
 8005a6a:	f003 0104 	and.w	r1, r3, #4
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a72:	f003 0210 	and.w	r2, r3, #16
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	430a      	orrs	r2, r1
 8005a7c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	69da      	ldr	r2, [r3, #28]
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005a8c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	2200      	movs	r2, #0
 8005a92:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	2201      	movs	r2, #1
 8005a98:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8005a9c:	2300      	movs	r3, #0
}
 8005a9e:	4618      	mov	r0, r3
 8005aa0:	3708      	adds	r7, #8
 8005aa2:	46bd      	mov	sp, r7
 8005aa4:	bd80      	pop	{r7, pc}

08005aa6 <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 8005aa6:	b580      	push	{r7, lr}
 8005aa8:	b082      	sub	sp, #8
 8005aaa:	af00      	add	r7, sp, #0
 8005aac:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d101      	bne.n	8005ab8 <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 8005ab4:	2301      	movs	r3, #1
 8005ab6:	e01a      	b.n	8005aee <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	2202      	movs	r2, #2
 8005abc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	681a      	ldr	r2, [r3, #0]
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005ace:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 8005ad0:	6878      	ldr	r0, [r7, #4]
 8005ad2:	f7fc fbef 	bl	80022b4 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	2200      	movs	r2, #0
 8005ada:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State = HAL_SPI_STATE_RESET;
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	2200      	movs	r2, #0
 8005ae0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	2200      	movs	r2, #0
 8005ae8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 8005aec:	2300      	movs	r3, #0
}
 8005aee:	4618      	mov	r0, r3
 8005af0:	3708      	adds	r7, #8
 8005af2:	46bd      	mov	sp, r7
 8005af4:	bd80      	pop	{r7, pc}

08005af6 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005af6:	b580      	push	{r7, lr}
 8005af8:	b088      	sub	sp, #32
 8005afa:	af00      	add	r7, sp, #0
 8005afc:	60f8      	str	r0, [r7, #12]
 8005afe:	60b9      	str	r1, [r7, #8]
 8005b00:	603b      	str	r3, [r7, #0]
 8005b02:	4613      	mov	r3, r2
 8005b04:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005b06:	f7fd f907 	bl	8002d18 <HAL_GetTick>
 8005b0a:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8005b0c:	88fb      	ldrh	r3, [r7, #6]
 8005b0e:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005b16:	b2db      	uxtb	r3, r3
 8005b18:	2b01      	cmp	r3, #1
 8005b1a:	d001      	beq.n	8005b20 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8005b1c:	2302      	movs	r3, #2
 8005b1e:	e12a      	b.n	8005d76 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8005b20:	68bb      	ldr	r3, [r7, #8]
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d002      	beq.n	8005b2c <HAL_SPI_Transmit+0x36>
 8005b26:	88fb      	ldrh	r3, [r7, #6]
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d101      	bne.n	8005b30 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8005b2c:	2301      	movs	r3, #1
 8005b2e:	e122      	b.n	8005d76 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8005b36:	2b01      	cmp	r3, #1
 8005b38:	d101      	bne.n	8005b3e <HAL_SPI_Transmit+0x48>
 8005b3a:	2302      	movs	r3, #2
 8005b3c:	e11b      	b.n	8005d76 <HAL_SPI_Transmit+0x280>
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	2201      	movs	r2, #1
 8005b42:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	2203      	movs	r2, #3
 8005b4a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	2200      	movs	r2, #0
 8005b52:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	68ba      	ldr	r2, [r7, #8]
 8005b58:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	88fa      	ldrh	r2, [r7, #6]
 8005b5e:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	88fa      	ldrh	r2, [r7, #6]
 8005b64:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	2200      	movs	r2, #0
 8005b6a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	2200      	movs	r2, #0
 8005b70:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	2200      	movs	r2, #0
 8005b76:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	2200      	movs	r2, #0
 8005b7c:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	2200      	movs	r2, #0
 8005b82:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	689b      	ldr	r3, [r3, #8]
 8005b88:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005b8c:	d10f      	bne.n	8005bae <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	681a      	ldr	r2, [r3, #0]
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005b9c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	681a      	ldr	r2, [r3, #0]
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005bac:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005bb8:	2b40      	cmp	r3, #64	@ 0x40
 8005bba:	d007      	beq.n	8005bcc <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	681a      	ldr	r2, [r3, #0]
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005bca:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	68db      	ldr	r3, [r3, #12]
 8005bd0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005bd4:	d152      	bne.n	8005c7c <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	685b      	ldr	r3, [r3, #4]
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d002      	beq.n	8005be4 <HAL_SPI_Transmit+0xee>
 8005bde:	8b7b      	ldrh	r3, [r7, #26]
 8005be0:	2b01      	cmp	r3, #1
 8005be2:	d145      	bne.n	8005c70 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005be8:	881a      	ldrh	r2, [r3, #0]
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005bf4:	1c9a      	adds	r2, r3, #2
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005bfe:	b29b      	uxth	r3, r3
 8005c00:	3b01      	subs	r3, #1
 8005c02:	b29a      	uxth	r2, r3
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005c08:	e032      	b.n	8005c70 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	689b      	ldr	r3, [r3, #8]
 8005c10:	f003 0302 	and.w	r3, r3, #2
 8005c14:	2b02      	cmp	r3, #2
 8005c16:	d112      	bne.n	8005c3e <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005c1c:	881a      	ldrh	r2, [r3, #0]
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005c28:	1c9a      	adds	r2, r3, #2
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005c32:	b29b      	uxth	r3, r3
 8005c34:	3b01      	subs	r3, #1
 8005c36:	b29a      	uxth	r2, r3
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	86da      	strh	r2, [r3, #54]	@ 0x36
 8005c3c:	e018      	b.n	8005c70 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005c3e:	f7fd f86b 	bl	8002d18 <HAL_GetTick>
 8005c42:	4602      	mov	r2, r0
 8005c44:	69fb      	ldr	r3, [r7, #28]
 8005c46:	1ad3      	subs	r3, r2, r3
 8005c48:	683a      	ldr	r2, [r7, #0]
 8005c4a:	429a      	cmp	r2, r3
 8005c4c:	d803      	bhi.n	8005c56 <HAL_SPI_Transmit+0x160>
 8005c4e:	683b      	ldr	r3, [r7, #0]
 8005c50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c54:	d102      	bne.n	8005c5c <HAL_SPI_Transmit+0x166>
 8005c56:	683b      	ldr	r3, [r7, #0]
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d109      	bne.n	8005c70 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	2201      	movs	r2, #1
 8005c60:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	2200      	movs	r2, #0
 8005c68:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8005c6c:	2303      	movs	r3, #3
 8005c6e:	e082      	b.n	8005d76 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005c74:	b29b      	uxth	r3, r3
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d1c7      	bne.n	8005c0a <HAL_SPI_Transmit+0x114>
 8005c7a:	e053      	b.n	8005d24 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	685b      	ldr	r3, [r3, #4]
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d002      	beq.n	8005c8a <HAL_SPI_Transmit+0x194>
 8005c84:	8b7b      	ldrh	r3, [r7, #26]
 8005c86:	2b01      	cmp	r3, #1
 8005c88:	d147      	bne.n	8005d1a <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	330c      	adds	r3, #12
 8005c94:	7812      	ldrb	r2, [r2, #0]
 8005c96:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005c9c:	1c5a      	adds	r2, r3, #1
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005ca6:	b29b      	uxth	r3, r3
 8005ca8:	3b01      	subs	r3, #1
 8005caa:	b29a      	uxth	r2, r3
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8005cb0:	e033      	b.n	8005d1a <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	689b      	ldr	r3, [r3, #8]
 8005cb8:	f003 0302 	and.w	r3, r3, #2
 8005cbc:	2b02      	cmp	r3, #2
 8005cbe:	d113      	bne.n	8005ce8 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	330c      	adds	r3, #12
 8005cca:	7812      	ldrb	r2, [r2, #0]
 8005ccc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005cd2:	1c5a      	adds	r2, r3, #1
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005cdc:	b29b      	uxth	r3, r3
 8005cde:	3b01      	subs	r3, #1
 8005ce0:	b29a      	uxth	r2, r3
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	86da      	strh	r2, [r3, #54]	@ 0x36
 8005ce6:	e018      	b.n	8005d1a <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005ce8:	f7fd f816 	bl	8002d18 <HAL_GetTick>
 8005cec:	4602      	mov	r2, r0
 8005cee:	69fb      	ldr	r3, [r7, #28]
 8005cf0:	1ad3      	subs	r3, r2, r3
 8005cf2:	683a      	ldr	r2, [r7, #0]
 8005cf4:	429a      	cmp	r2, r3
 8005cf6:	d803      	bhi.n	8005d00 <HAL_SPI_Transmit+0x20a>
 8005cf8:	683b      	ldr	r3, [r7, #0]
 8005cfa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005cfe:	d102      	bne.n	8005d06 <HAL_SPI_Transmit+0x210>
 8005d00:	683b      	ldr	r3, [r7, #0]
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d109      	bne.n	8005d1a <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	2201      	movs	r2, #1
 8005d0a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	2200      	movs	r2, #0
 8005d12:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8005d16:	2303      	movs	r3, #3
 8005d18:	e02d      	b.n	8005d76 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005d1e:	b29b      	uxth	r3, r3
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d1c6      	bne.n	8005cb2 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005d24:	69fa      	ldr	r2, [r7, #28]
 8005d26:	6839      	ldr	r1, [r7, #0]
 8005d28:	68f8      	ldr	r0, [r7, #12]
 8005d2a:	f000 f8bf 	bl	8005eac <SPI_EndRxTxTransaction>
 8005d2e:	4603      	mov	r3, r0
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d002      	beq.n	8005d3a <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	2220      	movs	r2, #32
 8005d38:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	689b      	ldr	r3, [r3, #8]
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d10a      	bne.n	8005d58 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005d42:	2300      	movs	r3, #0
 8005d44:	617b      	str	r3, [r7, #20]
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	68db      	ldr	r3, [r3, #12]
 8005d4c:	617b      	str	r3, [r7, #20]
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	689b      	ldr	r3, [r3, #8]
 8005d54:	617b      	str	r3, [r7, #20]
 8005d56:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	2201      	movs	r2, #1
 8005d5c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	2200      	movs	r2, #0
 8005d64:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d001      	beq.n	8005d74 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8005d70:	2301      	movs	r3, #1
 8005d72:	e000      	b.n	8005d76 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8005d74:	2300      	movs	r3, #0
  }
}
 8005d76:	4618      	mov	r0, r3
 8005d78:	3720      	adds	r7, #32
 8005d7a:	46bd      	mov	sp, r7
 8005d7c:	bd80      	pop	{r7, pc}

08005d7e <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(const SPI_HandleTypeDef *hspi)
{
 8005d7e:	b480      	push	{r7}
 8005d80:	b083      	sub	sp, #12
 8005d82:	af00      	add	r7, sp, #0
 8005d84:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005d8c:	b2db      	uxtb	r3, r3
}
 8005d8e:	4618      	mov	r0, r3
 8005d90:	370c      	adds	r7, #12
 8005d92:	46bd      	mov	sp, r7
 8005d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d98:	4770      	bx	lr
	...

08005d9c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005d9c:	b580      	push	{r7, lr}
 8005d9e:	b088      	sub	sp, #32
 8005da0:	af00      	add	r7, sp, #0
 8005da2:	60f8      	str	r0, [r7, #12]
 8005da4:	60b9      	str	r1, [r7, #8]
 8005da6:	603b      	str	r3, [r7, #0]
 8005da8:	4613      	mov	r3, r2
 8005daa:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005dac:	f7fc ffb4 	bl	8002d18 <HAL_GetTick>
 8005db0:	4602      	mov	r2, r0
 8005db2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005db4:	1a9b      	subs	r3, r3, r2
 8005db6:	683a      	ldr	r2, [r7, #0]
 8005db8:	4413      	add	r3, r2
 8005dba:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005dbc:	f7fc ffac 	bl	8002d18 <HAL_GetTick>
 8005dc0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005dc2:	4b39      	ldr	r3, [pc, #228]	@ (8005ea8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	015b      	lsls	r3, r3, #5
 8005dc8:	0d1b      	lsrs	r3, r3, #20
 8005dca:	69fa      	ldr	r2, [r7, #28]
 8005dcc:	fb02 f303 	mul.w	r3, r2, r3
 8005dd0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005dd2:	e054      	b.n	8005e7e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005dd4:	683b      	ldr	r3, [r7, #0]
 8005dd6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005dda:	d050      	beq.n	8005e7e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005ddc:	f7fc ff9c 	bl	8002d18 <HAL_GetTick>
 8005de0:	4602      	mov	r2, r0
 8005de2:	69bb      	ldr	r3, [r7, #24]
 8005de4:	1ad3      	subs	r3, r2, r3
 8005de6:	69fa      	ldr	r2, [r7, #28]
 8005de8:	429a      	cmp	r2, r3
 8005dea:	d902      	bls.n	8005df2 <SPI_WaitFlagStateUntilTimeout+0x56>
 8005dec:	69fb      	ldr	r3, [r7, #28]
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d13d      	bne.n	8005e6e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	685a      	ldr	r2, [r3, #4]
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8005e00:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	685b      	ldr	r3, [r3, #4]
 8005e06:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005e0a:	d111      	bne.n	8005e30 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	689b      	ldr	r3, [r3, #8]
 8005e10:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005e14:	d004      	beq.n	8005e20 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	689b      	ldr	r3, [r3, #8]
 8005e1a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005e1e:	d107      	bne.n	8005e30 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	681a      	ldr	r2, [r3, #0]
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005e2e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e34:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005e38:	d10f      	bne.n	8005e5a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	681a      	ldr	r2, [r3, #0]
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005e48:	601a      	str	r2, [r3, #0]
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	681a      	ldr	r2, [r3, #0]
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005e58:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	2201      	movs	r2, #1
 8005e5e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	2200      	movs	r2, #0
 8005e66:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8005e6a:	2303      	movs	r3, #3
 8005e6c:	e017      	b.n	8005e9e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005e6e:	697b      	ldr	r3, [r7, #20]
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d101      	bne.n	8005e78 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005e74:	2300      	movs	r3, #0
 8005e76:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005e78:	697b      	ldr	r3, [r7, #20]
 8005e7a:	3b01      	subs	r3, #1
 8005e7c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	689a      	ldr	r2, [r3, #8]
 8005e84:	68bb      	ldr	r3, [r7, #8]
 8005e86:	4013      	ands	r3, r2
 8005e88:	68ba      	ldr	r2, [r7, #8]
 8005e8a:	429a      	cmp	r2, r3
 8005e8c:	bf0c      	ite	eq
 8005e8e:	2301      	moveq	r3, #1
 8005e90:	2300      	movne	r3, #0
 8005e92:	b2db      	uxtb	r3, r3
 8005e94:	461a      	mov	r2, r3
 8005e96:	79fb      	ldrb	r3, [r7, #7]
 8005e98:	429a      	cmp	r2, r3
 8005e9a:	d19b      	bne.n	8005dd4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005e9c:	2300      	movs	r3, #0
}
 8005e9e:	4618      	mov	r0, r3
 8005ea0:	3720      	adds	r7, #32
 8005ea2:	46bd      	mov	sp, r7
 8005ea4:	bd80      	pop	{r7, pc}
 8005ea6:	bf00      	nop
 8005ea8:	20000010 	.word	0x20000010

08005eac <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005eac:	b580      	push	{r7, lr}
 8005eae:	b088      	sub	sp, #32
 8005eb0:	af02      	add	r7, sp, #8
 8005eb2:	60f8      	str	r0, [r7, #12]
 8005eb4:	60b9      	str	r1, [r7, #8]
 8005eb6:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	9300      	str	r3, [sp, #0]
 8005ebc:	68bb      	ldr	r3, [r7, #8]
 8005ebe:	2201      	movs	r2, #1
 8005ec0:	2102      	movs	r1, #2
 8005ec2:	68f8      	ldr	r0, [r7, #12]
 8005ec4:	f7ff ff6a 	bl	8005d9c <SPI_WaitFlagStateUntilTimeout>
 8005ec8:	4603      	mov	r3, r0
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d007      	beq.n	8005ede <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005ed2:	f043 0220 	orr.w	r2, r3, #32
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8005eda:	2303      	movs	r3, #3
 8005edc:	e032      	b.n	8005f44 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005ede:	4b1b      	ldr	r3, [pc, #108]	@ (8005f4c <SPI_EndRxTxTransaction+0xa0>)
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	4a1b      	ldr	r2, [pc, #108]	@ (8005f50 <SPI_EndRxTxTransaction+0xa4>)
 8005ee4:	fba2 2303 	umull	r2, r3, r2, r3
 8005ee8:	0d5b      	lsrs	r3, r3, #21
 8005eea:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8005eee:	fb02 f303 	mul.w	r3, r2, r3
 8005ef2:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	685b      	ldr	r3, [r3, #4]
 8005ef8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005efc:	d112      	bne.n	8005f24 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	9300      	str	r3, [sp, #0]
 8005f02:	68bb      	ldr	r3, [r7, #8]
 8005f04:	2200      	movs	r2, #0
 8005f06:	2180      	movs	r1, #128	@ 0x80
 8005f08:	68f8      	ldr	r0, [r7, #12]
 8005f0a:	f7ff ff47 	bl	8005d9c <SPI_WaitFlagStateUntilTimeout>
 8005f0e:	4603      	mov	r3, r0
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d016      	beq.n	8005f42 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005f18:	f043 0220 	orr.w	r2, r3, #32
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8005f20:	2303      	movs	r3, #3
 8005f22:	e00f      	b.n	8005f44 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8005f24:	697b      	ldr	r3, [r7, #20]
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d00a      	beq.n	8005f40 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8005f2a:	697b      	ldr	r3, [r7, #20]
 8005f2c:	3b01      	subs	r3, #1
 8005f2e:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	689b      	ldr	r3, [r3, #8]
 8005f36:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005f3a:	2b80      	cmp	r3, #128	@ 0x80
 8005f3c:	d0f2      	beq.n	8005f24 <SPI_EndRxTxTransaction+0x78>
 8005f3e:	e000      	b.n	8005f42 <SPI_EndRxTxTransaction+0x96>
        break;
 8005f40:	bf00      	nop
  }

  return HAL_OK;
 8005f42:	2300      	movs	r3, #0
}
 8005f44:	4618      	mov	r0, r3
 8005f46:	3718      	adds	r7, #24
 8005f48:	46bd      	mov	sp, r7
 8005f4a:	bd80      	pop	{r7, pc}
 8005f4c:	20000010 	.word	0x20000010
 8005f50:	165e9f81 	.word	0x165e9f81

08005f54 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005f54:	b580      	push	{r7, lr}
 8005f56:	b082      	sub	sp, #8
 8005f58:	af00      	add	r7, sp, #0
 8005f5a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d101      	bne.n	8005f66 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005f62:	2301      	movs	r3, #1
 8005f64:	e041      	b.n	8005fea <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005f6c:	b2db      	uxtb	r3, r3
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d106      	bne.n	8005f80 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	2200      	movs	r2, #0
 8005f76:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005f7a:	6878      	ldr	r0, [r7, #4]
 8005f7c:	f7fc f9b8 	bl	80022f0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	2202      	movs	r2, #2
 8005f84:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	681a      	ldr	r2, [r3, #0]
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	3304      	adds	r3, #4
 8005f90:	4619      	mov	r1, r3
 8005f92:	4610      	mov	r0, r2
 8005f94:	f000 f82e 	bl	8005ff4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	2201      	movs	r2, #1
 8005f9c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	2201      	movs	r2, #1
 8005fa4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	2201      	movs	r2, #1
 8005fac:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	2201      	movs	r2, #1
 8005fb4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	2201      	movs	r2, #1
 8005fbc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	2201      	movs	r2, #1
 8005fc4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	2201      	movs	r2, #1
 8005fcc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	2201      	movs	r2, #1
 8005fd4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	2201      	movs	r2, #1
 8005fdc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	2201      	movs	r2, #1
 8005fe4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005fe8:	2300      	movs	r3, #0
}
 8005fea:	4618      	mov	r0, r3
 8005fec:	3708      	adds	r7, #8
 8005fee:	46bd      	mov	sp, r7
 8005ff0:	bd80      	pop	{r7, pc}
	...

08005ff4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005ff4:	b480      	push	{r7}
 8005ff6:	b085      	sub	sp, #20
 8005ff8:	af00      	add	r7, sp, #0
 8005ffa:	6078      	str	r0, [r7, #4]
 8005ffc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	4a46      	ldr	r2, [pc, #280]	@ (8006120 <TIM_Base_SetConfig+0x12c>)
 8006008:	4293      	cmp	r3, r2
 800600a:	d013      	beq.n	8006034 <TIM_Base_SetConfig+0x40>
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006012:	d00f      	beq.n	8006034 <TIM_Base_SetConfig+0x40>
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	4a43      	ldr	r2, [pc, #268]	@ (8006124 <TIM_Base_SetConfig+0x130>)
 8006018:	4293      	cmp	r3, r2
 800601a:	d00b      	beq.n	8006034 <TIM_Base_SetConfig+0x40>
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	4a42      	ldr	r2, [pc, #264]	@ (8006128 <TIM_Base_SetConfig+0x134>)
 8006020:	4293      	cmp	r3, r2
 8006022:	d007      	beq.n	8006034 <TIM_Base_SetConfig+0x40>
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	4a41      	ldr	r2, [pc, #260]	@ (800612c <TIM_Base_SetConfig+0x138>)
 8006028:	4293      	cmp	r3, r2
 800602a:	d003      	beq.n	8006034 <TIM_Base_SetConfig+0x40>
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	4a40      	ldr	r2, [pc, #256]	@ (8006130 <TIM_Base_SetConfig+0x13c>)
 8006030:	4293      	cmp	r3, r2
 8006032:	d108      	bne.n	8006046 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800603a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800603c:	683b      	ldr	r3, [r7, #0]
 800603e:	685b      	ldr	r3, [r3, #4]
 8006040:	68fa      	ldr	r2, [r7, #12]
 8006042:	4313      	orrs	r3, r2
 8006044:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	4a35      	ldr	r2, [pc, #212]	@ (8006120 <TIM_Base_SetConfig+0x12c>)
 800604a:	4293      	cmp	r3, r2
 800604c:	d02b      	beq.n	80060a6 <TIM_Base_SetConfig+0xb2>
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006054:	d027      	beq.n	80060a6 <TIM_Base_SetConfig+0xb2>
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	4a32      	ldr	r2, [pc, #200]	@ (8006124 <TIM_Base_SetConfig+0x130>)
 800605a:	4293      	cmp	r3, r2
 800605c:	d023      	beq.n	80060a6 <TIM_Base_SetConfig+0xb2>
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	4a31      	ldr	r2, [pc, #196]	@ (8006128 <TIM_Base_SetConfig+0x134>)
 8006062:	4293      	cmp	r3, r2
 8006064:	d01f      	beq.n	80060a6 <TIM_Base_SetConfig+0xb2>
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	4a30      	ldr	r2, [pc, #192]	@ (800612c <TIM_Base_SetConfig+0x138>)
 800606a:	4293      	cmp	r3, r2
 800606c:	d01b      	beq.n	80060a6 <TIM_Base_SetConfig+0xb2>
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	4a2f      	ldr	r2, [pc, #188]	@ (8006130 <TIM_Base_SetConfig+0x13c>)
 8006072:	4293      	cmp	r3, r2
 8006074:	d017      	beq.n	80060a6 <TIM_Base_SetConfig+0xb2>
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	4a2e      	ldr	r2, [pc, #184]	@ (8006134 <TIM_Base_SetConfig+0x140>)
 800607a:	4293      	cmp	r3, r2
 800607c:	d013      	beq.n	80060a6 <TIM_Base_SetConfig+0xb2>
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	4a2d      	ldr	r2, [pc, #180]	@ (8006138 <TIM_Base_SetConfig+0x144>)
 8006082:	4293      	cmp	r3, r2
 8006084:	d00f      	beq.n	80060a6 <TIM_Base_SetConfig+0xb2>
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	4a2c      	ldr	r2, [pc, #176]	@ (800613c <TIM_Base_SetConfig+0x148>)
 800608a:	4293      	cmp	r3, r2
 800608c:	d00b      	beq.n	80060a6 <TIM_Base_SetConfig+0xb2>
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	4a2b      	ldr	r2, [pc, #172]	@ (8006140 <TIM_Base_SetConfig+0x14c>)
 8006092:	4293      	cmp	r3, r2
 8006094:	d007      	beq.n	80060a6 <TIM_Base_SetConfig+0xb2>
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	4a2a      	ldr	r2, [pc, #168]	@ (8006144 <TIM_Base_SetConfig+0x150>)
 800609a:	4293      	cmp	r3, r2
 800609c:	d003      	beq.n	80060a6 <TIM_Base_SetConfig+0xb2>
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	4a29      	ldr	r2, [pc, #164]	@ (8006148 <TIM_Base_SetConfig+0x154>)
 80060a2:	4293      	cmp	r3, r2
 80060a4:	d108      	bne.n	80060b8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80060ac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80060ae:	683b      	ldr	r3, [r7, #0]
 80060b0:	68db      	ldr	r3, [r3, #12]
 80060b2:	68fa      	ldr	r2, [r7, #12]
 80060b4:	4313      	orrs	r3, r2
 80060b6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80060be:	683b      	ldr	r3, [r7, #0]
 80060c0:	695b      	ldr	r3, [r3, #20]
 80060c2:	4313      	orrs	r3, r2
 80060c4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	68fa      	ldr	r2, [r7, #12]
 80060ca:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80060cc:	683b      	ldr	r3, [r7, #0]
 80060ce:	689a      	ldr	r2, [r3, #8]
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80060d4:	683b      	ldr	r3, [r7, #0]
 80060d6:	681a      	ldr	r2, [r3, #0]
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	4a10      	ldr	r2, [pc, #64]	@ (8006120 <TIM_Base_SetConfig+0x12c>)
 80060e0:	4293      	cmp	r3, r2
 80060e2:	d003      	beq.n	80060ec <TIM_Base_SetConfig+0xf8>
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	4a12      	ldr	r2, [pc, #72]	@ (8006130 <TIM_Base_SetConfig+0x13c>)
 80060e8:	4293      	cmp	r3, r2
 80060ea:	d103      	bne.n	80060f4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80060ec:	683b      	ldr	r3, [r7, #0]
 80060ee:	691a      	ldr	r2, [r3, #16]
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	2201      	movs	r2, #1
 80060f8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	691b      	ldr	r3, [r3, #16]
 80060fe:	f003 0301 	and.w	r3, r3, #1
 8006102:	2b01      	cmp	r3, #1
 8006104:	d105      	bne.n	8006112 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	691b      	ldr	r3, [r3, #16]
 800610a:	f023 0201 	bic.w	r2, r3, #1
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	611a      	str	r2, [r3, #16]
  }
}
 8006112:	bf00      	nop
 8006114:	3714      	adds	r7, #20
 8006116:	46bd      	mov	sp, r7
 8006118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800611c:	4770      	bx	lr
 800611e:	bf00      	nop
 8006120:	40010000 	.word	0x40010000
 8006124:	40000400 	.word	0x40000400
 8006128:	40000800 	.word	0x40000800
 800612c:	40000c00 	.word	0x40000c00
 8006130:	40010400 	.word	0x40010400
 8006134:	40014000 	.word	0x40014000
 8006138:	40014400 	.word	0x40014400
 800613c:	40014800 	.word	0x40014800
 8006140:	40001800 	.word	0x40001800
 8006144:	40001c00 	.word	0x40001c00
 8006148:	40002000 	.word	0x40002000

0800614c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800614c:	b480      	push	{r7}
 800614e:	b085      	sub	sp, #20
 8006150:	af00      	add	r7, sp, #0
 8006152:	6078      	str	r0, [r7, #4]
 8006154:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800615c:	2b01      	cmp	r3, #1
 800615e:	d101      	bne.n	8006164 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006160:	2302      	movs	r3, #2
 8006162:	e05a      	b.n	800621a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	2201      	movs	r2, #1
 8006168:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	2202      	movs	r2, #2
 8006170:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	685b      	ldr	r3, [r3, #4]
 800617a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	689b      	ldr	r3, [r3, #8]
 8006182:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800618a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800618c:	683b      	ldr	r3, [r7, #0]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	68fa      	ldr	r2, [r7, #12]
 8006192:	4313      	orrs	r3, r2
 8006194:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	68fa      	ldr	r2, [r7, #12]
 800619c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	4a21      	ldr	r2, [pc, #132]	@ (8006228 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80061a4:	4293      	cmp	r3, r2
 80061a6:	d022      	beq.n	80061ee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80061b0:	d01d      	beq.n	80061ee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	4a1d      	ldr	r2, [pc, #116]	@ (800622c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80061b8:	4293      	cmp	r3, r2
 80061ba:	d018      	beq.n	80061ee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	4a1b      	ldr	r2, [pc, #108]	@ (8006230 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80061c2:	4293      	cmp	r3, r2
 80061c4:	d013      	beq.n	80061ee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	4a1a      	ldr	r2, [pc, #104]	@ (8006234 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80061cc:	4293      	cmp	r3, r2
 80061ce:	d00e      	beq.n	80061ee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	4a18      	ldr	r2, [pc, #96]	@ (8006238 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80061d6:	4293      	cmp	r3, r2
 80061d8:	d009      	beq.n	80061ee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	4a17      	ldr	r2, [pc, #92]	@ (800623c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80061e0:	4293      	cmp	r3, r2
 80061e2:	d004      	beq.n	80061ee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	4a15      	ldr	r2, [pc, #84]	@ (8006240 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80061ea:	4293      	cmp	r3, r2
 80061ec:	d10c      	bne.n	8006208 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80061ee:	68bb      	ldr	r3, [r7, #8]
 80061f0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80061f4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80061f6:	683b      	ldr	r3, [r7, #0]
 80061f8:	685b      	ldr	r3, [r3, #4]
 80061fa:	68ba      	ldr	r2, [r7, #8]
 80061fc:	4313      	orrs	r3, r2
 80061fe:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	68ba      	ldr	r2, [r7, #8]
 8006206:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	2201      	movs	r2, #1
 800620c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	2200      	movs	r2, #0
 8006214:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006218:	2300      	movs	r3, #0
}
 800621a:	4618      	mov	r0, r3
 800621c:	3714      	adds	r7, #20
 800621e:	46bd      	mov	sp, r7
 8006220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006224:	4770      	bx	lr
 8006226:	bf00      	nop
 8006228:	40010000 	.word	0x40010000
 800622c:	40000400 	.word	0x40000400
 8006230:	40000800 	.word	0x40000800
 8006234:	40000c00 	.word	0x40000c00
 8006238:	40010400 	.word	0x40010400
 800623c:	40014000 	.word	0x40014000
 8006240:	40001800 	.word	0x40001800

08006244 <std>:
 8006244:	2300      	movs	r3, #0
 8006246:	b510      	push	{r4, lr}
 8006248:	4604      	mov	r4, r0
 800624a:	e9c0 3300 	strd	r3, r3, [r0]
 800624e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006252:	6083      	str	r3, [r0, #8]
 8006254:	8181      	strh	r1, [r0, #12]
 8006256:	6643      	str	r3, [r0, #100]	@ 0x64
 8006258:	81c2      	strh	r2, [r0, #14]
 800625a:	6183      	str	r3, [r0, #24]
 800625c:	4619      	mov	r1, r3
 800625e:	2208      	movs	r2, #8
 8006260:	305c      	adds	r0, #92	@ 0x5c
 8006262:	f000 f9f9 	bl	8006658 <memset>
 8006266:	4b0d      	ldr	r3, [pc, #52]	@ (800629c <std+0x58>)
 8006268:	6263      	str	r3, [r4, #36]	@ 0x24
 800626a:	4b0d      	ldr	r3, [pc, #52]	@ (80062a0 <std+0x5c>)
 800626c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800626e:	4b0d      	ldr	r3, [pc, #52]	@ (80062a4 <std+0x60>)
 8006270:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8006272:	4b0d      	ldr	r3, [pc, #52]	@ (80062a8 <std+0x64>)
 8006274:	6323      	str	r3, [r4, #48]	@ 0x30
 8006276:	4b0d      	ldr	r3, [pc, #52]	@ (80062ac <std+0x68>)
 8006278:	6224      	str	r4, [r4, #32]
 800627a:	429c      	cmp	r4, r3
 800627c:	d006      	beq.n	800628c <std+0x48>
 800627e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8006282:	4294      	cmp	r4, r2
 8006284:	d002      	beq.n	800628c <std+0x48>
 8006286:	33d0      	adds	r3, #208	@ 0xd0
 8006288:	429c      	cmp	r4, r3
 800628a:	d105      	bne.n	8006298 <std+0x54>
 800628c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8006290:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006294:	f000 ba58 	b.w	8006748 <__retarget_lock_init_recursive>
 8006298:	bd10      	pop	{r4, pc}
 800629a:	bf00      	nop
 800629c:	080064a9 	.word	0x080064a9
 80062a0:	080064cb 	.word	0x080064cb
 80062a4:	08006503 	.word	0x08006503
 80062a8:	08006527 	.word	0x08006527
 80062ac:	20025bf0 	.word	0x20025bf0

080062b0 <stdio_exit_handler>:
 80062b0:	4a02      	ldr	r2, [pc, #8]	@ (80062bc <stdio_exit_handler+0xc>)
 80062b2:	4903      	ldr	r1, [pc, #12]	@ (80062c0 <stdio_exit_handler+0x10>)
 80062b4:	4803      	ldr	r0, [pc, #12]	@ (80062c4 <stdio_exit_handler+0x14>)
 80062b6:	f000 b869 	b.w	800638c <_fwalk_sglue>
 80062ba:	bf00      	nop
 80062bc:	2000001c 	.word	0x2000001c
 80062c0:	08006fe9 	.word	0x08006fe9
 80062c4:	2000002c 	.word	0x2000002c

080062c8 <cleanup_stdio>:
 80062c8:	6841      	ldr	r1, [r0, #4]
 80062ca:	4b0c      	ldr	r3, [pc, #48]	@ (80062fc <cleanup_stdio+0x34>)
 80062cc:	4299      	cmp	r1, r3
 80062ce:	b510      	push	{r4, lr}
 80062d0:	4604      	mov	r4, r0
 80062d2:	d001      	beq.n	80062d8 <cleanup_stdio+0x10>
 80062d4:	f000 fe88 	bl	8006fe8 <_fflush_r>
 80062d8:	68a1      	ldr	r1, [r4, #8]
 80062da:	4b09      	ldr	r3, [pc, #36]	@ (8006300 <cleanup_stdio+0x38>)
 80062dc:	4299      	cmp	r1, r3
 80062de:	d002      	beq.n	80062e6 <cleanup_stdio+0x1e>
 80062e0:	4620      	mov	r0, r4
 80062e2:	f000 fe81 	bl	8006fe8 <_fflush_r>
 80062e6:	68e1      	ldr	r1, [r4, #12]
 80062e8:	4b06      	ldr	r3, [pc, #24]	@ (8006304 <cleanup_stdio+0x3c>)
 80062ea:	4299      	cmp	r1, r3
 80062ec:	d004      	beq.n	80062f8 <cleanup_stdio+0x30>
 80062ee:	4620      	mov	r0, r4
 80062f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80062f4:	f000 be78 	b.w	8006fe8 <_fflush_r>
 80062f8:	bd10      	pop	{r4, pc}
 80062fa:	bf00      	nop
 80062fc:	20025bf0 	.word	0x20025bf0
 8006300:	20025c58 	.word	0x20025c58
 8006304:	20025cc0 	.word	0x20025cc0

08006308 <global_stdio_init.part.0>:
 8006308:	b510      	push	{r4, lr}
 800630a:	4b0b      	ldr	r3, [pc, #44]	@ (8006338 <global_stdio_init.part.0+0x30>)
 800630c:	4c0b      	ldr	r4, [pc, #44]	@ (800633c <global_stdio_init.part.0+0x34>)
 800630e:	4a0c      	ldr	r2, [pc, #48]	@ (8006340 <global_stdio_init.part.0+0x38>)
 8006310:	601a      	str	r2, [r3, #0]
 8006312:	4620      	mov	r0, r4
 8006314:	2200      	movs	r2, #0
 8006316:	2104      	movs	r1, #4
 8006318:	f7ff ff94 	bl	8006244 <std>
 800631c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8006320:	2201      	movs	r2, #1
 8006322:	2109      	movs	r1, #9
 8006324:	f7ff ff8e 	bl	8006244 <std>
 8006328:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800632c:	2202      	movs	r2, #2
 800632e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006332:	2112      	movs	r1, #18
 8006334:	f7ff bf86 	b.w	8006244 <std>
 8006338:	20025d28 	.word	0x20025d28
 800633c:	20025bf0 	.word	0x20025bf0
 8006340:	080062b1 	.word	0x080062b1

08006344 <__sfp_lock_acquire>:
 8006344:	4801      	ldr	r0, [pc, #4]	@ (800634c <__sfp_lock_acquire+0x8>)
 8006346:	f000 ba00 	b.w	800674a <__retarget_lock_acquire_recursive>
 800634a:	bf00      	nop
 800634c:	20025d31 	.word	0x20025d31

08006350 <__sfp_lock_release>:
 8006350:	4801      	ldr	r0, [pc, #4]	@ (8006358 <__sfp_lock_release+0x8>)
 8006352:	f000 b9fb 	b.w	800674c <__retarget_lock_release_recursive>
 8006356:	bf00      	nop
 8006358:	20025d31 	.word	0x20025d31

0800635c <__sinit>:
 800635c:	b510      	push	{r4, lr}
 800635e:	4604      	mov	r4, r0
 8006360:	f7ff fff0 	bl	8006344 <__sfp_lock_acquire>
 8006364:	6a23      	ldr	r3, [r4, #32]
 8006366:	b11b      	cbz	r3, 8006370 <__sinit+0x14>
 8006368:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800636c:	f7ff bff0 	b.w	8006350 <__sfp_lock_release>
 8006370:	4b04      	ldr	r3, [pc, #16]	@ (8006384 <__sinit+0x28>)
 8006372:	6223      	str	r3, [r4, #32]
 8006374:	4b04      	ldr	r3, [pc, #16]	@ (8006388 <__sinit+0x2c>)
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	2b00      	cmp	r3, #0
 800637a:	d1f5      	bne.n	8006368 <__sinit+0xc>
 800637c:	f7ff ffc4 	bl	8006308 <global_stdio_init.part.0>
 8006380:	e7f2      	b.n	8006368 <__sinit+0xc>
 8006382:	bf00      	nop
 8006384:	080062c9 	.word	0x080062c9
 8006388:	20025d28 	.word	0x20025d28

0800638c <_fwalk_sglue>:
 800638c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006390:	4607      	mov	r7, r0
 8006392:	4688      	mov	r8, r1
 8006394:	4614      	mov	r4, r2
 8006396:	2600      	movs	r6, #0
 8006398:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800639c:	f1b9 0901 	subs.w	r9, r9, #1
 80063a0:	d505      	bpl.n	80063ae <_fwalk_sglue+0x22>
 80063a2:	6824      	ldr	r4, [r4, #0]
 80063a4:	2c00      	cmp	r4, #0
 80063a6:	d1f7      	bne.n	8006398 <_fwalk_sglue+0xc>
 80063a8:	4630      	mov	r0, r6
 80063aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80063ae:	89ab      	ldrh	r3, [r5, #12]
 80063b0:	2b01      	cmp	r3, #1
 80063b2:	d907      	bls.n	80063c4 <_fwalk_sglue+0x38>
 80063b4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80063b8:	3301      	adds	r3, #1
 80063ba:	d003      	beq.n	80063c4 <_fwalk_sglue+0x38>
 80063bc:	4629      	mov	r1, r5
 80063be:	4638      	mov	r0, r7
 80063c0:	47c0      	blx	r8
 80063c2:	4306      	orrs	r6, r0
 80063c4:	3568      	adds	r5, #104	@ 0x68
 80063c6:	e7e9      	b.n	800639c <_fwalk_sglue+0x10>

080063c8 <iprintf>:
 80063c8:	b40f      	push	{r0, r1, r2, r3}
 80063ca:	b507      	push	{r0, r1, r2, lr}
 80063cc:	4906      	ldr	r1, [pc, #24]	@ (80063e8 <iprintf+0x20>)
 80063ce:	ab04      	add	r3, sp, #16
 80063d0:	6808      	ldr	r0, [r1, #0]
 80063d2:	f853 2b04 	ldr.w	r2, [r3], #4
 80063d6:	6881      	ldr	r1, [r0, #8]
 80063d8:	9301      	str	r3, [sp, #4]
 80063da:	f000 fadb 	bl	8006994 <_vfiprintf_r>
 80063de:	b003      	add	sp, #12
 80063e0:	f85d eb04 	ldr.w	lr, [sp], #4
 80063e4:	b004      	add	sp, #16
 80063e6:	4770      	bx	lr
 80063e8:	20000028 	.word	0x20000028

080063ec <_puts_r>:
 80063ec:	6a03      	ldr	r3, [r0, #32]
 80063ee:	b570      	push	{r4, r5, r6, lr}
 80063f0:	6884      	ldr	r4, [r0, #8]
 80063f2:	4605      	mov	r5, r0
 80063f4:	460e      	mov	r6, r1
 80063f6:	b90b      	cbnz	r3, 80063fc <_puts_r+0x10>
 80063f8:	f7ff ffb0 	bl	800635c <__sinit>
 80063fc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80063fe:	07db      	lsls	r3, r3, #31
 8006400:	d405      	bmi.n	800640e <_puts_r+0x22>
 8006402:	89a3      	ldrh	r3, [r4, #12]
 8006404:	0598      	lsls	r0, r3, #22
 8006406:	d402      	bmi.n	800640e <_puts_r+0x22>
 8006408:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800640a:	f000 f99e 	bl	800674a <__retarget_lock_acquire_recursive>
 800640e:	89a3      	ldrh	r3, [r4, #12]
 8006410:	0719      	lsls	r1, r3, #28
 8006412:	d502      	bpl.n	800641a <_puts_r+0x2e>
 8006414:	6923      	ldr	r3, [r4, #16]
 8006416:	2b00      	cmp	r3, #0
 8006418:	d135      	bne.n	8006486 <_puts_r+0x9a>
 800641a:	4621      	mov	r1, r4
 800641c:	4628      	mov	r0, r5
 800641e:	f000 f8c5 	bl	80065ac <__swsetup_r>
 8006422:	b380      	cbz	r0, 8006486 <_puts_r+0x9a>
 8006424:	f04f 35ff 	mov.w	r5, #4294967295
 8006428:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800642a:	07da      	lsls	r2, r3, #31
 800642c:	d405      	bmi.n	800643a <_puts_r+0x4e>
 800642e:	89a3      	ldrh	r3, [r4, #12]
 8006430:	059b      	lsls	r3, r3, #22
 8006432:	d402      	bmi.n	800643a <_puts_r+0x4e>
 8006434:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006436:	f000 f989 	bl	800674c <__retarget_lock_release_recursive>
 800643a:	4628      	mov	r0, r5
 800643c:	bd70      	pop	{r4, r5, r6, pc}
 800643e:	2b00      	cmp	r3, #0
 8006440:	da04      	bge.n	800644c <_puts_r+0x60>
 8006442:	69a2      	ldr	r2, [r4, #24]
 8006444:	429a      	cmp	r2, r3
 8006446:	dc17      	bgt.n	8006478 <_puts_r+0x8c>
 8006448:	290a      	cmp	r1, #10
 800644a:	d015      	beq.n	8006478 <_puts_r+0x8c>
 800644c:	6823      	ldr	r3, [r4, #0]
 800644e:	1c5a      	adds	r2, r3, #1
 8006450:	6022      	str	r2, [r4, #0]
 8006452:	7019      	strb	r1, [r3, #0]
 8006454:	68a3      	ldr	r3, [r4, #8]
 8006456:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800645a:	3b01      	subs	r3, #1
 800645c:	60a3      	str	r3, [r4, #8]
 800645e:	2900      	cmp	r1, #0
 8006460:	d1ed      	bne.n	800643e <_puts_r+0x52>
 8006462:	2b00      	cmp	r3, #0
 8006464:	da11      	bge.n	800648a <_puts_r+0x9e>
 8006466:	4622      	mov	r2, r4
 8006468:	210a      	movs	r1, #10
 800646a:	4628      	mov	r0, r5
 800646c:	f000 f85f 	bl	800652e <__swbuf_r>
 8006470:	3001      	adds	r0, #1
 8006472:	d0d7      	beq.n	8006424 <_puts_r+0x38>
 8006474:	250a      	movs	r5, #10
 8006476:	e7d7      	b.n	8006428 <_puts_r+0x3c>
 8006478:	4622      	mov	r2, r4
 800647a:	4628      	mov	r0, r5
 800647c:	f000 f857 	bl	800652e <__swbuf_r>
 8006480:	3001      	adds	r0, #1
 8006482:	d1e7      	bne.n	8006454 <_puts_r+0x68>
 8006484:	e7ce      	b.n	8006424 <_puts_r+0x38>
 8006486:	3e01      	subs	r6, #1
 8006488:	e7e4      	b.n	8006454 <_puts_r+0x68>
 800648a:	6823      	ldr	r3, [r4, #0]
 800648c:	1c5a      	adds	r2, r3, #1
 800648e:	6022      	str	r2, [r4, #0]
 8006490:	220a      	movs	r2, #10
 8006492:	701a      	strb	r2, [r3, #0]
 8006494:	e7ee      	b.n	8006474 <_puts_r+0x88>
	...

08006498 <puts>:
 8006498:	4b02      	ldr	r3, [pc, #8]	@ (80064a4 <puts+0xc>)
 800649a:	4601      	mov	r1, r0
 800649c:	6818      	ldr	r0, [r3, #0]
 800649e:	f7ff bfa5 	b.w	80063ec <_puts_r>
 80064a2:	bf00      	nop
 80064a4:	20000028 	.word	0x20000028

080064a8 <__sread>:
 80064a8:	b510      	push	{r4, lr}
 80064aa:	460c      	mov	r4, r1
 80064ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80064b0:	f000 f8fc 	bl	80066ac <_read_r>
 80064b4:	2800      	cmp	r0, #0
 80064b6:	bfab      	itete	ge
 80064b8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80064ba:	89a3      	ldrhlt	r3, [r4, #12]
 80064bc:	181b      	addge	r3, r3, r0
 80064be:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80064c2:	bfac      	ite	ge
 80064c4:	6563      	strge	r3, [r4, #84]	@ 0x54
 80064c6:	81a3      	strhlt	r3, [r4, #12]
 80064c8:	bd10      	pop	{r4, pc}

080064ca <__swrite>:
 80064ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80064ce:	461f      	mov	r7, r3
 80064d0:	898b      	ldrh	r3, [r1, #12]
 80064d2:	05db      	lsls	r3, r3, #23
 80064d4:	4605      	mov	r5, r0
 80064d6:	460c      	mov	r4, r1
 80064d8:	4616      	mov	r6, r2
 80064da:	d505      	bpl.n	80064e8 <__swrite+0x1e>
 80064dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80064e0:	2302      	movs	r3, #2
 80064e2:	2200      	movs	r2, #0
 80064e4:	f000 f8d0 	bl	8006688 <_lseek_r>
 80064e8:	89a3      	ldrh	r3, [r4, #12]
 80064ea:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80064ee:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80064f2:	81a3      	strh	r3, [r4, #12]
 80064f4:	4632      	mov	r2, r6
 80064f6:	463b      	mov	r3, r7
 80064f8:	4628      	mov	r0, r5
 80064fa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80064fe:	f000 b8e7 	b.w	80066d0 <_write_r>

08006502 <__sseek>:
 8006502:	b510      	push	{r4, lr}
 8006504:	460c      	mov	r4, r1
 8006506:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800650a:	f000 f8bd 	bl	8006688 <_lseek_r>
 800650e:	1c43      	adds	r3, r0, #1
 8006510:	89a3      	ldrh	r3, [r4, #12]
 8006512:	bf15      	itete	ne
 8006514:	6560      	strne	r0, [r4, #84]	@ 0x54
 8006516:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800651a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800651e:	81a3      	strheq	r3, [r4, #12]
 8006520:	bf18      	it	ne
 8006522:	81a3      	strhne	r3, [r4, #12]
 8006524:	bd10      	pop	{r4, pc}

08006526 <__sclose>:
 8006526:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800652a:	f000 b89d 	b.w	8006668 <_close_r>

0800652e <__swbuf_r>:
 800652e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006530:	460e      	mov	r6, r1
 8006532:	4614      	mov	r4, r2
 8006534:	4605      	mov	r5, r0
 8006536:	b118      	cbz	r0, 8006540 <__swbuf_r+0x12>
 8006538:	6a03      	ldr	r3, [r0, #32]
 800653a:	b90b      	cbnz	r3, 8006540 <__swbuf_r+0x12>
 800653c:	f7ff ff0e 	bl	800635c <__sinit>
 8006540:	69a3      	ldr	r3, [r4, #24]
 8006542:	60a3      	str	r3, [r4, #8]
 8006544:	89a3      	ldrh	r3, [r4, #12]
 8006546:	071a      	lsls	r2, r3, #28
 8006548:	d501      	bpl.n	800654e <__swbuf_r+0x20>
 800654a:	6923      	ldr	r3, [r4, #16]
 800654c:	b943      	cbnz	r3, 8006560 <__swbuf_r+0x32>
 800654e:	4621      	mov	r1, r4
 8006550:	4628      	mov	r0, r5
 8006552:	f000 f82b 	bl	80065ac <__swsetup_r>
 8006556:	b118      	cbz	r0, 8006560 <__swbuf_r+0x32>
 8006558:	f04f 37ff 	mov.w	r7, #4294967295
 800655c:	4638      	mov	r0, r7
 800655e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006560:	6823      	ldr	r3, [r4, #0]
 8006562:	6922      	ldr	r2, [r4, #16]
 8006564:	1a98      	subs	r0, r3, r2
 8006566:	6963      	ldr	r3, [r4, #20]
 8006568:	b2f6      	uxtb	r6, r6
 800656a:	4283      	cmp	r3, r0
 800656c:	4637      	mov	r7, r6
 800656e:	dc05      	bgt.n	800657c <__swbuf_r+0x4e>
 8006570:	4621      	mov	r1, r4
 8006572:	4628      	mov	r0, r5
 8006574:	f000 fd38 	bl	8006fe8 <_fflush_r>
 8006578:	2800      	cmp	r0, #0
 800657a:	d1ed      	bne.n	8006558 <__swbuf_r+0x2a>
 800657c:	68a3      	ldr	r3, [r4, #8]
 800657e:	3b01      	subs	r3, #1
 8006580:	60a3      	str	r3, [r4, #8]
 8006582:	6823      	ldr	r3, [r4, #0]
 8006584:	1c5a      	adds	r2, r3, #1
 8006586:	6022      	str	r2, [r4, #0]
 8006588:	701e      	strb	r6, [r3, #0]
 800658a:	6962      	ldr	r2, [r4, #20]
 800658c:	1c43      	adds	r3, r0, #1
 800658e:	429a      	cmp	r2, r3
 8006590:	d004      	beq.n	800659c <__swbuf_r+0x6e>
 8006592:	89a3      	ldrh	r3, [r4, #12]
 8006594:	07db      	lsls	r3, r3, #31
 8006596:	d5e1      	bpl.n	800655c <__swbuf_r+0x2e>
 8006598:	2e0a      	cmp	r6, #10
 800659a:	d1df      	bne.n	800655c <__swbuf_r+0x2e>
 800659c:	4621      	mov	r1, r4
 800659e:	4628      	mov	r0, r5
 80065a0:	f000 fd22 	bl	8006fe8 <_fflush_r>
 80065a4:	2800      	cmp	r0, #0
 80065a6:	d0d9      	beq.n	800655c <__swbuf_r+0x2e>
 80065a8:	e7d6      	b.n	8006558 <__swbuf_r+0x2a>
	...

080065ac <__swsetup_r>:
 80065ac:	b538      	push	{r3, r4, r5, lr}
 80065ae:	4b29      	ldr	r3, [pc, #164]	@ (8006654 <__swsetup_r+0xa8>)
 80065b0:	4605      	mov	r5, r0
 80065b2:	6818      	ldr	r0, [r3, #0]
 80065b4:	460c      	mov	r4, r1
 80065b6:	b118      	cbz	r0, 80065c0 <__swsetup_r+0x14>
 80065b8:	6a03      	ldr	r3, [r0, #32]
 80065ba:	b90b      	cbnz	r3, 80065c0 <__swsetup_r+0x14>
 80065bc:	f7ff fece 	bl	800635c <__sinit>
 80065c0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80065c4:	0719      	lsls	r1, r3, #28
 80065c6:	d422      	bmi.n	800660e <__swsetup_r+0x62>
 80065c8:	06da      	lsls	r2, r3, #27
 80065ca:	d407      	bmi.n	80065dc <__swsetup_r+0x30>
 80065cc:	2209      	movs	r2, #9
 80065ce:	602a      	str	r2, [r5, #0]
 80065d0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80065d4:	81a3      	strh	r3, [r4, #12]
 80065d6:	f04f 30ff 	mov.w	r0, #4294967295
 80065da:	e033      	b.n	8006644 <__swsetup_r+0x98>
 80065dc:	0758      	lsls	r0, r3, #29
 80065de:	d512      	bpl.n	8006606 <__swsetup_r+0x5a>
 80065e0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80065e2:	b141      	cbz	r1, 80065f6 <__swsetup_r+0x4a>
 80065e4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80065e8:	4299      	cmp	r1, r3
 80065ea:	d002      	beq.n	80065f2 <__swsetup_r+0x46>
 80065ec:	4628      	mov	r0, r5
 80065ee:	f000 f8af 	bl	8006750 <_free_r>
 80065f2:	2300      	movs	r3, #0
 80065f4:	6363      	str	r3, [r4, #52]	@ 0x34
 80065f6:	89a3      	ldrh	r3, [r4, #12]
 80065f8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80065fc:	81a3      	strh	r3, [r4, #12]
 80065fe:	2300      	movs	r3, #0
 8006600:	6063      	str	r3, [r4, #4]
 8006602:	6923      	ldr	r3, [r4, #16]
 8006604:	6023      	str	r3, [r4, #0]
 8006606:	89a3      	ldrh	r3, [r4, #12]
 8006608:	f043 0308 	orr.w	r3, r3, #8
 800660c:	81a3      	strh	r3, [r4, #12]
 800660e:	6923      	ldr	r3, [r4, #16]
 8006610:	b94b      	cbnz	r3, 8006626 <__swsetup_r+0x7a>
 8006612:	89a3      	ldrh	r3, [r4, #12]
 8006614:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8006618:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800661c:	d003      	beq.n	8006626 <__swsetup_r+0x7a>
 800661e:	4621      	mov	r1, r4
 8006620:	4628      	mov	r0, r5
 8006622:	f000 fd2f 	bl	8007084 <__smakebuf_r>
 8006626:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800662a:	f013 0201 	ands.w	r2, r3, #1
 800662e:	d00a      	beq.n	8006646 <__swsetup_r+0x9a>
 8006630:	2200      	movs	r2, #0
 8006632:	60a2      	str	r2, [r4, #8]
 8006634:	6962      	ldr	r2, [r4, #20]
 8006636:	4252      	negs	r2, r2
 8006638:	61a2      	str	r2, [r4, #24]
 800663a:	6922      	ldr	r2, [r4, #16]
 800663c:	b942      	cbnz	r2, 8006650 <__swsetup_r+0xa4>
 800663e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8006642:	d1c5      	bne.n	80065d0 <__swsetup_r+0x24>
 8006644:	bd38      	pop	{r3, r4, r5, pc}
 8006646:	0799      	lsls	r1, r3, #30
 8006648:	bf58      	it	pl
 800664a:	6962      	ldrpl	r2, [r4, #20]
 800664c:	60a2      	str	r2, [r4, #8]
 800664e:	e7f4      	b.n	800663a <__swsetup_r+0x8e>
 8006650:	2000      	movs	r0, #0
 8006652:	e7f7      	b.n	8006644 <__swsetup_r+0x98>
 8006654:	20000028 	.word	0x20000028

08006658 <memset>:
 8006658:	4402      	add	r2, r0
 800665a:	4603      	mov	r3, r0
 800665c:	4293      	cmp	r3, r2
 800665e:	d100      	bne.n	8006662 <memset+0xa>
 8006660:	4770      	bx	lr
 8006662:	f803 1b01 	strb.w	r1, [r3], #1
 8006666:	e7f9      	b.n	800665c <memset+0x4>

08006668 <_close_r>:
 8006668:	b538      	push	{r3, r4, r5, lr}
 800666a:	4d06      	ldr	r5, [pc, #24]	@ (8006684 <_close_r+0x1c>)
 800666c:	2300      	movs	r3, #0
 800666e:	4604      	mov	r4, r0
 8006670:	4608      	mov	r0, r1
 8006672:	602b      	str	r3, [r5, #0]
 8006674:	f7fc fa44 	bl	8002b00 <_close>
 8006678:	1c43      	adds	r3, r0, #1
 800667a:	d102      	bne.n	8006682 <_close_r+0x1a>
 800667c:	682b      	ldr	r3, [r5, #0]
 800667e:	b103      	cbz	r3, 8006682 <_close_r+0x1a>
 8006680:	6023      	str	r3, [r4, #0]
 8006682:	bd38      	pop	{r3, r4, r5, pc}
 8006684:	20025d2c 	.word	0x20025d2c

08006688 <_lseek_r>:
 8006688:	b538      	push	{r3, r4, r5, lr}
 800668a:	4d07      	ldr	r5, [pc, #28]	@ (80066a8 <_lseek_r+0x20>)
 800668c:	4604      	mov	r4, r0
 800668e:	4608      	mov	r0, r1
 8006690:	4611      	mov	r1, r2
 8006692:	2200      	movs	r2, #0
 8006694:	602a      	str	r2, [r5, #0]
 8006696:	461a      	mov	r2, r3
 8006698:	f7fc fa59 	bl	8002b4e <_lseek>
 800669c:	1c43      	adds	r3, r0, #1
 800669e:	d102      	bne.n	80066a6 <_lseek_r+0x1e>
 80066a0:	682b      	ldr	r3, [r5, #0]
 80066a2:	b103      	cbz	r3, 80066a6 <_lseek_r+0x1e>
 80066a4:	6023      	str	r3, [r4, #0]
 80066a6:	bd38      	pop	{r3, r4, r5, pc}
 80066a8:	20025d2c 	.word	0x20025d2c

080066ac <_read_r>:
 80066ac:	b538      	push	{r3, r4, r5, lr}
 80066ae:	4d07      	ldr	r5, [pc, #28]	@ (80066cc <_read_r+0x20>)
 80066b0:	4604      	mov	r4, r0
 80066b2:	4608      	mov	r0, r1
 80066b4:	4611      	mov	r1, r2
 80066b6:	2200      	movs	r2, #0
 80066b8:	602a      	str	r2, [r5, #0]
 80066ba:	461a      	mov	r2, r3
 80066bc:	f7fc f9e7 	bl	8002a8e <_read>
 80066c0:	1c43      	adds	r3, r0, #1
 80066c2:	d102      	bne.n	80066ca <_read_r+0x1e>
 80066c4:	682b      	ldr	r3, [r5, #0]
 80066c6:	b103      	cbz	r3, 80066ca <_read_r+0x1e>
 80066c8:	6023      	str	r3, [r4, #0]
 80066ca:	bd38      	pop	{r3, r4, r5, pc}
 80066cc:	20025d2c 	.word	0x20025d2c

080066d0 <_write_r>:
 80066d0:	b538      	push	{r3, r4, r5, lr}
 80066d2:	4d07      	ldr	r5, [pc, #28]	@ (80066f0 <_write_r+0x20>)
 80066d4:	4604      	mov	r4, r0
 80066d6:	4608      	mov	r0, r1
 80066d8:	4611      	mov	r1, r2
 80066da:	2200      	movs	r2, #0
 80066dc:	602a      	str	r2, [r5, #0]
 80066de:	461a      	mov	r2, r3
 80066e0:	f7fc f9f2 	bl	8002ac8 <_write>
 80066e4:	1c43      	adds	r3, r0, #1
 80066e6:	d102      	bne.n	80066ee <_write_r+0x1e>
 80066e8:	682b      	ldr	r3, [r5, #0]
 80066ea:	b103      	cbz	r3, 80066ee <_write_r+0x1e>
 80066ec:	6023      	str	r3, [r4, #0]
 80066ee:	bd38      	pop	{r3, r4, r5, pc}
 80066f0:	20025d2c 	.word	0x20025d2c

080066f4 <__errno>:
 80066f4:	4b01      	ldr	r3, [pc, #4]	@ (80066fc <__errno+0x8>)
 80066f6:	6818      	ldr	r0, [r3, #0]
 80066f8:	4770      	bx	lr
 80066fa:	bf00      	nop
 80066fc:	20000028 	.word	0x20000028

08006700 <__libc_init_array>:
 8006700:	b570      	push	{r4, r5, r6, lr}
 8006702:	4d0d      	ldr	r5, [pc, #52]	@ (8006738 <__libc_init_array+0x38>)
 8006704:	4c0d      	ldr	r4, [pc, #52]	@ (800673c <__libc_init_array+0x3c>)
 8006706:	1b64      	subs	r4, r4, r5
 8006708:	10a4      	asrs	r4, r4, #2
 800670a:	2600      	movs	r6, #0
 800670c:	42a6      	cmp	r6, r4
 800670e:	d109      	bne.n	8006724 <__libc_init_array+0x24>
 8006710:	4d0b      	ldr	r5, [pc, #44]	@ (8006740 <__libc_init_array+0x40>)
 8006712:	4c0c      	ldr	r4, [pc, #48]	@ (8006744 <__libc_init_array+0x44>)
 8006714:	f000 fd24 	bl	8007160 <_init>
 8006718:	1b64      	subs	r4, r4, r5
 800671a:	10a4      	asrs	r4, r4, #2
 800671c:	2600      	movs	r6, #0
 800671e:	42a6      	cmp	r6, r4
 8006720:	d105      	bne.n	800672e <__libc_init_array+0x2e>
 8006722:	bd70      	pop	{r4, r5, r6, pc}
 8006724:	f855 3b04 	ldr.w	r3, [r5], #4
 8006728:	4798      	blx	r3
 800672a:	3601      	adds	r6, #1
 800672c:	e7ee      	b.n	800670c <__libc_init_array+0xc>
 800672e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006732:	4798      	blx	r3
 8006734:	3601      	adds	r6, #1
 8006736:	e7f2      	b.n	800671e <__libc_init_array+0x1e>
 8006738:	080083f0 	.word	0x080083f0
 800673c:	080083f0 	.word	0x080083f0
 8006740:	080083f0 	.word	0x080083f0
 8006744:	080083f4 	.word	0x080083f4

08006748 <__retarget_lock_init_recursive>:
 8006748:	4770      	bx	lr

0800674a <__retarget_lock_acquire_recursive>:
 800674a:	4770      	bx	lr

0800674c <__retarget_lock_release_recursive>:
 800674c:	4770      	bx	lr
	...

08006750 <_free_r>:
 8006750:	b538      	push	{r3, r4, r5, lr}
 8006752:	4605      	mov	r5, r0
 8006754:	2900      	cmp	r1, #0
 8006756:	d041      	beq.n	80067dc <_free_r+0x8c>
 8006758:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800675c:	1f0c      	subs	r4, r1, #4
 800675e:	2b00      	cmp	r3, #0
 8006760:	bfb8      	it	lt
 8006762:	18e4      	addlt	r4, r4, r3
 8006764:	f000 f8e0 	bl	8006928 <__malloc_lock>
 8006768:	4a1d      	ldr	r2, [pc, #116]	@ (80067e0 <_free_r+0x90>)
 800676a:	6813      	ldr	r3, [r2, #0]
 800676c:	b933      	cbnz	r3, 800677c <_free_r+0x2c>
 800676e:	6063      	str	r3, [r4, #4]
 8006770:	6014      	str	r4, [r2, #0]
 8006772:	4628      	mov	r0, r5
 8006774:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006778:	f000 b8dc 	b.w	8006934 <__malloc_unlock>
 800677c:	42a3      	cmp	r3, r4
 800677e:	d908      	bls.n	8006792 <_free_r+0x42>
 8006780:	6820      	ldr	r0, [r4, #0]
 8006782:	1821      	adds	r1, r4, r0
 8006784:	428b      	cmp	r3, r1
 8006786:	bf01      	itttt	eq
 8006788:	6819      	ldreq	r1, [r3, #0]
 800678a:	685b      	ldreq	r3, [r3, #4]
 800678c:	1809      	addeq	r1, r1, r0
 800678e:	6021      	streq	r1, [r4, #0]
 8006790:	e7ed      	b.n	800676e <_free_r+0x1e>
 8006792:	461a      	mov	r2, r3
 8006794:	685b      	ldr	r3, [r3, #4]
 8006796:	b10b      	cbz	r3, 800679c <_free_r+0x4c>
 8006798:	42a3      	cmp	r3, r4
 800679a:	d9fa      	bls.n	8006792 <_free_r+0x42>
 800679c:	6811      	ldr	r1, [r2, #0]
 800679e:	1850      	adds	r0, r2, r1
 80067a0:	42a0      	cmp	r0, r4
 80067a2:	d10b      	bne.n	80067bc <_free_r+0x6c>
 80067a4:	6820      	ldr	r0, [r4, #0]
 80067a6:	4401      	add	r1, r0
 80067a8:	1850      	adds	r0, r2, r1
 80067aa:	4283      	cmp	r3, r0
 80067ac:	6011      	str	r1, [r2, #0]
 80067ae:	d1e0      	bne.n	8006772 <_free_r+0x22>
 80067b0:	6818      	ldr	r0, [r3, #0]
 80067b2:	685b      	ldr	r3, [r3, #4]
 80067b4:	6053      	str	r3, [r2, #4]
 80067b6:	4408      	add	r0, r1
 80067b8:	6010      	str	r0, [r2, #0]
 80067ba:	e7da      	b.n	8006772 <_free_r+0x22>
 80067bc:	d902      	bls.n	80067c4 <_free_r+0x74>
 80067be:	230c      	movs	r3, #12
 80067c0:	602b      	str	r3, [r5, #0]
 80067c2:	e7d6      	b.n	8006772 <_free_r+0x22>
 80067c4:	6820      	ldr	r0, [r4, #0]
 80067c6:	1821      	adds	r1, r4, r0
 80067c8:	428b      	cmp	r3, r1
 80067ca:	bf04      	itt	eq
 80067cc:	6819      	ldreq	r1, [r3, #0]
 80067ce:	685b      	ldreq	r3, [r3, #4]
 80067d0:	6063      	str	r3, [r4, #4]
 80067d2:	bf04      	itt	eq
 80067d4:	1809      	addeq	r1, r1, r0
 80067d6:	6021      	streq	r1, [r4, #0]
 80067d8:	6054      	str	r4, [r2, #4]
 80067da:	e7ca      	b.n	8006772 <_free_r+0x22>
 80067dc:	bd38      	pop	{r3, r4, r5, pc}
 80067de:	bf00      	nop
 80067e0:	20025d38 	.word	0x20025d38

080067e4 <sbrk_aligned>:
 80067e4:	b570      	push	{r4, r5, r6, lr}
 80067e6:	4e0f      	ldr	r6, [pc, #60]	@ (8006824 <sbrk_aligned+0x40>)
 80067e8:	460c      	mov	r4, r1
 80067ea:	6831      	ldr	r1, [r6, #0]
 80067ec:	4605      	mov	r5, r0
 80067ee:	b911      	cbnz	r1, 80067f6 <sbrk_aligned+0x12>
 80067f0:	f000 fca6 	bl	8007140 <_sbrk_r>
 80067f4:	6030      	str	r0, [r6, #0]
 80067f6:	4621      	mov	r1, r4
 80067f8:	4628      	mov	r0, r5
 80067fa:	f000 fca1 	bl	8007140 <_sbrk_r>
 80067fe:	1c43      	adds	r3, r0, #1
 8006800:	d103      	bne.n	800680a <sbrk_aligned+0x26>
 8006802:	f04f 34ff 	mov.w	r4, #4294967295
 8006806:	4620      	mov	r0, r4
 8006808:	bd70      	pop	{r4, r5, r6, pc}
 800680a:	1cc4      	adds	r4, r0, #3
 800680c:	f024 0403 	bic.w	r4, r4, #3
 8006810:	42a0      	cmp	r0, r4
 8006812:	d0f8      	beq.n	8006806 <sbrk_aligned+0x22>
 8006814:	1a21      	subs	r1, r4, r0
 8006816:	4628      	mov	r0, r5
 8006818:	f000 fc92 	bl	8007140 <_sbrk_r>
 800681c:	3001      	adds	r0, #1
 800681e:	d1f2      	bne.n	8006806 <sbrk_aligned+0x22>
 8006820:	e7ef      	b.n	8006802 <sbrk_aligned+0x1e>
 8006822:	bf00      	nop
 8006824:	20025d34 	.word	0x20025d34

08006828 <_malloc_r>:
 8006828:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800682c:	1ccd      	adds	r5, r1, #3
 800682e:	f025 0503 	bic.w	r5, r5, #3
 8006832:	3508      	adds	r5, #8
 8006834:	2d0c      	cmp	r5, #12
 8006836:	bf38      	it	cc
 8006838:	250c      	movcc	r5, #12
 800683a:	2d00      	cmp	r5, #0
 800683c:	4606      	mov	r6, r0
 800683e:	db01      	blt.n	8006844 <_malloc_r+0x1c>
 8006840:	42a9      	cmp	r1, r5
 8006842:	d904      	bls.n	800684e <_malloc_r+0x26>
 8006844:	230c      	movs	r3, #12
 8006846:	6033      	str	r3, [r6, #0]
 8006848:	2000      	movs	r0, #0
 800684a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800684e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006924 <_malloc_r+0xfc>
 8006852:	f000 f869 	bl	8006928 <__malloc_lock>
 8006856:	f8d8 3000 	ldr.w	r3, [r8]
 800685a:	461c      	mov	r4, r3
 800685c:	bb44      	cbnz	r4, 80068b0 <_malloc_r+0x88>
 800685e:	4629      	mov	r1, r5
 8006860:	4630      	mov	r0, r6
 8006862:	f7ff ffbf 	bl	80067e4 <sbrk_aligned>
 8006866:	1c43      	adds	r3, r0, #1
 8006868:	4604      	mov	r4, r0
 800686a:	d158      	bne.n	800691e <_malloc_r+0xf6>
 800686c:	f8d8 4000 	ldr.w	r4, [r8]
 8006870:	4627      	mov	r7, r4
 8006872:	2f00      	cmp	r7, #0
 8006874:	d143      	bne.n	80068fe <_malloc_r+0xd6>
 8006876:	2c00      	cmp	r4, #0
 8006878:	d04b      	beq.n	8006912 <_malloc_r+0xea>
 800687a:	6823      	ldr	r3, [r4, #0]
 800687c:	4639      	mov	r1, r7
 800687e:	4630      	mov	r0, r6
 8006880:	eb04 0903 	add.w	r9, r4, r3
 8006884:	f000 fc5c 	bl	8007140 <_sbrk_r>
 8006888:	4581      	cmp	r9, r0
 800688a:	d142      	bne.n	8006912 <_malloc_r+0xea>
 800688c:	6821      	ldr	r1, [r4, #0]
 800688e:	1a6d      	subs	r5, r5, r1
 8006890:	4629      	mov	r1, r5
 8006892:	4630      	mov	r0, r6
 8006894:	f7ff ffa6 	bl	80067e4 <sbrk_aligned>
 8006898:	3001      	adds	r0, #1
 800689a:	d03a      	beq.n	8006912 <_malloc_r+0xea>
 800689c:	6823      	ldr	r3, [r4, #0]
 800689e:	442b      	add	r3, r5
 80068a0:	6023      	str	r3, [r4, #0]
 80068a2:	f8d8 3000 	ldr.w	r3, [r8]
 80068a6:	685a      	ldr	r2, [r3, #4]
 80068a8:	bb62      	cbnz	r2, 8006904 <_malloc_r+0xdc>
 80068aa:	f8c8 7000 	str.w	r7, [r8]
 80068ae:	e00f      	b.n	80068d0 <_malloc_r+0xa8>
 80068b0:	6822      	ldr	r2, [r4, #0]
 80068b2:	1b52      	subs	r2, r2, r5
 80068b4:	d420      	bmi.n	80068f8 <_malloc_r+0xd0>
 80068b6:	2a0b      	cmp	r2, #11
 80068b8:	d917      	bls.n	80068ea <_malloc_r+0xc2>
 80068ba:	1961      	adds	r1, r4, r5
 80068bc:	42a3      	cmp	r3, r4
 80068be:	6025      	str	r5, [r4, #0]
 80068c0:	bf18      	it	ne
 80068c2:	6059      	strne	r1, [r3, #4]
 80068c4:	6863      	ldr	r3, [r4, #4]
 80068c6:	bf08      	it	eq
 80068c8:	f8c8 1000 	streq.w	r1, [r8]
 80068cc:	5162      	str	r2, [r4, r5]
 80068ce:	604b      	str	r3, [r1, #4]
 80068d0:	4630      	mov	r0, r6
 80068d2:	f000 f82f 	bl	8006934 <__malloc_unlock>
 80068d6:	f104 000b 	add.w	r0, r4, #11
 80068da:	1d23      	adds	r3, r4, #4
 80068dc:	f020 0007 	bic.w	r0, r0, #7
 80068e0:	1ac2      	subs	r2, r0, r3
 80068e2:	bf1c      	itt	ne
 80068e4:	1a1b      	subne	r3, r3, r0
 80068e6:	50a3      	strne	r3, [r4, r2]
 80068e8:	e7af      	b.n	800684a <_malloc_r+0x22>
 80068ea:	6862      	ldr	r2, [r4, #4]
 80068ec:	42a3      	cmp	r3, r4
 80068ee:	bf0c      	ite	eq
 80068f0:	f8c8 2000 	streq.w	r2, [r8]
 80068f4:	605a      	strne	r2, [r3, #4]
 80068f6:	e7eb      	b.n	80068d0 <_malloc_r+0xa8>
 80068f8:	4623      	mov	r3, r4
 80068fa:	6864      	ldr	r4, [r4, #4]
 80068fc:	e7ae      	b.n	800685c <_malloc_r+0x34>
 80068fe:	463c      	mov	r4, r7
 8006900:	687f      	ldr	r7, [r7, #4]
 8006902:	e7b6      	b.n	8006872 <_malloc_r+0x4a>
 8006904:	461a      	mov	r2, r3
 8006906:	685b      	ldr	r3, [r3, #4]
 8006908:	42a3      	cmp	r3, r4
 800690a:	d1fb      	bne.n	8006904 <_malloc_r+0xdc>
 800690c:	2300      	movs	r3, #0
 800690e:	6053      	str	r3, [r2, #4]
 8006910:	e7de      	b.n	80068d0 <_malloc_r+0xa8>
 8006912:	230c      	movs	r3, #12
 8006914:	6033      	str	r3, [r6, #0]
 8006916:	4630      	mov	r0, r6
 8006918:	f000 f80c 	bl	8006934 <__malloc_unlock>
 800691c:	e794      	b.n	8006848 <_malloc_r+0x20>
 800691e:	6005      	str	r5, [r0, #0]
 8006920:	e7d6      	b.n	80068d0 <_malloc_r+0xa8>
 8006922:	bf00      	nop
 8006924:	20025d38 	.word	0x20025d38

08006928 <__malloc_lock>:
 8006928:	4801      	ldr	r0, [pc, #4]	@ (8006930 <__malloc_lock+0x8>)
 800692a:	f7ff bf0e 	b.w	800674a <__retarget_lock_acquire_recursive>
 800692e:	bf00      	nop
 8006930:	20025d30 	.word	0x20025d30

08006934 <__malloc_unlock>:
 8006934:	4801      	ldr	r0, [pc, #4]	@ (800693c <__malloc_unlock+0x8>)
 8006936:	f7ff bf09 	b.w	800674c <__retarget_lock_release_recursive>
 800693a:	bf00      	nop
 800693c:	20025d30 	.word	0x20025d30

08006940 <__sfputc_r>:
 8006940:	6893      	ldr	r3, [r2, #8]
 8006942:	3b01      	subs	r3, #1
 8006944:	2b00      	cmp	r3, #0
 8006946:	b410      	push	{r4}
 8006948:	6093      	str	r3, [r2, #8]
 800694a:	da08      	bge.n	800695e <__sfputc_r+0x1e>
 800694c:	6994      	ldr	r4, [r2, #24]
 800694e:	42a3      	cmp	r3, r4
 8006950:	db01      	blt.n	8006956 <__sfputc_r+0x16>
 8006952:	290a      	cmp	r1, #10
 8006954:	d103      	bne.n	800695e <__sfputc_r+0x1e>
 8006956:	f85d 4b04 	ldr.w	r4, [sp], #4
 800695a:	f7ff bde8 	b.w	800652e <__swbuf_r>
 800695e:	6813      	ldr	r3, [r2, #0]
 8006960:	1c58      	adds	r0, r3, #1
 8006962:	6010      	str	r0, [r2, #0]
 8006964:	7019      	strb	r1, [r3, #0]
 8006966:	4608      	mov	r0, r1
 8006968:	f85d 4b04 	ldr.w	r4, [sp], #4
 800696c:	4770      	bx	lr

0800696e <__sfputs_r>:
 800696e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006970:	4606      	mov	r6, r0
 8006972:	460f      	mov	r7, r1
 8006974:	4614      	mov	r4, r2
 8006976:	18d5      	adds	r5, r2, r3
 8006978:	42ac      	cmp	r4, r5
 800697a:	d101      	bne.n	8006980 <__sfputs_r+0x12>
 800697c:	2000      	movs	r0, #0
 800697e:	e007      	b.n	8006990 <__sfputs_r+0x22>
 8006980:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006984:	463a      	mov	r2, r7
 8006986:	4630      	mov	r0, r6
 8006988:	f7ff ffda 	bl	8006940 <__sfputc_r>
 800698c:	1c43      	adds	r3, r0, #1
 800698e:	d1f3      	bne.n	8006978 <__sfputs_r+0xa>
 8006990:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006994 <_vfiprintf_r>:
 8006994:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006998:	460d      	mov	r5, r1
 800699a:	b09d      	sub	sp, #116	@ 0x74
 800699c:	4614      	mov	r4, r2
 800699e:	4698      	mov	r8, r3
 80069a0:	4606      	mov	r6, r0
 80069a2:	b118      	cbz	r0, 80069ac <_vfiprintf_r+0x18>
 80069a4:	6a03      	ldr	r3, [r0, #32]
 80069a6:	b90b      	cbnz	r3, 80069ac <_vfiprintf_r+0x18>
 80069a8:	f7ff fcd8 	bl	800635c <__sinit>
 80069ac:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80069ae:	07d9      	lsls	r1, r3, #31
 80069b0:	d405      	bmi.n	80069be <_vfiprintf_r+0x2a>
 80069b2:	89ab      	ldrh	r3, [r5, #12]
 80069b4:	059a      	lsls	r2, r3, #22
 80069b6:	d402      	bmi.n	80069be <_vfiprintf_r+0x2a>
 80069b8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80069ba:	f7ff fec6 	bl	800674a <__retarget_lock_acquire_recursive>
 80069be:	89ab      	ldrh	r3, [r5, #12]
 80069c0:	071b      	lsls	r3, r3, #28
 80069c2:	d501      	bpl.n	80069c8 <_vfiprintf_r+0x34>
 80069c4:	692b      	ldr	r3, [r5, #16]
 80069c6:	b99b      	cbnz	r3, 80069f0 <_vfiprintf_r+0x5c>
 80069c8:	4629      	mov	r1, r5
 80069ca:	4630      	mov	r0, r6
 80069cc:	f7ff fdee 	bl	80065ac <__swsetup_r>
 80069d0:	b170      	cbz	r0, 80069f0 <_vfiprintf_r+0x5c>
 80069d2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80069d4:	07dc      	lsls	r4, r3, #31
 80069d6:	d504      	bpl.n	80069e2 <_vfiprintf_r+0x4e>
 80069d8:	f04f 30ff 	mov.w	r0, #4294967295
 80069dc:	b01d      	add	sp, #116	@ 0x74
 80069de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80069e2:	89ab      	ldrh	r3, [r5, #12]
 80069e4:	0598      	lsls	r0, r3, #22
 80069e6:	d4f7      	bmi.n	80069d8 <_vfiprintf_r+0x44>
 80069e8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80069ea:	f7ff feaf 	bl	800674c <__retarget_lock_release_recursive>
 80069ee:	e7f3      	b.n	80069d8 <_vfiprintf_r+0x44>
 80069f0:	2300      	movs	r3, #0
 80069f2:	9309      	str	r3, [sp, #36]	@ 0x24
 80069f4:	2320      	movs	r3, #32
 80069f6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80069fa:	f8cd 800c 	str.w	r8, [sp, #12]
 80069fe:	2330      	movs	r3, #48	@ 0x30
 8006a00:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8006bb0 <_vfiprintf_r+0x21c>
 8006a04:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006a08:	f04f 0901 	mov.w	r9, #1
 8006a0c:	4623      	mov	r3, r4
 8006a0e:	469a      	mov	sl, r3
 8006a10:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006a14:	b10a      	cbz	r2, 8006a1a <_vfiprintf_r+0x86>
 8006a16:	2a25      	cmp	r2, #37	@ 0x25
 8006a18:	d1f9      	bne.n	8006a0e <_vfiprintf_r+0x7a>
 8006a1a:	ebba 0b04 	subs.w	fp, sl, r4
 8006a1e:	d00b      	beq.n	8006a38 <_vfiprintf_r+0xa4>
 8006a20:	465b      	mov	r3, fp
 8006a22:	4622      	mov	r2, r4
 8006a24:	4629      	mov	r1, r5
 8006a26:	4630      	mov	r0, r6
 8006a28:	f7ff ffa1 	bl	800696e <__sfputs_r>
 8006a2c:	3001      	adds	r0, #1
 8006a2e:	f000 80a7 	beq.w	8006b80 <_vfiprintf_r+0x1ec>
 8006a32:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006a34:	445a      	add	r2, fp
 8006a36:	9209      	str	r2, [sp, #36]	@ 0x24
 8006a38:	f89a 3000 	ldrb.w	r3, [sl]
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	f000 809f 	beq.w	8006b80 <_vfiprintf_r+0x1ec>
 8006a42:	2300      	movs	r3, #0
 8006a44:	f04f 32ff 	mov.w	r2, #4294967295
 8006a48:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006a4c:	f10a 0a01 	add.w	sl, sl, #1
 8006a50:	9304      	str	r3, [sp, #16]
 8006a52:	9307      	str	r3, [sp, #28]
 8006a54:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006a58:	931a      	str	r3, [sp, #104]	@ 0x68
 8006a5a:	4654      	mov	r4, sl
 8006a5c:	2205      	movs	r2, #5
 8006a5e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006a62:	4853      	ldr	r0, [pc, #332]	@ (8006bb0 <_vfiprintf_r+0x21c>)
 8006a64:	f7f9 fbc4 	bl	80001f0 <memchr>
 8006a68:	9a04      	ldr	r2, [sp, #16]
 8006a6a:	b9d8      	cbnz	r0, 8006aa4 <_vfiprintf_r+0x110>
 8006a6c:	06d1      	lsls	r1, r2, #27
 8006a6e:	bf44      	itt	mi
 8006a70:	2320      	movmi	r3, #32
 8006a72:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006a76:	0713      	lsls	r3, r2, #28
 8006a78:	bf44      	itt	mi
 8006a7a:	232b      	movmi	r3, #43	@ 0x2b
 8006a7c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006a80:	f89a 3000 	ldrb.w	r3, [sl]
 8006a84:	2b2a      	cmp	r3, #42	@ 0x2a
 8006a86:	d015      	beq.n	8006ab4 <_vfiprintf_r+0x120>
 8006a88:	9a07      	ldr	r2, [sp, #28]
 8006a8a:	4654      	mov	r4, sl
 8006a8c:	2000      	movs	r0, #0
 8006a8e:	f04f 0c0a 	mov.w	ip, #10
 8006a92:	4621      	mov	r1, r4
 8006a94:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006a98:	3b30      	subs	r3, #48	@ 0x30
 8006a9a:	2b09      	cmp	r3, #9
 8006a9c:	d94b      	bls.n	8006b36 <_vfiprintf_r+0x1a2>
 8006a9e:	b1b0      	cbz	r0, 8006ace <_vfiprintf_r+0x13a>
 8006aa0:	9207      	str	r2, [sp, #28]
 8006aa2:	e014      	b.n	8006ace <_vfiprintf_r+0x13a>
 8006aa4:	eba0 0308 	sub.w	r3, r0, r8
 8006aa8:	fa09 f303 	lsl.w	r3, r9, r3
 8006aac:	4313      	orrs	r3, r2
 8006aae:	9304      	str	r3, [sp, #16]
 8006ab0:	46a2      	mov	sl, r4
 8006ab2:	e7d2      	b.n	8006a5a <_vfiprintf_r+0xc6>
 8006ab4:	9b03      	ldr	r3, [sp, #12]
 8006ab6:	1d19      	adds	r1, r3, #4
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	9103      	str	r1, [sp, #12]
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	bfbb      	ittet	lt
 8006ac0:	425b      	neglt	r3, r3
 8006ac2:	f042 0202 	orrlt.w	r2, r2, #2
 8006ac6:	9307      	strge	r3, [sp, #28]
 8006ac8:	9307      	strlt	r3, [sp, #28]
 8006aca:	bfb8      	it	lt
 8006acc:	9204      	strlt	r2, [sp, #16]
 8006ace:	7823      	ldrb	r3, [r4, #0]
 8006ad0:	2b2e      	cmp	r3, #46	@ 0x2e
 8006ad2:	d10a      	bne.n	8006aea <_vfiprintf_r+0x156>
 8006ad4:	7863      	ldrb	r3, [r4, #1]
 8006ad6:	2b2a      	cmp	r3, #42	@ 0x2a
 8006ad8:	d132      	bne.n	8006b40 <_vfiprintf_r+0x1ac>
 8006ada:	9b03      	ldr	r3, [sp, #12]
 8006adc:	1d1a      	adds	r2, r3, #4
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	9203      	str	r2, [sp, #12]
 8006ae2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006ae6:	3402      	adds	r4, #2
 8006ae8:	9305      	str	r3, [sp, #20]
 8006aea:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8006bc0 <_vfiprintf_r+0x22c>
 8006aee:	7821      	ldrb	r1, [r4, #0]
 8006af0:	2203      	movs	r2, #3
 8006af2:	4650      	mov	r0, sl
 8006af4:	f7f9 fb7c 	bl	80001f0 <memchr>
 8006af8:	b138      	cbz	r0, 8006b0a <_vfiprintf_r+0x176>
 8006afa:	9b04      	ldr	r3, [sp, #16]
 8006afc:	eba0 000a 	sub.w	r0, r0, sl
 8006b00:	2240      	movs	r2, #64	@ 0x40
 8006b02:	4082      	lsls	r2, r0
 8006b04:	4313      	orrs	r3, r2
 8006b06:	3401      	adds	r4, #1
 8006b08:	9304      	str	r3, [sp, #16]
 8006b0a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006b0e:	4829      	ldr	r0, [pc, #164]	@ (8006bb4 <_vfiprintf_r+0x220>)
 8006b10:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006b14:	2206      	movs	r2, #6
 8006b16:	f7f9 fb6b 	bl	80001f0 <memchr>
 8006b1a:	2800      	cmp	r0, #0
 8006b1c:	d03f      	beq.n	8006b9e <_vfiprintf_r+0x20a>
 8006b1e:	4b26      	ldr	r3, [pc, #152]	@ (8006bb8 <_vfiprintf_r+0x224>)
 8006b20:	bb1b      	cbnz	r3, 8006b6a <_vfiprintf_r+0x1d6>
 8006b22:	9b03      	ldr	r3, [sp, #12]
 8006b24:	3307      	adds	r3, #7
 8006b26:	f023 0307 	bic.w	r3, r3, #7
 8006b2a:	3308      	adds	r3, #8
 8006b2c:	9303      	str	r3, [sp, #12]
 8006b2e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006b30:	443b      	add	r3, r7
 8006b32:	9309      	str	r3, [sp, #36]	@ 0x24
 8006b34:	e76a      	b.n	8006a0c <_vfiprintf_r+0x78>
 8006b36:	fb0c 3202 	mla	r2, ip, r2, r3
 8006b3a:	460c      	mov	r4, r1
 8006b3c:	2001      	movs	r0, #1
 8006b3e:	e7a8      	b.n	8006a92 <_vfiprintf_r+0xfe>
 8006b40:	2300      	movs	r3, #0
 8006b42:	3401      	adds	r4, #1
 8006b44:	9305      	str	r3, [sp, #20]
 8006b46:	4619      	mov	r1, r3
 8006b48:	f04f 0c0a 	mov.w	ip, #10
 8006b4c:	4620      	mov	r0, r4
 8006b4e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006b52:	3a30      	subs	r2, #48	@ 0x30
 8006b54:	2a09      	cmp	r2, #9
 8006b56:	d903      	bls.n	8006b60 <_vfiprintf_r+0x1cc>
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	d0c6      	beq.n	8006aea <_vfiprintf_r+0x156>
 8006b5c:	9105      	str	r1, [sp, #20]
 8006b5e:	e7c4      	b.n	8006aea <_vfiprintf_r+0x156>
 8006b60:	fb0c 2101 	mla	r1, ip, r1, r2
 8006b64:	4604      	mov	r4, r0
 8006b66:	2301      	movs	r3, #1
 8006b68:	e7f0      	b.n	8006b4c <_vfiprintf_r+0x1b8>
 8006b6a:	ab03      	add	r3, sp, #12
 8006b6c:	9300      	str	r3, [sp, #0]
 8006b6e:	462a      	mov	r2, r5
 8006b70:	4b12      	ldr	r3, [pc, #72]	@ (8006bbc <_vfiprintf_r+0x228>)
 8006b72:	a904      	add	r1, sp, #16
 8006b74:	4630      	mov	r0, r6
 8006b76:	f3af 8000 	nop.w
 8006b7a:	4607      	mov	r7, r0
 8006b7c:	1c78      	adds	r0, r7, #1
 8006b7e:	d1d6      	bne.n	8006b2e <_vfiprintf_r+0x19a>
 8006b80:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006b82:	07d9      	lsls	r1, r3, #31
 8006b84:	d405      	bmi.n	8006b92 <_vfiprintf_r+0x1fe>
 8006b86:	89ab      	ldrh	r3, [r5, #12]
 8006b88:	059a      	lsls	r2, r3, #22
 8006b8a:	d402      	bmi.n	8006b92 <_vfiprintf_r+0x1fe>
 8006b8c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006b8e:	f7ff fddd 	bl	800674c <__retarget_lock_release_recursive>
 8006b92:	89ab      	ldrh	r3, [r5, #12]
 8006b94:	065b      	lsls	r3, r3, #25
 8006b96:	f53f af1f 	bmi.w	80069d8 <_vfiprintf_r+0x44>
 8006b9a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006b9c:	e71e      	b.n	80069dc <_vfiprintf_r+0x48>
 8006b9e:	ab03      	add	r3, sp, #12
 8006ba0:	9300      	str	r3, [sp, #0]
 8006ba2:	462a      	mov	r2, r5
 8006ba4:	4b05      	ldr	r3, [pc, #20]	@ (8006bbc <_vfiprintf_r+0x228>)
 8006ba6:	a904      	add	r1, sp, #16
 8006ba8:	4630      	mov	r0, r6
 8006baa:	f000 f879 	bl	8006ca0 <_printf_i>
 8006bae:	e7e4      	b.n	8006b7a <_vfiprintf_r+0x1e6>
 8006bb0:	080083b4 	.word	0x080083b4
 8006bb4:	080083be 	.word	0x080083be
 8006bb8:	00000000 	.word	0x00000000
 8006bbc:	0800696f 	.word	0x0800696f
 8006bc0:	080083ba 	.word	0x080083ba

08006bc4 <_printf_common>:
 8006bc4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006bc8:	4616      	mov	r6, r2
 8006bca:	4698      	mov	r8, r3
 8006bcc:	688a      	ldr	r2, [r1, #8]
 8006bce:	690b      	ldr	r3, [r1, #16]
 8006bd0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006bd4:	4293      	cmp	r3, r2
 8006bd6:	bfb8      	it	lt
 8006bd8:	4613      	movlt	r3, r2
 8006bda:	6033      	str	r3, [r6, #0]
 8006bdc:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006be0:	4607      	mov	r7, r0
 8006be2:	460c      	mov	r4, r1
 8006be4:	b10a      	cbz	r2, 8006bea <_printf_common+0x26>
 8006be6:	3301      	adds	r3, #1
 8006be8:	6033      	str	r3, [r6, #0]
 8006bea:	6823      	ldr	r3, [r4, #0]
 8006bec:	0699      	lsls	r1, r3, #26
 8006bee:	bf42      	ittt	mi
 8006bf0:	6833      	ldrmi	r3, [r6, #0]
 8006bf2:	3302      	addmi	r3, #2
 8006bf4:	6033      	strmi	r3, [r6, #0]
 8006bf6:	6825      	ldr	r5, [r4, #0]
 8006bf8:	f015 0506 	ands.w	r5, r5, #6
 8006bfc:	d106      	bne.n	8006c0c <_printf_common+0x48>
 8006bfe:	f104 0a19 	add.w	sl, r4, #25
 8006c02:	68e3      	ldr	r3, [r4, #12]
 8006c04:	6832      	ldr	r2, [r6, #0]
 8006c06:	1a9b      	subs	r3, r3, r2
 8006c08:	42ab      	cmp	r3, r5
 8006c0a:	dc26      	bgt.n	8006c5a <_printf_common+0x96>
 8006c0c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006c10:	6822      	ldr	r2, [r4, #0]
 8006c12:	3b00      	subs	r3, #0
 8006c14:	bf18      	it	ne
 8006c16:	2301      	movne	r3, #1
 8006c18:	0692      	lsls	r2, r2, #26
 8006c1a:	d42b      	bmi.n	8006c74 <_printf_common+0xb0>
 8006c1c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006c20:	4641      	mov	r1, r8
 8006c22:	4638      	mov	r0, r7
 8006c24:	47c8      	blx	r9
 8006c26:	3001      	adds	r0, #1
 8006c28:	d01e      	beq.n	8006c68 <_printf_common+0xa4>
 8006c2a:	6823      	ldr	r3, [r4, #0]
 8006c2c:	6922      	ldr	r2, [r4, #16]
 8006c2e:	f003 0306 	and.w	r3, r3, #6
 8006c32:	2b04      	cmp	r3, #4
 8006c34:	bf02      	ittt	eq
 8006c36:	68e5      	ldreq	r5, [r4, #12]
 8006c38:	6833      	ldreq	r3, [r6, #0]
 8006c3a:	1aed      	subeq	r5, r5, r3
 8006c3c:	68a3      	ldr	r3, [r4, #8]
 8006c3e:	bf0c      	ite	eq
 8006c40:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006c44:	2500      	movne	r5, #0
 8006c46:	4293      	cmp	r3, r2
 8006c48:	bfc4      	itt	gt
 8006c4a:	1a9b      	subgt	r3, r3, r2
 8006c4c:	18ed      	addgt	r5, r5, r3
 8006c4e:	2600      	movs	r6, #0
 8006c50:	341a      	adds	r4, #26
 8006c52:	42b5      	cmp	r5, r6
 8006c54:	d11a      	bne.n	8006c8c <_printf_common+0xc8>
 8006c56:	2000      	movs	r0, #0
 8006c58:	e008      	b.n	8006c6c <_printf_common+0xa8>
 8006c5a:	2301      	movs	r3, #1
 8006c5c:	4652      	mov	r2, sl
 8006c5e:	4641      	mov	r1, r8
 8006c60:	4638      	mov	r0, r7
 8006c62:	47c8      	blx	r9
 8006c64:	3001      	adds	r0, #1
 8006c66:	d103      	bne.n	8006c70 <_printf_common+0xac>
 8006c68:	f04f 30ff 	mov.w	r0, #4294967295
 8006c6c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006c70:	3501      	adds	r5, #1
 8006c72:	e7c6      	b.n	8006c02 <_printf_common+0x3e>
 8006c74:	18e1      	adds	r1, r4, r3
 8006c76:	1c5a      	adds	r2, r3, #1
 8006c78:	2030      	movs	r0, #48	@ 0x30
 8006c7a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8006c7e:	4422      	add	r2, r4
 8006c80:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006c84:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006c88:	3302      	adds	r3, #2
 8006c8a:	e7c7      	b.n	8006c1c <_printf_common+0x58>
 8006c8c:	2301      	movs	r3, #1
 8006c8e:	4622      	mov	r2, r4
 8006c90:	4641      	mov	r1, r8
 8006c92:	4638      	mov	r0, r7
 8006c94:	47c8      	blx	r9
 8006c96:	3001      	adds	r0, #1
 8006c98:	d0e6      	beq.n	8006c68 <_printf_common+0xa4>
 8006c9a:	3601      	adds	r6, #1
 8006c9c:	e7d9      	b.n	8006c52 <_printf_common+0x8e>
	...

08006ca0 <_printf_i>:
 8006ca0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006ca4:	7e0f      	ldrb	r7, [r1, #24]
 8006ca6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006ca8:	2f78      	cmp	r7, #120	@ 0x78
 8006caa:	4691      	mov	r9, r2
 8006cac:	4680      	mov	r8, r0
 8006cae:	460c      	mov	r4, r1
 8006cb0:	469a      	mov	sl, r3
 8006cb2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8006cb6:	d807      	bhi.n	8006cc8 <_printf_i+0x28>
 8006cb8:	2f62      	cmp	r7, #98	@ 0x62
 8006cba:	d80a      	bhi.n	8006cd2 <_printf_i+0x32>
 8006cbc:	2f00      	cmp	r7, #0
 8006cbe:	f000 80d2 	beq.w	8006e66 <_printf_i+0x1c6>
 8006cc2:	2f58      	cmp	r7, #88	@ 0x58
 8006cc4:	f000 80b9 	beq.w	8006e3a <_printf_i+0x19a>
 8006cc8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006ccc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006cd0:	e03a      	b.n	8006d48 <_printf_i+0xa8>
 8006cd2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8006cd6:	2b15      	cmp	r3, #21
 8006cd8:	d8f6      	bhi.n	8006cc8 <_printf_i+0x28>
 8006cda:	a101      	add	r1, pc, #4	@ (adr r1, 8006ce0 <_printf_i+0x40>)
 8006cdc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006ce0:	08006d39 	.word	0x08006d39
 8006ce4:	08006d4d 	.word	0x08006d4d
 8006ce8:	08006cc9 	.word	0x08006cc9
 8006cec:	08006cc9 	.word	0x08006cc9
 8006cf0:	08006cc9 	.word	0x08006cc9
 8006cf4:	08006cc9 	.word	0x08006cc9
 8006cf8:	08006d4d 	.word	0x08006d4d
 8006cfc:	08006cc9 	.word	0x08006cc9
 8006d00:	08006cc9 	.word	0x08006cc9
 8006d04:	08006cc9 	.word	0x08006cc9
 8006d08:	08006cc9 	.word	0x08006cc9
 8006d0c:	08006e4d 	.word	0x08006e4d
 8006d10:	08006d77 	.word	0x08006d77
 8006d14:	08006e07 	.word	0x08006e07
 8006d18:	08006cc9 	.word	0x08006cc9
 8006d1c:	08006cc9 	.word	0x08006cc9
 8006d20:	08006e6f 	.word	0x08006e6f
 8006d24:	08006cc9 	.word	0x08006cc9
 8006d28:	08006d77 	.word	0x08006d77
 8006d2c:	08006cc9 	.word	0x08006cc9
 8006d30:	08006cc9 	.word	0x08006cc9
 8006d34:	08006e0f 	.word	0x08006e0f
 8006d38:	6833      	ldr	r3, [r6, #0]
 8006d3a:	1d1a      	adds	r2, r3, #4
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	6032      	str	r2, [r6, #0]
 8006d40:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006d44:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006d48:	2301      	movs	r3, #1
 8006d4a:	e09d      	b.n	8006e88 <_printf_i+0x1e8>
 8006d4c:	6833      	ldr	r3, [r6, #0]
 8006d4e:	6820      	ldr	r0, [r4, #0]
 8006d50:	1d19      	adds	r1, r3, #4
 8006d52:	6031      	str	r1, [r6, #0]
 8006d54:	0606      	lsls	r6, r0, #24
 8006d56:	d501      	bpl.n	8006d5c <_printf_i+0xbc>
 8006d58:	681d      	ldr	r5, [r3, #0]
 8006d5a:	e003      	b.n	8006d64 <_printf_i+0xc4>
 8006d5c:	0645      	lsls	r5, r0, #25
 8006d5e:	d5fb      	bpl.n	8006d58 <_printf_i+0xb8>
 8006d60:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006d64:	2d00      	cmp	r5, #0
 8006d66:	da03      	bge.n	8006d70 <_printf_i+0xd0>
 8006d68:	232d      	movs	r3, #45	@ 0x2d
 8006d6a:	426d      	negs	r5, r5
 8006d6c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006d70:	4859      	ldr	r0, [pc, #356]	@ (8006ed8 <_printf_i+0x238>)
 8006d72:	230a      	movs	r3, #10
 8006d74:	e011      	b.n	8006d9a <_printf_i+0xfa>
 8006d76:	6821      	ldr	r1, [r4, #0]
 8006d78:	6833      	ldr	r3, [r6, #0]
 8006d7a:	0608      	lsls	r0, r1, #24
 8006d7c:	f853 5b04 	ldr.w	r5, [r3], #4
 8006d80:	d402      	bmi.n	8006d88 <_printf_i+0xe8>
 8006d82:	0649      	lsls	r1, r1, #25
 8006d84:	bf48      	it	mi
 8006d86:	b2ad      	uxthmi	r5, r5
 8006d88:	2f6f      	cmp	r7, #111	@ 0x6f
 8006d8a:	4853      	ldr	r0, [pc, #332]	@ (8006ed8 <_printf_i+0x238>)
 8006d8c:	6033      	str	r3, [r6, #0]
 8006d8e:	bf14      	ite	ne
 8006d90:	230a      	movne	r3, #10
 8006d92:	2308      	moveq	r3, #8
 8006d94:	2100      	movs	r1, #0
 8006d96:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8006d9a:	6866      	ldr	r6, [r4, #4]
 8006d9c:	60a6      	str	r6, [r4, #8]
 8006d9e:	2e00      	cmp	r6, #0
 8006da0:	bfa2      	ittt	ge
 8006da2:	6821      	ldrge	r1, [r4, #0]
 8006da4:	f021 0104 	bicge.w	r1, r1, #4
 8006da8:	6021      	strge	r1, [r4, #0]
 8006daa:	b90d      	cbnz	r5, 8006db0 <_printf_i+0x110>
 8006dac:	2e00      	cmp	r6, #0
 8006dae:	d04b      	beq.n	8006e48 <_printf_i+0x1a8>
 8006db0:	4616      	mov	r6, r2
 8006db2:	fbb5 f1f3 	udiv	r1, r5, r3
 8006db6:	fb03 5711 	mls	r7, r3, r1, r5
 8006dba:	5dc7      	ldrb	r7, [r0, r7]
 8006dbc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006dc0:	462f      	mov	r7, r5
 8006dc2:	42bb      	cmp	r3, r7
 8006dc4:	460d      	mov	r5, r1
 8006dc6:	d9f4      	bls.n	8006db2 <_printf_i+0x112>
 8006dc8:	2b08      	cmp	r3, #8
 8006dca:	d10b      	bne.n	8006de4 <_printf_i+0x144>
 8006dcc:	6823      	ldr	r3, [r4, #0]
 8006dce:	07df      	lsls	r7, r3, #31
 8006dd0:	d508      	bpl.n	8006de4 <_printf_i+0x144>
 8006dd2:	6923      	ldr	r3, [r4, #16]
 8006dd4:	6861      	ldr	r1, [r4, #4]
 8006dd6:	4299      	cmp	r1, r3
 8006dd8:	bfde      	ittt	le
 8006dda:	2330      	movle	r3, #48	@ 0x30
 8006ddc:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006de0:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006de4:	1b92      	subs	r2, r2, r6
 8006de6:	6122      	str	r2, [r4, #16]
 8006de8:	f8cd a000 	str.w	sl, [sp]
 8006dec:	464b      	mov	r3, r9
 8006dee:	aa03      	add	r2, sp, #12
 8006df0:	4621      	mov	r1, r4
 8006df2:	4640      	mov	r0, r8
 8006df4:	f7ff fee6 	bl	8006bc4 <_printf_common>
 8006df8:	3001      	adds	r0, #1
 8006dfa:	d14a      	bne.n	8006e92 <_printf_i+0x1f2>
 8006dfc:	f04f 30ff 	mov.w	r0, #4294967295
 8006e00:	b004      	add	sp, #16
 8006e02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006e06:	6823      	ldr	r3, [r4, #0]
 8006e08:	f043 0320 	orr.w	r3, r3, #32
 8006e0c:	6023      	str	r3, [r4, #0]
 8006e0e:	4833      	ldr	r0, [pc, #204]	@ (8006edc <_printf_i+0x23c>)
 8006e10:	2778      	movs	r7, #120	@ 0x78
 8006e12:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006e16:	6823      	ldr	r3, [r4, #0]
 8006e18:	6831      	ldr	r1, [r6, #0]
 8006e1a:	061f      	lsls	r7, r3, #24
 8006e1c:	f851 5b04 	ldr.w	r5, [r1], #4
 8006e20:	d402      	bmi.n	8006e28 <_printf_i+0x188>
 8006e22:	065f      	lsls	r7, r3, #25
 8006e24:	bf48      	it	mi
 8006e26:	b2ad      	uxthmi	r5, r5
 8006e28:	6031      	str	r1, [r6, #0]
 8006e2a:	07d9      	lsls	r1, r3, #31
 8006e2c:	bf44      	itt	mi
 8006e2e:	f043 0320 	orrmi.w	r3, r3, #32
 8006e32:	6023      	strmi	r3, [r4, #0]
 8006e34:	b11d      	cbz	r5, 8006e3e <_printf_i+0x19e>
 8006e36:	2310      	movs	r3, #16
 8006e38:	e7ac      	b.n	8006d94 <_printf_i+0xf4>
 8006e3a:	4827      	ldr	r0, [pc, #156]	@ (8006ed8 <_printf_i+0x238>)
 8006e3c:	e7e9      	b.n	8006e12 <_printf_i+0x172>
 8006e3e:	6823      	ldr	r3, [r4, #0]
 8006e40:	f023 0320 	bic.w	r3, r3, #32
 8006e44:	6023      	str	r3, [r4, #0]
 8006e46:	e7f6      	b.n	8006e36 <_printf_i+0x196>
 8006e48:	4616      	mov	r6, r2
 8006e4a:	e7bd      	b.n	8006dc8 <_printf_i+0x128>
 8006e4c:	6833      	ldr	r3, [r6, #0]
 8006e4e:	6825      	ldr	r5, [r4, #0]
 8006e50:	6961      	ldr	r1, [r4, #20]
 8006e52:	1d18      	adds	r0, r3, #4
 8006e54:	6030      	str	r0, [r6, #0]
 8006e56:	062e      	lsls	r6, r5, #24
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	d501      	bpl.n	8006e60 <_printf_i+0x1c0>
 8006e5c:	6019      	str	r1, [r3, #0]
 8006e5e:	e002      	b.n	8006e66 <_printf_i+0x1c6>
 8006e60:	0668      	lsls	r0, r5, #25
 8006e62:	d5fb      	bpl.n	8006e5c <_printf_i+0x1bc>
 8006e64:	8019      	strh	r1, [r3, #0]
 8006e66:	2300      	movs	r3, #0
 8006e68:	6123      	str	r3, [r4, #16]
 8006e6a:	4616      	mov	r6, r2
 8006e6c:	e7bc      	b.n	8006de8 <_printf_i+0x148>
 8006e6e:	6833      	ldr	r3, [r6, #0]
 8006e70:	1d1a      	adds	r2, r3, #4
 8006e72:	6032      	str	r2, [r6, #0]
 8006e74:	681e      	ldr	r6, [r3, #0]
 8006e76:	6862      	ldr	r2, [r4, #4]
 8006e78:	2100      	movs	r1, #0
 8006e7a:	4630      	mov	r0, r6
 8006e7c:	f7f9 f9b8 	bl	80001f0 <memchr>
 8006e80:	b108      	cbz	r0, 8006e86 <_printf_i+0x1e6>
 8006e82:	1b80      	subs	r0, r0, r6
 8006e84:	6060      	str	r0, [r4, #4]
 8006e86:	6863      	ldr	r3, [r4, #4]
 8006e88:	6123      	str	r3, [r4, #16]
 8006e8a:	2300      	movs	r3, #0
 8006e8c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006e90:	e7aa      	b.n	8006de8 <_printf_i+0x148>
 8006e92:	6923      	ldr	r3, [r4, #16]
 8006e94:	4632      	mov	r2, r6
 8006e96:	4649      	mov	r1, r9
 8006e98:	4640      	mov	r0, r8
 8006e9a:	47d0      	blx	sl
 8006e9c:	3001      	adds	r0, #1
 8006e9e:	d0ad      	beq.n	8006dfc <_printf_i+0x15c>
 8006ea0:	6823      	ldr	r3, [r4, #0]
 8006ea2:	079b      	lsls	r3, r3, #30
 8006ea4:	d413      	bmi.n	8006ece <_printf_i+0x22e>
 8006ea6:	68e0      	ldr	r0, [r4, #12]
 8006ea8:	9b03      	ldr	r3, [sp, #12]
 8006eaa:	4298      	cmp	r0, r3
 8006eac:	bfb8      	it	lt
 8006eae:	4618      	movlt	r0, r3
 8006eb0:	e7a6      	b.n	8006e00 <_printf_i+0x160>
 8006eb2:	2301      	movs	r3, #1
 8006eb4:	4632      	mov	r2, r6
 8006eb6:	4649      	mov	r1, r9
 8006eb8:	4640      	mov	r0, r8
 8006eba:	47d0      	blx	sl
 8006ebc:	3001      	adds	r0, #1
 8006ebe:	d09d      	beq.n	8006dfc <_printf_i+0x15c>
 8006ec0:	3501      	adds	r5, #1
 8006ec2:	68e3      	ldr	r3, [r4, #12]
 8006ec4:	9903      	ldr	r1, [sp, #12]
 8006ec6:	1a5b      	subs	r3, r3, r1
 8006ec8:	42ab      	cmp	r3, r5
 8006eca:	dcf2      	bgt.n	8006eb2 <_printf_i+0x212>
 8006ecc:	e7eb      	b.n	8006ea6 <_printf_i+0x206>
 8006ece:	2500      	movs	r5, #0
 8006ed0:	f104 0619 	add.w	r6, r4, #25
 8006ed4:	e7f5      	b.n	8006ec2 <_printf_i+0x222>
 8006ed6:	bf00      	nop
 8006ed8:	080083c5 	.word	0x080083c5
 8006edc:	080083d6 	.word	0x080083d6

08006ee0 <__sflush_r>:
 8006ee0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006ee4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006ee8:	0716      	lsls	r6, r2, #28
 8006eea:	4605      	mov	r5, r0
 8006eec:	460c      	mov	r4, r1
 8006eee:	d454      	bmi.n	8006f9a <__sflush_r+0xba>
 8006ef0:	684b      	ldr	r3, [r1, #4]
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	dc02      	bgt.n	8006efc <__sflush_r+0x1c>
 8006ef6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	dd48      	ble.n	8006f8e <__sflush_r+0xae>
 8006efc:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006efe:	2e00      	cmp	r6, #0
 8006f00:	d045      	beq.n	8006f8e <__sflush_r+0xae>
 8006f02:	2300      	movs	r3, #0
 8006f04:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8006f08:	682f      	ldr	r7, [r5, #0]
 8006f0a:	6a21      	ldr	r1, [r4, #32]
 8006f0c:	602b      	str	r3, [r5, #0]
 8006f0e:	d030      	beq.n	8006f72 <__sflush_r+0x92>
 8006f10:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8006f12:	89a3      	ldrh	r3, [r4, #12]
 8006f14:	0759      	lsls	r1, r3, #29
 8006f16:	d505      	bpl.n	8006f24 <__sflush_r+0x44>
 8006f18:	6863      	ldr	r3, [r4, #4]
 8006f1a:	1ad2      	subs	r2, r2, r3
 8006f1c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8006f1e:	b10b      	cbz	r3, 8006f24 <__sflush_r+0x44>
 8006f20:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8006f22:	1ad2      	subs	r2, r2, r3
 8006f24:	2300      	movs	r3, #0
 8006f26:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006f28:	6a21      	ldr	r1, [r4, #32]
 8006f2a:	4628      	mov	r0, r5
 8006f2c:	47b0      	blx	r6
 8006f2e:	1c43      	adds	r3, r0, #1
 8006f30:	89a3      	ldrh	r3, [r4, #12]
 8006f32:	d106      	bne.n	8006f42 <__sflush_r+0x62>
 8006f34:	6829      	ldr	r1, [r5, #0]
 8006f36:	291d      	cmp	r1, #29
 8006f38:	d82b      	bhi.n	8006f92 <__sflush_r+0xb2>
 8006f3a:	4a2a      	ldr	r2, [pc, #168]	@ (8006fe4 <__sflush_r+0x104>)
 8006f3c:	410a      	asrs	r2, r1
 8006f3e:	07d6      	lsls	r6, r2, #31
 8006f40:	d427      	bmi.n	8006f92 <__sflush_r+0xb2>
 8006f42:	2200      	movs	r2, #0
 8006f44:	6062      	str	r2, [r4, #4]
 8006f46:	04d9      	lsls	r1, r3, #19
 8006f48:	6922      	ldr	r2, [r4, #16]
 8006f4a:	6022      	str	r2, [r4, #0]
 8006f4c:	d504      	bpl.n	8006f58 <__sflush_r+0x78>
 8006f4e:	1c42      	adds	r2, r0, #1
 8006f50:	d101      	bne.n	8006f56 <__sflush_r+0x76>
 8006f52:	682b      	ldr	r3, [r5, #0]
 8006f54:	b903      	cbnz	r3, 8006f58 <__sflush_r+0x78>
 8006f56:	6560      	str	r0, [r4, #84]	@ 0x54
 8006f58:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006f5a:	602f      	str	r7, [r5, #0]
 8006f5c:	b1b9      	cbz	r1, 8006f8e <__sflush_r+0xae>
 8006f5e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006f62:	4299      	cmp	r1, r3
 8006f64:	d002      	beq.n	8006f6c <__sflush_r+0x8c>
 8006f66:	4628      	mov	r0, r5
 8006f68:	f7ff fbf2 	bl	8006750 <_free_r>
 8006f6c:	2300      	movs	r3, #0
 8006f6e:	6363      	str	r3, [r4, #52]	@ 0x34
 8006f70:	e00d      	b.n	8006f8e <__sflush_r+0xae>
 8006f72:	2301      	movs	r3, #1
 8006f74:	4628      	mov	r0, r5
 8006f76:	47b0      	blx	r6
 8006f78:	4602      	mov	r2, r0
 8006f7a:	1c50      	adds	r0, r2, #1
 8006f7c:	d1c9      	bne.n	8006f12 <__sflush_r+0x32>
 8006f7e:	682b      	ldr	r3, [r5, #0]
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	d0c6      	beq.n	8006f12 <__sflush_r+0x32>
 8006f84:	2b1d      	cmp	r3, #29
 8006f86:	d001      	beq.n	8006f8c <__sflush_r+0xac>
 8006f88:	2b16      	cmp	r3, #22
 8006f8a:	d11e      	bne.n	8006fca <__sflush_r+0xea>
 8006f8c:	602f      	str	r7, [r5, #0]
 8006f8e:	2000      	movs	r0, #0
 8006f90:	e022      	b.n	8006fd8 <__sflush_r+0xf8>
 8006f92:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006f96:	b21b      	sxth	r3, r3
 8006f98:	e01b      	b.n	8006fd2 <__sflush_r+0xf2>
 8006f9a:	690f      	ldr	r7, [r1, #16]
 8006f9c:	2f00      	cmp	r7, #0
 8006f9e:	d0f6      	beq.n	8006f8e <__sflush_r+0xae>
 8006fa0:	0793      	lsls	r3, r2, #30
 8006fa2:	680e      	ldr	r6, [r1, #0]
 8006fa4:	bf08      	it	eq
 8006fa6:	694b      	ldreq	r3, [r1, #20]
 8006fa8:	600f      	str	r7, [r1, #0]
 8006faa:	bf18      	it	ne
 8006fac:	2300      	movne	r3, #0
 8006fae:	eba6 0807 	sub.w	r8, r6, r7
 8006fb2:	608b      	str	r3, [r1, #8]
 8006fb4:	f1b8 0f00 	cmp.w	r8, #0
 8006fb8:	dde9      	ble.n	8006f8e <__sflush_r+0xae>
 8006fba:	6a21      	ldr	r1, [r4, #32]
 8006fbc:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8006fbe:	4643      	mov	r3, r8
 8006fc0:	463a      	mov	r2, r7
 8006fc2:	4628      	mov	r0, r5
 8006fc4:	47b0      	blx	r6
 8006fc6:	2800      	cmp	r0, #0
 8006fc8:	dc08      	bgt.n	8006fdc <__sflush_r+0xfc>
 8006fca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006fce:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006fd2:	81a3      	strh	r3, [r4, #12]
 8006fd4:	f04f 30ff 	mov.w	r0, #4294967295
 8006fd8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006fdc:	4407      	add	r7, r0
 8006fde:	eba8 0800 	sub.w	r8, r8, r0
 8006fe2:	e7e7      	b.n	8006fb4 <__sflush_r+0xd4>
 8006fe4:	dfbffffe 	.word	0xdfbffffe

08006fe8 <_fflush_r>:
 8006fe8:	b538      	push	{r3, r4, r5, lr}
 8006fea:	690b      	ldr	r3, [r1, #16]
 8006fec:	4605      	mov	r5, r0
 8006fee:	460c      	mov	r4, r1
 8006ff0:	b913      	cbnz	r3, 8006ff8 <_fflush_r+0x10>
 8006ff2:	2500      	movs	r5, #0
 8006ff4:	4628      	mov	r0, r5
 8006ff6:	bd38      	pop	{r3, r4, r5, pc}
 8006ff8:	b118      	cbz	r0, 8007002 <_fflush_r+0x1a>
 8006ffa:	6a03      	ldr	r3, [r0, #32]
 8006ffc:	b90b      	cbnz	r3, 8007002 <_fflush_r+0x1a>
 8006ffe:	f7ff f9ad 	bl	800635c <__sinit>
 8007002:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007006:	2b00      	cmp	r3, #0
 8007008:	d0f3      	beq.n	8006ff2 <_fflush_r+0xa>
 800700a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800700c:	07d0      	lsls	r0, r2, #31
 800700e:	d404      	bmi.n	800701a <_fflush_r+0x32>
 8007010:	0599      	lsls	r1, r3, #22
 8007012:	d402      	bmi.n	800701a <_fflush_r+0x32>
 8007014:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007016:	f7ff fb98 	bl	800674a <__retarget_lock_acquire_recursive>
 800701a:	4628      	mov	r0, r5
 800701c:	4621      	mov	r1, r4
 800701e:	f7ff ff5f 	bl	8006ee0 <__sflush_r>
 8007022:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007024:	07da      	lsls	r2, r3, #31
 8007026:	4605      	mov	r5, r0
 8007028:	d4e4      	bmi.n	8006ff4 <_fflush_r+0xc>
 800702a:	89a3      	ldrh	r3, [r4, #12]
 800702c:	059b      	lsls	r3, r3, #22
 800702e:	d4e1      	bmi.n	8006ff4 <_fflush_r+0xc>
 8007030:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007032:	f7ff fb8b 	bl	800674c <__retarget_lock_release_recursive>
 8007036:	e7dd      	b.n	8006ff4 <_fflush_r+0xc>

08007038 <__swhatbuf_r>:
 8007038:	b570      	push	{r4, r5, r6, lr}
 800703a:	460c      	mov	r4, r1
 800703c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007040:	2900      	cmp	r1, #0
 8007042:	b096      	sub	sp, #88	@ 0x58
 8007044:	4615      	mov	r5, r2
 8007046:	461e      	mov	r6, r3
 8007048:	da0d      	bge.n	8007066 <__swhatbuf_r+0x2e>
 800704a:	89a3      	ldrh	r3, [r4, #12]
 800704c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8007050:	f04f 0100 	mov.w	r1, #0
 8007054:	bf14      	ite	ne
 8007056:	2340      	movne	r3, #64	@ 0x40
 8007058:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800705c:	2000      	movs	r0, #0
 800705e:	6031      	str	r1, [r6, #0]
 8007060:	602b      	str	r3, [r5, #0]
 8007062:	b016      	add	sp, #88	@ 0x58
 8007064:	bd70      	pop	{r4, r5, r6, pc}
 8007066:	466a      	mov	r2, sp
 8007068:	f000 f848 	bl	80070fc <_fstat_r>
 800706c:	2800      	cmp	r0, #0
 800706e:	dbec      	blt.n	800704a <__swhatbuf_r+0x12>
 8007070:	9901      	ldr	r1, [sp, #4]
 8007072:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8007076:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800707a:	4259      	negs	r1, r3
 800707c:	4159      	adcs	r1, r3
 800707e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007082:	e7eb      	b.n	800705c <__swhatbuf_r+0x24>

08007084 <__smakebuf_r>:
 8007084:	898b      	ldrh	r3, [r1, #12]
 8007086:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007088:	079d      	lsls	r5, r3, #30
 800708a:	4606      	mov	r6, r0
 800708c:	460c      	mov	r4, r1
 800708e:	d507      	bpl.n	80070a0 <__smakebuf_r+0x1c>
 8007090:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8007094:	6023      	str	r3, [r4, #0]
 8007096:	6123      	str	r3, [r4, #16]
 8007098:	2301      	movs	r3, #1
 800709a:	6163      	str	r3, [r4, #20]
 800709c:	b003      	add	sp, #12
 800709e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80070a0:	ab01      	add	r3, sp, #4
 80070a2:	466a      	mov	r2, sp
 80070a4:	f7ff ffc8 	bl	8007038 <__swhatbuf_r>
 80070a8:	9f00      	ldr	r7, [sp, #0]
 80070aa:	4605      	mov	r5, r0
 80070ac:	4639      	mov	r1, r7
 80070ae:	4630      	mov	r0, r6
 80070b0:	f7ff fbba 	bl	8006828 <_malloc_r>
 80070b4:	b948      	cbnz	r0, 80070ca <__smakebuf_r+0x46>
 80070b6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80070ba:	059a      	lsls	r2, r3, #22
 80070bc:	d4ee      	bmi.n	800709c <__smakebuf_r+0x18>
 80070be:	f023 0303 	bic.w	r3, r3, #3
 80070c2:	f043 0302 	orr.w	r3, r3, #2
 80070c6:	81a3      	strh	r3, [r4, #12]
 80070c8:	e7e2      	b.n	8007090 <__smakebuf_r+0xc>
 80070ca:	89a3      	ldrh	r3, [r4, #12]
 80070cc:	6020      	str	r0, [r4, #0]
 80070ce:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80070d2:	81a3      	strh	r3, [r4, #12]
 80070d4:	9b01      	ldr	r3, [sp, #4]
 80070d6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80070da:	b15b      	cbz	r3, 80070f4 <__smakebuf_r+0x70>
 80070dc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80070e0:	4630      	mov	r0, r6
 80070e2:	f000 f81d 	bl	8007120 <_isatty_r>
 80070e6:	b128      	cbz	r0, 80070f4 <__smakebuf_r+0x70>
 80070e8:	89a3      	ldrh	r3, [r4, #12]
 80070ea:	f023 0303 	bic.w	r3, r3, #3
 80070ee:	f043 0301 	orr.w	r3, r3, #1
 80070f2:	81a3      	strh	r3, [r4, #12]
 80070f4:	89a3      	ldrh	r3, [r4, #12]
 80070f6:	431d      	orrs	r5, r3
 80070f8:	81a5      	strh	r5, [r4, #12]
 80070fa:	e7cf      	b.n	800709c <__smakebuf_r+0x18>

080070fc <_fstat_r>:
 80070fc:	b538      	push	{r3, r4, r5, lr}
 80070fe:	4d07      	ldr	r5, [pc, #28]	@ (800711c <_fstat_r+0x20>)
 8007100:	2300      	movs	r3, #0
 8007102:	4604      	mov	r4, r0
 8007104:	4608      	mov	r0, r1
 8007106:	4611      	mov	r1, r2
 8007108:	602b      	str	r3, [r5, #0]
 800710a:	f7fb fd05 	bl	8002b18 <_fstat>
 800710e:	1c43      	adds	r3, r0, #1
 8007110:	d102      	bne.n	8007118 <_fstat_r+0x1c>
 8007112:	682b      	ldr	r3, [r5, #0]
 8007114:	b103      	cbz	r3, 8007118 <_fstat_r+0x1c>
 8007116:	6023      	str	r3, [r4, #0]
 8007118:	bd38      	pop	{r3, r4, r5, pc}
 800711a:	bf00      	nop
 800711c:	20025d2c 	.word	0x20025d2c

08007120 <_isatty_r>:
 8007120:	b538      	push	{r3, r4, r5, lr}
 8007122:	4d06      	ldr	r5, [pc, #24]	@ (800713c <_isatty_r+0x1c>)
 8007124:	2300      	movs	r3, #0
 8007126:	4604      	mov	r4, r0
 8007128:	4608      	mov	r0, r1
 800712a:	602b      	str	r3, [r5, #0]
 800712c:	f7fb fd04 	bl	8002b38 <_isatty>
 8007130:	1c43      	adds	r3, r0, #1
 8007132:	d102      	bne.n	800713a <_isatty_r+0x1a>
 8007134:	682b      	ldr	r3, [r5, #0]
 8007136:	b103      	cbz	r3, 800713a <_isatty_r+0x1a>
 8007138:	6023      	str	r3, [r4, #0]
 800713a:	bd38      	pop	{r3, r4, r5, pc}
 800713c:	20025d2c 	.word	0x20025d2c

08007140 <_sbrk_r>:
 8007140:	b538      	push	{r3, r4, r5, lr}
 8007142:	4d06      	ldr	r5, [pc, #24]	@ (800715c <_sbrk_r+0x1c>)
 8007144:	2300      	movs	r3, #0
 8007146:	4604      	mov	r4, r0
 8007148:	4608      	mov	r0, r1
 800714a:	602b      	str	r3, [r5, #0]
 800714c:	f7fb fd0c 	bl	8002b68 <_sbrk>
 8007150:	1c43      	adds	r3, r0, #1
 8007152:	d102      	bne.n	800715a <_sbrk_r+0x1a>
 8007154:	682b      	ldr	r3, [r5, #0]
 8007156:	b103      	cbz	r3, 800715a <_sbrk_r+0x1a>
 8007158:	6023      	str	r3, [r4, #0]
 800715a:	bd38      	pop	{r3, r4, r5, pc}
 800715c:	20025d2c 	.word	0x20025d2c

08007160 <_init>:
 8007160:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007162:	bf00      	nop
 8007164:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007166:	bc08      	pop	{r3}
 8007168:	469e      	mov	lr, r3
 800716a:	4770      	bx	lr

0800716c <_fini>:
 800716c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800716e:	bf00      	nop
 8007170:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007172:	bc08      	pop	{r3}
 8007174:	469e      	mov	lr, r3
 8007176:	4770      	bx	lr
